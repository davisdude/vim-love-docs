*love.txt* *love2d*                 Documentation for the LOVE game framework.

                        _       o__o __      __ ______ ~
                       | |     / __ \\ \    / //  ____\~
                       | |    | |  | |\ \  / / | |__   ~
                       | |    | |  | | \ \/ /  |  __|  ~
                       | |____| |__| |  \  /   | |____ ~
                       \______|\____/    \/    \______/~

                   The complete solution for Vim with LOVE.
                   Includes highlighting and documentation.

For LOVE (http://love2d.org) version 0.10.2.

Generated from

    https://github.com/love2d-community/love-api

using

    https://github.com/davisdude/vim-love-docs

Made by Davis Claiborne under the MIT license. See LICENSE.md for more info.

===============================================================================
                                                                    *love-love*
|love|

The LÖVE framework

    |callbacks|                           |love-love-callbacks|
    |enums|                               |love-love-enums|
    |functions|                           |love-love-functions|
    |types|                               |love-love-types|

-------------------------------------------------------------------------------
                                                          *love-love-callbacks*
The callbacks of |love|:

    |conf|                                |love-love.conf|
    |directorydropped|                    |love-love.directorydropped|
    |draw|                                |love-love.draw|
    |errhand|                             |love-love.errhand|
    |filedropped|                         |love-love.filedropped|
    |focus|                               |love-love.focus|
    |gamepadaxis|                         |love-love.gamepadaxis|
    |gamepadpressed|                      |love-love.gamepadpressed|
    |gamepadreleased|                     |love-love.gamepadreleased|
    |joystickadded|                       |love-love.joystickadded|
    |joystickaxis|                        |love-love.joystickaxis|
    |joystickhat|                         |love-love.joystickhat|
    |joystickpressed|                     |love-love.joystickpressed|
    |joystickreleased|                    |love-love.joystickreleased|
    |joystickremoved|                     |love-love.joystickremoved|
    |keypressed|                          |love-love.keypressed|
    |keyreleased|                         |love-love.keyreleased|
    |load|                                |love-love.load|
    |lowmemory|                           |love-love.lowmemory|
    |mousefocus|                          |love-love.mousefocus|
    |mousemoved|                          |love-love.mousemoved|
    |mousepressed|                        |love-love.mousepressed|
    |mousereleased|                       |love-love.mousereleased|
    |quit|                                |love-love.quit|
    |resize|                              |love-love.resize|
    |run|                                 |love-love.run|
    |textedited|                          |love-love.textedited|
    |textinput|                           |love-love.textinput|
    |threaderror|                         |love-love.threaderror|
    |touchmoved|                          |love-love.touchmoved|
    |touchpressed|                        |love-love.touchpressed|
    |touchreleased|                       |love-love.touchreleased|
    |update|                              |love-love.update|
    |visible|                             |love-love.visible|
    |wheelmoved|                          |love-love.wheelmoved|

-------------------------------------------------------------------------------
                                                               *love-love.conf*
|love.conf|

If a file called conf.lua is present in your game folder (or .love file), it is
run before the LÖVE modules are loaded. You can use this file to overwrite the
love.conf function, which is later called by the LÖVE 'boot' script. Using the
love.conf function, you can set some configuration options, and change things
like the default size of the window, which modules are loaded, and other stuff.

Synopses:

    1.  |love.conf|( `t` )

Variants:

    1.  |love.conf|( `t` )

        See function description

        returns:

            None

        arguments:

            `t`: <table>

                The love.conf function takes one argument: a table filled with
                all the default values which you can overwrite to your liking.
                If you want to change the default window size, for instance,
                do:

                function love.conf(t)
                    t.window.width = 1024
                    t.window.height = 768
                end

                If you don't need the physics module or joystick module, do the
                following.

                function love.conf(t)
                    t.modules.joystick = false
                    t.modules.physics = false
                end

                Setting unused modules to false is encouraged when you release
                your game. It reduces startup time slightly (especially if the
                joystick module is disabled) and reduces memory usage
                (slightly).

                Note that you can't disable love.filesystem; it's mandatory.
                The same goes for the love module itself. love.graphics needs
                love.window to be enabled.

                `identity`: <string>

                    This flag determines the name of the save directory for
                    your game. Note that you can only specify the name, not the
                    location where it will be created:
                    t.identity = "gabe_HL3" -- Correct

                    t.identity = "c:/Users/gabe/HL3" -- Incorrect
                    Alternatively love.filesystem.setIdentity can be used to
                    set the save directory outside of the config file.

                `version`: <string>

                    t.version should be a string, representing the version of
                    LÖVE for which your game was made. It should be formatted
                    as "X.Y.Z" where X is the major release number, Y the
                    minor, and Z the patch level. It allows LÖVE to display a
                    warning if it isn't compatible. Its default is the version
                    of LÖVE running.

                `console`: <boolean>

                    Determines whether a console should be opened alongside the
                    game window (Windows only) or not. Note: On OSX you can get
                    console output by running LÖVE through the terminal.

                `accelerometerjoystick`: <boolean>

                    Sets whether the device accelerometer on iOS and Android
                    should be exposed as a 3-axis Joystick. Disabling the
                    accelerometer when it's not used may reduce CPU usage.

                `externalstorage`: <boolean>

                    Sets whether files are saved in external storage (true) or
                    internal storage (false) on Android.

                `gammacorrect`: <boolean>

                    Determines whether gamma-correct rendering is enabled, when
                    the system supports it.

                `window`: <table>

                    It is possible to defer window creation until
                    love.window.setMode is first called in your code. To do so,
                    set t.window = nil in love.conf (or t.screen = nil in older
                    versions.) If this is done, LÖVE may crash if any function
                    from love.graphics is called before the first
                    love.window.setMode in your code.

                    The t.window table was named t.screen in versions prior to
                    0.9.0. The t.screen table doesn't exist in love.conf in
                    0.9.0, and the t.window table doesn't exist in love.conf in
                    0.8.0. This means love.conf will fail to execute (therefore
                    it will fall back to default values) if care is not taken
                    to use the correct table for the LÖVE version being used.

                    `title`: <string>

                        Sets the title of the window the game is in.
                        Alternatively love.window.setTitle can be used to
                        change the window title outside of the config file.

                    `icon`: <string>

                        A filepath to an image to use as the window's icon. Not
                        all operating systems support very large icon images.
                        The icon can also be changed with love.window.setIcon.

                    `width`: <number>

                        Sets the window's dimensions. If these flags are set to
                        0 LÖVE automatically uses the user's desktop
                        dimensions.

                    `height`: <string>

                        Sets the window's dimensions. If these flags are set to
                        0 LÖVE automatically uses the user's desktop
                        dimensions.

                    `borderless`: <boolean>

                        Removes all border visuals from the window. Note that
                        the effects may wary between operating systems.

                    `resizable`: <boolean>

                        If set to true this allows the user to resize the
                        game's window.

                    `minwidth`: <number>

                        Sets the minimum width and height for the game's window
                        if it can be resized by the user. If you set lower
                        values to window.width and window.height LÖVE will
                        always favor the minimum dimensions set via
                        window.minwidth and window.minheight.

                    `minheight`: <number>

                        Sets the minimum width and height for the game's window
                        if it can be resized by the user. If you set lower
                        values to window.width and window.height LÖVE will
                        always favor the minimum dimensions set via
                        window.minwidth and window.minheight.

                    `fullscreen`: <boolean>

                        Whether to run the game in fullscreen (true) or
                        windowed (false) mode. The fullscreen can also be
                        toggled via love.window.setFullscreen or
                        love.window.setMode.

                    `fullscreentype`: <string>

                        Specifies the type of fullscreen mode to use (normal or
                        desktop). Generally the desktop is recommended, as it
                        is less restrictive than normal mode on some operating
                        systems.

                    `vsync`: <boolean>

                        Enables or deactivates vertical synchronization. Vsync
                        tries to keep the game at a steady framerate and can
                        prevent issues like screen tearing. It is recommended
                        to keep vsync activated if you don't know about the
                        possible implications of turning it off.

                    `msaa`: <number>

                        The number of samples to use with multi-sampled
                        antialiasing.

                    `display`: <number>

                        The index of the display to show the window in, if
                        multiple monitors are available.

                    `highdpi`: <boolean>

                        See love.window.getPixelScale, love.window.toPixels,
                        and love.window.fromPixels. It is recommended to keep
                        this option disabled if you can't test your game on a
                        Mac or iOS system with a Retina display, because code
                        will need tweaking to make sure things look correct.

                    `x`: <number>

                        Determines the position of the window on the user's
                        screen. Alternatively love.window.setPosition can be
                        used to change the position on the fly.

                    `y`: <number>

                        Determines the position of the window on the user's
                        screen. Alternatively love.window.setPosition can be
                        used to change the position on the fly.

                `modules`: <table>

                    Module options.

                    `audio`: <boolean>

                        Enable the audio module.

                    `event`: <boolean>

                        Enable the event module.

                    `graphics`: <boolean>

                        Enable the graphics module.

                    `image`: <boolean>

                        Enable the image module.

                    `joystick`: <boolean>

                        Enable the joystick module.

                    `keyboard`: <boolean>

                        Enable the keyboard module.

                    `math`: <boolean>

                        Enable the math module.

                    `mouse`: <boolean>

                        Enable the mouse module.

                    `physics`: <boolean>

                        Enable the physics module.

                    `sound`: <boolean>

                        Enable the sound module.

                    `system`: <boolean>

                        Enable the system module.

                    `timer`: <boolean>

                        Enable the timer module.

                    `touch`: <boolean>

                        Enable the touch module.

                    `video`: <boolean>

                        Enable the video module.

                    `window`: <boolean>

                        Enable the window module.

                    `thread`: <boolean>

                        Enable the thread module.

-------------------------------------------------------------------------------
                                                   *love-love.directorydropped*
|love.directorydropped|

Callback function triggered when a directory is dragged and dropped onto the
window.

Synopses:

    1.  |love.directorydropped|( `path` )

Variants:

    1.  |love.directorydropped|( `path` )

        See function description

        returns:

            None

        arguments:

            `path`: <string>

                The full platform-dependent path to the directory. It can be
                used as an argument to love.filesystem.mount, in order to gain
                read access to the directory with love.filesystem.

-------------------------------------------------------------------------------
                                                               *love-love.draw*
|love.draw|

Callback function used to draw on the screen every frame.

Synopses:

    1.  |love.draw|()

Variants:

    1.  |love.draw|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                            *love-love.errhand*
|love.errhand|

The error handler, used to display error messages.

Synopses:

    1.  |love.errhand|( `msg` )

Variants:

    1.  |love.errhand|( `msg` )

        See function description

        returns:

            None

        arguments:

            `msg`: <string>

                The error message.

-------------------------------------------------------------------------------
                                                        *love-love.filedropped*
|love.filedropped|

Callback function triggered when a file is dragged and dropped onto the window.

Synopses:

    1.  |love.filedropped|( `file` )

Variants:

    1.  |love.filedropped|( `file` )

        See function description

        returns:

            None

        arguments:

            `file`: <File>

                The unopened File object representing the file that was
                dropped.

-------------------------------------------------------------------------------
                                                              *love-love.focus*
|love.focus|

Callback function triggered when window receives or loses focus.

Synopses:

    1.  |love.focus|( `focus` )

Variants:

    1.  |love.focus|( `focus` )

        See function description

        returns:

            None

        arguments:

            `focus`: <boolean>

                True if the window gains focus, false if it loses focus.

-------------------------------------------------------------------------------
                                                        *love-love.gamepadaxis*
|love.gamepadaxis|

Called when a Joystick's virtual gamepad axis is moved.

Synopses:

    1.  |love.gamepadaxis|( `joystick`, `axis` )

Variants:

    1.  |love.gamepadaxis|( `joystick`, `axis` )

        See function description

        returns:

            None

        arguments:

            `joystick`: <Joystick>

                The joystick object.

            `axis`: <GamepadAxis>

                The virtual gamepad axis.

-------------------------------------------------------------------------------
                                                     *love-love.gamepadpressed*
|love.gamepadpressed|

Called when a Joystick's virtual gamepad button is pressed.

Synopses:

    1.  |love.gamepadpressed|( `joystick`, `button` )

Variants:

    1.  |love.gamepadpressed|( `joystick`, `button` )

        See function description

        returns:

            None

        arguments:

            `joystick`: <Joystick>

                The joystick object.

            `button`: <GamepadButton>

                The virtual gamepad button.

-------------------------------------------------------------------------------
                                                    *love-love.gamepadreleased*
|love.gamepadreleased|

Called when a Joystick's virtual gamepad button is released.

Synopses:

    1.  |love.gamepadreleased|( `joystick`, `button` )

Variants:

    1.  |love.gamepadreleased|( `joystick`, `button` )

        See function description

        returns:

            None

        arguments:

            `joystick`: <Joystick>

                The joystick object.

            `button`: <GamepadButton>

                The virtual gamepad button.

-------------------------------------------------------------------------------
                                                      *love-love.joystickadded*
|love.joystickadded|

Called when a Joystick is connected.

This callback is also triggered after love.load for every Joystick which was
already connected when the game started up.

Synopses:

    1.  |love.joystickadded|( `joystick` )

Variants:

    1.  |love.joystickadded|( `joystick` )

        See function description

        returns:

            None

        arguments:

            `joystick`: <Joystick>

                The newly connected Joystick object.

-------------------------------------------------------------------------------
                                                       *love-love.joystickaxis*
|love.joystickaxis|

Called when a joystick axis moves.

Synopses:

    1.  |love.joystickaxis|( `joystick`, `axis`, `value` )

Variants:

    1.  |love.joystickaxis|( `joystick`, `axis`, `value` )

        See function description

        returns:

            None

        arguments:

            `joystick`: <Joystick>

                The joystick object.

            `axis`: <number>

                The axis number.

            `value`: <number>

                The new axis value.

-------------------------------------------------------------------------------
                                                        *love-love.joystickhat*
|love.joystickhat|

Called when a joystick hat direction changes.

Synopses:

    1.  |love.joystickhat|( `joystick`, `hat`, `direction` )

Variants:

    1.  |love.joystickhat|( `joystick`, `hat`, `direction` )

        See function description

        returns:

            None

        arguments:

            `joystick`: <Joystick>

                The joystick object.

            `hat`: <number>

                The hat number.

            `direction`: <JoystickHat>

                The new hat direction.

-------------------------------------------------------------------------------
                                                    *love-love.joystickpressed*
|love.joystickpressed|

Called when a joystick button is pressed.

Synopses:

    1.  |love.joystickpressed|( `joystick`, `button` )

Variants:

    1.  |love.joystickpressed|( `joystick`, `button` )

        See function description

        returns:

            None

        arguments:

            `joystick`: <number>

                The joystick number.

            `button`: <number>

                The button number.

-------------------------------------------------------------------------------
                                                   *love-love.joystickreleased*
|love.joystickreleased|

Called when a joystick button is released.

Synopses:

    1.  |love.joystickreleased|( `joystick`, `button` )

Variants:

    1.  |love.joystickreleased|( `joystick`, `button` )

        See function description

        returns:

            None

        arguments:

            `joystick`: <number>

                The joystick number.

            `button`: <number>

                The button number.

-------------------------------------------------------------------------------
                                                    *love-love.joystickremoved*
|love.joystickremoved|

Called when a Joystick is disconnected.

Synopses:

    1.  |love.joystickremoved|( `joystick` )

Variants:

    1.  |love.joystickremoved|( `joystick` )

        See function description

        returns:

            None

        arguments:

            `joystick`: <Joystick>

                The now-disconnected Joystick object.

-------------------------------------------------------------------------------
                                                         *love-love.keypressed*
|love.keypressed|

Callback function triggered when a key is pressed.

Synopses:

    1.  |love.keypressed|( `key`, `scancode`, `isrepeat` )

Variants:

    1.  |love.keypressed|( `key`, `scancode`, `isrepeat` )

        See function description

        returns:

            None

        arguments:

            `key`: <KeyConstant>

                Character of the pressed key.

            `scancode`: <Scancode>

                The scancode representing the pressed key.

            `isrepeat`: <boolean>

                Whether this keypress event is a repeat. The delay between key
                repeats depends on the user's system settings.

-------------------------------------------------------------------------------
                                                        *love-love.keyreleased*
|love.keyreleased|

Callback function triggered when a keyboard key is released.

Synopses:

    1.  |love.keyreleased|( `key`, `scancode` )

Variants:

    1.  |love.keyreleased|( `key`, `scancode` )

        See function description

        returns:

            None

        arguments:

            `key`: <KeyConstant>

                Character of the released key.

            `scancode`: <Scancode>

                The scancode representing the released key.

-------------------------------------------------------------------------------
                                                               *love-love.load*
|love.load|

This function is called exactly once at the beginning of the game.

Synopses:

    1.  |love.load|( `arg` )

Variants:

    1.  |love.load|( `arg` )

        See function description

        returns:

            None

        arguments:

            `arg`: <table>

                Command line arguments given to the game.

-------------------------------------------------------------------------------
                                                          *love-love.lowmemory*
|love.lowmemory|

Callback function triggered when the system is running out of memory on mobile
devices.

 Mobile operating systems may forcefully kill the game if it uses too much
memory, so any non-critical resource should be removed if possible (by setting
all variables referencing the resources to nil, and calling collectgarbage()),
when this event is triggered. Sounds and images in particular tend to use the
most memory.

Synopses:

    1.  |love.lowmemory|()

Variants:

    1.  |love.lowmemory|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-love.mousefocus*
|love.mousefocus|

Callback function triggered when window receives or loses mouse focus.

Synopses:

    1.  |love.mousefocus|( `focus` )

Variants:

    1.  |love.mousefocus|( `focus` )

        See function description

        returns:

            None

        arguments:

            `focus`: <boolean>

                Whether the window has mouse focus or not.

-------------------------------------------------------------------------------
                                                         *love-love.mousemoved*
|love.mousemoved|

Callback function triggered when the mouse is moved.

Synopses:

    1.  |love.mousemoved|( `x`, `y`, `dx`, `dy`, `istouch` )

Variants:

    1.  |love.mousemoved|( `x`, `y`, `dx`, `dy`, `istouch` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The mouse position on the x-axis.

            `y`: <number>

                The mouse position on the y-axis.

            `dx`: <number>

                The amount moved along the x-axis since the last time
                love.mousemoved was called.

            `dy`: <number>

                The amount moved along the y-axis since the last time
                love.mousemoved was called.

            `istouch`: <boolean>

                True if the mouse button press originated from a touchscreen
                touch-press.

-------------------------------------------------------------------------------
                                                       *love-love.mousepressed*
|love.mousepressed|

Callback function triggered when a mouse button is pressed.

Synopses:

    1.  |love.mousepressed|( `x`, `y`, `button`, `isTouch` )

Variants:

    1.  |love.mousepressed|( `x`, `y`, `button`, `isTouch` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                Mouse x position, in pixels.

            `y`: <number>

                Mouse y position, in pixels.

            `button`: <number>

                The button index that was pressed. 1 is the primary mouse
                button, 2 is the secondary mouse button and 3 is the middle
                button. Further buttons are mouse dependent

            `isTouch`: <boolean>

                True if the mouse button press originated from a touchscreen
                touch-press.

-------------------------------------------------------------------------------
                                                      *love-love.mousereleased*
|love.mousereleased|

Callback function triggered when a mouse button is released.

Synopses:

    1.  |love.mousereleased|( `x`, `y`, `button`, `isTouch` )

Variants:

    1.  |love.mousereleased|( `x`, `y`, `button`, `isTouch` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                Mouse x position, in pixels.

            `y`: <number>

                Mouse y position, in pixels.

            `button`: <number>

                The button index that was released. 1 is the primary mouse
                button, 2 is the secondary mouse button and 3 is the middle
                button. Further buttons are mouse dependent.

            `isTouch`: <boolean>

                True if the mouse button press originated from a touchscreen
                touch-release.

-------------------------------------------------------------------------------
                                                               *love-love.quit*
|love.quit|

Callback function triggered when the game is closed.

Synopses:

    1.  `r` = |love.quit|()

Variants:

    1.  `r` = |love.quit|()

        See function description

        returns:

            `r`: <boolean>

                Abort quitting. If true, do not close the game.

        arguments:

            None

-------------------------------------------------------------------------------
                                                             *love-love.resize*
|love.resize|

Called when the window is resized, for example if the user resizes the window,
or if love.window.setMode is called with an unsupported width or height in
fullscreen and the window chooses the closest appropriate size.

Calls to love.window.setMode will only trigger this event if the width or
height of the window after the call doesn't match the requested width and
height. This can happen if a fullscreen mode is requested which doesn't match
any supported mode, or if the fullscreen type is 'desktop' and the requested
width or height don't match the desktop resolution.

Synopses:

    1.  |love.resize|( `w`, `h` )

Variants:

    1.  |love.resize|( `w`, `h` )

        See function description

        returns:

            None

        arguments:

            `w`: <number>

                The new width.

            `h`: <number>

                The new height.

-------------------------------------------------------------------------------
                                                                *love-love.run*
|love.run|

The main function, containing the main loop. A sensible default is used when
left out.

Synopses:

    1.  |love.run|()

Variants:

    1.  |love.run|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-love.textedited*
|love.textedited|

Called when the candidate text for an IME (Input Method Editor) has changed.

The candidate text is not the final text that the user will eventually choose.
Use love.textinput for that.

Synopses:

    1.  |love.textedited|( `text`, `start`, `length` )

Variants:

    1.  |love.textedited|( `text`, `start`, `length` )

        See function description

        returns:

            None

        arguments:

            `text`: <string>

                The UTF-8 encoded unicode candidate text.

            `start`: <number>

                The start cursor of the selected candidate text.

            `length`: <number>

                The length of the selected candidate text. May be 0.

-------------------------------------------------------------------------------
                                                          *love-love.textinput*
|love.textinput|

Called when text has been entered by the user. For example if shift-2 is
pressed on an American keyboard layout, the text "@" will be generated.

Synopses:

    1.  |love.textinput|( `text` )

Variants:

    1.  |love.textinput|( `text` )

        See function description

        returns:

            None

        arguments:

            `text`: <string>

                The UTF-8 encoded unicode text.

-------------------------------------------------------------------------------
                                                        *love-love.threaderror*
|love.threaderror|

Callback function triggered when a Thread encounters an error.

Synopses:

    1.  |love.threaderror|( `thread`, `errorstr` )

Variants:

    1.  |love.threaderror|( `thread`, `errorstr` )

        See function description

        returns:

            None

        arguments:

            `thread`: <Thread>

                The thread which produced the error.

            `errorstr`: <string>

                The error message.

-------------------------------------------------------------------------------
                                                         *love-love.touchmoved*
|love.touchmoved|

Callback function triggered when a touch press moves inside the touch screen.

Synopses:

    1.  |love.touchmoved|( `id`, `x`, `y`, `dx`, `dy`, `pressure` )

Variants:

    1.  |love.touchmoved|( `id`, `x`, `y`, `dx`, `dy`, `pressure` )

        See function description

        returns:

            None

        arguments:

            `id`: <light userdata>

                The identifier for the touch press.

            `x`: <number>

                The x-axis position of the touch inside the window, in pixels.

            `y`: <number>

                The y-axis position of the touch inside the window, in pixels.

            `dx`: <number>

                The x-axis movement of the touch inside the window, in pixels.

            `dy`: <number>

                The y-axis movement of the touch inside the window, in pixels.

            `pressure`: <number>

                The amount of pressure being applied. Most touch screens aren't
                pressure sensitive, in which case the pressure will be 1.

-------------------------------------------------------------------------------
                                                       *love-love.touchpressed*
|love.touchpressed|

Callback function triggered when the touch screen is touched.

Synopses:

    1.  |love.touchpressed|( `id`, `x`, `y`, `dx`, `dy`, `pressure` )

Variants:

    1.  |love.touchpressed|( `id`, `x`, `y`, `dx`, `dy`, `pressure` )

        See function description

        returns:

            None

        arguments:

            `id`: <light userdata>

                The identifier for the touch press.

            `x`: <number>

                The x-axis position of the touch press inside the window, in
                pixels.

            `y`: <number>

                The y-axis position of the touch press inside the window, in
                pixels.

            `dx`: <number>

                The x-axis movement of the touch press inside the window, in
                pixels. This should always be zero.

            `dy`: <number>

                The y-axis movement of the touch press inside the window, in
                pixels. This should always be zero.

            `pressure`: <number>

                The amount of pressure being applied. Most touch screens aren't
                pressure sensitive, in which case the pressure will be 1.

-------------------------------------------------------------------------------
                                                      *love-love.touchreleased*
|love.touchreleased|

Callback function triggered when the touch screen stops being touched.

Synopses:

    1.  |love.touchreleased|( `id`, `x`, `y`, `dx`, `dy`, `pressure` )

Variants:

    1.  |love.touchreleased|( `id`, `x`, `y`, `dx`, `dy`, `pressure` )

        See function description

        returns:

            None

        arguments:

            `id`: <light userdata>

                The identifier for the touch press.

            `x`: <number>

                The x-axis position of the touch inside the window, in pixels.

            `y`: <number>

                The y-axis position of the touch inside the window, in pixels.

            `dx`: <number>

                The x-axis movement of the touch inside the window, in pixels.

            `dy`: <number>

                The y-axis movement of the touch inside the window, in pixels.

            `pressure`: <number>

                The amount of pressure being applied. Most touch screens aren't
                pressure sensitive, in which case the pressure will be 1.

-------------------------------------------------------------------------------
                                                             *love-love.update*
|love.update|

Callback function used to update the state of the game every frame.

Synopses:

    1.  |love.update|( `dt` )

Variants:

    1.  |love.update|( `dt` )

        See function description

        returns:

            None

        arguments:

            `dt`: <number>

                Time since the last update in seconds.

-------------------------------------------------------------------------------
                                                            *love-love.visible*
|love.visible|

Callback function triggered when window is minimized/hidden or unminimized by
the user.

Synopses:

    1.  |love.visible|( `visible` )

Variants:

    1.  |love.visible|( `visible` )

        See function description

        returns:

            None

        arguments:

            `visible`: <boolean>

                True if the window is visible, false if it isn't.

-------------------------------------------------------------------------------
                                                         *love-love.wheelmoved*
|love.wheelmoved|

Callback function triggered when the mouse wheel is moved.

Synopses:

    1.  |love.wheelmoved|( `x`, `y` )

Variants:

    1.  |love.wheelmoved|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                Amount of horizontal mouse wheel movement. Positive values
                indicate movement to the right.

            `y`: <number>

                Amount of vertical mouse wheel movement. Positive values
                indicate upward movement.
-------------------------------------------------------------------------------
                                                              *love-love-enums*
The enums of |love|:

    None

-------------------------------------------------------------------------------
                                                          *love-love-functions*
The functions of |love|:

    |getVersion|                          |love-love.getVersion|

-------------------------------------------------------------------------------
                                                         *love-love.getVersion*
|love.getVersion|

Gets the current running version of LÖVE.

Synopses:

    1.  `major`, `minor`, `revision`, `codename` = |love.getVersion|()

Variants:

    1.  `major`, `minor`, `revision`, `codename` = |love.getVersion|()

        See function description

        returns:

            `major`: <number>

                The major version of LÖVE, i.e. 0 for version 0.9.1.

            `minor`: <number>

                The minor version of LÖVE, i.e. 9 for version 0.9.1.

            `revision`: <number>

                The revision version of LÖVE, i.e. 1 for version 0.9.1.

            `codename`: <string>

                The codename of the current version, i.e. "Baby Inspector" for
                version 0.9.1.

        arguments:

            None
-------------------------------------------------------------------------------
                                                              *love-love-types*
The types of |love|:

    |Data|                                |love-Data|
    |Drawable|                            |love-Drawable|
    |Object|                              |love-Object|

-------------------------------------------------------------------------------
                                                                    *love-Data*
|Data|

The superclass of all data.

                                                       *love-Data-constructors*
    constructors:

        None

                                                         *love-Data-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                           *love-Data-subtypes*
    subtypes:

        |CompressedData|                  |love-CompressedData|
        |CompressedImageData|             |love-CompressedImageData|
        |FileData|                        |love-FileData|
        |FontData|                        |love-FontData|
        |GlyphData|                       |love-GlyphData|
        |ImageData|                       |love-ImageData|
        |SoundData|                       |love-SoundData|

                                                          *love-Data-functions*
    functions:

        |getPointer|                      |love-Data:getPointer|
        |getSize|                         |love-Data:getSize|
        |getString|                       |love-Data:getString|

-------------------------------------------------------------------------------
                                                         *love-Data:getPointer*
|Data:getPointer|

Gets a pointer to the Data.

Synopses:

    1.  `pointer` = |Data:getPointer|()

Variants:

    1.  `pointer` = |Data:getPointer|()

        See function description

        returns:

            `pointer`: <light userdata>

                A raw pointer to the Data.

        arguments:

            None

-------------------------------------------------------------------------------
                                                            *love-Data:getSize*
|Data:getSize|

Gets the size of the Data.

Synopses:

    1.  `size` = |Data:getSize|()

Variants:

    1.  `size` = |Data:getSize|()

        See function description

        returns:

            `size`: <number>

                The size of the Data in bytes.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Data:getString*
|Data:getString|

Gets the full Data as a string.

Synopses:

    1.  `data` = |Data:getString|()

Variants:

    1.  `data` = |Data:getString|()

        See function description

        returns:

            `data`: <string>

                The raw data.

        arguments:

            None

-------------------------------------------------------------------------------
                                                                *love-Drawable*
|Drawable|

Superclass for all things that can be drawn on screen. This is an abstract type
that can't be created directly.

                                                   *love-Drawable-constructors*
    constructors:

        None

                                                     *love-Drawable-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                       *love-Drawable-subtypes*
    subtypes:

        |Canvas|                          |love-Canvas|
        |Image|                           |love-Image|
        |Mesh|                            |love-Mesh|
        |ParticleSystem|                  |love-ParticleSystem|
        |SpriteBatch|                     |love-SpriteBatch|
        |Text|                            |love-Text|
        |Texture|                         |love-Texture|
        |Video|                           |love-Video|

                                                      *love-Drawable-functions*
    functions:

        None

-------------------------------------------------------------------------------
                                                                  *love-Object*
|Object|

The superclass of all LÖVE types.

                                                     *love-Object-constructors*
    constructors:

        None

                                                       *love-Object-supertypes*
    supertypes:

        None

                                                         *love-Object-subtypes*
    subtypes:

        |BezierCurve|                     |love-BezierCurve|
        |Body|                            |love-Body|
        |Canvas|                          |love-Canvas|
        |ChainShape|                      |love-ChainShape|
        |Channel|                         |love-Channel|
        |CircleShape|                     |love-CircleShape|
        |CompressedData|                  |love-CompressedData|
        |CompressedImageData|             |love-CompressedImageData|
        |Contact|                         |love-Contact|
        |Cursor|                          |love-Cursor|
        |Data|                            |love-Data|
        |Decoder|                         |love-Decoder|
        |DistanceJoint|                   |love-DistanceJoint|
        |Drawable|                        |love-Drawable|
        |EdgeShape|                       |love-EdgeShape|
        |File|                            |love-File|
        |FileData|                        |love-FileData|
        |Fixture|                         |love-Fixture|
        |Font|                            |love-Font|
        |FontData|                        |love-FontData|
        |FrictionJoint|                   |love-FrictionJoint|
        |GearJoint|                       |love-GearJoint|
        |GlyphData|                       |love-GlyphData|
        |Image|                           |love-Image|
        |ImageData|                       |love-ImageData|
        |Joint|                           |love-Joint|
        |Joystick|                        |love-Joystick|
        |Mesh|                            |love-Mesh|
        |MotorJoint|                      |love-MotorJoint|
        |MouseJoint|                      |love-MouseJoint|
        |ParticleSystem|                  |love-ParticleSystem|
        |PixelEffect|                     |love-PixelEffect|
        |PolygonShape|                    |love-PolygonShape|
        |PrismaticJoint|                  |love-PrismaticJoint|
        |PulleyJoint|                     |love-PulleyJoint|
        |Quad|                            |love-Quad|
        |RandomGenerator|                 |love-RandomGenerator|
        |Rasterizer|                      |love-Rasterizer|
        |RevoluteJoint|                   |love-RevoluteJoint|
        |RopeJoint|                       |love-RopeJoint|
        |Shader|                          |love-Shader|
        |Shape|                           |love-Shape|
        |SoundData|                       |love-SoundData|
        |Source|                          |love-Source|
        |SpriteBatch|                     |love-SpriteBatch|
        |Text|                            |love-Text|
        |Texture|                         |love-Texture|
        |Thread|                          |love-Thread|
        |Video|                           |love-Video|
        |VideoStream|                     |love-VideoStream|
        |WeldJoint|                       |love-WeldJoint|
        |WheelJoint|                      |love-WheelJoint|
        |World|                           |love-World|

                                                        *love-Object-functions*
    functions:

        |type|                            |love-Object:type|
        |typeOf|                          |love-Object:typeOf|

-------------------------------------------------------------------------------
                                                             *love-Object:type*
|Object:type|

Gets the type of the object as a string.

Synopses:

    1.  `type` = |Object:type|()

Variants:

    1.  `type` = |Object:type|()

        See function description

        returns:

            `type`: <string>

                The type as a string.

        arguments:

            None

-------------------------------------------------------------------------------
                                                           *love-Object:typeOf*
|Object:typeOf|

Checks whether an object is of a certain type. If the object has the type with
the specified name in its hierarchy, this function will return true.

Synopses:

    1.  `b` = |Object:typeOf|( `name` )

Variants:

    1.  `b` = |Object:typeOf|( `name` )

        See function description

        returns:

            `b`: <boolean>

                True if the object is of the specified type, false otherwise.

        arguments:

            `name`: <string>

                The name of the type to check for.

===============================================================================
                                                              *love-love.audio*
|love.audio|

Provides an interface to create noise with the user's speakers.

    |callbacks|                           |love-love.audio-callbacks|
    |enums|                               |love-love.audio-enums|
    |functions|                           |love-love.audio-functions|
    |types|                               |love-love.audio-types|

-------------------------------------------------------------------------------
                                                    *love-love.audio-callbacks*
The callbacks of |love.audio|:

    None

-------------------------------------------------------------------------------
                                                        *love-love.audio-enums*
The enums of |love.audio|:

    |DistanceModel|                       |love-DistanceModel|
    |SourceType|                          |love-SourceType|
    |TimeUnit|                            |love-TimeUnit|

-------------------------------------------------------------------------------
                                                           *love-DistanceModel*
|DistanceModel|

The different distance models.

Extended information can be found in the chapter "3.4. Attenuation By Distance"
of the OpenAL 1.1 specification.

    constants:

        `none`: <string>

            Sources do not get attenuated.

        `inverse`: <string>

            Inverse distance attenuation.

        `inverseclamped`: <string>

            Inverse distance attenuation. Gain is clamped. In version 0.9.2 and
            older this is named inverse clamped.

        `linear`: <string>

            Linear attenuation.

        `linearclamped`: <string>

            Linear attenuation. Gain is clamped. In version 0.9.2 and older
            this is named linear clamped.

        `exponent`: <string>

            Exponential attenuation.

        `exponentclamped`: <string>

            Exponential attenuation. Gain is clamped. In version 0.9.2 and
            older this is named exponent clamped.

-------------------------------------------------------------------------------
                                                              *love-SourceType*
|SourceType|

Types of audio sources.

A good rule of thumb is to use stream for music files and static for all short
sound effects. Basically, you want to avoid loading large files into memory at
once.

    constants:

        `static`: <string>

            Decode the entire sound at once.

        `stream`: <string>

            Stream the sound; decode it gradually.

-------------------------------------------------------------------------------
                                                                *love-TimeUnit*
|TimeUnit|

Units that represent time.

    constants:

        `seconds`: <string>

            Regular seconds.

        `samples`: <string>

            Audio samples.

-------------------------------------------------------------------------------
                                                    *love-love.audio-functions*
The functions of |love.audio|:

    |getDistanceModel|                    |love-love.audio.getDistanceModel|
    |getDopplerScale|                     |love-love.audio.getDopplerScale|
    |getSourceCount|                      |love-love.audio.getSourceCount|
    |getOrientation|                      |love-love.audio.getOrientation|
    |getPosition|                         |love-love.audio.getPosition|
    |getVelocity|                         |love-love.audio.getVelocity|
    |getVolume|                           |love-love.audio.getVolume|
    |newSource|                           |love-love.audio.newSource|
    |pause|                               |love-love.audio.pause|
    |play|                                |love-love.audio.play|
    |resume|                              |love-love.audio.resume|
    |rewind|                              |love-love.audio.rewind|
    |setDistanceModel|                    |love-love.audio.setDistanceModel|
    |setDopplerScale|                     |love-love.audio.setDopplerScale|
    |setOrientation|                      |love-love.audio.setOrientation|
    |setPosition|                         |love-love.audio.setPosition|
    |setVelocity|                         |love-love.audio.setVelocity|
    |setVolume|                           |love-love.audio.setVolume|
    |stop|                                |love-love.audio.stop|

-------------------------------------------------------------------------------
                                             *love-love.audio.getDistanceModel*
|love.audio.getDistanceModel|

Returns the distance attenuation model.

Synopses:

    1.  `model` = |love.audio.getDistanceModel|()

Variants:

    1.  `model` = |love.audio.getDistanceModel|()

        See function description

        returns:

            `model`: <DistanceModel>

                The current distance model. The default is 'inverseclamped'.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.audio.getDopplerScale*
|love.audio.getDopplerScale|

Gets the current global scale factor for velocity-based doppler effects.

Synopses:

    1.  `scale` = |love.audio.getDopplerScale|()

Variants:

    1.  `scale` = |love.audio.getDopplerScale|()

        See function description

        returns:

            `scale`: <number>

                The current doppler scale factor.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-love.audio.getSourceCount*
|love.audio.getSourceCount|

Returns the number of sources which are currently playing or paused.

Synopses:

    1.  `numSources` = |love.audio.getSourceCount|()

Variants:

    1.  `numSources` = |love.audio.getSourceCount|()

        See function description

        returns:

            `numSources`: <number>

                The number of sources which are currently playing or paused.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-love.audio.getOrientation*
|love.audio.getOrientation|

Returns the orientation of the listener.

Synopses:

    1.  `fx`, `fy`, `fz`, `ux`, `uy`, `uz` =
        |love.audio.getOrientation|()

Variants:

    1.  `fx`, `fy`, `fz`, `ux`, `uy`, `uz` =
        |love.audio.getOrientation|()

        See function description

        returns:

            `fx`: <number>

                The X component of the forward vector of the listener
                orientation.

            `fy`: <number>

                The Y component of the forward vector of the listener
                orientation.

            `fz`: <number>

                The Z component of the forward vector of the listener
                orientation.

            `ux`: <number>

                The X component of the up vector of the listener orientation.

            `uy`: <number>

                The Y component of the up vector of the listener orientation.

            `uz`: <number>

                The Z component of the up vector of the listener orientation.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-love.audio.getPosition*
|love.audio.getPosition|

Returns the position of the listener.

Synopses:

    1.  `x`, `y`, `z` = |love.audio.getPosition|()

Variants:

    1.  `x`, `y`, `z` = |love.audio.getPosition|()

        See function description

        returns:

            `x`: <number>

                The X position of the listener.

            `y`: <number>

                The Y position of the listener.

            `z`: <number>

                The Z position of the listener.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-love.audio.getVelocity*
|love.audio.getVelocity|

Returns the velocity of the listener.

Synopses:

    1.  `x`, `y`, `z` = |love.audio.getVelocity|()

Variants:

    1.  `x`, `y`, `z` = |love.audio.getVelocity|()

        See function description

        returns:

            `x`: <number>

                The X velocity of the listener.

            `y`: <number>

                The Y velocity of the listener.

            `z`: <number>

                The Z velocity of the listener.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.audio.getVolume*
|love.audio.getVolume|

Returns the master volume.

Synopses:

    1.  `volume` = |love.audio.getVolume|()

Variants:

    1.  `volume` = |love.audio.getVolume|()

        See function description

        returns:

            `volume`: <number>

                The current master volume.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.audio.newSource*
|love.audio.newSource|

Creates a new Source from a file or SoundData. Sources created from SoundData
are always static.

Synopses:

    1.  `source` = |love.audio.newSource|( `filename`, `type` )
    2.  `source` = |love.audio.newSource|( `file`, `type` )
    3.  `source` = |love.audio.newSource|( `decoder`, `type` )
    4.  `source` = |love.audio.newSource|( `soundData` )
    5.  `source` = |love.audio.newSource|( `fileData` )

Variants:

    1.  `source` = |love.audio.newSource|( `filename`, `type` )

        See function description

        returns:

            `source`: <Source>

                A new Source that can play the specified audio.

        arguments:

            `filename`: <string>

                The filepath to create a Source from.

            `type`: <SourceType>

                Streaming or static source.
    2.  `source` = |love.audio.newSource|( `file`, `type` )

        See function description

        returns:

            `source`: <Source>

                A new Source that can play the specified audio.

        arguments:

            `file`: <File>

                A File pointing to an audio file.

            `type`: <SourceType>

                Streaming or static source.
    3.  `source` = |love.audio.newSource|( `decoder`, `type` )

        See function description

        returns:

            `source`: <Source>

                A new Source that can play the specified audio.

        arguments:

            `decoder`: <Decoder>

                The Decoder to create a Source from.

            `type`: <SourceType>

                Streaming or static source.
    4.  `source` = |love.audio.newSource|( `soundData` )

        See function description

        returns:

            `source`: <Source>

                A new Source that can play the specified audio. The SourceType
                of the returned audio is "static".

        arguments:

            `soundData`: <SoundData>

                The SoundData to create a Source from.
    5.  `source` = |love.audio.newSource|( `fileData` )

        See function description

        returns:

            `source`: <Source>

                A new Source that can play the specified audio.

        arguments:

            `fileData`: <FileData>

                The FileData to create a Source from.

-------------------------------------------------------------------------------
                                                        *love-love.audio.pause*
|love.audio.pause|

Pauses currently played Sources.

Synopses:

    1.  |love.audio.pause|()
    2.  |love.audio.pause|( `source` )

Variants:

    1.  |love.audio.pause|()

        This function will pause all currently active Sources.

        returns:

            None

        arguments:

            None
    2.  |love.audio.pause|( `source` )

        This function will only pause the specified Source.

        returns:

            None

        arguments:

            `source`: <Source>

                The source on which to pause the playback.

-------------------------------------------------------------------------------
                                                         *love-love.audio.play*
|love.audio.play|

Plays the specified Source.

Synopses:

    1.  |love.audio.play|( `source` )

Variants:

    1.  |love.audio.play|( `source` )

        See function description

        returns:

            None

        arguments:

            `source`: <Source>

                The Source to play.

-------------------------------------------------------------------------------
                                                       *love-love.audio.resume*
|love.audio.resume|

Resumes all audio

Synopses:

    1.  |love.audio.resume|()
    2.  |love.audio.resume|( `source` )

Variants:

    1.  |love.audio.resume|()

        See function description

        returns:

            None

        arguments:

            None
    2.  |love.audio.resume|( `source` )

        See function description

        returns:

            None

        arguments:

            `source`: <Source>

                The source on which to resume the playback.

-------------------------------------------------------------------------------
                                                       *love-love.audio.rewind*
|love.audio.rewind|

Rewinds all playing audio.

Synopses:

    1.  |love.audio.rewind|()
    2.  |love.audio.rewind|( `source` )

Variants:

    1.  |love.audio.rewind|()

        See function description

        returns:

            None

        arguments:

            None
    2.  |love.audio.rewind|( `source` )

        See function description

        returns:

            None

        arguments:

            `source`: <Source>

                The source to rewind.

-------------------------------------------------------------------------------
                                             *love-love.audio.setDistanceModel*
|love.audio.setDistanceModel|

Sets the distance attenuation model.

Synopses:

    1.  |love.audio.setDistanceModel|( `model` )

Variants:

    1.  |love.audio.setDistanceModel|( `model` )

        See function description

        returns:

            None

        arguments:

            `model`: <DistanceModel>

                The new distance model.

-------------------------------------------------------------------------------
                                              *love-love.audio.setDopplerScale*
|love.audio.setDopplerScale|

Sets a global scale factor for velocity-based doppler effects. The default
scale value is 1.

Synopses:

    1.  |love.audio.setDopplerScale|( `scale` )

Variants:

    1.  |love.audio.setDopplerScale|( `scale` )

        See function description

        returns:

            None

        arguments:

            `scale`: <number>

                The new doppler scale factor. The scale must be greater than 0.

-------------------------------------------------------------------------------
                                               *love-love.audio.setOrientation*
|love.audio.setOrientation|

Sets the orientation of the listener.

Synopses:

    1.  |love.audio.setOrientation|( `fx`, `fy`, `fz`, `ux`, `uy`, `uz`
        )

Variants:

    1.  |love.audio.setOrientation|( `fx`, `fy`, `fz`, `ux`, `uy`, `uz`
        )

        See function description

        returns:

            None

        arguments:

            `fx`: <number>

                The X component of the forward vector of the listener
                orientation.

            `fy`: <number>

                The Y component of the forward vector of the listener
                orientation.

            `fz`: <number>

                The Z component of the forward vector of the listener
                orientation.

            `ux`: <number>

                The X component of the up vector of the listener orientation.

            `uy`: <number>

                The Y component of the up vector of the listener orientation.

            `uz`: <number>

                The Z component of the up vector of the listener orientation.

-------------------------------------------------------------------------------
                                                  *love-love.audio.setPosition*
|love.audio.setPosition|

Sets the position of the listener, which determines how sounds play.

Synopses:

    1.  |love.audio.setPosition|( `x`, `y`, `z` )

Variants:

    1.  |love.audio.setPosition|( `x`, `y`, `z` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The X position of the listener.

            `y`: <number>

                The Y position of the listener.

            `z`: <number>

                The Z position of the listener.

-------------------------------------------------------------------------------
                                                  *love-love.audio.setVelocity*
|love.audio.setVelocity|

Sets the velocity of the listener.

Synopses:

    1.  |love.audio.setVelocity|( `x`, `y`, `z` )

Variants:

    1.  |love.audio.setVelocity|( `x`, `y`, `z` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The X velocity of the listener.

            `y`: <number>

                The Y velocity of the listener.

            `z`: <number>

                The Z velocity of the listener.

-------------------------------------------------------------------------------
                                                    *love-love.audio.setVolume*
|love.audio.setVolume|

Sets the master volume.

Synopses:

    1.  |love.audio.setVolume|( `volume` )

Variants:

    1.  |love.audio.setVolume|( `volume` )

        See function description

        returns:

            None

        arguments:

            `volume`: <number>

                1.0f is max and 0.0f is off.

-------------------------------------------------------------------------------
                                                         *love-love.audio.stop*
|love.audio.stop|

Stops currently played sources.

Synopses:

    1.  |love.audio.stop|()
    2.  |love.audio.stop|( `source` )

Variants:

    1.  |love.audio.stop|()

        This function will stop all currently active sources.

        returns:

            None

        arguments:

            None
    2.  |love.audio.stop|( `source` )

        This function will only stop the specified source.

        returns:

            None

        arguments:

            `source`: <Source>

                The source on which to stop the playback.
-------------------------------------------------------------------------------
                                                        *love-love.audio-types*
The types of |love.audio|:

    |Source|                              |love-Source|

-------------------------------------------------------------------------------
                                                                  *love-Source*
|Source|

A Source represents audio you can play back. You can do interesting things with
Sources, like set the volume, pitch, and its position relative to the listener.

                                                     *love-Source-constructors*
    constructors:

        |newSource|                       |love-newSource|

                                                       *love-Source-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                         *love-Source-subtypes*
    subtypes:

        None

                                                        *love-Source-functions*
    functions:

        |clone|                           |love-Source:clone|
        |getAttenuationDistances|         |love-Source:getAttenuationDistances|
        |getChannels|                     |love-Source:getChannels|
        |getCone|                         |love-Source:getCone|
        |getDirection|                    |love-Source:getDirection|
        |getDuration|                     |love-Source:getDuration|
        |getPitch|                        |love-Source:getPitch|
        |getPosition|                     |love-Source:getPosition|
        |getRolloff|                      |love-Source:getRolloff|
        |getType|                         |love-Source:getType|
        |getVelocity|                     |love-Source:getVelocity|
        |getVolume|                       |love-Source:getVolume|
        |getVolumeLimits|                 |love-Source:getVolumeLimits|
        |isLooping|                       |love-Source:isLooping|
        |isPaused|                        |love-Source:isPaused|
        |isPlaying|                       |love-Source:isPlaying|
        |isStopped|                       |love-Source:isStopped|
        |pause|                           |love-Source:pause|
        |play|                            |love-Source:play|
        |resume|                          |love-Source:resume|
        |rewind|                          |love-Source:rewind|
        |seek|                            |love-Source:seek|
        |setDirection|                    |love-Source:setDirection|
        |setAttenuationDistances|         |love-Source:setAttenuationDistances|
        |setCone|                         |love-Source:setCone|
        |setLooping|                      |love-Source:setLooping|
        |setPitch|                        |love-Source:setPitch|
        |setPosition|                     |love-Source:setPosition|
        |setRolloff|                      |love-Source:setRolloff|
        |setVelocity|                     |love-Source:setVelocity|
        |setVolume|                       |love-Source:setVolume|
        |setVolumeLimits|                 |love-Source:setVolumeLimits|
        |stop|                            |love-Source:stop|
        |tell|                            |love-Source:tell|

-------------------------------------------------------------------------------
                                                            *love-Source:clone*
|Source:clone|

Creates an identical copy of the Source in the stopped state.

Static Sources will use significantly less memory and take much less time to be
created if Source:clone is used to create them instead of love.audio.newSource,
so this method should be preferred when making multiple Sources which play the
same sound.

Cloned Sources inherit all the set-able state of the original Source, but they
are initialized stopped.

Synopses:

    1.  `source` = |Source:clone|()

Variants:

    1.  `source` = |Source:clone|()

        See function description

        returns:

            `source`: <Source>

                The new identical copy of this Source.

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-Source:getAttenuationDistances*
|Source:getAttenuationDistances|

Returns the reference and maximum distance of the source.

Synopses:

    1.  `ref`, `max` = |Source:getAttenuationDistances|()

Variants:

    1.  `ref`, `max` = |Source:getAttenuationDistances|()

        See function description

        returns:

            `ref`: <number>

                The reference distance.

            `max`: <number>

                The maximum distance.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Source:getChannels*
|Source:getChannels|

Gets the number of channels in the Source. Only 1-channel (mono) Sources can
use directional and positional effects.

Synopses:

    1.  `channels` = |Source:getChannels|()

Variants:

    1.  `channels` = |Source:getChannels|()

        See function description

        returns:

            `channels`: <number>

                1 for mono, 2 for stereo.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Source:getCone*
|Source:getCone|

Gets the Source's directional volume cones. Together with Source:setDirection,
the cone angles allow for the Source's volume to vary depending on its
direction.

Synopses:

    1.  `innerAngle`, `outerAngle`, `outerVolume` = |Source:getCone|()

Variants:

    1.  `innerAngle`, `outerAngle`, `outerVolume` = |Source:getCone|()

        See function description

        returns:

            `innerAngle`: <number>

                The inner angle from the Source's direction, in radians. The
                Source will play at normal volume if the listener is inside the
                cone defined by this angle.

            `outerAngle`: <number>

                The outer angle from the Source's direction, in radians. The
                Source will play at a volume between the normal and outer
                volumes, if the listener is in between the cones defined by the
                inner and outer angles.

            `outerVolume`: <number>

                The Source's volume when the listener is outside both the inner
                and outer cone angles.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Source:getDirection*
|Source:getDirection|

Gets the direction of the Source.

Synopses:

    1.  `x`, `y`, `z` = |Source:getDirection|()

Variants:

    1.  `x`, `y`, `z` = |Source:getDirection|()

        See function description

        returns:

            `x`: <number>

                The X part of the direction vector.

            `y`: <number>

                The Y part of the direction vector.

            `z`: <number>

                The Z part of the direction vector.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Source:getDuration*
|Source:getDuration|

Gets the duration of the Source. For streaming Sources it may not always be
sample-accurate, and may return -1 if the duration cannot be determined at all.

Synopses:

    1.  `duration` = |Source:getDuration|( `unit` )

Variants:

    1.  `duration` = |Source:getDuration|( `unit` )

        See function description

        returns:

            `duration`: <number>

                The duration of the Source, or -1 if it cannot be determined.

        arguments:

            `unit`: <TimeUnit>

                The time unit for the return value.

-------------------------------------------------------------------------------
                                                         *love-Source:getPitch*
|Source:getPitch|

Gets the current pitch of the Source.

Synopses:

    1.  `pitch` = |Source:getPitch|()

Variants:

    1.  `pitch` = |Source:getPitch|()

        See function description

        returns:

            `pitch`: <number>

                The pitch, where 1.0 is normal.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Source:getPosition*
|Source:getPosition|

Gets the position of the Source.

Synopses:

    1.  `x`, `y`, `z` = |Source:getPosition|()

Variants:

    1.  `x`, `y`, `z` = |Source:getPosition|()

        See function description

        returns:

            `x`: <number>

                The X position of the Source.

            `y`: <number>

                The Y position of the Source.

            `z`: <number>

                The Z position of the Source.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Source:getRolloff*
|Source:getRolloff|

Returns the rolloff factor of the source.

Synopses:

    1.  `rolloff` = |Source:getRolloff|()

Variants:

    1.  `rolloff` = |Source:getRolloff|()

        See function description

        returns:

            `rolloff`: <number>

                The rolloff factor.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Source:getType*
|Source:getType|

Gets the type (static or stream) of the Source.

Synopses:

    1.  `sourcetype` = |Source:getType|()

Variants:

    1.  `sourcetype` = |Source:getType|()

        See function description

        returns:

            `sourcetype`: <SourceType>

                The type of the source.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Source:getVelocity*
|Source:getVelocity|

Gets the velocity of the Source.

Synopses:

    1.  `x`, `y`, `z` = |Source:getVelocity|()

Variants:

    1.  `x`, `y`, `z` = |Source:getVelocity|()

        See function description

        returns:

            `x`: <number>

                The X part of the velocity vector.

            `y`: <number>

                The Y part of the velocity vector.

            `z`: <number>

                The Z part of the velocity vector.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Source:getVolume*
|Source:getVolume|

Gets the current volume of the Source.

Synopses:

    1.  `volume` = |Source:getVolume|()

Variants:

    1.  `volume` = |Source:getVolume|()

        See function description

        returns:

            `volume`: <number>

                The volume of the Source, where 1.0 is normal volume.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Source:getVolumeLimits*
|Source:getVolumeLimits|

Returns the volume limits of the source.

Synopses:

    1.  `min`, `max` = |Source:getVolumeLimits|()

Variants:

    1.  `min`, `max` = |Source:getVolumeLimits|()

        See function description

        returns:

            `min`: <number>

                The minimum volume.

            `max`: <number>

                The maximum volume.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Source:isLooping*
|Source:isLooping|

Returns whether the Source will loop.

Synopses:

    1.  `loop` = |Source:isLooping|()

Variants:

    1.  `loop` = |Source:isLooping|()

        See function description

        returns:

            `loop`: <boolean>

                True if the Source will loop, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Source:isPaused*
|Source:isPaused|

Returns whether the Source is paused.

Synopses:

    1.  `paused` = |Source:isPaused|()

Variants:

    1.  `paused` = |Source:isPaused|()

        See function description

        returns:

            `paused`: <boolean>

                True if the Source is paused, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Source:isPlaying*
|Source:isPlaying|

Returns whether the Source is playing.

Synopses:

    1.  `playing` = |Source:isPlaying|()

Variants:

    1.  `playing` = |Source:isPlaying|()

        See function description

        returns:

            `playing`: <boolean>

                True if the Source is playing, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Source:isStopped*
|Source:isStopped|

Returns whether the Source is stopped.

Synopses:

    1.  `stopped` = |Source:isStopped|()

Variants:

    1.  `stopped` = |Source:isStopped|()

        See function description

        returns:

            `stopped`: <boolean>

                True if the Source is stopped, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                            *love-Source:pause*
|Source:pause|

Pauses the Source.

Synopses:

    1.  |Source:pause|()

Variants:

    1.  |Source:pause|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                             *love-Source:play*
|Source:play|

Starts playing the Source.

Synopses:

    1.  `success` = |Source:play|()

Variants:

    1.  `success` = |Source:play|()

        See function description

        returns:

            `success`: <boolean>

                True if the Source started playing successfully, false
                otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                           *love-Source:resume*
|Source:resume|

Resumes a paused Source.

Synopses:

    1.  |Source:resume|()

Variants:

    1.  |Source:resume|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                           *love-Source:rewind*
|Source:rewind|

Rewinds a Source.

Synopses:

    1.  |Source:rewind|()

Variants:

    1.  |Source:rewind|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                             *love-Source:seek*
|Source:seek|

Sets the playing position of the Source.

Synopses:

    1.  |Source:seek|( `position`, `unit` )

Variants:

    1.  |Source:seek|( `position`, `unit` )

        See function description

        returns:

            None

        arguments:

            `position`: <number>

                The position to seek to.

            `unit`: <TimeUnit>

                The unit of the position value.

-------------------------------------------------------------------------------
                                                     *love-Source:setDirection*
|Source:setDirection|

Sets the direction vector of the Source. A zero vector makes the source
non-directional.

Synopses:

    1.  |Source:setDirection|( `x`, `y`, `z` )

Variants:

    1.  |Source:setDirection|( `x`, `y`, `z` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The X part of the direction vector.

            `y`: <number>

                The Y part of the direction vector.

            `z`: <number>

                The Z part of the direction vector.

-------------------------------------------------------------------------------
                                          *love-Source:setAttenuationDistances*
|Source:setAttenuationDistances|

Sets the reference and maximum distance of the source.

Synopses:

    1.  |Source:setAttenuationDistances|( `ref`, `max` )

Variants:

    1.  |Source:setAttenuationDistances|( `ref`, `max` )

        See function description

        returns:

            None

        arguments:

            `ref`: <number>

                The new reference distance.

            `max`: <number>

                The new maximum distance.

-------------------------------------------------------------------------------
                                                          *love-Source:setCone*
|Source:setCone|

Sets the Source's directional volume cones. Together with Source:setDirection,
the cone angles allow for the Source's volume to vary depending on its
direction.

Synopses:

    1.  |Source:setCone|( `innerAngle`, `outerAngle`, `outerVolume` )

Variants:

    1.  |Source:setCone|( `innerAngle`, `outerAngle`, `outerVolume` )

        See function description

        returns:

            None

        arguments:

            `innerAngle`: <number>

                The inner angle from the Source's direction, in radians. The
                Source will play at normal volume if the listener is inside the
                cone defined by this angle.

            `outerAngle`: <number>

                The outer angle from the Source's direction, in radians. The
                Source will play at a volume between the normal and outer
                volumes, if the listener is in between the cones defined by the
                inner and outer angles.

            `outerVolume`: <number>

                The Source's volume when the listener is outside both the inner
                and outer cone angles.

-------------------------------------------------------------------------------
                                                       *love-Source:setLooping*
|Source:setLooping|

Sets whether the Source should loop.

Synopses:

    1.  |Source:setLooping|( `loop` )

Variants:

    1.  |Source:setLooping|( `loop` )

        See function description

        returns:

            None

        arguments:

            `loop`: <boolean>

                True if the source should loop, false otherwise.

-------------------------------------------------------------------------------
                                                         *love-Source:setPitch*
|Source:setPitch|

Sets the pitch of the Source.

Synopses:

    1.  |Source:setPitch|( `pitch` )

Variants:

    1.  |Source:setPitch|( `pitch` )

        See function description

        returns:

            None

        arguments:

            `pitch`: <number>

                Calculated with regard to 1 being the base pitch. Each
                reduction by 50 percent equals a pitch shift of -12 semitones
                (one octave reduction). Each doubling equals a pitch shift of
                12 semitones (one octave increase). Zero is not a legal value.

-------------------------------------------------------------------------------
                                                      *love-Source:setPosition*
|Source:setPosition|

Sets the position of the Source.

Synopses:

    1.  |Source:setPosition|( `x`, `y`, `z` )

Variants:

    1.  |Source:setPosition|( `x`, `y`, `z` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The X position of the Source.

            `y`: <number>

                The Y position of the Source.

            `z`: <number>

                The Z position of the Source.

-------------------------------------------------------------------------------
                                                       *love-Source:setRolloff*
|Source:setRolloff|

Sets the rolloff factor which affects the strength of the used distance
attenuation.

Extended information and detailed formulas can be found in the chapter "3.4.
Attenuation By Distance" of OpenAL 1.1 specification.

Synopses:

    1.  |Source:setRolloff|( `rolloff` )

Variants:

    1.  |Source:setRolloff|( `rolloff` )

        See function description

        returns:

            None

        arguments:

            `rolloff`: <number>

                The new rolloff factor.

-------------------------------------------------------------------------------
                                                      *love-Source:setVelocity*
|Source:setVelocity|

Sets the velocity of the Source.

This does not change the position of the Source, but is used to calculate the
doppler effect.

Synopses:

    1.  |Source:setVelocity|( `x`, `y`, `z` )

Variants:

    1.  |Source:setVelocity|( `x`, `y`, `z` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The X part of the velocity vector.

            `y`: <number>

                The Y part of the velocity vector.

            `z`: <number>

                The Z part of the velocity vector.

-------------------------------------------------------------------------------
                                                        *love-Source:setVolume*
|Source:setVolume|

Sets the volume of the Source.

Synopses:

    1.  |Source:setVolume|( `volume` )

Variants:

    1.  |Source:setVolume|( `volume` )

        See function description

        returns:

            None

        arguments:

            `volume`: <number>

                The volume of the Source, where 1.0 is normal volume.

-------------------------------------------------------------------------------
                                                  *love-Source:setVolumeLimits*
|Source:setVolumeLimits|

Sets the volume limits of the source. The limits have to be numbers from 0 to
1.

Synopses:

    1.  |Source:setVolumeLimits|( `min`, `max` )

Variants:

    1.  |Source:setVolumeLimits|( `min`, `max` )

        See function description

        returns:

            None

        arguments:

            `min`: <number>

                The minimum volume.

            `max`: <number>

                The maximum volume.

-------------------------------------------------------------------------------
                                                             *love-Source:stop*
|Source:stop|

Stops a Source.

Synopses:

    1.  |Source:stop|()

Variants:

    1.  |Source:stop|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                             *love-Source:tell*
|Source:tell|

Gets the currently playing position of the Source.

Synopses:

    1.  `position` = |Source:tell|( `unit` )

Variants:

    1.  `position` = |Source:tell|( `unit` )

        See function description

        returns:

            `position`: <number>

                The currently playing position of the Source.

        arguments:

            `unit`: <TimeUnit>

                The type of unit for the return value.

===============================================================================
                                                              *love-love.event*
|love.event|

Manages events, like keypresses.

    |callbacks|                           |love-love.event-callbacks|
    |enums|                               |love-love.event-enums|
    |functions|                           |love-love.event-functions|
    |types|                               |love-love.event-types|

-------------------------------------------------------------------------------
                                                    *love-love.event-callbacks*
The callbacks of |love.event|:

    None

-------------------------------------------------------------------------------
                                                        *love-love.event-enums*
The enums of |love.event|:

    |Event|                               |love-Event|

-------------------------------------------------------------------------------
                                                                   *love-Event*
|Event|

Arguments to love.event.push() and the like.

    constants:

        `focus`: <string>

            Window focus gained or lost

        `joystickaxis`: <string>

            Joystick axis motion

        `joystickhat`: <string>

            Joystick hat pressed

        `joystickpressed`: <string>

            Joystick pressed

        `joystickreleased`: <string>

            Joystick released

        `keypressed`: <string>

            Key pressed

        `keyreleased`: <string>

            Key released

        `mousefocus`: <string>

            Window mouse focus gained or lost

        `mousepressed`: <string>

            Mouse pressed

        `mousereleased`: <string>

            Mouse released

        `resize`: <string>

            Window size changed by the user

        `threaderror`: <string>

            A Lua error has occurred in a thread.

        `quit`: <string>

            Quit

        `visible`: <string>

            Window is minimized or un-minimized by the user

-------------------------------------------------------------------------------
                                                    *love-love.event-functions*
The functions of |love.event|:

    |clear|                               |love-love.event.clear|
    |poll|                                |love-love.event.poll|
    |pump|                                |love-love.event.pump|
    |push|                                |love-love.event.push|
    |quit|                                |love-love.event.quit|
    |wait|                                |love-love.event.wait|

-------------------------------------------------------------------------------
                                                        *love-love.event.clear*
|love.event.clear|

Clears the event queue.

Synopses:

    1.  |love.event.clear|()

Variants:

    1.  |love.event.clear|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-love.event.poll*
|love.event.poll|

Returns an iterator for messages in the event queue.

Synopses:

    1.  `i` = |love.event.poll|()

Variants:

    1.  `i` = |love.event.poll|()

        See function description

        returns:

            `i`: <function>

                Iterator function usable in a for loop.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-love.event.pump*
|love.event.pump|

Pump events into the event queue. This is a low-level function, and is usually
not called by the user, but by love.run. Note that this does need to be called
for any OS to think you're still running, and if you want to handle
OS-generated events at all (think callbacks). love.event.pump can only be
called from the main thread, but afterwards, the rest of love.event can be used
from any other thread.

Synopses:

    1.  |love.event.pump|()

Variants:

    1.  |love.event.pump|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-love.event.push*
|love.event.push|

Adds an event to the event queue.

Synopses:

    1.  |love.event.push|( `e`, `a`, `b`, `c`, `d` )

Variants:

    1.  |love.event.push|( `e`, `a`, `b`, `c`, `d` )

        See function description

        returns:

            None

        arguments:

            `e`: <Event>

                The name of the event.

            `a`: <Variant>

                First event argument.

            `b`: <Variant>

                Second event argument.

            `c`: <Variant>

                Third event argument.

            `d`: <Variant>

                Fourth event argument.

-------------------------------------------------------------------------------
                                                         *love-love.event.quit*
|love.event.quit|

Adds the quit event to the queue.

The quit event is a signal for the event handler to close LÖVE. It's possible
to abort the exit process with the love.quit callback.

Synopses:

    1.  |love.event.quit|()
    2.  |love.event.quit|( `exitstatus` )
    3.  |love.event.quit|( `"restart"` )

Variants:

    1.  |love.event.quit|()

        See function description

        returns:

            None

        arguments:

            None
    2.  |love.event.quit|( `exitstatus` )

        See function description

        returns:

            None

        arguments:

            `exitstatus`: <number>

                The program exit status to use when closing the application.
    3.  |love.event.quit|( `"restart"` )

        See function description

        returns:

            None

        arguments:

            `"restart"`: <string>

                Restarts the game without relaunching the executable. This
                cleanly shuts down the main Lua state instance and creates a
                brand new one.

-------------------------------------------------------------------------------
                                                         *love-love.event.wait*
|love.event.wait|

Like love.event.poll but blocks until there is an event in the queue.

Synopses:

    1.  `e`, `a`, `b`, `c`, `d` = |love.event.wait|()

Variants:

    1.  `e`, `a`, `b`, `c`, `d` = |love.event.wait|()

        See function description

        returns:

            `e`: <Event>

                The type of event.

            `a`: <Variant>

                First event argument.

            `b`: <Variant>

                Second event argument.

            `c`: <Variant>

                Third event argument.

            `d`: <Variant>

                Fourth event argument.

        arguments:

            None
-------------------------------------------------------------------------------
                                                        *love-love.event-types*
The types of |love.event|:

    None

===============================================================================
                                                         *love-love.filesystem*
|love.filesystem|

Provides an interface to the user's filesystem.

    |callbacks|                           |love-love.filesystem-callbacks|
    |enums|                               |love-love.filesystem-enums|
    |functions|                           |love-love.filesystem-functions|
    |types|                               |love-love.filesystem-types|

-------------------------------------------------------------------------------
                                               *love-love.filesystem-callbacks*
The callbacks of |love.filesystem|:

    None

-------------------------------------------------------------------------------
                                                   *love-love.filesystem-enums*
The enums of |love.filesystem|:

    |BufferMode|                          |love-BufferMode|
    |FileDecoder|                         |love-FileDecoder|
    |FileMode|                            |love-FileMode|

-------------------------------------------------------------------------------
                                                              *love-BufferMode*
|BufferMode|

Buffer modes for File objects.

    constants:

        `none`: <string>

            No buffering. The result of write and append operations appears
            immediately.

        `line`: <string>

            Line buffering. Write and append operations are buffered until a
            newline is output or the buffer size limit is reached.

        `full`: <string>

            Full buffering. Write and append operations are always buffered
            until the buffer size limit is reached.

-------------------------------------------------------------------------------
                                                             *love-FileDecoder*
|FileDecoder|

How to decode a given FileData.

    constants:

        `file`: <string>

            The data is unencoded.

        `base64`: <string>

            The data is base64-encoded.

-------------------------------------------------------------------------------
                                                                *love-FileMode*
|FileMode|

The different modes you can open a file in.

    constants:

        `r`: <string>

            Open a file for read.

        `w`: <string>

            Open a file for write.

        `a`: <string>

            Open a file for append.

        `c`: <string>

            Do not open a file (represents a closed file.)

-------------------------------------------------------------------------------
                                               *love-love.filesystem-functions*
The functions of |love.filesystem|:

    |append|                              |love-love.filesystem.append|
    |areSymlinksEnabled|                  |love-love.filesystem.areSymlinksEn-|
    |createDirectory|                     |love-love.filesystem.createDirecto-|
    |exists|                              |love-love.filesystem.exists|
    |getAppdataDirectory|                 |love-love.filesystem.getAppdataDir-|
    |getDirectoryItems|                   |love-love.filesystem.getDirectoryI-|
    |getIdentity|                         |love-love.filesystem.getIdentity|
    |getLastModified|                     |love-love.filesystem.getLastModifi-|
    |getRealDirectory|                    |love-love.filesystem.getRealDirect-|
    |getRequirePath|                      |love-love.filesystem.getRequirePath|
    |getSaveDirectory|                    |love-love.filesystem.getSaveDirect-|
    |getSize|                             |love-love.filesystem.getSize|
    |getSource|                           |love-love.filesystem.getSource|
    |getSourceBaseDirectory|              |love-love.filesystem.getSourceBase-|
    |getUserDirectory|                    |love-love.filesystem.getUserDirect-|
    |getWorkingDirectory|                 |love-love.filesystem.getWorkingDir-|
    |init|                                |love-love.filesystem.init|
    |isDirectory|                         |love-love.filesystem.isDirectory|
    |isFile|                              |love-love.filesystem.isFile|
    |isFused|                             |love-love.filesystem.isFused|
    |isSymlink|                           |love-love.filesystem.isSymlink|
    |lines|                               |love-love.filesystem.lines|
    |load|                                |love-love.filesystem.load|
    |mount|                               |love-love.filesystem.mount|
    |newFile|                             |love-love.filesystem.newFile|
    |newFileData|                         |love-love.filesystem.newFileData|
    |read|                                |love-love.filesystem.read|
    |remove|                              |love-love.filesystem.remove|
    |setIdentity|                         |love-love.filesystem.setIdentity|
    |setRequirePath|                      |love-love.filesystem.setRequirePath|
    |setSource|                           |love-love.filesystem.setSource|
    |setSymlinksEnabled|                  |love-love.filesystem.setSymlinksEn-|
    |unmount|                             |love-love.filesystem.unmount|
    |write|                               |love-love.filesystem.write|

-------------------------------------------------------------------------------
                                                  *love-love.filesystem.append*
|love.filesystem.append|

Append data to an existing file.

Synopses:

    1.  `success`, `errormsg` = |love.filesystem.append|( `name`,
        `data`, `size` )

Variants:

    1.  `success`, `errormsg` = |love.filesystem.append|( `name`,
        `data`, `size` )

        See function description

        returns:

            `success`: <boolean>

                True if the operation was successful, or nil if there was an
                error.

            `errormsg`: <string>

                The error message on failure.

        arguments:

            `name`: <string>

                The name (and path) of the file.

            `data`: <string>

                The data that should be written to the file

            `size`: <number>

                How many bytes to write.

-------------------------------------------------------------------------------
                                      *love-love.filesystem.areSymlinksEnabled*
|love.filesystem.areSymlinksEnabled|

Gets whether love.filesystem follows symbolic links.

Synopses:

    1.  `enable` = |love.filesystem.areSymlinksEnabled|()

Variants:

    1.  `enable` = |love.filesystem.areSymlinksEnabled|()

        See function description

        returns:

            `enable`: <boolean>

                Whether love.filesystem follows symbolic links.

        arguments:

            None

-------------------------------------------------------------------------------
                                         *love-love.filesystem.createDirectory*
|love.filesystem.createDirectory|

Creates a directory.

Synopses:

    1.  `success` = |love.filesystem.createDirectory|( `name` )

Variants:

    1.  `success` = |love.filesystem.createDirectory|( `name` )

        See function description

        returns:

            `success`: <boolean>

                True if the directory was created, false if not.

        arguments:

            `name`: <string>

                The directory to create.

-------------------------------------------------------------------------------
                                                  *love-love.filesystem.exists*
|love.filesystem.exists|

Check whether a file or directory exists.

Synopses:

    1.  `exists` = |love.filesystem.exists|( `filename` )

Variants:

    1.  `exists` = |love.filesystem.exists|( `filename` )

        See function description

        returns:

            `exists`: <boolean>

                True if there is a file or directory with the specified name.
                False otherwise.

        arguments:

            `filename`: <string>

                The path to a potential file or directory.

-------------------------------------------------------------------------------
                                     *love-love.filesystem.getAppdataDirectory*
|love.filesystem.getAppdataDirectory|

Returns the application data directory (could be the same as getUserDirectory)

Synopses:

    1.  `path` = |love.filesystem.getAppdataDirectory|()

Variants:

    1.  `path` = |love.filesystem.getAppdataDirectory|()

        See function description

        returns:

            `path`: <string>

                The path of the application data directory.

        arguments:

            None

-------------------------------------------------------------------------------
                                       *love-love.filesystem.getDirectoryItems*
|love.filesystem.getDirectoryItems|

Returns a table with the names of files and subdirectories in the specified
path. The table is not sorted in any way; the order is undefined.

If the path passed to the function exists in the game and the save directory,
it will list the files and directories from both places.

Synopses:

    1.  `items` = |love.filesystem.getDirectoryItems|( `dir` )

Variants:

    1.  `items` = |love.filesystem.getDirectoryItems|( `dir` )

        See function description

        returns:

            `items`: <table>

                A sequence with the names of all files and subdirectories as
                strings.

        arguments:

            `dir`: <string>

                The directory.

-------------------------------------------------------------------------------
                                             *love-love.filesystem.getIdentity*
|love.filesystem.getIdentity|

Gets the write directory name for your game. Note that this only returns the
name of the folder to store your files in, not the full location.

Synopses:

    1.  |love.filesystem.getIdentity|( `name` )

Variants:

    1.  |love.filesystem.getIdentity|( `name` )

        See function description

        returns:

            None

        arguments:

            `name`: <string>

                The identity that is used as write directory.

-------------------------------------------------------------------------------
                                         *love-love.filesystem.getLastModified*
|love.filesystem.getLastModified|

Gets the last modification time of a file.

Synopses:

    1.  `modtime`, `errormsg` = |love.filesystem.getLastModified|(
        `filename` )

Variants:

    1.  `modtime`, `errormsg` = |love.filesystem.getLastModified|(
        `filename` )

        See function description

        returns:

            `modtime`: <number>

                The last modification time in seconds since the unix epoch or
                nil on failure.

            `errormsg`: <string>

                The error message on failure.

        arguments:

            `filename`: <string>

                The path and name to a file.

-------------------------------------------------------------------------------
                                        *love-love.filesystem.getRealDirectory*
|love.filesystem.getRealDirectory|

Gets the platform-specific absolute path of the directory containing a
filepath.

This can be used to determine whether a file is inside the save directory or
the game's source .love.

Synopses:

    1.  `realdir` = |love.filesystem.getRealDirectory|( `filepath` )

Variants:

    1.  `realdir` = |love.filesystem.getRealDirectory|( `filepath` )

        See function description

        returns:

            `realdir`: <string>

                The platform-specific full path of the directory containing the
                filepath.

        arguments:

            `filepath`: <string>

                The filepath to get the directory of.

-------------------------------------------------------------------------------
                                          *love-love.filesystem.getRequirePath*
|love.filesystem.getRequirePath|

Gets the filesystem paths that will be searched when require is called.

The paths string returned by this function is a sequence of path templates
separated by semicolons. The argument passed to require will be inserted in
place of any question mark ("?") character in each template (after the dot
characters in the argument passed to require are replaced by directory
separators.)

The paths are relative to the game's source and save directories, as well as
any paths mounted with love.filesystem.mount.

Synopses:

    1.  `paths` = |love.filesystem.getRequirePath|()

Variants:

    1.  `paths` = |love.filesystem.getRequirePath|()

        See function description

        returns:

            `paths`: <string>

                The paths that the require function will check in love's
                filesystem.

        arguments:

            None

-------------------------------------------------------------------------------
                                        *love-love.filesystem.getSaveDirectory*
|love.filesystem.getSaveDirectory|

Gets the full path to the designated save directory. This can be useful if you
want to use the standard io library (or something else) to read or write in the
save directory.

Synopses:

    1.  `path` = |love.filesystem.getSaveDirectory|()

Variants:

    1.  `path` = |love.filesystem.getSaveDirectory|()

        See function description

        returns:

            `path`: <string>

                The absolute path to the save directory.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-love.filesystem.getSize*
|love.filesystem.getSize|

Gets the size in bytes of a file.

Synopses:

    1.  `size`, `errormsg` = |love.filesystem.getSize|( `filename` )

Variants:

    1.  `size`, `errormsg` = |love.filesystem.getSize|( `filename` )

        See function description

        returns:

            `size`: <number>

                The size in bytes of the file, or nil on failure.

            `errormsg`: <string>

                The error message on failure.

        arguments:

            `filename`: <string>

                The path and name to a file.

-------------------------------------------------------------------------------
                                               *love-love.filesystem.getSource*
|love.filesystem.getSource|

Returns the full path to the the .love file or directory. If the game is fused
to the LÖVE executable, then the executable is returned.

Synopses:

    1.  `path` = |love.filesystem.getSource|()

Variants:

    1.  `path` = |love.filesystem.getSource|()

        See function description

        returns:

            `path`: <string>

                The full platform-dependent path of the .love file or
                directory.

        arguments:

            None

-------------------------------------------------------------------------------
                                  *love-love.filesystem.getSourceBaseDirectory*
|love.filesystem.getSourceBaseDirectory|

Returns the full path to the directory containing the .love file. If the game
is fused to the LÖVE executable, then the directory containing the executable
is returned.

If love.filesystem.isFused is true, the path returned by this function can be
passed to love.filesystem.mount, which will make the directory containing the
main game readable by love.filesystem.

Synopses:

    1.  `path` = |love.filesystem.getSourceBaseDirectory|()

Variants:

    1.  `path` = |love.filesystem.getSourceBaseDirectory|()

        See function description

        returns:

            `path`: <string>

                The full platform-dependent path of the directory containing
                the .love file.

        arguments:

            None

-------------------------------------------------------------------------------
                                        *love-love.filesystem.getUserDirectory*
|love.filesystem.getUserDirectory|

Returns the path of the user's directory.

Synopses:

    1.  `path` = |love.filesystem.getUserDirectory|()

Variants:

    1.  `path` = |love.filesystem.getUserDirectory|()

        See function description

        returns:

            `path`: <string>

                The path of the user's directory.

        arguments:

            None

-------------------------------------------------------------------------------
                                     *love-love.filesystem.getWorkingDirectory*
|love.filesystem.getWorkingDirectory|

Gets the current working directory.

Synopses:

    1.  `path` = |love.filesystem.getWorkingDirectory|()

Variants:

    1.  `path` = |love.filesystem.getWorkingDirectory|()

        See function description

        returns:

            `path`: <string>

                The current working directory.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.filesystem.init*
|love.filesystem.init|

Initializes love.filesystem, will be called internally, so should not be used
explicitly.

Synopses:

    1.  |love.filesystem.init|( `appname` )

Variants:

    1.  |love.filesystem.init|( `appname` )

        See function description

        returns:

            None

        arguments:

            `appname`: <string>

                The name of the application binary, typically love.

-------------------------------------------------------------------------------
                                             *love-love.filesystem.isDirectory*
|love.filesystem.isDirectory|

Check whether something is a directory.

Synopses:

    1.  `isDir` = |love.filesystem.isDirectory|( `path` )

Variants:

    1.  `isDir` = |love.filesystem.isDirectory|( `path` )

        See function description

        returns:

            `isDir`: <boolean>

                True if there is a directory with the specified name. False
                otherwise.

        arguments:

            `path`: <string>

                The path to a potential directory.

-------------------------------------------------------------------------------
                                                  *love-love.filesystem.isFile*
|love.filesystem.isFile|

Check whether something is a file.

Synopses:

    1.  `isFile` = |love.filesystem.isFile|( `path` )

Variants:

    1.  `isFile` = |love.filesystem.isFile|( `path` )

        See function description

        returns:

            `isFile`: <boolean>

                True if there is a file with the specified name. False
                otherwise.

        arguments:

            `path`: <string>

                The path to a potential file.

-------------------------------------------------------------------------------
                                                 *love-love.filesystem.isFused*
|love.filesystem.isFused|

Gets whether the game is in fused mode or not.

If a game is in fused mode, its save directory will be directly in the Appdata
directory instead of Appdata/LOVE/. The game will also be able to load C Lua
dynamic libraries which are located in the save directory.

A game is in fused mode if the source .love has been fused to the executable
(see Game Distribution), or if "--fused" has been given as a command-line
argument when starting the game.

Synopses:

    1.  `fused` = |love.filesystem.isFused|()

Variants:

    1.  `fused` = |love.filesystem.isFused|()

        See function description

        returns:

            `fused`: <boolean>

                True if the game is in fused mode, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-love.filesystem.isSymlink*
|love.filesystem.isSymlink|

Gets whether a filepath is actually a symbolic link.

If symbolic links are not enabled (via love.filesystem.setSymlinksEnabled),
this function will always return false.

Synopses:

    1.  `symlink` = |love.filesystem.isSymlink|( `path` )

Variants:

    1.  `symlink` = |love.filesystem.isSymlink|( `path` )

        See function description

        returns:

            `symlink`: <boolean>

                True if the path is a symbolic link, false otherwise.

        arguments:

            `path`: <string>

                The file or directory path to check.

-------------------------------------------------------------------------------
                                                   *love-love.filesystem.lines*
|love.filesystem.lines|

Iterate over the lines in a file.

Synopses:

    1.  `iterator` = |love.filesystem.lines|( `name` )

Variants:

    1.  `iterator` = |love.filesystem.lines|( `name` )

        See function description

        returns:

            `iterator`: <function>

                A function that iterates over all the lines in the file.

        arguments:

            `name`: <string>

                The name (and path) of the file.

-------------------------------------------------------------------------------
                                                    *love-love.filesystem.load*
|love.filesystem.load|

Loads a Lua file (but does not run it).

Synopses:

    1.  `chunk` = |love.filesystem.load|( `name`, `errormsg` )

Variants:

    1.  `chunk` = |love.filesystem.load|( `name`, `errormsg` )

        See function description

        returns:

            `chunk`: <function>

                The loaded chunk.

        arguments:

            `name`: <string>

                The name (and path) of the file.

            `errormsg`: <string>

                The error message if file could not be opened.

-------------------------------------------------------------------------------
                                                   *love-love.filesystem.mount*
|love.filesystem.mount|

Mounts a zip file or folder in the game's save directory for reading.

Synopses:

    1.  `success` = |love.filesystem.mount|( `archive`, `mountpoint` )
    2.  `success` = |love.filesystem.mount|( `archive`, `mountpoint`,
        `appendToPath` )

Variants:

    1.  `success` = |love.filesystem.mount|( `archive`, `mountpoint` )

        See function description

        returns:

            `success`: <boolean>

                True if the archive was successfully mounted, false otherwise.

        arguments:

            `archive`: <string>

                The folder or zip file in the game's save directory to mount.

            `mountpoint`: <string>

                The new path the archive will be mounted to.
    2.  `success` = |love.filesystem.mount|( `archive`, `mountpoint`,
        `appendToPath` )

        See function description

        returns:

            `success`: <boolean>

                True if the archive was successfully mounted, false otherwise.

        arguments:

            `archive`: <string>

                The folder or zip file in the game's save directory to mount.

            `mountpoint`: <string>

                The new path the archive will be mounted to.

            `appendToPath`: <string>

                Whether the archive will be searched when reading a filepath
                before or after already-mounted archives. This includes the
                game's source and save directories.

-------------------------------------------------------------------------------
                                                 *love-love.filesystem.newFile*
|love.filesystem.newFile|

Creates a new File object. It needs to be opened before it can be accessed.

Synopses:

    1.  `file`, `errorstr` = |love.filesystem.newFile|( `filename`,
        `mode` )

Variants:

    1.  `file`, `errorstr` = |love.filesystem.newFile|( `filename`,
        `mode` )

        See function description

        returns:

            `file`: <File>

                The new File object, or nil if an error occurred.

            `errorstr`: <string>

                The error string if an error occurred.

        arguments:

            `filename`: <string>

                The filename of the file to read.

            `mode`: <FileMode>

                The mode to open the file in.

-------------------------------------------------------------------------------
                                             *love-love.filesystem.newFileData*
|love.filesystem.newFileData|

Creates a new FileData object.

Synopses:

    1.  `data` = |love.filesystem.newFileData|( `contents`, `name`,
        `decoder` )
    2.  `data`, `err` = |love.filesystem.newFileData|( `filepath` )

Variants:

    1.  `data` = |love.filesystem.newFileData|( `contents`, `name`,
        `decoder` )

        See function description

        returns:

            `data`: <FileData>

                Your new FileData.

        arguments:

            `contents`: <string>

                The contents of the file.

            `name`: <string>

                The name of the file.

            `decoder`: <FileDecoder>

                The method to use when decoding the contents.
    2.  `data`, `err` = |love.filesystem.newFileData|( `filepath` )

        Creates a new FileData from a file on the storage device.

        returns:

            `data`: <FileData>

                The new FileData, or nil if an error occurred.

            `err`: <string>

                The error string, if an error occurred.

        arguments:

            `filepath`: <string>

                Path to the file.

-------------------------------------------------------------------------------
                                                    *love-love.filesystem.read*
|love.filesystem.read|

Read the contents of a file.

Synopses:

    1.  `contents`, `size` = |love.filesystem.read|( `name`, `bytes` )

Variants:

    1.  `contents`, `size` = |love.filesystem.read|( `name`, `bytes` )

        See function description

        returns:

            `contents`: <string>

                The file contents.

            `size`: <number>

                How many bytes have been read.

        arguments:

            `name`: <string>

                The name (and path) of the file.

            `bytes`: <number>

                How many bytes to read.

-------------------------------------------------------------------------------
                                                  *love-love.filesystem.remove*
|love.filesystem.remove|

Removes a file or directory.

Synopses:

    1.  `success` = |love.filesystem.remove|( `name` )

Variants:

    1.  `success` = |love.filesystem.remove|( `name` )

        See function description

        returns:

            `success`: <boolean>

                True if the file/directory was removed, false otherwise.

        arguments:

            `name`: <string>

                The file or directory to remove.

-------------------------------------------------------------------------------
                                             *love-love.filesystem.setIdentity*
|love.filesystem.setIdentity|

Sets the write directory for your game. Note that you can only set the name of
the folder to store your files in, not the location.

Synopses:

    1.  |love.filesystem.setIdentity|( `name`, `appendToPath` )

Variants:

    1.  |love.filesystem.setIdentity|( `name`, `appendToPath` )

        See function description

        returns:

            None

        arguments:

            `name`: <string>

                The new identity that will be used as write directory.

            `appendToPath`: <boolean>

                Whether the identity directory will be searched when reading a
                filepath before or after the game's source directory and any
                currently mounted archives.

-------------------------------------------------------------------------------
                                          *love-love.filesystem.setRequirePath*
|love.filesystem.setRequirePath|

Sets the filesystem paths that will be searched when require is called.

The paths string given to this function is a sequence of path templates
separated by semicolons. The argument passed to require will be inserted in
place of any question mark ("?") character in each template (after the dot
characters in the argument passed to require are replaced by directory
separators.)

The paths are relative to the game's source and save directories, as well as
any paths mounted with love.filesystem.mount.

Synopses:

    1.  |love.filesystem.setRequirePath|( `paths` )

Variants:

    1.  |love.filesystem.setRequirePath|( `paths` )

        See function description

        returns:

            None

        arguments:

            `paths`: <string>

                The paths that the require function will check in love's
                filesystem.

-------------------------------------------------------------------------------
                                               *love-love.filesystem.setSource*
|love.filesystem.setSource|

Sets the source of the game, where the code is present. This function can only
be called once, and is normally automatically done by LÖVE.

Synopses:

    1.  |love.filesystem.setSource|( `path` )

Variants:

    1.  |love.filesystem.setSource|( `path` )

        See function description

        returns:

            None

        arguments:

            `path`: <string>

                Absolute path to the game's source folder.

-------------------------------------------------------------------------------
                                      *love-love.filesystem.setSymlinksEnabled*
|love.filesystem.setSymlinksEnabled|

Sets whether love.filesystem follows symbolic links. It is enabled by default
in version 0.10.0 and newer, and disabled by default in 0.9.2.

Synopses:

    1.  |love.filesystem.setSymlinksEnabled|( `enable` )

Variants:

    1.  |love.filesystem.setSymlinksEnabled|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: <boolean>

                Whether love.filesystem should follow symbolic links.

-------------------------------------------------------------------------------
                                                 *love-love.filesystem.unmount*
|love.filesystem.unmount|

Unmounts a zip file or folder previously mounted for reading with
love.filesystem.mount.

Synopses:

    1.  `success` = |love.filesystem.unmount|( `archive` )

Variants:

    1.  `success` = |love.filesystem.unmount|( `archive` )

        See function description

        returns:

            `success`: <boolean>

                True if the archive was successfully unmounted, false
                otherwise.

        arguments:

            `archive`: <string>

                The folder or zip file in the game's save directory which is
                currently mounted.

-------------------------------------------------------------------------------
                                                   *love-love.filesystem.write*
|love.filesystem.write|

Write data to a file.

If you are getting the error message "Could not set write directory", try
setting the save directory. This is done either with
love.filesystem.setIdentity or by setting the identity field in love.conf.

Synopses:

    1.  `success`, `message` = |love.filesystem.write|( `name`, `data`,
        `size` )
    2.  `success`, `message` = |love.filesystem.write|( `name`, `data`,
        `size` )

Variants:

    1.  `success`, `message` = |love.filesystem.write|( `name`, `data`,
        `size` )

        See function description

        returns:

            `success`: <boolean>

                If the operation was successful.

            `message`: <string>

                Error message if operation was unsuccessful.

        arguments:

            `name`: <string>

                The name (and path) of the file.

            `data`: <string>

                The string data to write to the file.

            `size`: <number>

                How many bytes to write.
    2.  `success`, `message` = |love.filesystem.write|( `name`, `data`,
        `size` )

        See function description

        returns:

            `success`: <boolean>

                If the operation was successful.

            `message`: <string>

                Error message if operation was unsuccessful.

        arguments:

            `name`: <string>

                The name (and path) of the file.

            `data`: <Data>

                The Data object to write to the file.

            `size`: <number>

                How many bytes to write.
-------------------------------------------------------------------------------
                                                   *love-love.filesystem-types*
The types of |love.filesystem|:

    |File|                                |love-File|
    |FileData|                            |love-FileData|

-------------------------------------------------------------------------------
                                                                    *love-File*
|File|

Represents a file on the filesystem.

                                                       *love-File-constructors*
    constructors:

        |newFile|                         |love-newFile|

                                                         *love-File-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                           *love-File-subtypes*
    subtypes:

        None

                                                          *love-File-functions*
    functions:

        |close|                           |love-File:close|
        |flush|                           |love-File:flush|
        |getBuffer|                       |love-File:getBuffer|
        |getFilename|                     |love-File:getFilename|
        |getMode|                         |love-File:getMode|
        |getSize|                         |love-File:getSize|
        |isEOF|                           |love-File:isEOF|
        |isOpen|                          |love-File:isOpen|
        |lines|                           |love-File:lines|
        |open|                            |love-File:open|
        |read|                            |love-File:read|
        |seek|                            |love-File:seek|
        |setBuffer|                       |love-File:setBuffer|
        |tell|                            |love-File:tell|
        |write|                           |love-File:write|

-------------------------------------------------------------------------------
                                                              *love-File:close*
|File:close|

Closes a file.

Synopses:

    1.  `success` = |File:close|()

Variants:

    1.  `success` = |File:close|()

        See function description

        returns:

            `success`: <boolean>

                Whether closing was successful.

        arguments:

            None

-------------------------------------------------------------------------------
                                                              *love-File:flush*
|File:flush|

Flushes any buffered written data in the file to the disk.

Synopses:

    1.  `success`, `err` = |File:flush|()

Variants:

    1.  `success`, `err` = |File:flush|()

        See function description

        returns:

            `success`: <boolean>

                Whether the file successfully flushed any buffered data to the
                disk.

            `err`: <string>

                The error string, if an error occurred and the file could not
                be flushed.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-File:getBuffer*
|File:getBuffer|

Gets the buffer mode of a file.

Synopses:

    1.  `mode`, `size` = |File:getBuffer|()

Variants:

    1.  `mode`, `size` = |File:getBuffer|()

        See function description

        returns:

            `mode`: <BufferMode>

                The current buffer mode of the file.

            `size`: <number>

                The maximum size in bytes of the file's buffer.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-File:getFilename*
|File:getFilename|

Gets the filename that the File object was created with. If the file object
originated from the love.filedropped callback, the filename will be the full
platform-dependent file path.

Synopses:

    1.  `filename` = |File:getFilename|()

Variants:

    1.  `filename` = |File:getFilename|()

        See function description

        returns:

            `filename`: <string>

                The filename of the File.

        arguments:

            None

-------------------------------------------------------------------------------
                                                            *love-File:getMode*
|File:getMode|

Gets the FileMode the file has been opened with.

Synopses:

    1.  `mode` = |File:getMode|()

Variants:

    1.  `mode` = |File:getMode|()

        See function description

        returns:

            `mode`: <FileMode>

                The mode this file has been opened with.

        arguments:

            None

-------------------------------------------------------------------------------
                                                            *love-File:getSize*
|File:getSize|

Returns the file size.

Synopses:

    1.  `size` = |File:getSize|()

Variants:

    1.  `size` = |File:getSize|()

        See function description

        returns:

            `size`: <number>

                The file size

        arguments:

            None

-------------------------------------------------------------------------------
                                                              *love-File:isEOF*
|File:isEOF|

Gets whether end-of-file has been reached.

Synopses:

    1.  `eof` = |File:isEOF|()

Variants:

    1.  `eof` = |File:isEOF|()

        See function description

        returns:

            `eof`: <boolean>

                Whether EOF has been reached.

        arguments:

            None

-------------------------------------------------------------------------------
                                                             *love-File:isOpen*
|File:isOpen|

Gets whether the file is open.

Synopses:

    1.  `open` = |File:isOpen|()

Variants:

    1.  `open` = |File:isOpen|()

        See function description

        returns:

            `open`: <boolean>

                True if the file is currently open, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                              *love-File:lines*
|File:lines|

Iterate over all the lines in a file

Synopses:

    1.  `iterator` = |File:lines|()

Variants:

    1.  `iterator` = |File:lines|()

        See function description

        returns:

            `iterator`: <function>

                The iterator (can be used in for loops)

        arguments:

            None

-------------------------------------------------------------------------------
                                                               *love-File:open*
|File:open|

Open the file for write, read or append.

If you are getting the error message "Could not set write directory", try
setting the save directory. This is done either with
love.filesystem.setIdentity or by setting the identity field in love.conf.

Synopses:

    1.  `success` = |File:open|( `mode` )

Variants:

    1.  `success` = |File:open|( `mode` )

        See function description

        returns:

            `success`: <boolean>

                True on success, false otherwise.

        arguments:

            `mode`: <FileMode>

                The mode to open the file in.

-------------------------------------------------------------------------------
                                                               *love-File:read*
|File:read|

Read a number of bytes from a file.

Synopses:

    1.  `contents`, `size` = |File:read|( `bytes` )

Variants:

    1.  `contents`, `size` = |File:read|( `bytes` )

        See function description

        returns:

            `contents`: <string>

                The contents of the read bytes.

            `size`: <number>

                How many bytes have been read.

        arguments:

            `bytes`: <number>

                The number of bytes to read

-------------------------------------------------------------------------------
                                                               *love-File:seek*
|File:seek|

Seek to a position in a file.

Synopses:

    1.  `success` = |File:seek|( `position` )

Variants:

    1.  `success` = |File:seek|( `position` )

        See function description

        returns:

            `success`: <boolean>

                Whether the operation was successful.

        arguments:

            `position`: <number>

                The position to seek to.

-------------------------------------------------------------------------------
                                                          *love-File:setBuffer*
|File:setBuffer|

Sets the buffer mode for a file opened for writing or appending. Files with
buffering enabled will not write data to the disk until the buffer size limit
is reached, depending on the buffer mode.

Synopses:

    1.  `success`, `errorstr` = |File:setBuffer|( `mode`, `size` )

Variants:

    1.  `success`, `errorstr` = |File:setBuffer|( `mode`, `size` )

        See function description

        returns:

            `success`: <boolean>

                Whether the buffer mode was successfully set.

            `errorstr`: <string>

                The error string, if the buffer mode could not be set and an
                error occurred.

        arguments:

            `mode`: <BufferMode>

                The buffer mode to use.

            `size`: <number>

                The maximum size in bytes of the file's buffer.

-------------------------------------------------------------------------------
                                                               *love-File:tell*
|File:tell|

Returns the position in the file.

Synopses:

    1.  `pos` = |File:tell|()

Variants:

    1.  `pos` = |File:tell|()

        See function description

        returns:

            `pos`: <number>

                The current position.

        arguments:

            None

-------------------------------------------------------------------------------
                                                              *love-File:write*
|File:write|

Write data to a file.

Synopses:

    1.  `success` = |File:write|( `data`, `size` )

Variants:

    1.  `success` = |File:write|( `data`, `size` )

        See function description

        returns:

            `success`: <boolean>

                Whether the operation was successful.

        arguments:

            `data`: <string>

                The data to write.

            `size`: <number>

                How many bytes to write.

-------------------------------------------------------------------------------
                                                                *love-FileData*
|FileData|

Data representing the contents of a file.

                                                   *love-FileData-constructors*
    constructors:

        |newFileData|                     |love-newFileData|

                                                     *love-FileData-supertypes*
    supertypes:

        |Data|                            |love-Data|
        |Object|                          |love-Object|

                                                       *love-FileData-subtypes*
    subtypes:

        None

                                                      *love-FileData-functions*
    functions:

        |getExtension|                    |love-FileData:getExtension|
        |getFilename|                     |love-FileData:getFilename|

-------------------------------------------------------------------------------
                                                   *love-FileData:getExtension*
|FileData:getExtension|

Gets the extension of the FileData.

Synopses:

    1.  `ext` = |FileData:getExtension|()

Variants:

    1.  `ext` = |FileData:getExtension|()

        See function description

        returns:

            `ext`: <string>

                The extension of the file the FileData represents.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-FileData:getFilename*
|FileData:getFilename|

Gets the filename of the FileData.

Synopses:

    1.  `name` = |FileData:getFilename|()

Variants:

    1.  `name` = |FileData:getFilename|()

        See function description

        returns:

            `name`: <string>

                The name of the file the FileData represents.

        arguments:

            None

===============================================================================
                                                           *love-love.graphics*
|love.graphics|

The primary responsibility for the love.graphics module is the drawing of
lines, shapes, text, Images and other Drawable objects onto the screen. Its
secondary responsibilities include loading external files (including Images and
Fonts) into memory, creating specialized objects (such as ParticleSystems or
Canvases) and managing screen geometry.

LÖVE's coordinate system is rooted in the upper-left corner of the screen,
which is at location (0, 0). The x axis is horizontal: larger values are
further to the right. The y axis is vertical: larger values are further towards
the bottom.

In many cases, you draw images or shapes in terms of their upper-left corner.

Many of the functions are used to manipulate the graphics coordinate system,
which is essentially the way coordinates are mapped to the display. You can
change the position, scale, and even rotation in this way.

    |callbacks|                           |love-love.graphics-callbacks|
    |enums|                               |love-love.graphics-enums|
    |functions|                           |love-love.graphics-functions|
    |types|                               |love-love.graphics-types|

-------------------------------------------------------------------------------
                                                 *love-love.graphics-callbacks*
The callbacks of |love.graphics|:

    None

-------------------------------------------------------------------------------
                                                     *love-love.graphics-enums*
The enums of |love.graphics|:

    |AlignMode|                           |love-AlignMode|
    |ArcType|                             |love-ArcType|
    |AreaSpreadDistribution|              |love-AreaSpreadDistribution|
    |BlendAlphaMode|                      |love-BlendAlphaMode|
    |BlendMode|                           |love-BlendMode|
    |CanvasFormat|                        |love-CanvasFormat|
    |CompareMode|                         |love-CompareMode|
    |DrawMode|                            |love-DrawMode|
    |FilterMode|                          |love-FilterMode|
    |GraphicsFeature|                     |love-GraphicsFeature|
    |GraphicsLimit|                       |love-GraphicsLimit|
    |LineJoin|                            |love-LineJoin|
    |LineStyle|                           |love-LineStyle|
    |MeshDrawMode|                        |love-MeshDrawMode|
    |ParticleInsertMode|                  |love-ParticleInsertMode|
    |SpriteBatchUsage|                    |love-SpriteBatchUsage|
    |StackType|                           |love-StackType|
    |StencilAction|                       |love-StencilAction|
    |WrapMode|                            |love-WrapMode|

-------------------------------------------------------------------------------
                                                               *love-AlignMode*
|AlignMode|

Text alignment.

    constants:

        `center`: <string>

            Align text center.

        `left`: <string>

            Align text left.

        `right`: <string>

            Align text right.

        `justify`: <string>

            Align text both left and right.

-------------------------------------------------------------------------------
                                                                 *love-ArcType*
|ArcType|

Different types of arcs that can be drawn.

    constants:

        `pie`: <string>

            The arc is drawn like a slice of pie, with the arc circle connected
            to the center at its end-points.

        `open`: <string>

            The arc circle's two end-points are unconnected when the arc is
            drawn as a line. Behaves like the "closed" arc type when the arc is
            drawn in filled mode.

        `closed`: <string>

            The arc circle's two end-points are connected to each other.

-------------------------------------------------------------------------------
                                                  *love-AreaSpreadDistribution*
|AreaSpreadDistribution|

Types of particle area spread distribution.

    constants:

        `uniform`: <string>

            Uniform distribution.

        `normal`: <string>

            Normal (gaussian) distribution.

        `ellipse`: <string>

            Uniform distribution in an ellipse.

        `none`: <string>

            No distribution - area spread is disabled.

-------------------------------------------------------------------------------
                                                          *love-BlendAlphaMode*
|BlendAlphaMode|

Different ways alpha affects color blending. See BlendMode and the BlendMode
Formulas for additional notes.

    constants:

        `alphamultiply`: <string>

            The RGB values of what's drawn are multiplied by the alpha values
            of those colors during blending. This is the default alpha mode.

        `premultiplied`: <string>

            The RGB values of what's drawn are not multiplied by the alpha
            values of those colors during blending. For most blend modes to
            work correctly with this alpha mode, the colors of a drawn object
            need to have had their RGB values multiplied by their alpha values
            at some point previously ("premultiplied alpha").

-------------------------------------------------------------------------------
                                                               *love-BlendMode*
|BlendMode|

Different ways to do color blending. See BlendAlphaMode and the BlendMode
Formulas for additional notes.

    constants:

        `alpha`: <string>

            Alpha blending (normal). The alpha of what's drawn determines its
            opacity.

        `replace`: <string>

            The colors of what's drawn completely replace what was on the
            screen, with no additional blending. The BlendAlphaMode specified
            in love.graphics.setBlendMode still affects what happens.

        `screen`: <string>

            "Screen" blending.

        `add`: <string>

            The pixel colors of what's drawn are added to the pixel colors
            already on the screen. The alpha of the screen is not modified.

        `subtract`: <string>

            The pixel colors of what's drawn are subtracted from the pixel
            colors already on the screen. The alpha of the screen is not
            modified.

        `multiply`: <string>

            The pixel colors of what's drawn are multiplied with the pixel
            colors already on the screen (darkening them). The alpha of drawn
            objects is multiplied with the alpha of the screen rather than
            determining how much the colors on the screen are affected, even
            when the "alphamultiply" BlendAlphaMode is used.

        `lighten`: <string>

            The pixel colors of what's drawn are compared to the existing pixel
            colors, and the larger of the two values for each color component
            is used. Only works when the "premultiplied" BlendAlphaMode is used
            in love.graphics.setBlendMode.

        `darken`: <string>

            The pixel colors of what's drawn are compared to the existing pixel
            colors, and the smaller of the two values for each color component
            is used. Only works when the "premultiplied" BlendAlphaMode is used
            in love.graphics.setBlendMode.

-------------------------------------------------------------------------------
                                                            *love-CanvasFormat*
|CanvasFormat|

Canvas formats.

    constants:

        `normal`: <string>

            The default Canvas format - usually an alias for the rgba8 format,
            or the srgb format if gamma-correct rendering is enabled in LÖVE
            0.10.0 and newer.

        `hdr`: <string>

            A format suitable for high dynamic range content - an alias for the
            rgba16f format, normally.

        `rgba8`: <string>

            8 bits per channel (32 bpp) RGBA. Color channel values range from
            0-255 (0-1 in shaders).

        `rgba4`: <string>

            4 bits per channel (16 bpp) RGBA.

        `rgb5a1`: <string>

            RGB with 5 bits each, and a 1-bit alpha channel (16 bpp).

        `rgb565`: <string>

            RGB with 5, 6, and 5 bits each, respectively (16 bpp). There is no
            alpha channel in this format.

        `rgb10a2`: <string>

            RGB with 10 bits per channel, and a 2-bit alpha channel (32 bpp).

        `rgba16f`: <string>

            Floating point RGBA with 16 bits per channel (64 bpp). Color values
            can range from [-65504, +65504].

        `rgba32f`: <string>

            Floating point RGBA with 32 bits per channel (128 bpp).

        `rg11b10f`: <string>

            Floating point RGB with 11 bits in the red and green channels, and
            10 bits in the blue channel (32 bpp). There is no alpha channel.
            Color values can range from [0, +65024].

        `srgb`: <string>

            The same as rgba8, but the Canvas is interpreted as being in the
            sRGB color space. Everything drawn to the Canvas will be converted
            from linear RGB to sRGB. When the Canvas is drawn (or used in a
            shader), it will be decoded from sRGB to linear RGB. This reduces
            color banding when doing gamma-correct rendering, since sRGB
            encoding has more precision than linear RGB for darker colors.

        `r8`: <string>

            Single-channel (red component) format (8 bpp).

        `rg8`: <string>

            Two channels (red and green components) with 8 bits per channel (16
            bpp).

        `r16f`: <string>

            Floating point single-channel format (16 bpp). Color values can
            range from [-65504, +65504].

        `rg16f`: <string>

            Floating point two-channel format with 16 bits per channel (32
            bpp). Color values can range from [-65504, +65504].

        `r32f`: <string>

            Floating point single-channel format (32 bpp).

        `rg32f`: <string>

            Floating point two-channel format with 32 bits per channel (64
            bpp).

-------------------------------------------------------------------------------
                                                             *love-CompareMode*
|CompareMode|

Different types of per-pixel stencil test comparisons. The pixels of an object
will be drawn if the comparison succeeds, for each pixel that the object
touches.

    constants:

        `equal`: <string>

            The stencil value of the pixel must be equal to the supplied value.

        `notequal`: <string>

            The stencil value of the pixel must not be equal to the supplied
            value.

        `less`: <string>

            The stencil value of the pixel must be less than the supplied
            value.

        `lequal`: <string>

            The stencil value of the pixel must be less than or equal to the
            supplied value.

        `gequal`: <string>

            The stencil value of the pixel must be greater than or equal to the
            supplied value.

        `greater`: <string>

            The stencil value of the pixel must be greater than the supplied
            value.

-------------------------------------------------------------------------------
                                                                *love-DrawMode*
|DrawMode|

Controls whether shapes are drawn as an outline, or filled.

    constants:

        `fill`: <string>

            Draw filled shape.

        `line`: <string>

            Draw outlined shape.

-------------------------------------------------------------------------------
                                                              *love-FilterMode*
|FilterMode|

How the image is filtered when scaling.

    constants:

        `linear`: <string>

            Scale image with linear interpolation.

        `nearest`: <string>

            Scale image with nearest neighbor interpolation.

-------------------------------------------------------------------------------
                                                         *love-GraphicsFeature*
|GraphicsFeature|

Graphics features that can be checked for with love.graphics.getSupported.

    constants:

        `clampzero`: <string>

            Whether the "clampzero" WrapMode is supported.

        `lighten`: <string>

            Whether the "lighten" and "darken" BlendModes are supported.

        `multicanvasformats`: <string>

            Whether multiple Canvases with different formats can be used in the
            same love.graphics.setCanvas call.

-------------------------------------------------------------------------------
                                                           *love-GraphicsLimit*
|GraphicsLimit|

Types of system-dependent graphics limits checked for using
love.graphics.getSystemLimits.

    constants:

        `pointsize`: <string>

            The maximum size of points.

        `texturesize`: <string>

            The maximum width or height of Images and Canvases.

        `multicanvas`: <string>

            The maximum number of simultaneously active canvases (via
            love.graphics.setCanvas).

        `canvasmsaa`: <string>

            The maximum number of antialiasing samples for a Canvas.

-------------------------------------------------------------------------------
                                                                *love-LineJoin*
|LineJoin|

Line join style.

    constants:

        `miter`: <string>

            The ends of the line segments beveled in an angle so that they join
            seamlessly.

        `bevel`: <string>

            No cap applied to the ends of the line segments.

        `none`: <string>

            Flattens the point where line segments join together.

-------------------------------------------------------------------------------
                                                               *love-LineStyle*
|LineStyle|

The styles in which lines are drawn.

    constants:

        `rough`: <string>

            Draw rough lines.

        `smooth`: <string>

            Draw smooth lines.

-------------------------------------------------------------------------------
                                                            *love-MeshDrawMode*
|MeshDrawMode|

How a Mesh's vertices are used when drawing.

    constants:

        `fan`: <string>

            The vertices create a "fan" shape with the first vertex acting as
            the hub point. Can be easily used to draw simple convex polygons.

        `strip`: <string>

            The vertices create a series of connected triangles using vertices
            1, 2, 3, then 3, 2, 4 (note the order), then 3, 4, 5 and so on.

        `triangles`: <string>

            The vertices create unconnected triangles.

        `points`: <string>

            The vertices are drawn as unconnected points (see
            love.graphics.setPointSize.)

-------------------------------------------------------------------------------
                                                      *love-ParticleInsertMode*
|ParticleInsertMode|

How newly created particles are added to the ParticleSystem.

    constants:

        `top`: <string>

            Particles are inserted at the top of the ParticleSystem's list of
            particles.

        `bottom`: <string>

            Particles are inserted at the bottom of the ParticleSystem's list
            of particles.

        `random`: <string>

            Particles are inserted at random positions in the ParticleSystem's
            list of particles.

-------------------------------------------------------------------------------
                                                        *love-SpriteBatchUsage*
|SpriteBatchUsage|

Usage hints for SpriteBatches and Meshes to optimize data storage and access.

    constants:

        `dynamic`: <string>

            The object's data will change occasionally during its lifetime.

        `static`: <string>

            The object will not be modified after initial sprites or vertices
            are added.

        `stream`: <string>

            The object data will always change between draws.

-------------------------------------------------------------------------------
                                                               *love-StackType*
|StackType|

Graphics state stack types used with love.graphics.push.

    constants:

        `transform`: <string>

            The transformation stack (love.graphics.translate,
            love.graphics.rotate, etc.)

        `all`: <string>

            All love.graphics state, including transform state.

-------------------------------------------------------------------------------
                                                           *love-StencilAction*
|StencilAction|

How a stencil function modifies the stencil values of pixels it touches.

    constants:

        `replace`: <string>

            The stencil value of a pixel will be replaced by the value
            specified in love.graphics.stencil, if any object touches the
            pixel.

        `increment`: <string>

            The stencil value of a pixel will be incremented by 1 for each
            object that touches the pixel. If the stencil value reaches 255 it
            will stay at 255.

        `decrement`: <string>

            The stencil value of a pixel will be decremented by 1 for each
            object that touches the pixel. If the stencil value reaches 0 it
            will stay at 0.

        `incrementwrap`: <string>

            The stencil value of a pixel will be incremented by 1 for each
            object that touches the pixel. If a stencil value of 255 is
            incremented it will be set to 0.

        `decrementwrap`: <string>

            The stencil value of a pixel will be decremented by 1 for each
            object that touches the pixel. If the stencil value of 0 is
            decremented it will be set to 255.

        `invert`: <string>

            The stencil value of a pixel will be bitwise-inverted for each
            object that touches the pixel. If a stencil value of 0 is inverted
            it will become 255.

-------------------------------------------------------------------------------
                                                                *love-WrapMode*
|WrapMode|

How the image wraps inside a Quad with a larger quad size than image size. This
also affects how Meshes with texture coordinates which are outside the range of
[0, 1] are drawn, and the color returned by the Texel Shader function when
using it to sample from texture coordinates outside of the range of [0, 1].

    constants:

        `clamp`: <string>

            How the image wraps inside a Quad with a larger quad size than
            image size. This also affects how Meshes with texture coordinates
            which are outside the range of [0, 1] are drawn, and the color
            returned by the Texel Shader function when using it to sample from
            texture coordinates outside of the range of [0, 1].

        `repeat`: <string>

            Repeat the image. Fills the whole available extent.

        `mirroredrepeat`: <string>

            Repeat the texture, flipping it each time it repeats. May produce
            better visual results than the repeat mode when the texture doesn't
            seamlessly tile.

        `clampzero`: <string>

            Clamp the texture. Fills the area outside the texture's normal
            range with transparent black (or opaque black for textures with no
            alpha channel.)

-------------------------------------------------------------------------------
                                                 *love-love.graphics-functions*
The functions of |love.graphics|:

    |arc|                                 |love-love.graphics.arc|
    |circle|                              |love-love.graphics.circle|
    |clear|                               |love-love.graphics.clear|
    |discard|                             |love-love.graphics.discard|
    |draw|                                |love-love.graphics.draw|
    |ellipse|                             |love-love.graphics.ellipse|
    |getBackgroundColor|                  |love-love.graphics.getBackgroundCo-|
    |getBlendMode|                        |love-love.graphics.getBlendMode|
    |getCanvas|                           |love-love.graphics.getCanvas|
    |getCanvasFormats|                    |love-love.graphics.getCanvasFormats|
    |getColor|                            |love-love.graphics.getColor|
    |getColorMask|                        |love-love.graphics.getColorMask|
    |getCompressedImageFormats|           |love-love.graphics.getCompressedIm-|
    |getDefaultFilter|                    |love-love.graphics.getDefaultFilter|
    |getDimensions|                       |love-love.graphics.getDimensions|
    |getFont|                             |love-love.graphics.getFont|
    |getHeight|                           |love-love.graphics.getHeight|
    |getLineJoin|                         |love-love.graphics.getLineJoin|
    |getLineStyle|                        |love-love.graphics.getLineStyle|
    |getLineWidth|                        |love-love.graphics.getLineWidth|
    |getShader|                           |love-love.graphics.getShader|
    |getStats|                            |love-love.graphics.getStats|
    |getStencilTest|                      |love-love.graphics.getStencilTest|
    |getSupported|                        |love-love.graphics.getSupported|
    |getSystemLimits|                     |love-love.graphics.getSystemLimits|
    |getPointSize|                        |love-love.graphics.getPointSize|
    |getRendererInfo|                     |love-love.graphics.getRendererInfo|
    |getScissor|                          |love-love.graphics.getScissor|
    |getWidth|                            |love-love.graphics.getWidth|
    |intersectScissor|                    |love-love.graphics.intersectScissor|
    |isGammaCorrect|                      |love-love.graphics.isGammaCorrect|
    |isWireframe|                         |love-love.graphics.isWireframe|
    |line|                                |love-love.graphics.line|
    |newCanvas|                           |love-love.graphics.newCanvas|
    |newFont|                             |love-love.graphics.newFont|
    |newMesh|                             |love-love.graphics.newMesh|
    |newImage|                            |love-love.graphics.newImage|
    |newImageFont|                        |love-love.graphics.newImageFont|
    |newParticleSystem|                   |love-love.graphics.newParticleSyst-|
    |newShader|                           |love-love.graphics.newShader|
    |newText|                             |love-love.graphics.newText|
    |newQuad|                             |love-love.graphics.newQuad|
    |newScreenshot|                       |love-love.graphics.newScreenshot|
    |newSpriteBatch|                      |love-love.graphics.newSpriteBatch|
    |newVideo|                            |love-love.graphics.newVideo|
    |origin|                              |love-love.graphics.origin|
    |points|                              |love-love.graphics.points|
    |polygon|                             |love-love.graphics.polygon|
    |pop|                                 |love-love.graphics.pop|
    |present|                             |love-love.graphics.present|
    |print|                               |love-love.graphics.print|
    |printf|                              |love-love.graphics.printf|
    |push|                                |love-love.graphics.push|
    |rectangle|                           |love-love.graphics.rectangle|
    |reset|                               |love-love.graphics.reset|
    |rotate|                              |love-love.graphics.rotate|
    |scale|                               |love-love.graphics.scale|
    |setBackgroundColor|                  |love-love.graphics.setBackgroundCo-|
    |setBlendMode|                        |love-love.graphics.setBlendMode|
    |setCanvas|                           |love-love.graphics.setCanvas|
    |setColor|                            |love-love.graphics.setColor|
    |setColorMask|                        |love-love.graphics.setColorMask|
    |setDefaultFilter|                    |love-love.graphics.setDefaultFilter|
    |setFont|                             |love-love.graphics.setFont|
    |setLineJoin|                         |love-love.graphics.setLineJoin|
    |setLineStyle|                        |love-love.graphics.setLineStyle|
    |setLineWidth|                        |love-love.graphics.setLineWidth|
    |setNewFont|                          |love-love.graphics.setNewFont|
    |setShader|                           |love-love.graphics.setShader|
    |setPointSize|                        |love-love.graphics.setPointSize|
    |setScissor|                          |love-love.graphics.setScissor|
    |setStencilTest|                      |love-love.graphics.setStencilTest|
    |setWireframe|                        |love-love.graphics.setWireframe|
    |shear|                               |love-love.graphics.shear|
    |stencil|                             |love-love.graphics.stencil|
    |translate|                           |love-love.graphics.translate|

-------------------------------------------------------------------------------
                                                       *love-love.graphics.arc*
|love.graphics.arc|

Draws a filled or unfilled arc at position (x, y). The arc is drawn from angle1
to angle2 in radians. The segments parameter determines how many segments are
used to draw the arc. The more segments, the smoother the edge.

Synopses:

    1.  |love.graphics.arc|( `drawmode`, `x`, `y`, `radius`, `angle1`,
        `angle2`, `segments` )
    2.  |love.graphics.arc|( `drawmode`, `arctype`, `x`, `y`, `radius`,
        `angle1`, `angle2`, `segments` )

Variants:

    1.  |love.graphics.arc|( `drawmode`, `x`, `y`, `radius`, `angle1`,
        `angle2`, `segments` )

        Draws an arc using the "pie" ArcType.

        returns:

            None

        arguments:

            `drawmode`: <DrawMode>

                How to draw the arc.

            `x`: <number>

                The position of the center along x-axis.

            `y`: <number>

                The position of the center along y-axis.

            `radius`: <number>

                Radius of the arc.

            `angle1`: <number>

                The angle at which the arc begins.

            `angle2`: <number>

                The angle at which the arc terminates.

            `segments`: <number>

                The number of segments used for drawing the arc.
    2.  |love.graphics.arc|( `drawmode`, `arctype`, `x`, `y`, `radius`,
        `angle1`, `angle2`, `segments` )

        See function description

        returns:

            None

        arguments:

            `drawmode`: <DrawMode>

                How to draw the arc.

            `arctype`: <ArcType>

                The type of arc to draw.

            `x`: <number>

                The position of the center along x-axis.

            `y`: <number>

                The position of the center along y-axis.

            `radius`: <number>

                Radius of the arc.

            `angle1`: <number>

                The angle at which the arc begins.

            `angle2`: <number>

                The angle at which the arc terminates.

            `segments`: <number>

                The number of segments used for drawing the arc.

-------------------------------------------------------------------------------
                                                    *love-love.graphics.circle*
|love.graphics.circle|

Draws a circle.

Synopses:

    1.  |love.graphics.circle|( `mode`, `x`, `y`, `radius` )
    2.  |love.graphics.circle|( `mode`, `x`, `y`, `radius`, `segments`
        )

Variants:

    1.  |love.graphics.circle|( `mode`, `x`, `y`, `radius` )

        See function description

        returns:

            None

        arguments:

            `mode`: <DrawMode>

                How to draw the circle.

            `x`: <number>

                The position of the center along x-axis.

            `y`: <number>

                The position of the center along y-axis.

            `radius`: <number>

                The radius of the circle.
    2.  |love.graphics.circle|( `mode`, `x`, `y`, `radius`, `segments`
        )

        See function description

        returns:

            None

        arguments:

            `mode`: <DrawMode>

                How to draw the circle.

            `x`: <number>

                The position of the center along x-axis.

            `y`: <number>

                The position of the center along y-axis.

            `radius`: <number>

                The radius of the circle.

            `segments`: <number>

                The number of segments used for drawing the circle. Note: The
                default variable for the segments parameter varies between
                different versions of LÖVE.

-------------------------------------------------------------------------------
                                                     *love-love.graphics.clear*
|love.graphics.clear|

Clears the screen to the background color in LÖVE 0.9.2 and earlier, or to the
specified color in 0.10.0 and newer.

This function is called automatically before love.draw in the default love.run
function. See the example in love.run for a typical use of this function.

Note that the scissor area bounds the cleared region.

Synopses:

    1.  |love.graphics.clear|()
    2.  |love.graphics.clear|( `r`, `g`, `b`, `a` )
    3.  |love.graphics.clear|( `color`, `...` )

Variants:

    1.  |love.graphics.clear|()

        Clears the screen to the background color in 0.9.2 and earlier, or to transparent black (0, 0, 0, 0) in LÖVE 0.10.0 and newer.

        returns:

            None

        arguments:

            None
    2.  |love.graphics.clear|( `r`, `g`, `b`, `a` )

        Clears the screen or active Canvas to the specified color.

        returns:

            None

        arguments:

            `r`: <number>

                The red channel of the color to clear the screen to.

            `g`: <number>

                The green channel of the color to clear the screen to.

            `b`: <number>

                The blue channel of the color to clear the screen to.

            `a`: <number>

                The alpha channel of the color to clear the screen to.
    3.  |love.graphics.clear|( `color`, `...` )

        Clears multiple active Canvases to different colors, if multiple Canvases are active at once via love.graphics.setCanvas.

        returns:

            None

        arguments:

            `color`: <table>

                A table in the form of {r, g, b, a} containing the color to
                clear the first active Canvas to.

            `...`: <table>

                Additional tables for each active Canvas.

-------------------------------------------------------------------------------
                                                   *love-love.graphics.discard*
|love.graphics.discard|

Discards (trashes) the contents of the screen or active Canvas. This is a
performance optimization function with niche use cases.

If the active Canvas has just been changed and the "replace" BlendMode is about
to be used to draw something which covers the entire screen, calling
love.graphics.discard rather than calling love.graphics.clear or doing nothing
may improve performance on mobile devices.

On some desktop systems this function may do nothing.

Synopses:

    1.  |love.graphics.discard|( `discardcolor`, `discardstencil` )
    2.  |love.graphics.discard|( `discardcolors`, `discardstencil` )

Variants:

    1.  |love.graphics.discard|( `discardcolor`, `discardstencil` )

        See function description

        returns:

            None

        arguments:

            `discardcolor`: <boolean>

                Whether to discard the texture(s) of the active Canvas(es) (the
                contents of the screen if no Canvas is active).

            `discardstencil`: <boolean>

                Whether to discard the contents of the stencil buffer of the
                screen / active Canvas.
    2.  |love.graphics.discard|( `discardcolors`, `discardstencil` )

        See function description

        returns:

            None

        arguments:

            `discardcolors`: <table>

                An array containing boolean values indicating whether to
                discard the texture of each active Canvas, when multiple
                simultaneous Canvases are active.

            `discardstencil`: <boolean>

                Whether to discard the contents of the stencil buffer of the
                screen / active Canvas.

-------------------------------------------------------------------------------
                                                      *love-love.graphics.draw*
|love.graphics.draw|

Draws a Drawable object (an Image, Canvas, SpriteBatch, ParticleSystem, Mesh,
or Video) on the screen with optional rotation, scaling and shearing.

Objects are drawn relative to their local coordinate system. The origin is by
default located at the top left corner of Image and Canvas. All scaling,
shearing, and rotation arguments transform the object relative to that point.
Also, the position of the origin can be specified on the screen coordinate
system.

It's possible to rotate an object about its center by offsetting the origin to
the center. Angles must be given in radians for rotation. One can also use a
negative scaling factor to flip about its centerline.

Note that the offsets are applied before rotation, scaling, or shearing;
scaling and shearing are applied before rotation.

The right and bottom edges of the object are shifted at an angle defined by the
shearing factors.

Synopses:

    1.  |love.graphics.draw|( `drawable`, `x`, `y`, `r`, `sx`, `sy`,
        `ox`, `oy`, `kx`, `ky` )
    2.  |love.graphics.draw|( `texture`, `quad`, `x`, `y`, `r`, `sx`,
        `sy`, `ox`, `oy`, `kx`, `ky` )

Variants:

    1.  |love.graphics.draw|( `drawable`, `x`, `y`, `r`, `sx`, `sy`,
        `ox`, `oy`, `kx`, `ky` )

        See function description

        returns:

            None

        arguments:

            `drawable`: <Drawable>

                A drawable object.

            `x`: <number>

                The position to draw the object (x-axis).

            `y`: <number>

                The position to draw the object (y-axis).

            `r`: <number>

                Orientation (radians).

            `sx`: <number>

                Scale factor (x-axis). Can be negative.

            `sy`: <number>

                Scale factor (y-axis). Can be negative.

            `ox`: <number>

                Origin offset (x-axis). (A value of 20 would effectively move
                your drawable object 20 pixels to the left.)

            `oy`: <number>

                Origin offset (y-axis). (A value of 20 would effectively move
                your drawable object 20 pixels up.)

            `kx`: <number>

                Shearing factor (x-axis).

            `ky`: <number>

                Shearing factor (y-axis).
    2.  |love.graphics.draw|( `texture`, `quad`, `x`, `y`, `r`, `sx`,
        `sy`, `ox`, `oy`, `kx`, `ky` )

        See function description

        returns:

            None

        arguments:

            `texture`: <Texture>

                A Texture (Image or Canvas) to texture the Quad with.

            `quad`: <Quad>

                The Quad to draw on screen.

            `x`: <number>

                The position to draw the object (x-axis).

            `y`: <number>

                The position to draw the object (y-axis).

            `r`: <number>

                Orientation (radians).

            `sx`: <number>

                Scale factor (x-axis). Can be negative.

            `sy`: <number>

                Scale factor (y-axis). Can be negative.

            `ox`: <number>

                Origin offset (x-axis).

            `oy`: <number>

                Origin offset (y-axis)

            `kx`: <number>

                Shearing factor (x-axis).

            `ky`: <number>

                Shearing factor (y-axis).

-------------------------------------------------------------------------------
                                                   *love-love.graphics.ellipse*
|love.graphics.ellipse|

Draws an ellipse.

Synopses:

    1.  |love.graphics.ellipse|( `mode`, `x`, `y`, `radiusx`, `radiusy`
        )
    2.  |love.graphics.ellipse|( `mode`, `x`, `y`, `radiusx`,
        `radiusy`, `segments` )

Variants:

    1.  |love.graphics.ellipse|( `mode`, `x`, `y`, `radiusx`, `radiusy`
        )

        See function description

        returns:

            None

        arguments:

            `mode`: <DrawMode>

                How to draw the ellipse.

            `x`: <number>

                The position of the center along x-axis.

            `y`: <number>

                The position of the center along y-axis.

            `radiusx`: <number>

                The radius of the ellipse along the x-axis (half the ellipse's
                width).

            `radiusy`: <number>

                The radius of the ellipse along the y-axis (half the ellipse's
                height).
    2.  |love.graphics.ellipse|( `mode`, `x`, `y`, `radiusx`,
        `radiusy`, `segments` )

        See function description

        returns:

            None

        arguments:

            `mode`: <DrawMode>

                How to draw the ellipse.

            `x`: <number>

                The position of the center along x-axis.

            `y`: <number>

                The position of the center along y-axis.

            `radiusx`: <number>

                The radius of the ellipse along the x-axis (half the ellipse's
                width).

            `radiusy`: <number>

                The radius of the ellipse along the y-axis (half the ellipse's
                height).

            `segments`: <number>

                The number of segments used for drawing the ellipse.

-------------------------------------------------------------------------------
                                        *love-love.graphics.getBackgroundColor*
|love.graphics.getBackgroundColor|

Gets the current background color.

Synopses:

    1.  `r`, `g`, `b`, `a` = |love.graphics.getBackgroundColor|()

Variants:

    1.  `r`, `g`, `b`, `a` = |love.graphics.getBackgroundColor|()

        See function description

        returns:

            `r`: <number>

                The red component (0-255).

            `g`: <number>

                The green component (0-255).

            `b`: <number>

                The blue component (0-255).

            `a`: <number>

                The alpha component (0-255).

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.graphics.getBlendMode*
|love.graphics.getBlendMode|

Gets the blending mode.

Synopses:

    1.  `mode`, `alphamode` = |love.graphics.getBlendMode|()

Variants:

    1.  `mode`, `alphamode` = |love.graphics.getBlendMode|()

        See function description

        returns:

            `mode`: <BlendMode>

                The current blend mode.

            `alphamode`: <BlendAlphaMode>

                The current blend alpha mode – it determines how the alpha of
                drawn objects affects blending.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-love.graphics.getCanvas*
|love.graphics.getCanvas|

Gets the current target Canvas.

Synopses:

    1.  `canvas` = |love.graphics.getCanvas|()

Variants:

    1.  `canvas` = |love.graphics.getCanvas|()

        See function description

        returns:

            `canvas`: <Canvas>

                The Canvas set by setCanvas. Returns nil if drawing to the real
                screen.

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-love.graphics.getCanvasFormats*
|love.graphics.getCanvasFormats|

Gets the available Canvas formats, and whether each is supported.

Synopses:

    1.  `formats` = |love.graphics.getCanvasFormats|()

Variants:

    1.  `formats` = |love.graphics.getCanvasFormats|()

        See function description

        returns:

            `formats`: <table>

                A table containing CanvasFormats as keys, and a boolean
                indicating whether the format is supported as values. Not all
                systems support all formats.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-love.graphics.getColor*
|love.graphics.getColor|

Gets the current color.

Synopses:

    1.  `r`, `g`, `b`, `a` = |love.graphics.getColor|()

Variants:

    1.  `r`, `g`, `b`, `a` = |love.graphics.getColor|()

        See function description

        returns:

            `r`: <number>

                The red component (0-255).

            `g`: <number>

                The red component (0-255).

            `b`: <number>

                The blue component (0-255).

            `a`: <number>

                The alpha component (0-255).

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.graphics.getColorMask*
|love.graphics.getColorMask|

Gets the active color components used when drawing. Normally all 4 components
are active unless love.graphics.setColorMask has been used.

The color mask determines whether individual components of the colors of drawn
objects will affect the color of the screen. They affect love.graphics.clear
and Canvas:clear as well.

Synopses:

    1.  `r`, `g`, `b`, `a` = |love.graphics.getColorMask|()

Variants:

    1.  `r`, `g`, `b`, `a` = |love.graphics.getColorMask|()

        See function description

        returns:

            `r`: <boolean>

                Whether the red color component is active when rendering.

            `g`: <boolean>

                Whether the green color component is active when rendering.

            `b`: <boolean>

                Whether the blue color component is active when rendering.

            `a`: <boolean>

                Whether the alpha color component is active when rendering.

        arguments:

            None

-------------------------------------------------------------------------------
                                 *love-love.graphics.getCompressedImageFormats*
|love.graphics.getCompressedImageFormats|

Gets the available compressed image formats, and whether each is supported.

Synopses:

    1.  `formats` = |love.graphics.getCompressedImageFormats|()

Variants:

    1.  `formats` = |love.graphics.getCompressedImageFormats|()

        See function description

        returns:

            `formats`: <table>

                A table containing CompressedFormats as keys, and a boolean
                indicating whether the format is supported as values. Not all
                systems support all formats.

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-love.graphics.getDefaultFilter*
|love.graphics.getDefaultFilter|

Returns the default scaling filters used with Images, Canvases, and Fonts.

Synopses:

    1.  `min`, `mag`, `anisotropy` = |love.graphics.getDefaultFilter|()

Variants:

    1.  `min`, `mag`, `anisotropy` = |love.graphics.getDefaultFilter|()

        See function description

        returns:

            `min`: <FilterMode>

                Filter mode used when scaling the image down.

            `mag`: <FilterMode>

                Filter mode used when scaling the image up.

            `anisotropy`: <number>

                Maximum amount of Anisotropic Filtering used.

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-love.graphics.getDimensions*
|love.graphics.getDimensions|

Gets the width and height of the window.

Synopses:

    1.  `width`, `height` = |love.graphics.getDimensions|()

Variants:

    1.  `width`, `height` = |love.graphics.getDimensions|()

        See function description

        returns:

            `width`: <number>

                The width of the window.

            `height`: <number>

                The height of the window.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-love.graphics.getFont*
|love.graphics.getFont|

Gets the current Font object.

Synopses:

    1.  `font` = |love.graphics.getFont|()

Variants:

    1.  `font` = |love.graphics.getFont|()

        See function description

        returns:

            `font`: <Font>

                The current Font, or nil if none is set.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-love.graphics.getHeight*
|love.graphics.getHeight|

Gets the height of the window.

Synopses:

    1.  `height` = |love.graphics.getHeight|()

Variants:

    1.  `height` = |love.graphics.getHeight|()

        See function description

        returns:

            `height`: <number>

                The height of the window.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-love.graphics.getLineJoin*
|love.graphics.getLineJoin|

Gets the line join style.

Synopses:

    1.  `join` = |love.graphics.getLineJoin|()

Variants:

    1.  `join` = |love.graphics.getLineJoin|()

        See function description

        returns:

            `join`: <LineJoin>

                The LineJoin style.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.graphics.getLineStyle*
|love.graphics.getLineStyle|

Gets the line style.

Synopses:

    1.  `style` = |love.graphics.getLineStyle|()

Variants:

    1.  `style` = |love.graphics.getLineStyle|()

        See function description

        returns:

            `style`: <LineStyle>

                The current line style.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.graphics.getLineWidth*
|love.graphics.getLineWidth|

Gets the current line width.

Synopses:

    1.  `width` = |love.graphics.getLineWidth|()

Variants:

    1.  `width` = |love.graphics.getLineWidth|()

        See function description

        returns:

            `width`: <number>

                The current line width.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-love.graphics.getShader*
|love.graphics.getShader|

Returns the current Shader. Returns nil if none is set.

Synopses:

    1.  `shader` = |love.graphics.getShader|()

Variants:

    1.  `shader` = |love.graphics.getShader|()

        See function description

        returns:

            `shader`: <Shader>

                The current Shader.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-love.graphics.getStats*
|love.graphics.getStats|

Gets performance-related rendering statistics.

Synopses:

    1.  `stats` = |love.graphics.getStats|()

Variants:

    1.  `stats` = |love.graphics.getStats|()

        See function description

        returns:

            `stats`: <table>

                A table with the following fields:

                `drawcalls`: <number>

                    The number of draw calls made so far during the current
                    frame.

                `canvasswitches`: <number>

                    The number of times the active Canvas has been switched so
                    far during the current frame.

                `texturememory`: <number>

                    The estimated total size in bytes of video memory used by
                    all loaded Images, Canvases, and Fonts.

                `images`: <number>

                    The number of Image objects currently loaded.

                `canvases`: <number>

                    The number of Canvas objects currently loaded.

                `fonts`: <number>

                    The number of Font objects currently loaded.

                `shaderswitches`: <number>

                    The number of times the active Shader has been changed so
                    far during the current frame.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-love.graphics.getStencilTest*
|love.graphics.getStencilTest|

Gets whether stencil testing is enabled.

When stencil testing is enabled, the geometry of everything that is drawn will
be clipped / stencilled out based on whether it intersects with what has been
previously drawn to the stencil buffer.

Each Canvas has its own stencil buffer.

Synopses:

    1.  `enabled`, `inverted` = |love.graphics.getStencilTest|()

Variants:

    1.  `enabled`, `inverted` = |love.graphics.getStencilTest|()

        See function description

        returns:

            `enabled`: <boolean>

                Whether stencil testing is enabled.

            `inverted`: <boolean>

                Whether the stencil test is inverted or not.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.graphics.getSupported*
|love.graphics.getSupported|

Gets the optional graphics features and whether they're supported on the
system.

Some older or low-end systems don't always support all graphics features.

Synopses:

    1.  `features` = |love.graphics.getSupported|()

Variants:

    1.  `features` = |love.graphics.getSupported|()

        See function description

        returns:

            `features`: <table>

                A table containing GraphicsFeature keys, and boolean values
                indicating whether each feature is supported.

        arguments:

            None

-------------------------------------------------------------------------------
                                           *love-love.graphics.getSystemLimits*
|love.graphics.getSystemLimits|

Gets the system-dependent maximum values for love.graphics features.

Synopses:

    1.  `limits` = |love.graphics.getSystemLimits|()

Variants:

    1.  `limits` = |love.graphics.getSystemLimits|()

        See function description

        returns:

            `limits`: <table>

                A table containing GraphicsLimit keys, and number values.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.graphics.getPointSize*
|love.graphics.getPointSize|

Gets the point size.

Synopses:

    1.  `size` = |love.graphics.getPointSize|()

Variants:

    1.  `size` = |love.graphics.getPointSize|()

        See function description

        returns:

            `size`: <number>

                The current point size.

        arguments:

            None

-------------------------------------------------------------------------------
                                           *love-love.graphics.getRendererInfo*
|love.graphics.getRendererInfo|

Gets information about the system's video card and drivers.

Synopses:

    1.  `name`, `version`, `vendor`, `device` =
        |love.graphics.getRendererInfo|()

Variants:

    1.  `name`, `version`, `vendor`, `device` =
        |love.graphics.getRendererInfo|()

        See function description

        returns:

            `name`: <string>

                The name of the renderer, e.g. "OpenGL" or "OpenGL ES".

            `version`: <string>

                The version of the renderer with some extra driver-dependent
                version info, e.g. "2.1 INTEL-8.10.44".

            `vendor`: <string>

                The name of the graphics card vendor, e.g. "Intel Inc".

            `device`: <string>

                The name of the graphics card, e.g. "Intel HD Graphics 3000
                OpenGL Engine".

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-love.graphics.getScissor*
|love.graphics.getScissor|

Gets the current scissor box.

Synopses:

    1.  `x`, `y`, `width`, `height` = |love.graphics.getScissor|()

Variants:

    1.  `x`, `y`, `width`, `height` = |love.graphics.getScissor|()

        See function description

        returns:

            `x`: <number>

                The x component of the top-left point of the box.

            `y`: <number>

                The y component of the top-left point of the box.

            `width`: <number>

                The width of the box.

            `height`: <number>

                The height of the box.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-love.graphics.getWidth*
|love.graphics.getWidth|

Gets the width of the window.

Synopses:

    1.  `width` = |love.graphics.getWidth|()

Variants:

    1.  `width` = |love.graphics.getWidth|()

        See function description

        returns:

            `width`: <number>

                The width of the window.

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-love.graphics.intersectScissor*
|love.graphics.intersectScissor|

Sets the scissor to the rectangle created by the intersection of the specified
rectangle with the existing scissor. If no scissor is active yet, it behaves
like love.graphics.setScissor.

The scissor limits the drawing area to a specified rectangle. This affects all
graphics calls, including love.graphics.clear.

The dimensions of the scissor is unaffected by graphical transformations
(translate, scale, ...).

Synopses:

    1.  |love.graphics.intersectScissor|( `x`, `y`, `width`, `height` )
    2.  |love.graphics.intersectScissor|()

Variants:

    1.  |love.graphics.intersectScissor|( `x`, `y`, `width`, `height` )

        Limits the drawing area to a specified rectangle.

        returns:

            None

        arguments:

            `x`: <number>

                The x-coordinate of the upper left corner of the rectangle to
                intersect with the existing scissor rectangle.

            `y`: <number>

                The y-coordinate of the upper left corner of the rectangle to
                intersect with the existing scissor rectangle.

            `width`: <number>

                The width of the rectangle to intersect with the existing
                scissor rectangle.

            `height`: <number>

                The height of the rectangle to intersect with the existing
                scissor rectangle.
    2.  |love.graphics.intersectScissor|()

        Disables scissor.

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-love.graphics.isGammaCorrect*
|love.graphics.isGammaCorrect|

Gets whether gamma-correct rendering is supported and enabled. It can be
enabled by setting t.gammacorrect = true in love.conf.

Not all devices support gamma-correct rendering, in which case it will be
automatically disabled and this function will return false. It is supported on
desktop systems which have graphics cards that are capable of using OpenGL 3 /
DirectX 10, and iOS devices that can use OpenGL ES 3.

Synopses:

    1.  `gammacorrect` = |love.graphics.isGammaCorrect|()

Variants:

    1.  `gammacorrect` = |love.graphics.isGammaCorrect|()

        See function description

        returns:

            `gammacorrect`: <boolean>

                True if gamma-correct rendering is supported and was enabled in
                love.conf, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-love.graphics.isWireframe*
|love.graphics.isWireframe|

Gets whether wireframe mode is used when drawing.

Synopses:

    1.  `wireframe` = |love.graphics.isWireframe|()

Variants:

    1.  `wireframe` = |love.graphics.isWireframe|()

        See function description

        returns:

            `wireframe`: <boolean>

                True if wireframe lines are used when drawing, false if it's
                not.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-love.graphics.line*
|love.graphics.line|

Draws lines between points.

Synopses:

    1.  |love.graphics.line|( `x1`, `y1`, `x2`, `y2`, `...` )
    2.  |love.graphics.line|( `points` )

Variants:

    1.  |love.graphics.line|( `x1`, `y1`, `x2`, `y2`, `...` )

        See function description

        returns:

            None

        arguments:

            `x1`: <number>

                The position of first point on the x-axis.

            `y1`: <number>

                The position of first point on the y-axis.

            `x2`: <number>

                The position of second point on the x-axis.

            `y2`: <number>

                The position of second point on the y-axis.

            `...`: <number>

                You can continue passing point positions to draw a polyline.
    2.  |love.graphics.line|( `points` )

        See function description

        returns:

            None

        arguments:

            `points`: <table>

                A table of point positions.

-------------------------------------------------------------------------------
                                                 *love-love.graphics.newCanvas*
|love.graphics.newCanvas|

Creates a new Canvas object for offscreen rendering.

Antialiased Canvases have slightly higher system requirements than normal
Canvases. Additionally, the supported maximum number of MSAA samples varies
depending on the system. Use love.graphics.getSystemLimit to check.

If the number of MSAA samples specified is greater than the maximum supported
by the system, the Canvas will still be created but only using the maximum
supported amount (this includes 0.)

Synopses:

    1.  `canvas` = |love.graphics.newCanvas|( `width`, `height`,
        `format`, `msaa` )

Variants:

    1.  `canvas` = |love.graphics.newCanvas|( `width`, `height`,
        `format`, `msaa` )

        See function description

        returns:

            `canvas`: <Canvas>

                A new Canvas object.

        arguments:

            `width`: <number>

                The width of the Canvas.

            `height`: <number>

                The height of the Canvas.

            `format`: <CanvasFormat>

                The desired texture mode of the Canvas.

            `msaa`: <number>

                The desired number of antialiasing samples used when drawing to
                the Canvas.

-------------------------------------------------------------------------------
                                                   *love-love.graphics.newFont*
|love.graphics.newFont|

Creates a new Font from a TrueType Font or BMFont file. Created fonts are not
cached, in that calling this function with the same arguments will always
create a new Font object.

All variants which accept a filename can also accept a Data object instead.

Synopses:

    1.  `font` = |love.graphics.newFont|( `filename` )
    2.  `font` = |love.graphics.newFont|( `filename`, `size` )
    3.  `font` = |love.graphics.newFont|( `filename`, `imagefilename` )
    4.  `font` = |love.graphics.newFont|( `size` )

Variants:

    1.  `font` = |love.graphics.newFont|( `filename` )

        Create a new BMFont or TrueType font.

        returns:

            `font`: <Font>

                A Font object which can be used to draw text on screen.

        arguments:

            `filename`: <string>

                The filepath to the BMFont or TrueType font file.
    2.  `font` = |love.graphics.newFont|( `filename`, `size` )

        Create a new TrueType font.

        returns:

            `font`: <Font>

                A Font object which can be used to draw text on screen.

        arguments:

            `filename`: <string>

                The filepath to the TrueType font file.

            `size`: <number>

                The size of the font in pixels.
    3.  `font` = |love.graphics.newFont|( `filename`, `imagefilename` )

        Create a new BMFont.

        returns:

            `font`: <Font>

                A Font object which can be used to draw text on screen.

        arguments:

            `filename`: <string>

                The filepath to the BMFont file.

            `imagefilename`: <string>

                The filepath to the BMFont's image file. If this argument is
                omitted, the path specified inside the BMFont file will be
                used.
    4.  `font` = |love.graphics.newFont|( `size` )

        Create a new instance of the default font (Vera Sans) with a custom size.

        returns:

            `font`: <Font>

                A Font object which can be used to draw text on screen.

        arguments:

            `size`: <number>

                The size of the font in pixels.

-------------------------------------------------------------------------------
                                                   *love-love.graphics.newMesh*
|love.graphics.newMesh|

Creates a new Mesh.

Use Mesh:setTexture if the Mesh should be textured with an Image or Canvas when
it's drawn.

Synopses:

    1.  `mesh` = |love.graphics.newMesh|( `vertices`, `mode`, `usage` )
    2.  `mesh` = |love.graphics.newMesh|( `vertexcount`, `mode`,
        `usage` )
    3.  `mesh` = |love.graphics.newMesh|( `vertexformat`, `vertices`,
        `mode`, `usage` )
    4.  `mesh` = |love.graphics.newMesh|( `vertexformat`,
        `vertexcount`, `mode`, `usage` )

Variants:

    1.  `mesh` = |love.graphics.newMesh|( `vertices`, `mode`, `usage` )

        Creates a standard Mesh with the specified vertices.

        returns:

            `mesh`: <Mesh>

                The new Mesh.

        arguments:

            `vertices`: <table>

                The table filled with vertex information tables for each vertex
                as follows:

                `[1]`: <number>

                    The position of the vertex on the x-axis.

                `[2]`: <number>

                    The position of the vertex on the y-axis.

                `[3]`: <number>

                    The u texture coordinate of the vertex. Texture coordinates
                    are normally in the range of [0, 1], but can be greater or
                    less (see WrapMode.)

                `[4]`: <number>

                    The v texture coordinate of the vertex. Texture coordinates
                    are normally in the range of [0, 1], but can be greater or
                    less (see WrapMode.)

                `[5]`: <number>

                    The red component of the vertex color.

                `[6]`: <number>

                    The green component of the vertex color.

                `[7]`: <number>

                    The blue component of the vertex color.

                `[8]`: <number>

                    The alpha component of the vertex color.

            `mode`: <MeshDrawMode>

                How the vertices are used when drawing. The default mode "fan"
                is sufficient for simple convex polygons.

            `usage`: <SpriteBatchUsage>

                The expected usage of the Mesh. The specified usage mode
                affects the Mesh's memory usage and performance.
    2.  `mesh` = |love.graphics.newMesh|( `vertexcount`, `mode`,
        `usage` )

        Creates a standard Mesh with the specified number of vertices.

        returns:

            `mesh`: <Mesh>

                The new Mesh.

        arguments:

            `vertexcount`: <number>

                The total number of vertices the Mesh will use. Each vertex is
                initialized to {0,0, 0,0, 255,255,255,255}.

            `mode`: <MeshDrawMode>

                How the vertices are used when drawing. The default mode "fan"
                is sufficient for simple convex polygons.

            `usage`: <SpriteBatchUsage>

                The expected usage of the Mesh. The specified usage mode
                affects the Mesh's memory usage and performance.
    3.  `mesh` = |love.graphics.newMesh|( `vertexformat`, `vertices`,
        `mode`, `usage` )

        Creates a Mesh with custom vertex attributes and the specified vertex data.

        returns:

            `mesh`: <Mesh>

                The new Mesh.

        arguments:

            `vertexformat`: <table>

                A table in the form of {attribute, ...}. Each attribute is a
                table which specifies a custom vertex attribute used for each
                vertex.

                `attribute`: <table>

                    A table containing the attribute's name, it's data type,
                    and the number of components in the attribute, in the form
                    of {name, datatype, components}.

                `...`: <table>

                    Additional vertex attribute format tables.

            `vertices`: <table>

                The table filled with vertex information tables for each
                vertex, in the form of {vertex, ...} where each vertex is a
                table in the form of {attributecomponent, ...}.

                `attributecomponent`: <number>

                    The first component of the first vertex attribute in the
                    vertex.

                `...`: <number>

                    Additional components of all vertex attributes in the
                    vertex.

            `mode`: <MeshDrawMode>

                How the vertices are used when drawing. The default mode "fan"
                is sufficient for simple convex polygons.

            `usage`: <SpriteBatchUsage>

                The expected usage of the Mesh. The specified usage mode
                affects the Mesh's memory usage and performance.
    4.  `mesh` = |love.graphics.newMesh|( `vertexformat`,
        `vertexcount`, `mode`, `usage` )

        Creates a Mesh with custom vertex attributes and the specified number of vertices.

        returns:

            `mesh`: <Mesh>

                The new Mesh.

        arguments:

            `vertexformat`: <table>

                A table in the form of {attribute, ...}. Each attribute is a
                table which specifies a custom vertex attribute used for each
                vertex.

                `attribute`: <table>

                    A table containing the attribute's name, it's data type,
                    and the number of components in the attribute, in the form
                    of {name, datatype, components}.

                `...`: <table>

                    Additional vertex attribute format tables.

            `vertexcount`: <number>

                The total number of vertices the Mesh will use.

            `mode`: <MeshDrawMode>

                How the vertices are used when drawing. The default mode "fan"
                is sufficient for simple convex polygons.

            `usage`: <SpriteBatchUsage>

                The expected usage of the Mesh. The specified usage mode
                affects the Mesh's memory usage and performance.

-------------------------------------------------------------------------------
                                                  *love-love.graphics.newImage*
|love.graphics.newImage|

Creates a new Image from a filepath, FileData, an ImageData, or a
CompressedImageData, and optionally generates or specifies mipmaps for the
image.

Synopses:

    1.  `image` = |love.graphics.newImage|( `filename` )
    2.  `image` = |love.graphics.newImage|( `imageData` )
    3.  `image` = |love.graphics.newImage|( `compressedImageData` )
    4.  `image` = |love.graphics.newImage|( `filename`, `flags` )

Variants:

    1.  `image` = |love.graphics.newImage|( `filename` )

        See function description

        returns:

            `image`: <Image>

                An Image object which can be drawn on screen.

        arguments:

            `filename`: <string>

                The filepath to the image file.
    2.  `image` = |love.graphics.newImage|( `imageData` )

        See function description

        returns:

            `image`: <Image>

                An Image object which can be drawn on screen.

        arguments:

            `imageData`: <ImageData>

                An ImageData object. The Image will use this ImageData to
                reload itself when love.window.setMode is called.
    3.  `image` = |love.graphics.newImage|( `compressedImageData` )

        See function description

        returns:

            `image`: <Image>

                An Image object which can be drawn on screen.

        arguments:

            `compressedImageData`: <CompressedImageData>

                A CompressedImageData object. The Image will use this
                CompressedImageData to reload itself when love.window.setMode
                is called.
    4.  `image` = |love.graphics.newImage|( `filename`, `flags` )

        See function description

        returns:

            `image`: <Image>

                An Image object which can be drawn on screen.

        arguments:

            `filename`: <string>

                The filepath to the image file (or a FileData or ImageData or
                CompressedImageData object).

            `flags`: <table>

                A table containing the following fields:

                `linear`: <boolean>

                    True if the image's pixels should be interpreted as being
                    linear RGB rather than sRGB-encoded, if gamma-correct
                    rendering is enabled. Has no effect otherwise.

                `mipmaps`: <boolean or table>

                    If true, mipmaps for the image will be automatically
                    generated (or taken from the images's file if possible, if
                    the image originated from a CompressedImageData). If this
                    value is a table, it should contain a list of other
                    filenames of images of the same format that have
                    progressively half-sized dimensions, all the way down to
                    1x1. Those images will be used as this Image's mipmap
                    levels.

-------------------------------------------------------------------------------
                                              *love-love.graphics.newImageFont*
|love.graphics.newImageFont|

Creates a new Font by loading a specifically formatted image.

In versions prior to 0.9.0, LÖVE expects ISO 8859-1 encoding for the glyphs
string.

Synopses:

    1.  `font` = |love.graphics.newImageFont|( `filename`, `glyphs` )
    2.  `font` = |love.graphics.newImageFont|( `imageData`, `glyphs` )
    3.  `font` = |love.graphics.newImageFont|( `filename`, `glyphs`,
        `extraspacing` )

Variants:

    1.  `font` = |love.graphics.newImageFont|( `filename`, `glyphs` )

        See function description

        returns:

            `font`: <Font>

                A Font object which can be used to draw text on screen.

        arguments:

            `filename`: <string>

                The filepath to the image file.

            `glyphs`: <string>

                A string of the characters in the image in order from left to
                right.
    2.  `font` = |love.graphics.newImageFont|( `imageData`, `glyphs` )

        See function description

        returns:

            `font`: <Font>

                A Font object which can be used to draw text on screen.

        arguments:

            `imageData`: <ImageData>

                The ImageData object to create the font from.

            `glyphs`: <string>

                A string of the characters in the image in order from left to
                right.
    3.  `font` = |love.graphics.newImageFont|( `filename`, `glyphs`,
        `extraspacing` )

        See function description

        returns:

            `font`: <Font>

                A Font object which can be used to draw text on screen.

        arguments:

            `filename`: <string>

                The filepath to the image file.

            `glyphs`: <string>

                A string of the characters in the image in order from left to
                right.

            `extraspacing`: <number>

                Additional spacing (positive or negative) to apply to each
                glyph in the Font.

-------------------------------------------------------------------------------
                                         *love-love.graphics.newParticleSystem*
|love.graphics.newParticleSystem|

Creates a new ParticleSystem.

Synopses:

    1.  `system` = |love.graphics.newParticleSystem|( `texture`,
        `buffer` )

Variants:

    1.  `system` = |love.graphics.newParticleSystem|( `texture`,
        `buffer` )

        See function description

        returns:

            `system`: <ParticleSystem>

                A new ParticleSystem.

        arguments:

            `texture`: <Texture>

                The Image or Canvas to use.

            `buffer`: <number>

                The max number of particles at the same time.

-------------------------------------------------------------------------------
                                                 *love-love.graphics.newShader*
|love.graphics.newShader|

Creates a new Shader object for hardware-accelerated vertex and pixel effects.
A Shader contains either vertex shader code, pixel shader code, or both.

Vertex shader code must contain at least one function, named position, which is
the function that will produce transformed vertex positions of drawn objects in
screen-space.

Pixel shader code must contain at least one function, named effect, which is
the function that will produce the color which is blended onto the screen for
each pixel a drawn object touches.

Synopses:

    1.  `shader` = |love.graphics.newShader|( `code` )
    2.  `shader` = |love.graphics.newShader|( `pixelcode`, `vertexcode`
        )

Variants:

    1.  `shader` = |love.graphics.newShader|( `code` )

        See function description

        returns:

            `shader`: <Shader>

                A Shader object for use in drawing operations.

        arguments:

            `code`: <string>

                The pixel shader or vertex shader code, or a filename pointing
                to a file with the code.
    2.  `shader` = |love.graphics.newShader|( `pixelcode`, `vertexcode`
        )

        See function description

        returns:

            `shader`: <Shader>

                A Shader object for use in drawing operations.

        arguments:

            `pixelcode`: <string>

                The pixel shader code, or a filename pointing to a file with
                the code.

            `vertexcode`: <string>

                The vertex shader code, or a filename pointing to a file with
                the code.

-------------------------------------------------------------------------------
                                                   *love-love.graphics.newText*
|love.graphics.newText|

Creates a new drawable Text object.

Synopses:

    1.  `text` = |love.graphics.newText|( `font`, `textstring` )

Variants:

    1.  `text` = |love.graphics.newText|( `font`, `textstring` )

        See function description

        returns:

            `text`: <Text>

                The new drawable Text object.

        arguments:

            `font`: <Font>

                The font to use for the text.

            `textstring`: <string>

                The initial string of text that the new Text object will
                contain. May be nil.

-------------------------------------------------------------------------------
                                                   *love-love.graphics.newQuad*
|love.graphics.newQuad|

Creates a new Quad.

The purpose of a Quad is to describe the result of the following transformation
on any drawable object. The object is first scaled to dimensions sw * sh. The
Quad then describes the rectangular area of dimensions width * height whose
upper left corner is at position (x, y) inside the scaled object.

Synopses:

    1.  `quad` = |love.graphics.newQuad|( `x`, `y`, `width`, `height`,
        `sw`, `sh` )

Variants:

    1.  `quad` = |love.graphics.newQuad|( `x`, `y`, `width`, `height`,
        `sw`, `sh` )

        See function description

        returns:

            `quad`: <Quad>

                The new Quad.

        arguments:

            `x`: <number>

                The top-left position along the x-axis.

            `y`: <number>

                The top-left position along the y-axis.

            `width`: <number>

                The width of the Quad.

            `height`: <number>

                The height of the Quad.

            `sw`: <number>

                The reference width, the width of the Image.

            `sh`: <number>

                The reference height, the height of the Image.

-------------------------------------------------------------------------------
                                             *love-love.graphics.newScreenshot*
|love.graphics.newScreenshot|

Creates a screenshot and returns the image data.

Synopses:

    1.  `screenshot` = |love.graphics.newScreenshot|( `copyAlpha` )

Variants:

    1.  `screenshot` = |love.graphics.newScreenshot|( `copyAlpha` )

        See function description

        returns:

            `screenshot`: <ImageData>

                The image data of the screenshot.

        arguments:

            `copyAlpha`: <boolean>

                Whether to include the screen's alpha channel in the ImageData.
                If false, the screenshot will be fully opaque.

-------------------------------------------------------------------------------
                                            *love-love.graphics.newSpriteBatch*
|love.graphics.newSpriteBatch|

Creates a new SpriteBatch object.

Synopses:

    1.  `spriteBatch` = |love.graphics.newSpriteBatch|( `texture`,
        `maxsprites`, `usage` )

Variants:

    1.  `spriteBatch` = |love.graphics.newSpriteBatch|( `texture`,
        `maxsprites`, `usage` )

        See function description

        returns:

            `spriteBatch`: <SpriteBatch>

                The new SpriteBatch.

        arguments:

            `texture`: <Texture>

                The Image or Canvas to use for the sprites.

            `maxsprites`: <number>

                The max number of sprites.

            `usage`: <SpriteBatchUsage>

                The expected usage of the SpriteBatch. The specified usage mode
                affects the SpriteBatch's memory usage and performance.

-------------------------------------------------------------------------------
                                                  *love-love.graphics.newVideo*
|love.graphics.newVideo|

Creates a new drawable Video. Currently only Ogg Theora video files are
supported.

Synopses:

    1.  `video` = |love.graphics.newVideo|( `filename`, `loadaudio` )
    2.  `video` = |love.graphics.newVideo|( `videostream`, `loadaudio`
        )

Variants:

    1.  `video` = |love.graphics.newVideo|( `filename`, `loadaudio` )

        See function description

        returns:

            `video`: <Video>

                A new Video.

        arguments:

            `filename`: <string>

                The file path to the Ogg Theora video file.

            `loadaudio`: <boolean>

                Whether to try to load the video's audio into an audio Source.
                If not explicitly set to true or false, it will try without
                causing an error if the video has no audio.
    2.  `video` = |love.graphics.newVideo|( `videostream`, `loadaudio`
        )

        See function description

        returns:

            `video`: <Video>

                A new Video.

        arguments:

            `videostream`: <VideoStream>

                A video stream object.

            `loadaudio`: <boolean>

                Whether to try to load the video's audio into an audio Source.
                If not explicitly set to true or false, it will try without
                causing an error if the video has no audio.

-------------------------------------------------------------------------------
                                                    *love-love.graphics.origin*
|love.graphics.origin|

Resets the current coordinate transformation.

This function is always used to reverse any previous calls to
love.graphics.rotate, love.graphics.scale, love.graphics.shear or
love.graphics.translate. It returns the current transformation state to its
defaults.

Synopses:

    1.  |love.graphics.origin|()

Variants:

    1.  |love.graphics.origin|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.graphics.points*
|love.graphics.points|

Draws one or more points.

Synopses:

    1.  |love.graphics.points|( `x`, `y`, `...` )
    2.  |love.graphics.points|( `points` )
    3.  |love.graphics.points|( `points` )

Variants:

    1.  |love.graphics.points|( `x`, `y`, `...` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The position of the first point on the x-axis.

            `y`: <number>

                The position of the first point on the y-axis.

            `...`: <number>

                The x and y coordinates of additional points.
    2.  |love.graphics.points|( `points` )

        See function description

        returns:

            None

        arguments:

            `points`: <table>

                A table containing multiple point positions, in the form of {x,
                y, ...}.

                `x`: <number>

                    The position of the first point on the x-axis.

                `y`: <number>

                    The position of the first point on the y-axis.

                `...`: <number>

                    The x and y coordinates of additional points.
    3.  |love.graphics.points|( `points` )

        See function description

        returns:

            None

        arguments:

            `points`: <table>

                A table containing multiple individually colored points, in the
                form of {point, ...}. Each table contains the position and
                color of a point in the form of {x, y, r, g, b, a}. The color
                components are optional.

                `point`: <table>

                    A table containing the position and color of the first
                    point, in the form of {x, y, r, g, b, a}. The color
                    components are optional.

                `...`: <table>

                    Additional tables containing the position and color of more
                    points, in the form of {x, y, r, g, b, a}. The color
                    components are optional.

-------------------------------------------------------------------------------
                                                   *love-love.graphics.polygon*
|love.graphics.polygon|

Draw a polygon.

Following the mode argument, this function can accept multiple numeric
arguments or a single table of numeric arguments. In either case the arguments
are interpreted as alternating x and y coordinates of the polygon's vertices.

When in fill mode, the polygon must be convex and simple or rendering artifacts
may occur.

Synopses:

    1.  |love.graphics.polygon|( `mode`, `...` )
    2.  |love.graphics.polygon|( `mode`, `vertices` )

Variants:

    1.  |love.graphics.polygon|( `mode`, `...` )

        See function description

        returns:

            None

        arguments:

            `mode`: <DrawMode>

                How to draw the polygon.

            `...`: <number>

                The vertices of the polygon.
    2.  |love.graphics.polygon|( `mode`, `vertices` )

        See function description

        returns:

            None

        arguments:

            `mode`: <DrawMode>

                How to draw the polygon.

            `vertices`: <table>

                The vertices of the polygon as a table.

-------------------------------------------------------------------------------
                                                       *love-love.graphics.pop*
|love.graphics.pop|

Pops the current coordinate transformation from the transformation stack.

This function is always used to reverse a previous push operation. It returns
the current transformation state to what it was before the last preceding push.
For an example, see the description of love.graphics.push.

Synopses:

    1.  |love.graphics.pop|()

Variants:

    1.  |love.graphics.pop|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-love.graphics.present*
|love.graphics.present|

Displays the results of drawing operations on the screen.

This function is used when writing your own love.run function. It presents all
the results of your drawing operations on the screen. See the example in
love.run for a typical use of this function.

Synopses:

    1.  |love.graphics.present|()

Variants:

    1.  |love.graphics.present|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-love.graphics.print*
|love.graphics.print|

Draws text on screen. If no Font is set, one will be created and set (once) if
needed.

As of LOVE 0.7.1, when using translation and scaling functions while drawing
text, this function assumes the scale occurs first. If you don't script with
this in mind, the text won't be in the right position, or possibly even on
screen.

love.graphics.print and love.graphics.printf both suppport UTF-8 encoding.
You'll also need a proper Font for special characters.

Synopses:

    1.  |love.graphics.print|( `text`, `x`, `y`, `r`, `sx`, `sy`, `ox`,
        `oy`, `kx`, `ky` )
    2.  |love.graphics.print|( `coloredtext`, `x`, `y`, `angle`, `sx`,
        `sy`, `ox`, `oy`, `kx`, `ky` )

Variants:

    1.  |love.graphics.print|( `text`, `x`, `y`, `r`, `sx`, `sy`, `ox`,
        `oy`, `kx`, `ky` )

        See function description

        returns:

            None

        arguments:

            `text`: <string>

                The text to draw.

            `x`: <number>

                The position to draw the object (x-axis).

            `y`: <number>

                The position to draw the object (y-axis).

            `r`: <number>

                Orientation (radians).

            `sx`: <number>

                Scale factor (x-axis).

            `sy`: <number>

                Scale factor (y-axis).

            `ox`: <number>

                Origin offset (x-axis).

            `oy`: <number>

                Origin offset (y-axis).

            `kx`: <number>

                Shear factor (x-axis).

            `ky`: <number>

                Shear factor (y-axis).
    2.  |love.graphics.print|( `coloredtext`, `x`, `y`, `angle`, `sx`,
        `sy`, `ox`, `oy`, `kx`, `ky` )

        See function description

        returns:

            None

        arguments:

            `coloredtext`: <table>

                A table containing colors and strings to add to the object, in
                the form of {color1, string1, color2, string2, ...}.

                `color1`: <table>

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string1`: <string>

                    A string of text which has a color specified by the
                    previous color.

                `color2`: <table>

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string2`: <string>

                    A string of text which has a color specified by the
                    previous color.

                `...`: <tables and strings>

                    Additional colors and strings.

            `x`: <number>

                The position of the new text on the x-axis.

            `y`: <number>

                The position of the new text on the y-axis.

            `angle`: <number>

                The orientation of the object in radians.

            `sx`: <number>

                Scale factor on the x-axis.

            `sy`: <number>

                Scale factor on the y-axis.

            `ox`: <number>

                Origin offset on the x-axis.

            `oy`: <number>

                Origin offset on the y-axis.

            `kx`: <number>

                Shearing / skew factor on the x-axis.

            `ky`: <number>

                Shearing / skew factor on the y-axis.

-------------------------------------------------------------------------------
                                                    *love-love.graphics.printf*
|love.graphics.printf|

Draws formatted text, with word wrap and alignment.

See additional notes in love.graphics.print.

In version 0.9.2 and earlier, wrapping was implemented by breaking up words by
spaces and putting them back together to make sure things fit nicely within the
limit provided. However, due to the way this is done, extra spaces between
words would end up missing when printed on the screen, and some lines could
overflow past the provided wrap limit. In version 0.10.0 and newer this is no
longer the case.

Synopses:

    1.  |love.graphics.printf|( `text`, `x`, `y`, `limit`, `align`,
        `r`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )
    2.  |love.graphics.printf|( `coloredtext`, `x`, `y`, `wraplimit`,
        `align`, `angle`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

Variants:

    1.  |love.graphics.printf|( `text`, `x`, `y`, `limit`, `align`,
        `r`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

        See function description

        returns:

            None

        arguments:

            `text`: <string>

                A text string.

            `x`: <number>

                The position on the x-axis.

            `y`: <number>

                The position on the y-axis.

            `limit`: <number>

                Wrap the line after this many horizontal pixels.

            `align`: <AlignMode>

                The alignment.

            `r`: <number>

                Orientation (radians).

            `sx`: <number>

                Scale factor (x-axis).

            `sy`: <number>

                Scale factor (y-axis).

            `ox`: <number>

                Origin offset (x-axis).

            `oy`: <number>

                Origin offset (y-axis).

            `kx`: <number>

                Shear factor (x-axis).

            `ky`: <number>

                Shear factor (y-axis).
    2.  |love.graphics.printf|( `coloredtext`, `x`, `y`, `wraplimit`,
        `align`, `angle`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

        See function description

        returns:

            None

        arguments:

            `coloredtext`: <table>

                A table containing colors and strings to add to the object, in
                the form of {color1, string1, color2, string2, ...}.

                `color1`: <table>

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string1`: <string>

                    A string of text which has a color specified by the
                    previous color.

                `color2`: <table>

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string2`: <string>

                    A string of text which has a color specified by the
                    previous color.

                `...`: <tables and strings>

                    Additional colors and strings.

            `x`: <number>

                The position of the new text on the x-axis.

            `y`: <number>

                The position of the new text on the y-axis.

            `wraplimit`: <number>

                The maximum width in pixels of the text before it gets
                automatically wrapped to a new line.

            `align`: <AlignMode>

                The alignment of the text.

            `angle`: <number>

                The orientation of the object in radians.

            `sx`: <number>

                Scale factor on the x-axis.

            `sy`: <number>

                Scale factor on the y-axis.

            `ox`: <number>

                Origin offset on the x-axis.

            `oy`: <number>

                Origin offset on the y-axis.

            `kx`: <number>

                Shearing / skew factor on the x-axis.

            `ky`: <number>

                Shearing / skew factor on the y-axis.

-------------------------------------------------------------------------------
                                                      *love-love.graphics.push*
|love.graphics.push|

Copies and pushes the current coordinate transformation to the transformation
stack.

This function is always used to prepare for a corresponding pop operation
later. It stores the current coordinate transformation state into the
transformation stack and keeps it active. Later changes to the transformation
can be undone by using the pop operation, which returns the coordinate
transform to the state it was in before calling push.

Synopses:

    1.  |love.graphics.push|( `stack` )

Variants:

    1.  |love.graphics.push|( `stack` )

        See function description

        returns:

            None

        arguments:

            `stack`: <StackType>

                The type of stack to push (e.g. just transformation state, or
                all love.graphics state).

-------------------------------------------------------------------------------
                                                 *love-love.graphics.rectangle*
|love.graphics.rectangle|

Draws a rectangle.

Synopses:

    1.  |love.graphics.rectangle|( `mode`, `x`, `y`, `width`, `height`
        )
    2.  |love.graphics.rectangle|( `mode`, `x`, `y`, `width`, `height`,
        `rx`, `ry`, `segments` )

Variants:

    1.  |love.graphics.rectangle|( `mode`, `x`, `y`, `width`, `height`
        )

        See function description

        returns:

            None

        arguments:

            `mode`: <DrawMode>

                How to draw the rectangle.

            `x`: <number>

                The position of top-left corner along the x-axis.

            `y`: <number>

                The position of top-left corner along the y-axis.

            `width`: <number>

                Width of the rectangle.

            `height`: <number>

                Height of the rectangle.
    2.  |love.graphics.rectangle|( `mode`, `x`, `y`, `width`, `height`,
        `rx`, `ry`, `segments` )

        Draws a rectangle with rounded corners.

        returns:

            None

        arguments:

            `mode`: <DrawMode>

                How to draw the rectangle.

            `x`: <number>

                The position of top-left corner along the x-axis.

            `y`: <number>

                The position of top-left corner along the y-axis.

            `width`: <number>

                Width of the rectangle.

            `height`: <number>

                Height of the rectangle.

            `rx`: <number>

                The x-axis radius of each round corner. Cannot be greater than
                half the rectangle's width.

            `ry`: <number>

                The y-axis radius of each round corner. Cannot be greater than
                half the rectangle's height.

            `segments`: <number>

                The number of segments used for drawing the round corners. A
                default amount will be chosen if no number is given.

-------------------------------------------------------------------------------
                                                     *love-love.graphics.reset*
|love.graphics.reset|

Resets the current graphics settings.

Calling reset makes the current drawing color white, the current background
color black, resets any active Canvas or Shader, and removes any scissor
settings. It sets the BlendMode to alpha. It also sets both the point and line
drawing modes to smooth and their sizes to 1.0.

Synopses:

    1.  |love.graphics.reset|()

Variants:

    1.  |love.graphics.reset|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.graphics.rotate*
|love.graphics.rotate|

Rotates the coordinate system in two dimensions.

Calling this function affects all future drawing operations by rotating the
coordinate system around the origin by the given amount of radians. This change
lasts until love.draw exits.

Synopses:

    1.  |love.graphics.rotate|( `angle` )

Variants:

    1.  |love.graphics.rotate|( `angle` )

        See function description

        returns:

            None

        arguments:

            `angle`: <number>

                The amount to rotate the coordinate system in radians.

-------------------------------------------------------------------------------
                                                     *love-love.graphics.scale*
|love.graphics.scale|

Scales the coordinate system in two dimensions.

By default the coordinate system in LÖVE corresponds to the display pixels in
horizontal and vertical directions one-to-one, and the x-axis increases towards
the right while the y-axis increases downwards. Scaling the coordinate system
changes this relation.

After scaling by sx and sy, all coordinates are treated as if they were
multiplied by sx and sy. Every result of a drawing operation is also
correspondingly scaled, so scaling by (2, 2) for example would mean making
everything twice as large in both x- and y-directions. Scaling by a negative
value flips the coordinate system in the corresponding direction, which also
means everything will be drawn flipped or upside down, or both. Scaling by zero
is not a useful operation.

Scale and translate are not commutative operations, therefore, calling them in
different orders will change the outcome.

Scaling lasts until love.draw exits.

Synopses:

    1.  |love.graphics.scale|( `sx`, `sy` )

Variants:

    1.  |love.graphics.scale|( `sx`, `sy` )

        See function description

        returns:

            None

        arguments:

            `sx`: <number>

                The scaling in the direction of the x-axis.

            `sy`: <number>

                The scaling in the direction of the y-axis. If omitted, it
                defaults to same as parameter sx.

-------------------------------------------------------------------------------
                                        *love-love.graphics.setBackgroundColor*
|love.graphics.setBackgroundColor|

Sets the background color.

Synopses:

    1.  |love.graphics.setBackgroundColor|( `r`, `g`, `b`, `a` )
    2.  |love.graphics.setBackgroundColor|( `rgba` )

Variants:

    1.  |love.graphics.setBackgroundColor|( `r`, `g`, `b`, `a` )

        See function description

        returns:

            None

        arguments:

            `r`: <number>

                The red component (0-255).

            `g`: <number>

                The green component (0-255).

            `b`: <number>

                The blue component (0-255).

            `a`: <number>

                The alpha component (0-255).
    2.  |love.graphics.setBackgroundColor|( `rgba` )

        See function description

        returns:

            None

        arguments:

            `rgba`: <table>

                A numerical indexed table with the red, green and blue values
                as numbers. Alpha is 255 if it is not in the table

-------------------------------------------------------------------------------
                                              *love-love.graphics.setBlendMode*
|love.graphics.setBlendMode|

Sets the blending mode.

Synopses:

    1.  |love.graphics.setBlendMode|( `mode` )
    2.  |love.graphics.setBlendMode|( `mode`, `alphamode` )

Variants:

    1.  |love.graphics.setBlendMode|( `mode` )

        See function description

        returns:

            None

        arguments:

            `mode`: <BlendMode>

                The blend mode to use.
    2.  |love.graphics.setBlendMode|( `mode`, `alphamode` )

        See function description

        returns:

            None

        arguments:

            `mode`: <BlendMode>

                The blend mode to use.

            `alphamode`: <BlendAlphaMode>

                What to do with the alpha of drawn objects when blending.

-------------------------------------------------------------------------------
                                                 *love-love.graphics.setCanvas*
|love.graphics.setCanvas|

Captures drawing operations to a Canvas.

Synopses:

    1.  |love.graphics.setCanvas|( `canvas` )
    2.  |love.graphics.setCanvas|()
    3.  |love.graphics.setCanvas|( `canvas1`, `canvas2`, `...` )

Variants:

    1.  |love.graphics.setCanvas|( `canvas` )

        Sets the render target to a specified Canvas. All drawing operations until the next love.graphics.setCanvas call will be redirected to the Canvas and not shown on the screen.

        returns:

            None

        arguments:

            `canvas`: <Canvas>

                A render target.
    2.  |love.graphics.setCanvas|()

        Resets the render target to the screen, i.e. re-enables drawing to the screen.

        returns:

            None

        arguments:

            None
    3.  |love.graphics.setCanvas|( `canvas1`, `canvas2`, `...` )

        Sets the render target to multiple simultaneous Canvases. All drawing operations until the next love.graphics.setCanvas call will be redirected to the specified canvases and not shown on the screen.

        returns:

            None

        arguments:

            `canvas1`: <Canvas>

                The first render target.

            `canvas2`: <Canvas>

                The second render target.

            `...`: <Canvas>

                More canvases.

-------------------------------------------------------------------------------
                                                  *love-love.graphics.setColor*
|love.graphics.setColor|

Sets the color used for drawing.

Synopses:

    1.  |love.graphics.setColor|( `red`, `green`, `blue`, `alpha` )
    2.  |love.graphics.setColor|( `rgba` )

Variants:

    1.  |love.graphics.setColor|( `red`, `green`, `blue`, `alpha` )

        See function description

        returns:

            None

        arguments:

            `red`: <number>

                The amount of red.

            `green`: <number>

                The amount of green.

            `blue`: <number>

                The amount of blue.

            `alpha`: <number>

                The amount of alpha. The alpha value will be applied to all
                subsequent draw operations, even the drawing of an image.
    2.  |love.graphics.setColor|( `rgba` )

        See function description

        returns:

            None

        arguments:

            `rgba`: <table>

                A numerical indexed table with the red, green, blue and alpha
                values as numbers. The alpha is optional and defaults to 255 if
                it is left out.

-------------------------------------------------------------------------------
                                              *love-love.graphics.setColorMask*
|love.graphics.setColorMask|

Sets the color mask. Enables or disables specific color components when
rendering and clearing the screen. For example, if red is set to false, no
further changes will be made to the red component of any pixels.

Enables all color components when called without arguments.

Synopses:

    1.  |love.graphics.setColorMask|( `red`, `green`, `blue`, `alpha` )
    2.  |love.graphics.setColorMask|()

Variants:

    1.  |love.graphics.setColorMask|( `red`, `green`, `blue`, `alpha` )

        Enables color masking for the specified color components.

        returns:

            None

        arguments:

            `red`: <boolean>

                Render red component.

            `green`: <boolean>

                Render green component.

            `blue`: <boolean>

                Render blue component.

            `alpha`: <boolean>

                Render alpha component.
    2.  |love.graphics.setColorMask|()

        Disables color masking.

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-love.graphics.setDefaultFilter*
|love.graphics.setDefaultFilter|

Sets the default scaling filters used with Images, Canvases, and Fonts.

This function does not apply retroactively to loaded images.

Synopses:

    1.  |love.graphics.setDefaultFilter|( `min`, `mag`, `anisotropy` )

Variants:

    1.  |love.graphics.setDefaultFilter|( `min`, `mag`, `anisotropy` )

        See function description

        returns:

            None

        arguments:

            `min`: <FilterMode>

                Filter mode used when scaling the image down.

            `mag`: <FilterMode>

                Filter mode used when scaling the image up.

            `anisotropy`: <number>

                Maximum amount of Anisotropic Filtering used.

-------------------------------------------------------------------------------
                                                   *love-love.graphics.setFont*
|love.graphics.setFont|

Set an already-loaded Font as the current font or create and load a new one
from the file and size.

It's recommended that Font objects are created with love.graphics.newFont in
the loading stage and then passed to this function in the drawing stage.

Synopses:

    1.  |love.graphics.setFont|( `font` )

Variants:

    1.  |love.graphics.setFont|( `font` )

        See function description

        returns:

            None

        arguments:

            `font`: <Font>

                The Font object to use.

-------------------------------------------------------------------------------
                                               *love-love.graphics.setLineJoin*
|love.graphics.setLineJoin|

Sets the line join style.

Synopses:

    1.  |love.graphics.setLineJoin|( `join` )

Variants:

    1.  |love.graphics.setLineJoin|( `join` )

        See function description

        returns:

            None

        arguments:

            `join`: <LineJoin>

                The LineJoin to use.

-------------------------------------------------------------------------------
                                              *love-love.graphics.setLineStyle*
|love.graphics.setLineStyle|

Sets the line style.

Synopses:

    1.  |love.graphics.setLineStyle|( `style` )

Variants:

    1.  |love.graphics.setLineStyle|( `style` )

        See function description

        returns:

            None

        arguments:

            `style`: <LineStyle>

                The LineStyle to use.

-------------------------------------------------------------------------------
                                              *love-love.graphics.setLineWidth*
|love.graphics.setLineWidth|

Sets the line width.

Synopses:

    1.  |love.graphics.setLineWidth|( `width` )

Variants:

    1.  |love.graphics.setLineWidth|( `width` )

        See function description

        returns:

            None

        arguments:

            `width`: <number>

                The width of the line.

-------------------------------------------------------------------------------
                                                *love-love.graphics.setNewFont*
|love.graphics.setNewFont|

Creates and sets a new font.

Synopses:

    1.  `font` = |love.graphics.setNewFont|( `filename`, `size` )
    2.  `font` = |love.graphics.setNewFont|( `file`, `size` )
    3.  `font` = |love.graphics.setNewFont|( `data`, `size` )

Variants:

    1.  `font` = |love.graphics.setNewFont|( `filename`, `size` )

        See function description

        returns:

            `font`: <Font>

                The new font.

        arguments:

            `filename`: <string>

                The path and name of the file with the font.

            `size`: <number>

                The size of the font.
    2.  `font` = |love.graphics.setNewFont|( `file`, `size` )

        See function description

        returns:

            `font`: <Font>

                The new font.

        arguments:

            `file`: <File>

                A File with the font.

            `size`: <number>

                The size of the font.
    3.  `font` = |love.graphics.setNewFont|( `data`, `size` )

        See function description

        returns:

            `font`: <Font>

                The new font.

        arguments:

            `data`: <Data>

                A Data with the font.

            `size`: <number>

                The size of the font.

-------------------------------------------------------------------------------
                                                 *love-love.graphics.setShader*
|love.graphics.setShader|

Sets or resets a Shader as the current pixel effect or vertex shaders. All
drawing operations until the next love.graphics.setShader will be drawn using
the Shader object specified.

Disables the shaders when called without arguments.

Synopses:

    1.  |love.graphics.setShader|()
    2.  |love.graphics.setShader|( `shader` )

Variants:

    1.  |love.graphics.setShader|()

        See function description

        returns:

            None

        arguments:

            None
    2.  |love.graphics.setShader|( `shader` )

        See function description

        returns:

            None

        arguments:

            `shader`: <Shader>

                The new shader.

-------------------------------------------------------------------------------
                                              *love-love.graphics.setPointSize*
|love.graphics.setPointSize|

Sets the point size.

Synopses:

    1.  |love.graphics.setPointSize|( `size` )

Variants:

    1.  |love.graphics.setPointSize|( `size` )

        See function description

        returns:

            None

        arguments:

            `size`: <number>

                The new point size.

-------------------------------------------------------------------------------
                                                *love-love.graphics.setScissor*
|love.graphics.setScissor|

Sets or disables scissor.

The scissor limits the drawing area to a specified rectangle. This affects all
graphics calls, including love.graphics.clear.

Synopses:

    1.  |love.graphics.setScissor|( `x`, `y`, `width`, `height` )
    2.  |love.graphics.setScissor|()

Variants:

    1.  |love.graphics.setScissor|( `x`, `y`, `width`, `height` )

        Limits the drawing area to a specified rectangle.

        returns:

            None

        arguments:

            `x`: <number>

                The X coordinate of upper left corner.

            `y`: <number>

                The Y coordinate of upper left corner.

            `width`: <number>

                The width of clipping rectangle.

            `height`: <number>

                The height of clipping rectangle.
    2.  |love.graphics.setScissor|()

        Disables scissor.

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-love.graphics.setStencilTest*
|love.graphics.setStencilTest|

Configures or disables stencil testing.

When stencil testing is enabled, the geometry of everything that is drawn
afterward will be clipped / stencilled out based on a comparison between the
arguments of this function and the stencil value of each pixel that the
geometry touches. The stencil values of pixels are affected via
love.graphics.stencil.

Each Canvas has its own per-pixel stencil values.

Synopses:

    1.  |love.graphics.setStencilTest|( `comparemode`, `comparevalue` )
    2.  |love.graphics.setStencilTest|()

Variants:

    1.  |love.graphics.setStencilTest|( `comparemode`, `comparevalue` )

        See function description

        returns:

            None

        arguments:

            `comparemode`: <CompareMode>

                The type of comparison to make for each pixel.

            `comparevalue`: <number>

                The value to use when comparing with the stencil value of each
                pixel. Must be between 0 and 255.
    2.  |love.graphics.setStencilTest|()

        Disables stencil testing.

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.graphics.setWireframe*
|love.graphics.setWireframe|

Sets whether wireframe lines will be used when drawing.

Wireframe mode should only be used for debugging. The lines drawn with it
enabled do not behave like regular love.graphics lines: their widths don't
scale with the coordinate transformations or with love.graphics.setLineWidth,
and they don't use the smooth LineStyle.

Synopses:

    1.  |love.graphics.setWireframe|( `enable` )

Variants:

    1.  |love.graphics.setWireframe|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: <boolean>

                True to enable wireframe mode when drawing, false to disable
                it.

-------------------------------------------------------------------------------
                                                     *love-love.graphics.shear*
|love.graphics.shear|

Shears the coordinate system.

Synopses:

    1.  |love.graphics.shear|( `kx`, `ky` )

Variants:

    1.  |love.graphics.shear|( `kx`, `ky` )

        See function description

        returns:

            None

        arguments:

            `kx`: <number>

                The shear factor on the x-axis.

            `ky`: <number>

                The shear factor on the y-axis.

-------------------------------------------------------------------------------
                                                   *love-love.graphics.stencil*
|love.graphics.stencil|

Draws geometry as a stencil.

The geometry drawn by the supplied function sets invisible stencil values of
pixels, instead of setting pixel colors. The stencil values of pixels can act
like a mask / stencil - love.graphics.setStencilTest can be used afterward to
determine how further rendering is affected by the stencil values in each
pixel.

Each Canvas has its own per-pixel stencil values. Stencil values are within the
range of [0, 255].

Synopses:

    1.  |love.graphics.stencil|( `stencilfunction`, `action`, `value`,
        `keepvalues` )

Variants:

    1.  |love.graphics.stencil|( `stencilfunction`, `action`, `value`,
        `keepvalues` )

        See function description

        returns:

            None

        arguments:

            `stencilfunction`: <function>

                Function which draws geometry. The stencil values of pixels,
                rather than the color of each pixel, will be affected by the
                geometry.

            `action`: <StencilAction>

                How to modify any stencil values of pixels that are touched by
                what's drawn in the stencil function.

            `value`: <number>

                The new stencil value to use for pixels if the "replace"
                stencil action is used. Has no effect with other stencil
                actions. Must be between 0 and 255.

            `keepvalues`: <boolean>

                True to preserve old stencil values of pixels, false to re-set
                every pixel's stencil value to 0 before executing the stencil
                function. love.graphics.clear will also re-set all stencil
                values.

-------------------------------------------------------------------------------
                                                 *love-love.graphics.translate*
|love.graphics.translate|

Translates the coordinate system in two dimensions.

When this function is called with two numbers, dx, and dy, all the following
drawing operations take effect as if their x and y coordinates were x+dx and
y+dy.

Scale and translate are not commutative operations, therefore, calling them in
different orders will change the outcome.

This change lasts until love.graphics.clear is called (which is called
automatically before love.draw in the default love.run function), or a
love.graphics.pop reverts to a previous coordinate system state.

Translating using whole numbers will prevent tearing/blurring of images and
fonts draw after translating.

Synopses:

    1.  |love.graphics.translate|( `dx`, `dy` )

Variants:

    1.  |love.graphics.translate|( `dx`, `dy` )

        See function description

        returns:

            None

        arguments:

            `dx`: <number>

                The translation relative to the x-axis.

            `dy`: <number>

                The translation relative to the y-axis.
-------------------------------------------------------------------------------
                                                     *love-love.graphics-types*
The types of |love.graphics|:

    |Canvas|                              |love-Canvas|
    |Font|                                |love-Font|
    |Mesh|                                |love-Mesh|
    |Image|                               |love-Image|
    |ParticleSystem|                      |love-ParticleSystem|
    |Quad|                                |love-Quad|
    |Shader|                              |love-Shader|
    |SpriteBatch|                         |love-SpriteBatch|
    |Text|                                |love-Text|
    |Texture|                             |love-Texture|
    |Video|                               |love-Video|

-------------------------------------------------------------------------------
                                                                  *love-Canvas*
|Canvas|

A Canvas is used for off-screen rendering. Think of it as an invisible screen
that you can draw to, but that will not be visible until you draw it to the
actual visible screen. It is also known as "render to texture".

By drawing things that do not change position often (such as background items)
to the Canvas, and then drawing the entire Canvas instead of each item, you can
reduce the number of draw operations performed each frame.

In versions prior to 0.10.0, not all graphics cards that LÖVE supported could
use Canvases. love.graphics.isSupported("canvas") could be used to check for
support at runtime.

                                                     *love-Canvas-constructors*
    constructors:

        |newCanvas|                       |love-newCanvas|

                                                       *love-Canvas-supertypes*
    supertypes:

        |Object|                          |love-Object|
        |Drawable|                        |love-Drawable|
        |Texture|                         |love-Texture|

                                                         *love-Canvas-subtypes*
    subtypes:

        None

                                                        *love-Canvas-functions*
    functions:

        |getDimensions|                   |love-Canvas:getDimensions|
        |getFilter|                       |love-Canvas:getFilter|
        |getFormat|                       |love-Canvas:getFormat|
        |getHeight|                       |love-Canvas:getHeight|
        |getMSAA|                         |love-Canvas:getMSAA|
        |getWidth|                        |love-Canvas:getWidth|
        |getWrap|                         |love-Canvas:getWrap|
        |newImageData|                    |love-Canvas:newImageData|
        |renderTo|                        |love-Canvas:renderTo|
        |setFilter|                       |love-Canvas:setFilter|
        |setWrap|                         |love-Canvas:setWrap|

-------------------------------------------------------------------------------
                                                    *love-Canvas:getDimensions*
|Canvas:getDimensions|

Gets the width and height of the Canvas.

Synopses:

    1.  `width`, `height` = |Canvas:getDimensions|()

Variants:

    1.  `width`, `height` = |Canvas:getDimensions|()

        See function description

        returns:

            `width`: <number>

                The width of the Canvas, in pixels.

            `height`: <number>

                The height of the Canvas, in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Canvas:getFilter*
|Canvas:getFilter|

Gets the filter mode of the Canvas.

Synopses:

    1.  `min`, `mag`, `anisotropy` = |Canvas:getFilter|()

Variants:

    1.  `min`, `mag`, `anisotropy` = |Canvas:getFilter|()

        See function description

        returns:

            `min`: <FilterMode>

                Filter mode used when minifying the canvas.

            `mag`: <FilterMode>

                Filter mode used when magnifying the canvas.

            `anisotropy`: <number>

                Maximum amount of anisotropic filtering used.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Canvas:getFormat*
|Canvas:getFormat|

Gets the texture format of the Canvas.

Synopses:

    1.  `format` = |Canvas:getFormat|()

Variants:

    1.  `format` = |Canvas:getFormat|()

        See function description

        returns:

            `format`: <CanvasFormat>

                The format of the Canvas.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Canvas:getHeight*
|Canvas:getHeight|

Gets the height of the Canvas.

Synopses:

    1.  `height` = |Canvas:getHeight|()

Variants:

    1.  `height` = |Canvas:getHeight|()

        See function description

        returns:

            `height`: <number>

                The height of the Canvas, in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Canvas:getMSAA*
|Canvas:getMSAA|

Gets the number of multisample antialiasing (MSAA) samples used when drawing to
the Canvas.

This may be different than the number used as an argument to
love.graphics.newCanvas if the system running LÖVE doesn't support that
number.

Synopses:

    1.  `samples` = |Canvas:getMSAA|()

Variants:

    1.  `samples` = |Canvas:getMSAA|()

        See function description

        returns:

            `samples`: <number>

                The number of multisample antialiasing samples used by the
                canvas when drawing to it.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Canvas:getWidth*
|Canvas:getWidth|

Gets the width of the Canvas.

Synopses:

    1.  `width` = |Canvas:getWidth|()

Variants:

    1.  `width` = |Canvas:getWidth|()

        See function description

        returns:

            `width`: <number>

                The width of the Canvas, in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Canvas:getWrap*
|Canvas:getWrap|

Gets the wrapping properties of a Canvas.

This function returns the currently set horizontal and vertical wrapping modes
for the Canvas.

Synopses:

    1.  `horizontal`, `vertical` = |Canvas:getWrap|()

Variants:

    1.  `horizontal`, `vertical` = |Canvas:getWrap|()

        See function description

        returns:

            `horizontal`: <WrapMode>

                Horizontal wrapping mode of the Canvas.

            `vertical`: <WrapMode>

                Vertical wrapping mode of the Canvas.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Canvas:newImageData*
|Canvas:newImageData|

Generates ImageData from the contents of the Canvas.

Synopses:

    1.  `data` = |Canvas:newImageData|()
    2.  `data` = |Canvas:newImageData|( `x`, `y`, `width`, `height` )

Variants:

    1.  `data` = |Canvas:newImageData|()

        See function description

        returns:

            `data`: <ImageData>

                The image data stored in the Canvas.

        arguments:

            None
    2.  `data` = |Canvas:newImageData|( `x`, `y`, `width`, `height` )

        See function description

        returns:

            `data`: <ImageData>

                The new ImageData made from the Canvas' contents.

        arguments:

            `x`: <number>

                The x-axis of the top-left corner of the area within the Canvas
                to capture.

            `y`: <number>

                The y-axis of the top-left corner of the area within the Canvas
                to capture.

            `width`: <number>

                The width of the area within the Canvas to capture.

            `height`: <number>

                The height of the area within the Canvas to capture.

-------------------------------------------------------------------------------
                                                         *love-Canvas:renderTo*
|Canvas:renderTo|

Render to the Canvas using a function.

Synopses:

    1.  |Canvas:renderTo|( `func` )

Variants:

    1.  |Canvas:renderTo|( `func` )

        See function description

        returns:

            None

        arguments:

            `func`: <function>

                A function performing drawing operations.

-------------------------------------------------------------------------------
                                                        *love-Canvas:setFilter*
|Canvas:setFilter|

Sets the filter of the Canvas.

Synopses:

    1.  |Canvas:setFilter|( `min`, `mag`, `anisotropy` )

Variants:

    1.  |Canvas:setFilter|( `min`, `mag`, `anisotropy` )

        See function description

        returns:

            None

        arguments:

            `min`: <FilterMode>

                How to scale a canvas down.

            `mag`: <FilterMode>

                How to scale a canvas up.

            `anisotropy`: <number>

                Maximum amount of anisotropic filtering used.

-------------------------------------------------------------------------------
                                                          *love-Canvas:setWrap*
|Canvas:setWrap|

Sets the wrapping properties of a Canvas.

This function sets the way the edges of a Canvas are treated if it is scaled or
rotated. If the WrapMode is set to "clamp", the edge will not be interpolated.
If set to "repeat", the edge will be interpolated with the pixels on the
opposing side of the framebuffer.

Synopses:

    1.  |Canvas:setWrap|( `horizontal`, `vertical` )

Variants:

    1.  |Canvas:setWrap|( `horizontal`, `vertical` )

        See function description

        returns:

            None

        arguments:

            `horizontal`: <WrapMode>

                Horizontal wrapping mode of the Canvas.

            `vertical`: <WrapMode>

                Vertical wrapping mode of the Canvas.

-------------------------------------------------------------------------------
                                                                    *love-Font*
|Font|

Defines the shape of characters than can be drawn onto the screen.

                                                       *love-Font-constructors*
    constructors:

        |newFont|                         |love-newFont|
        |newImageFont|                    |love-newImageFont|
        |setNewFont|                      |love-setNewFont|

                                                         *love-Font-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                           *love-Font-subtypes*
    subtypes:

        None

                                                          *love-Font-functions*
    functions:

        |getAscent|                       |love-Font:getAscent|
        |getBaseline|                     |love-Font:getBaseline|
        |getDescent|                      |love-Font:getDescent|
        |getFilter|                       |love-Font:getFilter|
        |getHeight|                       |love-Font:getHeight|
        |getLineHeight|                   |love-Font:getLineHeight|
        |getWidth|                        |love-Font:getWidth|
        |getWrap|                         |love-Font:getWrap|
        |hasGlyphs|                       |love-Font:hasGlyphs|
        |setFallbacks|                    |love-Font:setFallbacks|
        |setFilter|                       |love-Font:setFilter|
        |setLineHeight|                   |love-Font:setLineHeight|

-------------------------------------------------------------------------------
                                                          *love-Font:getAscent*
|Font:getAscent|

Gets the ascent of the Font. The ascent spans the distance between the baseline
and the top of the glyph that reaches farthest from the baseline.

Synopses:

    1.  `ascent` = |Font:getAscent|()

Variants:

    1.  `ascent` = |Font:getAscent|()

        See function description

        returns:

            `ascent`: <number>

                The ascent of the Font in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Font:getBaseline*
|Font:getBaseline|

Gets the baseline of the Font. Most scripts share the notion of a baseline: an
imaginary horizontal line on which characters rest. In some scripts, parts of
glyphs lie below the baseline.

Synopses:

    1.  `baseline` = |Font:getBaseline|()

Variants:

    1.  `baseline` = |Font:getBaseline|()

        See function description

        returns:

            `baseline`: <number>

                The baseline of the Font in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Font:getDescent*
|Font:getDescent|

Gets the descent of the Font. The descent spans the distance between the
baseline and the lowest descending glyph in a typeface.

Synopses:

    1.  `descent` = |Font:getDescent|()

Variants:

    1.  `descent` = |Font:getDescent|()

        See function description

        returns:

            `descent`: <number>

                The descent of the Font in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Font:getFilter*
|Font:getFilter|

Gets the filter mode for a font.

Synopses:

    1.  `min`, `mag`, `anisotropy` = |Font:getFilter|()

Variants:

    1.  `min`, `mag`, `anisotropy` = |Font:getFilter|()

        See function description

        returns:

            `min`: <FilterMode>

                Filter mode used when minifying the font.

            `mag`: <FilterMode>

                Filter mode used when magnifying the font.

            `anisotropy`: <number>

                Maximum amount of anisotropic filtering used.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Font:getHeight*
|Font:getHeight|

Gets the height of the Font. The height of the font is the size including any
spacing; the height which it will need.

Synopses:

    1.  `height` = |Font:getHeight|()

Variants:

    1.  `height` = |Font:getHeight|()

        See function description

        returns:

            `height`: <number>

                The height of the Font in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Font:getLineHeight*
|Font:getLineHeight|

Gets the line height. This will be the value previously set by
Font:setLineHeight, or 1.0 by default.

Synopses:

    1.  `height` = |Font:getLineHeight|()

Variants:

    1.  `height` = |Font:getLineHeight|()

        See function description

        returns:

            `height`: <number>

                The current line height.

        arguments:

            None

-------------------------------------------------------------------------------
                                                           *love-Font:getWidth*
|Font:getWidth|

Determines the horizontal size a line of text needs. Does not support
line-breaks.

Synopses:

    1.  `width` = |Font:getWidth|( `line` )

Variants:

    1.  `width` = |Font:getWidth|( `line` )

        See function description

        returns:

            `width`: <number>

                The width of the line.

        arguments:

            `line`: <string>

                A line of text.

-------------------------------------------------------------------------------
                                                            *love-Font:getWrap*
|Font:getWrap|

Gets formatting information for text, given a wrap limit.

This function accounts for newlines correctly (i.e. '\n').

Synopses:

    1.  `width`, `wrappedtext` = |Font:getWrap|( `text`, `wraplimit` )

Variants:

    1.  `width`, `wrappedtext` = |Font:getWrap|( `text`, `wraplimit` )

        See function description

        returns:

            `width`: <number>

                The maximum width of the wrapped text.

            `wrappedtext`: <table>

                A sequence containing each line of text that was wrapped.

        arguments:

            `text`: <string>

                The text that will be wrapped.

            `wraplimit`: <number>

                The maximum width in pixels of each line that text is allowed
                before wrapping.

-------------------------------------------------------------------------------
                                                          *love-Font:hasGlyphs*
|Font:hasGlyphs|

Gets whether the font can render a particular character.

Synopses:

    1.  `hasglyph` = |Font:hasGlyphs|( `character` )
    2.  `hasglyph` = |Font:hasGlyphs|( `codepoint` )

Variants:

    1.  `hasglyph` = |Font:hasGlyphs|( `character` )

        See function description

        returns:

            `hasglyph`: <boolean>

                Whether the font can render the glyph represented by the
                character.

        arguments:

            `character`: <string>

                A unicode character.
    2.  `hasglyph` = |Font:hasGlyphs|( `codepoint` )

        See function description

        returns:

            `hasglyph`: <boolean>

                Whether the font can render the glyph represented by the
                codepoint number.

        arguments:

            `codepoint`: <number>

                A unicode codepoint number.

-------------------------------------------------------------------------------
                                                       *love-Font:setFallbacks*
|Font:setFallbacks|

Sets the fallback fonts. When the Font doesn't contain a glyph, it will
substitute the glyph from the next subsequent fallback Fonts. This is akin to
setting a "font stack" in Cascading Style Sheets (CSS).

Synopses:

    1.  |Font:setFallbacks|( `fallbackfont1`, `...` )

Variants:

    1.  |Font:setFallbacks|( `fallbackfont1`, `...` )

        See function description

        returns:

            None

        arguments:

            `fallbackfont1`: <Font>

                The first fallback Font to use.

            `...`: <Font>

                Additional fallback Fonts.

-------------------------------------------------------------------------------
                                                          *love-Font:setFilter*
|Font:setFilter|

Sets the filter mode for a font.

Synopses:

    1.  |Font:setFilter|( `min`, `mag`, `anisotropy` )

Variants:

    1.  |Font:setFilter|( `min`, `mag`, `anisotropy` )

        See function description

        returns:

            None

        arguments:

            `min`: <FilterMode>

                How to scale a font down.

            `mag`: <FilterMode>

                How to scale a font up.

            `anisotropy`: <number>

                Maximum amount of anisotropic filtering used.

-------------------------------------------------------------------------------
                                                      *love-Font:setLineHeight*
|Font:setLineHeight|

Sets the line height. When rendering the font in lines the actual height will
be determined by the line height multiplied by the height of the font. The
default is 1.0.

Synopses:

    1.  |Font:setLineHeight|( `height` )

Variants:

    1.  |Font:setLineHeight|( `height` )

        See function description

        returns:

            None

        arguments:

            `height`: <number>

                The new line height.

-------------------------------------------------------------------------------
                                                                    *love-Mesh*
|Mesh|

A 2D polygon mesh used for drawing arbitrary textured shapes.

                                                       *love-Mesh-constructors*
    constructors:

        |newMesh|                         |love-newMesh|

                                                         *love-Mesh-supertypes*
    supertypes:

        |Drawable|                        |love-Drawable|
        |Object|                          |love-Object|

                                                           *love-Mesh-subtypes*
    subtypes:

        None

                                                          *love-Mesh-functions*
    functions:

        |attachAttribute|                 |love-Mesh:attachAttribute|
        |getDrawMode|                     |love-Mesh:getDrawMode|
        |getDrawRange|                    |love-Mesh:getDrawRange|
        |getTexture|                      |love-Mesh:getTexture|
        |getVertex|                       |love-Mesh:getVertex|
        |getVertexAttribute|              |love-Mesh:getVertexAttribute|
        |getVertexCount|                  |love-Mesh:getVertexCount|
        |getVertexFormat|                 |love-Mesh:getVertexFormat|
        |getVertexMap|                    |love-Mesh:getVertexMap|
        |isAttributeEnabled|              |love-Mesh:isAttributeEnabled|
        |setAttributeEnabled|             |love-Mesh:setAttributeEnabled|
        |setDrawMode|                     |love-Mesh:setDrawMode|
        |setDrawRange|                    |love-Mesh:setDrawRange|
        |setTexture|                      |love-Mesh:setTexture|
        |setVertex|                       |love-Mesh:setVertex|
        |setVertexAttribute|              |love-Mesh:setVertexAttribute|
        |setVertexMap|                    |love-Mesh:setVertexMap|
        |setVertices|                     |love-Mesh:setVertices|

-------------------------------------------------------------------------------
                                                    *love-Mesh:attachAttribute*
|Mesh:attachAttribute|

Attaches a vertex attribute from a different Mesh onto this Mesh, for use when
drawing. This can be used to share vertex attribute data between several
different Meshes.

Synopses:

    1.  |Mesh:attachAttribute|( `name`, `mesh` )

Variants:

    1.  |Mesh:attachAttribute|( `name`, `mesh` )

        See function description

        returns:

            None

        arguments:

            `name`: <string>

                The name of the vertex attribute to attach.

            `mesh`: <Mesh>

                The Mesh to get the vertex attribute from.

-------------------------------------------------------------------------------
                                                        *love-Mesh:getDrawMode*
|Mesh:getDrawMode|

Gets the mode used when drawing the Mesh.

Synopses:

    1.  `mode` = |Mesh:getDrawMode|()

Variants:

    1.  `mode` = |Mesh:getDrawMode|()

        See function description

        returns:

            `mode`: <MeshDrawMode>

                The mode used when drawing the Mesh.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Mesh:getDrawRange*
|Mesh:getDrawRange|

Gets the range of vertices used when drawing the Mesh.

If the Mesh's draw range has not been set previously with Mesh:setDrawRange,
this function will return nil.

Synopses:

    1.  `min`, `max` = |Mesh:getDrawRange|()

Variants:

    1.  `min`, `max` = |Mesh:getDrawRange|()

        See function description

        returns:

            `min`: <number>

                The index of the first vertex used when drawing, or the index
                of the first value in the vertex map used if one is set for
                this Mesh.

            `max`: <number>

                The index of the last vertex used when drawing, or the index of
                the last value in the vertex map used if one is set for this
                Mesh.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Mesh:getTexture*
|Mesh:getTexture|

Gets the texture (Image or Canvas) used when drawing the Mesh.

Synopses:

    1.  `texture` = |Mesh:getTexture|()

Variants:

    1.  `texture` = |Mesh:getTexture|()

        See function description

        returns:

            `texture`: <Texture>

                The Image or Canvas to texture the Mesh with when drawing, or
                nil if none is set.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Mesh:getVertex*
|Mesh:getVertex|

Gets the properties of a vertex in the Mesh.

Synopses:

    1.  `attributecomponent`, `...` = |Mesh:getVertex|( `index` )
    2.  `x`, `y`, `u`, `v`, `r`, `g`, `b`, `a` = |Mesh:getVertex|(
        `index` )

Variants:

    1.  `attributecomponent`, `...` = |Mesh:getVertex|( `index` )

        See function description

        returns:

            `attributecomponent`: <number>

                The first component of the first vertex attribute in the
                specified vertex.

            `...`: <number>

                Additional components of all vertex attributes in the specified
                vertex.

        arguments:

            `index`: <number>

                The index of the the vertex you want to retrieve the
                information for.
    2.  `x`, `y`, `u`, `v`, `r`, `g`, `b`, `a` = |Mesh:getVertex|(
        `index` )

        See function description

        returns:

            `x`: <number>

                The position of the vertex on the x-axis.

            `y`: <number>

                The position of the vertex on the y-axis.

            `u`: <number>

                The horizontal component of the texture coordinate.

            `v`: <number>

                The vertical component of the texture coordinate.

            `r`: <number>

                The red component of the vertex's color.

            `g`: <number>

                The green component of the vertex's color.

            `b`: <number>

                The blue component of the vertex's color.

            `a`: <number>

                The alpha component of the vertex's color.

        arguments:

            `index`: <number>

                The index of the the vertex you want to retrieve the
                information for.

-------------------------------------------------------------------------------
                                                 *love-Mesh:getVertexAttribute*
|Mesh:getVertexAttribute|

Gets the properties of a specific attribute within a vertex in the Mesh.

Meshes without a custom vertex format specified in love.graphics.newMesh have
position as their first attribute, texture coordinates as their second
attribute, and color as their third attribute.

Synopses:

    1.  `value1`, `value2`, `...` = |Mesh:getVertexAttribute|(
        `vertexindex`, `attributeindex` )

Variants:

    1.  `value1`, `value2`, `...` = |Mesh:getVertexAttribute|(
        `vertexindex`, `attributeindex` )

        See function description

        returns:

            `value1`: <number>

                The value of the first component of the attribute.

            `value2`: <number>

                The value of the second component of the attribute.

            `...`: <number>

                Any additional vertex attribute components.

        arguments:

            `vertexindex`: <number>

                The index of the the vertex to be modified.

            `attributeindex`: <number>

                The index of the attribute within the vertex to be modified.

-------------------------------------------------------------------------------
                                                     *love-Mesh:getVertexCount*
|Mesh:getVertexCount|

Returns the total number of vertices in the Mesh.

Synopses:

    1.  `num` = |Mesh:getVertexCount|()

Variants:

    1.  `num` = |Mesh:getVertexCount|()

        See function description

        returns:

            `num`: <number>

                The total number of vertices in this Mesh.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-Mesh:getVertexFormat*
|Mesh:getVertexFormat|

Gets the vertex format that the Mesh was created with.

Synopses:

    1.  `format` = |Mesh:getVertexFormat|()

Variants:

    1.  `format` = |Mesh:getVertexFormat|()

        See function description

        returns:

            `format`: <table>

                The vertex format of the Mesh, which is a table containing
                tables for each vertex attribute the Mesh was created with, in
                the form of {attribute, ...}.

                `attribute`: <table>

                    A table containing the attribute's name, it's data type,
                    and the number of components in the attribute, in the form
                    of {name, datatype, components}.

                `...`: <table>

                    Additional vertex attributes in the Mesh.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Mesh:getVertexMap*
|Mesh:getVertexMap|

Gets the vertex map for the Mesh. The vertex map describes the order in which
the vertices are used when the Mesh is drawn. The vertices, vertex map, and
mesh draw mode work together to determine what exactly is displayed on the
screen.

If no vertex map has been set previously via Mesh:setVertexMap, then this
function will return nil in LÖVE 0.10.0+, or an empty table in 0.9.2 and
older.

Synopses:

    1.  `map` = |Mesh:getVertexMap|()

Variants:

    1.  `map` = |Mesh:getVertexMap|()

        See function description

        returns:

            `map`: <table>

                A table containing a list of vertex indices used when drawing.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-Mesh:isAttributeEnabled*
|Mesh:isAttributeEnabled|

Gets whether a specific vertex attribute in the Mesh is enabled. Vertex data
from disabled attributes is not used when drawing the Mesh.

Synopses:

    1.  `enabled` = |Mesh:isAttributeEnabled|( `name` )

Variants:

    1.  `enabled` = |Mesh:isAttributeEnabled|( `name` )

        See function description

        returns:

            `enabled`: <boolean>

                Whether the vertex attribute is used when drawing this Mesh.

        arguments:

            `name`: <string>

                The name of the vertex attribute to enable or disable.

-------------------------------------------------------------------------------
                                                *love-Mesh:setAttributeEnabled*
|Mesh:setAttributeEnabled|

Enables or disables a specific vertex attribute in the Mesh. Vertex data from
disabled attributes is not used when drawing the Mesh.

Synopses:

    1.  |Mesh:setAttributeEnabled|( `name`, `enable` )

Variants:

    1.  |Mesh:setAttributeEnabled|( `name`, `enable` )

        See function description

        returns:

            None

        arguments:

            `name`: <string>

                The name of the vertex attribute to enable or disable.

            `enable`: <boolean>

                Whether the vertex attribute is used when drawing this Mesh.

-------------------------------------------------------------------------------
                                                        *love-Mesh:setDrawMode*
|Mesh:setDrawMode|

Sets the mode used when drawing the Mesh.

Synopses:

    1.  |Mesh:setDrawMode|( `mode` )

Variants:

    1.  |Mesh:setDrawMode|( `mode` )

        See function description

        returns:

            None

        arguments:

            `mode`: <MeshDrawMode>

                The mode to use when drawing the Mesh.

-------------------------------------------------------------------------------
                                                       *love-Mesh:setDrawRange*
|Mesh:setDrawRange|

Restricts the drawn vertices of the Mesh to a subset of the total.

If a vertex map is used with the Mesh, this method will set a subset of the
values in the vertex map array to use, instead of a subset of the total
vertices in the Mesh.

For example, if Mesh:setVertexMap(1, 2, 3, 1, 3, 4) and Mesh:setDrawRange(4, 6)
are called, vertices 1, 3, and 4 will be drawn.

Synopses:

    1.  |Mesh:setDrawRange|( `min`, `max` )
    2.  |Mesh:setDrawRange|()

Variants:

    1.  |Mesh:setDrawRange|( `min`, `max` )

        See function description

        returns:

            None

        arguments:

            `min`: <number>

                The index of the first vertex to use when drawing, or the index
                of the first value in the vertex map to use if one is set for
                this Mesh.

            `max`: <number>

                The index of the last vertex to use when drawing, or the index
                of the last value in the vertex map to use if one is set for
                this Mesh.
    2.  |Mesh:setDrawRange|()

        Allows all vertices in the Mesh to be drawn.

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Mesh:setTexture*
|Mesh:setTexture|

Sets the texture (Image or Canvas) used when drawing the Mesh.

When called without an argument disables the texture. Untextured meshes have a
white color by default.

Synopses:

    1.  |Mesh:setTexture|()
    2.  |Mesh:setTexture|( `texture` )

Variants:

    1.  |Mesh:setTexture|()

        See function description

        returns:

            None

        arguments:

            None
    2.  |Mesh:setTexture|( `texture` )

        See function description

        returns:

            None

        arguments:

            `texture`: <Texture>

                The Image or Canvas to texture the Mesh with when drawing.

-------------------------------------------------------------------------------
                                                          *love-Mesh:setVertex*
|Mesh:setVertex|

Sets the properties of a vertex in the Mesh.

Synopses:

    1.  |Mesh:setVertex|( `index`, `attributecomponent`, `...` )
    2.  |Mesh:setVertex|( `index`, `vertex` )
    3.  |Mesh:setVertex|( `index`, `x`, `y`, `u`, `v`, `r`, `g`, `b`,
        `a` )
    4.  |Mesh:setVertex|( `index`, `vertex` )

Variants:

    1.  |Mesh:setVertex|( `index`, `attributecomponent`, `...` )

        See function description

        returns:

            None

        arguments:

            `index`: <number>

                The index of the the vertex you want to modify.

            `attributecomponent`: <number>

                The first component of the first vertex attribute in the
                specified vertex.

            `...`: <number>

                Additional components of all vertex attributes in the specified
                vertex.
    2.  |Mesh:setVertex|( `index`, `vertex` )

        See function description

        returns:

            None

        arguments:

            `index`: <number>

                The index of the the vertex you want to modify.

            `vertex`: <table>

                A table with vertex information, in the form of
                {attributecomponent, ...}.

                `attributecomponent`: <number>

                    The first component of the first vertex attribute in the
                    specified vertex.

                `...`: <number>

                    Additional components of all vertex attributes in the
                    specified vertex.
    3.  |Mesh:setVertex|( `index`, `x`, `y`, `u`, `v`, `r`, `g`, `b`,
        `a` )

        Sets the vertex components of a Mesh that wasn't created with a custom vertex format.

        returns:

            None

        arguments:

            `index`: <number>

                The index of the the vertex you want to modify.

            `x`: <number>

                The position of the vertex on the x-axis.

            `y`: <number>

                The position of the vertex on the y-axis.

            `u`: <number>

                The horizontal component of the texture coordinate.

            `v`: <number>

                The vertical component of the texture coordinate.

            `r`: <number>

                The red component of the vertex's color.

            `g`: <number>

                The green component of the vertex's color.

            `b`: <number>

                The blue component of the vertex's color.

            `a`: <number>

                The alpha component of the vertex's color.
    4.  |Mesh:setVertex|( `index`, `vertex` )

        Sets the vertex components of a Mesh that wasn't created with a custom vertex format.

        returns:

            None

        arguments:

            `index`: <number>

                The index of the the vertex you want to modify.

            `vertex`: <table>

                A table with vertex information.

                `[1]`: <number>

                    The position of the vertex on the x-axis.

                `[2]`: <number>

                    The position of the vertex on the y-axis.

                `[3]`: <number>

                    The horizontal component of the texture coordinate.

                `[4]`: <number>

                    The vertical component of the texture coordinate.

                `[5]`: <number>

                    The red component of the vertex's color.

                `[6]`: <number>

                    The green component of the vertex's color.

                `[7]`: <number>

                    The blue component of the vertex's color.

                `[8]`: <number>

                    The alpha component of the vertex's color.

-------------------------------------------------------------------------------
                                                 *love-Mesh:setVertexAttribute*
|Mesh:setVertexAttribute|

Sets the properties of a specific attribute within a vertex in the Mesh.

Meshes without a custom vertex format specified in love.graphics.newMesh have
position as their first attribute, texture coordinates as their second
attribute, and color as their third attribute.

Synopses:

    1.  |Mesh:setVertexAttribute|( `vertexindex`, `attributeindex`,
        `value1`, `value2`, `...` )

Variants:

    1.  |Mesh:setVertexAttribute|( `vertexindex`, `attributeindex`,
        `value1`, `value2`, `...` )

        See function description

        returns:

            None

        arguments:

            `vertexindex`: <number>

                The index of the the vertex to be modified.

            `attributeindex`: <number>

                The index of the attribute within the vertex to be modified.

            `value1`: <number>

                The value of the first component of the attribute.

            `value2`: <number>

                The value of the second component of the attribute.

            `...`: <number>

                Any additional vertex attribute components.

-------------------------------------------------------------------------------
                                                       *love-Mesh:setVertexMap*
|Mesh:setVertexMap|

Sets the vertex map for the Mesh. The vertex map describes the order in which
the vertices are used when the Mesh is drawn. The vertices, vertex map, and
mesh draw mode work together to determine what exactly is displayed on the
screen.

The vertex map allows you to re-order or reuse vertices when drawing without
changing the actual vertex parameters or duplicating vertices. It is especially
useful when combined with different Mesh Draw Modes.

Synopses:

    1.  |Mesh:setVertexMap|( `map` )
    2.  |Mesh:setVertexMap|( `vi1`, `vi2`, `vi3` )

Variants:

    1.  |Mesh:setVertexMap|( `map` )

        See function description

        returns:

            None

        arguments:

            `map`: <table>

                A table containing a list of vertex indices to use when
                drawing. Values must be in the range of [1,
                Mesh:getVertexCount()].
    2.  |Mesh:setVertexMap|( `vi1`, `vi2`, `vi3` )

        See function description

        returns:

            None

        arguments:

            `vi1`: <number>

                The index of the first vertex to use when drawing. Must be in
                the range of [1, Mesh:getVertexCount()].

            `vi2`: <number>

                The index of the second vertex to use when drawing.

            `vi3`: <number>

                The index of the third vertex to use when drawing.

-------------------------------------------------------------------------------
                                                        *love-Mesh:setVertices*
|Mesh:setVertices|

Replaces a range of vertices in the Mesh with new ones. The total number of
vertices in a Mesh cannot be changed after it has been created.

Synopses:

    1.  |Mesh:setVertices|( `vertices` )
    2.  |Mesh:setVertices|( `vertices` )

Variants:

    1.  |Mesh:setVertices|( `vertices` )

        See function description

        returns:

            None

        arguments:

            `vertices`: <table>

                The table filled with vertex information tables for each
                vertex, in the form of {vertex, ...} where each vertex is a
                table in the form of {attributecomponent, ...}.

                `attributecomponent`: <number>

                    The first component of the first vertex attribute in the
                    vertex.

                `...`: <number>

                    Additional components of all vertex attributes in the
                    vertex.

                `startvertex`: <number>

                    The index of the first vertex to replace.
    2.  |Mesh:setVertices|( `vertices` )

        Sets the vertex components of a Mesh that wasn't created with a custom vertex format.

        returns:

            None

        arguments:

            `vertices`: <table>

                The table filled with vertex information tables for each vertex
                as follows:

                `[1]`: <number>

                    The position of the vertex on the x-axis.

                `[2]`: <number>

                    The position of the vertex on the y-axis.

                `[3]`: <number>

                    The horizontal component of the texture coordinate. Texture
                    coordinates are normally in the range of [0, 1], but can be
                    greater or less (see WrapMode).

                `[4]`: <number>

                    The vertical component of the texture coordinate. Texture
                    coordinates are normally in the range of [0, 1], but can be
                    greater or less (see WrapMode).

                `[5]`: <number>

                    The red color component.

                `[6]`: <number>

                    The green color component.

                `[7]`: <number>

                    The blue color component.

                `[8]`: <number>

                    The alpha color component.

-------------------------------------------------------------------------------
                                                                   *love-Image*
|Image|

Drawable image type.

                                                      *love-Image-constructors*
    constructors:

        |newImage|                        |love-newImage|

                                                        *love-Image-supertypes*
    supertypes:

        |Object|                          |love-Object|
        |Drawable|                        |love-Drawable|
        |Texture|                         |love-Texture|

                                                          *love-Image-subtypes*
    subtypes:

        None

                                                         *love-Image-functions*
    functions:

        |getData|                         |love-Image:getData|
        |getDimensions|                   |love-Image:getDimensions|
        |getFilter|                       |love-Image:getFilter|
        |getFlags|                        |love-Image:getFlags|
        |getHeight|                       |love-Image:getHeight|
        |getMipmapFilter|                 |love-Image:getMipmapFilter|
        |getWidth|                        |love-Image:getWidth|
        |getWrap|                         |love-Image:getWrap|
        |refresh|                         |love-Image:refresh|
        |setFilter|                       |love-Image:setFilter|
        |setMipmapFilter|                 |love-Image:setMipmapFilter|
        |setWrap|                         |love-Image:setWrap|

-------------------------------------------------------------------------------
                                                           *love-Image:getData*
|Image:getData|

Gets the original ImageData or CompressedImageData used to create the Image.

All Images keep a reference to the Data that was used to create the Image. The
Data is used to refresh the Image when love.window.setMode or Image:refresh is
called.

Synopses:

    1.  `data` = |Image:getData|()
    2.  `data` = |Image:getData|()

Variants:

    1.  `data` = |Image:getData|()

        See function description

        returns:

            `data`: <ImageData>

                The original ImageData used to create the Image, if the image
                is not compressed.

        arguments:

            None
    2.  `data` = |Image:getData|()

        See function description

        returns:

            `data`: <CompressedImageData>

                The original CompressedImageData used to create the Image, if
                the image is compressed.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Image:getDimensions*
|Image:getDimensions|

Gets the width and height of the Image.

Synopses:

    1.  `width`, `height` = |Image:getDimensions|()

Variants:

    1.  `width`, `height` = |Image:getDimensions|()

        See function description

        returns:

            `width`: <number>

                The width of the Image, in pixels.

            `height`: <number>

                The height of the Image, in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Image:getFilter*
|Image:getFilter|

Gets the filter mode for an image.

Synopses:

    1.  `min`, `mag` = |Image:getFilter|()

Variants:

    1.  `min`, `mag` = |Image:getFilter|()

        See function description

        returns:

            `min`: <FilterMode>

                Filter mode used when minifying the image.

            `mag`: <FilterMode>

                Filter mode used when magnifying the image.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Image:getFlags*
|Image:getFlags|

Gets the flags used when the image was created.

Synopses:

    1.  `flags` = |Image:getFlags|()

Variants:

    1.  `flags` = |Image:getFlags|()

        See function description

        returns:

            `flags`: <table>

                A table with ImageFlag keys.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Image:getHeight*
|Image:getHeight|

Gets the height of the Image.

Synopses:

    1.  `height` = |Image:getHeight|()

Variants:

    1.  `height` = |Image:getHeight|()

        See function description

        returns:

            `height`: <number>

                The height of the Image, in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-Image:getMipmapFilter*
|Image:getMipmapFilter|

Gets the mipmap filter mode for an Image.

Synopses:

    1.  `mode`, `sharpness` = |Image:getMipmapFilter|()

Variants:

    1.  `mode`, `sharpness` = |Image:getMipmapFilter|()

        See function description

        returns:

            `mode`: <FilterMode>

                The filter mode used in between mipmap levels. nil if mipmap
                filtering is not enabled.

            `sharpness`: <number>

                Value used to determine whether the image should use more or
                less detailed mipmap levels than normal when drawing.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Image:getWidth*
|Image:getWidth|

Gets the width of the Image.

Synopses:

    1.  `width` = |Image:getWidth|()

Variants:

    1.  `width` = |Image:getWidth|()

        See function description

        returns:

            `width`: <number>

                The width of the Image, in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                           *love-Image:getWrap*
|Image:getWrap|

Gets the wrapping properties of an Image.

This function returns the currently set horizontal and vertical wrapping modes
for the image.

Synopses:

    1.  `horizontal`, `vertical` = |Image:getWrap|()

Variants:

    1.  `horizontal`, `vertical` = |Image:getWrap|()

        See function description

        returns:

            `horizontal`: <WrapMode>

                Horizontal wrapping mode of the image.

            `vertical`: <WrapMode>

                Vertical wrapping mode of the image.

        arguments:

            None

-------------------------------------------------------------------------------
                                                           *love-Image:refresh*
|Image:refresh|

Reloads the Image's contents from the ImageData or CompressedImageData used to
create the image.

Synopses:

    1.  |Image:refresh|()
    2.  |Image:refresh|( `x`, `y`, `width`, `height` )

Variants:

    1.  |Image:refresh|()

        See function description

        returns:

            None

        arguments:

            None
    2.  |Image:refresh|( `x`, `y`, `width`, `height` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The x-axis of the top-left corner of the area within the Image
                to reload.

            `y`: <number>

                The y-axis of the top-left corner of the area within the Image
                to reload.

            `width`: <number>

                The width of the area within the Image to reload.

            `height`: <number>

                The height of the area within the Image to reload.

-------------------------------------------------------------------------------
                                                         *love-Image:setFilter*
|Image:setFilter|

Sets the filter mode for an image.

Synopses:

    1.  |Image:setFilter|( `min`, `mag` )

Variants:

    1.  |Image:setFilter|( `min`, `mag` )

        See function description

        returns:

            None

        arguments:

            `min`: <FilterMode>

                How to scale an image down.

            `mag`: <FilterMode>

                How to scale an image up.

-------------------------------------------------------------------------------
                                                   *love-Image:setMipmapFilter*
|Image:setMipmapFilter|

Sets the mipmap filter mode for an Image.

Mipmapping is useful when drawing an image at a reduced scale. It can improve
performance and reduce aliasing issues.

In 0.10.0 and newer, the Image must be created with the mipmaps flag enabled
for the mipmap filter to have any effect.

Synopses:

    1.  |Image:setMipmapFilter|( `filtermode`, `sharpness` )
    2.  |Image:setMipmapFilter|()

Variants:

    1.  |Image:setMipmapFilter|( `filtermode`, `sharpness` )

        See function description

        returns:

            None

        arguments:

            `filtermode`: <FilterMode>

                The filter mode to use in between mipmap levels. "nearest" will
                often give better performance.

            `sharpness`: <number>

                A positive sharpness value makes the image use a more detailed
                mipmap level when drawing, at the expense of performance. A
                negative value does the reverse.
    2.  |Image:setMipmapFilter|()

        Disables mipmap filtering.

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                           *love-Image:setWrap*
|Image:setWrap|

Sets the wrapping properties of an Image.

This function sets the way an Image is repeated when it is drawn with a Quad
that is larger than the image's extent. An image may be clamped or set to
repeat in both horizontal and vertical directions. Clamped images appear only
once, but repeated ones repeat as many times as there is room in the Quad.

If you use a Quad that is larger than the image extent and do not use repeated
tiling, there may be an unwanted visual effect of the image stretching all the
way to fill the Quad. If this is the case, setting Image:getWrap("repeat",
"repeat") for all the images to be repeated, and using Quad of appropriate size
will result in the best visual appearance.

Synopses:

    1.  |Image:setWrap|( `horizontal`, `vertical` )

Variants:

    1.  |Image:setWrap|( `horizontal`, `vertical` )

        See function description

        returns:

            None

        arguments:

            `horizontal`: <WrapMode>

                Horizontal wrapping mode of the image.

            `vertical`: <WrapMode>

                Vertical wrapping mode of the image.

-------------------------------------------------------------------------------
                                                          *love-ParticleSystem*
|ParticleSystem|

Used to create cool effects, like fire. The particle systems are created and
drawn on the screen using functions in love.graphics. They also need to be
updated in the update(dt) callback for you to see any changes in the particles
emitted.

                                             *love-ParticleSystem-constructors*
    constructors:

        |newParticleSystem|               |love-newParticleSystem|

                                               *love-ParticleSystem-supertypes*
    supertypes:

        |Drawable|                        |love-Drawable|
        |Object|                          |love-Object|

                                                 *love-ParticleSystem-subtypes*
    subtypes:

        None

                                                *love-ParticleSystem-functions*
    functions:

        |clone|                           |love-ParticleSystem:clone|
        |emit|                            |love-ParticleSystem:emit|
        |getCount|                        |love-ParticleSystem:getCount|
        |getAreaSpread|                   |love-ParticleSystem:getAreaSpread|
        |getBufferSize|                   |love-ParticleSystem:getBufferSize|
        |getColors|                       |love-ParticleSystem:getColors|
        |getDirection|                    |love-ParticleSystem:getDirection|
        |getEmissionRate|                 |love-ParticleSystem:getEmissionRate|
        |getInsertMode|                   |love-ParticleSystem:getInsertMode|
        |getLinearAcceleration|           |love-ParticleSystem:getLinearAccel-|
        |getLinearDamping|                |love-ParticleSystem:getLinearDampi-|
        |getEmitterLifetime|              |love-ParticleSystem:getEmitterLife-|
        |getOffset|                       |love-ParticleSystem:getOffset|
        |getParticleLifetime|             |love-ParticleSystem:getParticleLif-|
        |getQuads|                        |love-ParticleSystem:getQuads|
        |getPosition|                     |love-ParticleSystem:getPosition|
        |getRadialAcceleration|           |love-ParticleSystem:getRadialAccel-|
        |getRotation|                     |love-ParticleSystem:getRotation|
        |getSizes|                        |love-ParticleSystem:getSizes|
        |getSizeVariation|                |love-ParticleSystem:getSizeVariati-|
        |getSpeed|                        |love-ParticleSystem:getSpeed|
        |getSpin|                         |love-ParticleSystem:getSpin|
        |getSpinVariation|                |love-ParticleSystem:getSpinVariati-|
        |getSpread|                       |love-ParticleSystem:getSpread|
        |getTexture|                      |love-ParticleSystem:getTexture|
        |getTangentialAcceleration|       |love-ParticleSystem:getTangentialA-|
        |hasRelativeRotation|             |love-ParticleSystem:hasRelativeRot-|
        |isActive|                        |love-ParticleSystem:isActive|
        |isPaused|                        |love-ParticleSystem:isPaused|
        |isStopped|                       |love-ParticleSystem:isStopped|
        |moveTo|                          |love-ParticleSystem:moveTo|
        |pause|                           |love-ParticleSystem:pause|
        |reset|                           |love-ParticleSystem:reset|
        |setAreaSpread|                   |love-ParticleSystem:setAreaSpread|
        |setBufferSize|                   |love-ParticleSystem:setBufferSize|
        |setColors|                       |love-ParticleSystem:setColors|
        |setDirection|                    |love-ParticleSystem:setDirection|
        |setEmissionRate|                 |love-ParticleSystem:setEmissionRate|
        |setEmitterLifetime|              |love-ParticleSystem:setEmitterLife-|
        |setInsertMode|                   |love-ParticleSystem:setInsertMode|
        |setLinearAcceleration|           |love-ParticleSystem:setLinearAccel-|
        |setLinearDamping|                |love-ParticleSystem:setLinearDampi-|
        |setOffset|                       |love-ParticleSystem:setOffset|
        |setParticleLifetime|             |love-ParticleSystem:setParticleLif-|
        |setPosition|                     |love-ParticleSystem:setPosition|
        |setQuads|                        |love-ParticleSystem:setQuads|
        |setRadialAcceleration|           |love-ParticleSystem:setRadialAccel-|
        |setRelativeRotation|             |love-ParticleSystem:setRelativeRot-|
        |setRotation|                     |love-ParticleSystem:setRotation|
        |setSizes|                        |love-ParticleSystem:setSizes|
        |setSizeVariation|                |love-ParticleSystem:setSizeVariati-|
        |setSpeed|                        |love-ParticleSystem:setSpeed|
        |setSpin|                         |love-ParticleSystem:setSpin|
        |setSpinVariation|                |love-ParticleSystem:setSpinVariati-|
        |setSpread|                       |love-ParticleSystem:setSpread|
        |setTexture|                      |love-ParticleSystem:setTexture|
        |setTangentialAcceleration|       |love-ParticleSystem:setTangentialA-|
        |start|                           |love-ParticleSystem:start|
        |stop|                            |love-ParticleSystem:stop|
        |update|                          |love-ParticleSystem:update|

-------------------------------------------------------------------------------
                                                    *love-ParticleSystem:clone*
|ParticleSystem:clone|

Creates an identical copy of the ParticleSystem in the stopped state.

Cloned ParticleSystem inherit all the set-able state of the original
ParticleSystem, but they are initialized stopped.

Synopses:

    1.  `particlesystem` = |ParticleSystem:clone|()

Variants:

    1.  `particlesystem` = |ParticleSystem:clone|()

        See function description

        returns:

            `particlesystem`: <ParticleSystem>

                The new identical copy of this ParticleSystem.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-ParticleSystem:emit*
|ParticleSystem:emit|

Emits a burst of particles from the particle emitter.

Synopses:

    1.  |ParticleSystem:emit|( `numparticles` )

Variants:

    1.  |ParticleSystem:emit|( `numparticles` )

        See function description

        returns:

            None

        arguments:

            `numparticles`: <number>

                The amount of particles to emit. The number of emitted
                particles will be truncated if the particle system's max buffer
                size is reached.

-------------------------------------------------------------------------------
                                                 *love-ParticleSystem:getCount*
|ParticleSystem:getCount|

Gets the amount of particles that are currently in the system.

Synopses:

    1.  `count` = |ParticleSystem:getCount|()

Variants:

    1.  `count` = |ParticleSystem:getCount|()

        See function description

        returns:

            `count`: <number>

                The current number of live particles.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-ParticleSystem:getAreaSpread*
|ParticleSystem:getAreaSpread|

Gets the area-based spawn parameters for the particles.

Synopses:

    1.  `distribution`, `dx`, `dy` = |ParticleSystem:getAreaSpread|()

Variants:

    1.  `distribution`, `dx`, `dy` = |ParticleSystem:getAreaSpread|()

        See function description

        returns:

            `distribution`: <AreaSpreadDistribution>

                The type of distribution for new particles.

            `dx`: <number>

                The maximum spawn distance from the emitter along the x-axis
                for uniform distribution, or the standard deviation along the
                x-axis for normal distribution.

            `dy`: <number>

                The maximum spawn distance from the emitter along the y-axis
                for uniform distribution, or the standard deviation along the
                y-axis for normal distribution.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-ParticleSystem:getBufferSize*
|ParticleSystem:getBufferSize|

Gets the size of the buffer (the max allowed amount of particles in the
system).

Synopses:

    1.  `buffer` = |ParticleSystem:getBufferSize|()

Variants:

    1.  `buffer` = |ParticleSystem:getBufferSize|()

        See function description

        returns:

            `buffer`: <number>

                The buffer size.

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-ParticleSystem:getColors*
|ParticleSystem:getColors|

Gets a series of colors to apply to the particle sprite. The particle system
will interpolate between each color evenly over the particle's lifetime. Color
modulation needs to be activated for this function to have any effect.

Arguments are passed in groups of four, representing the components of the
desired RGBA value. At least one color must be specified. A maximum of eight
may be used.

Synopses:

    1.  `r1`, `g1`, `b1`, `a1`, `r2`, `g2`, `b2`, `a2`, `...` =
        |ParticleSystem:getColors|()

Variants:

    1.  `r1`, `g1`, `b1`, `a1`, `r2`, `g2`, `b2`, `a2`, `...` =
        |ParticleSystem:getColors|()

        See function description

        returns:

            `r1`: <number>

                First color, red component (0-255).

            `g1`: <number>

                First color, green component (0-255).

            `b1`: <number>

                First color, blue component (0-255).

            `a1`: <number>

                First color, alpha component (0-255).

            `r2`: <number>

                Second color, red component (0-255).

            `g2`: <number>

                Second color, green component (0-255).

            `b2`: <number>

                Second color, blue component (0-255).

            `a2`: <number>

                Second color, alpha component (0-255).

            `...`: <number>

                Etc.

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-ParticleSystem:getDirection*
|ParticleSystem:getDirection|

Gets the direction the particles will be emitted in.

Synopses:

    1.  `direction` = |ParticleSystem:getDirection|()

Variants:

    1.  `direction` = |ParticleSystem:getDirection|()

        See function description

        returns:

            `direction`: <number>

                The direction of the particles (in radians).

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-ParticleSystem:getEmissionRate*
|ParticleSystem:getEmissionRate|

Gets the amount of particles emitted per second.

Synopses:

    1.  `rate` = |ParticleSystem:getEmissionRate|()

Variants:

    1.  `rate` = |ParticleSystem:getEmissionRate|()

        See function description

        returns:

            `rate`: <number>

                The amount of particles per second.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-ParticleSystem:getInsertMode*
|ParticleSystem:getInsertMode|

Gets the mode to use when the ParticleSystem adds new particles.

Synopses:

    1.  `mode` = |ParticleSystem:getInsertMode|()

Variants:

    1.  `mode` = |ParticleSystem:getInsertMode|()

        See function description

        returns:

            `mode`: <ParticleInsertMode>

                The mode to use when the ParticleSystem adds new particles.

        arguments:

            None

-------------------------------------------------------------------------------
                                    *love-ParticleSystem:getLinearAcceleration*
|ParticleSystem:getLinearAcceleration|

Gets the linear acceleration (acceleration along the x and y axes) for
particles.

Every particle created will accelerate along the x and y axes between xmin,ymin
and xmax,ymax.

Synopses:

    1.  `xmin`, `ymin`, `xmax`, `ymax` =
        |ParticleSystem:getLinearAcceleration|()

Variants:

    1.  `xmin`, `ymin`, `xmax`, `ymax` =
        |ParticleSystem:getLinearAcceleration|()

        See function description

        returns:

            `xmin`: <number>

                The minimum acceleration along the x axis.

            `ymin`: <number>

                The minimum acceleration along the y axis.

            `xmax`: <number>

                The maximum acceleration along the x axis.

            `ymax`: <number>

                The maximum acceleration along the y axis.

        arguments:

            None

-------------------------------------------------------------------------------
                                         *love-ParticleSystem:getLinearDamping*
|ParticleSystem:getLinearDamping|

Gets the amount of linear damping (constant deceleration) for particles.

Synopses:

    1.  `min`, `max` = |ParticleSystem:getLinearDamping|()

Variants:

    1.  `min`, `max` = |ParticleSystem:getLinearDamping|()

        See function description

        returns:

            `min`: <number>

                The minimum amount of linear damping applied to particles.

            `max`: <number>

                The maximum amount of linear damping applied to particles.

        arguments:

            None

-------------------------------------------------------------------------------
                                       *love-ParticleSystem:getEmitterLifetime*
|ParticleSystem:getEmitterLifetime|

Gets how long the particle system should emit particles (if -1 then it emits
particles forever).

Synopses:

    1.  `life` = |ParticleSystem:getEmitterLifetime|()

Variants:

    1.  `life` = |ParticleSystem:getEmitterLifetime|()

        See function description

        returns:

            `life`: <number>

                The lifetime of the emitter (in seconds).

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-ParticleSystem:getOffset*
|ParticleSystem:getOffset|

Get the offget position which the particle sprite is rotated around. If this
function is not used, the particles rotate around their center.

Synopses:

    1.  `x`, `y` = |ParticleSystem:getOffset|()

Variants:

    1.  `x`, `y` = |ParticleSystem:getOffset|()

        See function description

        returns:

            `x`: <number>

                The x coordinate of the rotation offget.

            `y`: <number>

                The y coordinate of the rotation offget.

        arguments:

            None

-------------------------------------------------------------------------------
                                      *love-ParticleSystem:getParticleLifetime*
|ParticleSystem:getParticleLifetime|

Gets the life of the particles.

Synopses:

    1.  `min`, `max` = |ParticleSystem:getParticleLifetime|()

Variants:

    1.  `min`, `max` = |ParticleSystem:getParticleLifetime|()

        See function description

        returns:

            `min`: <number>

                The minimum life of the particles (seconds).

            `max`: <number>

                The maximum life of the particles (seconds).

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-ParticleSystem:getQuads*
|ParticleSystem:getQuads|

Gets the series of Quads used for the particle sprites.

Synopses:

    1.  `quads` = |ParticleSystem:getQuads|()

Variants:

    1.  `quads` = |ParticleSystem:getQuads|()

        See function description

        returns:

            `quads`: <table>

                A table containing the Quads used.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-ParticleSystem:getPosition*
|ParticleSystem:getPosition|

Gets the position of the emitter.

Synopses:

    1.  `x`, `y` = |ParticleSystem:getPosition|()

Variants:

    1.  `x`, `y` = |ParticleSystem:getPosition|()

        See function description

        returns:

            `x`: <number>

                Position along x-axis.

            `y`: <number>

                Position along y-axis.

        arguments:

            None

-------------------------------------------------------------------------------
                                    *love-ParticleSystem:getRadialAcceleration*
|ParticleSystem:getRadialAcceleration|

Get the radial acceleration (away from the emitter).

Synopses:

    1.  `min`, `max` = |ParticleSystem:getRadialAcceleration|()

Variants:

    1.  `min`, `max` = |ParticleSystem:getRadialAcceleration|()

        See function description

        returns:

            `min`: <number>

                The minimum acceleration.

            `max`: <number>

                The maximum acceleration.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-ParticleSystem:getRotation*
|ParticleSystem:getRotation|

Gets the rotation of the image upon particle creation (in radians).

Synopses:

    1.  `min`, `max` = |ParticleSystem:getRotation|()

Variants:

    1.  `min`, `max` = |ParticleSystem:getRotation|()

        See function description

        returns:

            `min`: <number>

                The minimum initial angle (radians).

            `max`: <number>

                The maximum initial angle (radians).

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-ParticleSystem:getSizes*
|ParticleSystem:getSizes|

Gets a series of sizes by which to scale a particle sprite. 1.0 is normal size.
The particle system will interpolate between each size evenly over the
particle's lifetime.

At least one size must be specified. A maximum of eight may be used.

Synopses:

    1.  `size1`, `size2`, `...` = |ParticleSystem:getSizes|()

Variants:

    1.  `size1`, `size2`, `...` = |ParticleSystem:getSizes|()

        See function description

        returns:

            `size1`: <number>

                The first size.

            `size2`: <number>

                The second size.

            `...`: <number>

                Etc.

        arguments:

            None

-------------------------------------------------------------------------------
                                         *love-ParticleSystem:getSizeVariation*
|ParticleSystem:getSizeVariation|

Gets the degree of variation (0 meaning no variation and 1 meaning full
variation between start and end).

Synopses:

    1.  `variation` = |ParticleSystem:getSizeVariation|()

Variants:

    1.  `variation` = |ParticleSystem:getSizeVariation|()

        See function description

        returns:

            `variation`: <number>

                The degree of variation (0 meaning no variation and 1 meaning
                full variation between start and end).

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-ParticleSystem:getSpeed*
|ParticleSystem:getSpeed|

Gets the speed of the particles.

Synopses:

    1.  `min`, `max` = |ParticleSystem:getSpeed|()

Variants:

    1.  `min`, `max` = |ParticleSystem:getSpeed|()

        See function description

        returns:

            `min`: <number>

                The minimum linear speed of the particles.

            `max`: <number>

                The maximum linear speed of the particles.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-ParticleSystem:getSpin*
|ParticleSystem:getSpin|

Gets the spin of the sprite.

Synopses:

    1.  `min`, `max` = |ParticleSystem:getSpin|()

Variants:

    1.  `min`, `max` = |ParticleSystem:getSpin|()

        See function description

        returns:

            `min`: <number>

                The minimum spin (radians per second).

            `max`: <number>

                The maximum spin (radians per second).

        arguments:

            None

-------------------------------------------------------------------------------
                                         *love-ParticleSystem:getSpinVariation*
|ParticleSystem:getSpinVariation|

Gets the degree of variation (0 meaning no variation and 1 meaning full
variation between start and end).

Synopses:

    1.  `variation` = |ParticleSystem:getSpinVariation|()

Variants:

    1.  `variation` = |ParticleSystem:getSpinVariation|()

        See function description

        returns:

            `variation`: <number>

                The degree of variation (0 meaning no variation and 1 meaning
                full variation between start and end).

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-ParticleSystem:getSpread*
|ParticleSystem:getSpread|

Gets the amount of spread for the system.

Synopses:

    1.  `spread` = |ParticleSystem:getSpread|()

Variants:

    1.  `spread` = |ParticleSystem:getSpread|()

        See function description

        returns:

            `spread`: <number>

                The amount of spread (radians).

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-ParticleSystem:getTexture*
|ParticleSystem:getTexture|

Gets the Image or Canvas which is to be emitted.

Synopses:

    1.  `texture` = |ParticleSystem:getTexture|()

Variants:

    1.  `texture` = |ParticleSystem:getTexture|()

        See function description

        returns:

            `texture`: <Texture>

                An Image or Canvas to use for the particle.

        arguments:

            None

-------------------------------------------------------------------------------
                                *love-ParticleSystem:getTangentialAcceleration*
|ParticleSystem:getTangentialAcceleration|

Gets the tangential acceleration (acceleration perpendicular to the particle's
direction).

Synopses:

    1.  `min`, `max` = |ParticleSystem:getTangentialAcceleration|()

Variants:

    1.  `min`, `max` = |ParticleSystem:getTangentialAcceleration|()

        See function description

        returns:

            `min`: <number>

                The minimum acceleration.

            `max`: <number>

                The maximum acceleration.

        arguments:

            None

-------------------------------------------------------------------------------
                                      *love-ParticleSystem:hasRelativeRotation*
|ParticleSystem:hasRelativeRotation|

Gets whether particle angles and rotations are relative to their velocities. If
enabled, particles are aligned to the angle of their velocities and rotate
relative to that angle.

Synopses:

    1.  `enabled` = |ParticleSystem:hasRelativeRotation|()

Variants:

    1.  `enabled` = |ParticleSystem:hasRelativeRotation|()

        See function description

        returns:

            `enabled`: <boolean>

                True if relative particle rotation is enabled, false if it's
                disabled.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-ParticleSystem:isActive*
|ParticleSystem:isActive|

Checks whether the particle system is actively emitting particles.

Synopses:

    1.  `active` = |ParticleSystem:isActive|()

Variants:

    1.  `active` = |ParticleSystem:isActive|()

        See function description

        returns:

            `active`: <boolean>

                True if system is active, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-ParticleSystem:isPaused*
|ParticleSystem:isPaused|

Checks whether the particle system is paused.

Synopses:

    1.  `paused` = |ParticleSystem:isPaused|()

Variants:

    1.  `paused` = |ParticleSystem:isPaused|()

        See function description

        returns:

            `paused`: <boolean>

                True if system is paused, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-ParticleSystem:isStopped*
|ParticleSystem:isStopped|

Checks whether the particle system is stopped.

Synopses:

    1.  `stopped` = |ParticleSystem:isStopped|()

Variants:

    1.  `stopped` = |ParticleSystem:isStopped|()

        See function description

        returns:

            `stopped`: <boolean>

                True if system is stopped, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-ParticleSystem:moveTo*
|ParticleSystem:moveTo|

Moves the position of the emitter. This results in smoother particle spawning
behaviour than if ParticleSystem:setPosition is used every frame.

Synopses:

    1.  |ParticleSystem:moveTo|( `x`, `y` )

Variants:

    1.  |ParticleSystem:moveTo|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                Position along x-axis.

            `y`: <number>

                Position along y-axis.

-------------------------------------------------------------------------------
                                                    *love-ParticleSystem:pause*
|ParticleSystem:pause|

Pauses the particle emitter.

Synopses:

    1.  |ParticleSystem:pause|()

Variants:

    1.  |ParticleSystem:pause|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-ParticleSystem:reset*
|ParticleSystem:reset|

Resets the particle emitter, removing any existing particles and resetting the
lifetime counter.

Synopses:

    1.  |ParticleSystem:reset|()

Variants:

    1.  |ParticleSystem:reset|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-ParticleSystem:setAreaSpread*
|ParticleSystem:setAreaSpread|

Sets area-based spawn parameters for the particles. Newly created particles
will spawn in an area around the emitter based on the parameters to this
function.

Synopses:

    1.  |ParticleSystem:setAreaSpread|( `distribution`, `dx`, `dy` )

Variants:

    1.  |ParticleSystem:setAreaSpread|( `distribution`, `dx`, `dy` )

        See function description

        returns:

            None

        arguments:

            `distribution`: <AreaSpreadDistribution>

                The type of distribution for new particles.

            `dx`: <number>

                The maximum spawn distance from the emitter along the x-axis
                for uniform distribution, or the standard deviation along the
                x-axis for normal distribution.

            `dy`: <number>

                The maximum spawn distance from the emitter along the y-axis
                for uniform distribution, or the standard deviation along the
                y-axis for normal distribution.

-------------------------------------------------------------------------------
                                            *love-ParticleSystem:setBufferSize*
|ParticleSystem:setBufferSize|

Sets the size of the buffer (the max allowed amount of particles in the
system).

Synopses:

    1.  |ParticleSystem:setBufferSize|( `buffer` )

Variants:

    1.  |ParticleSystem:setBufferSize|( `buffer` )

        See function description

        returns:

            None

        arguments:

            `buffer`: <number>

                The buffer size.

-------------------------------------------------------------------------------
                                                *love-ParticleSystem:setColors*
|ParticleSystem:setColors|

Sets a series of colors to apply to the particle sprite. The particle system
will interpolate between each color evenly over the particle's lifetime. Color
modulation needs to be activated for this function to have any effect.

Arguments are passed in groups of four, representing the components of the
desired RGBA value. At least one color must be specified. A maximum of eight
may be used.

Synopses:

    1.  |ParticleSystem:setColors|( `r1`, `g1`, `b1`, `a1`, `r2`, `g2`,
        `b2`, `a2`, `...` )

Variants:

    1.  |ParticleSystem:setColors|( `r1`, `g1`, `b1`, `a1`, `r2`, `g2`,
        `b2`, `a2`, `...` )

        See function description

        returns:

            None

        arguments:

            `r1`: <number>

                First color, red component (0-255).

            `g1`: <number>

                First color, green component (0-255).

            `b1`: <number>

                First color, blue component (0-255).

            `a1`: <number>

                First color, alpha component (0-255).

            `r2`: <number>

                Second color, red component (0-255).

            `g2`: <number>

                Second color, green component (0-255).

            `b2`: <number>

                Second color, blue component (0-255).

            `a2`: <number>

                Second color, alpha component (0-255).

            `...`: <number>

                Etc.

-------------------------------------------------------------------------------
                                             *love-ParticleSystem:setDirection*
|ParticleSystem:setDirection|

Sets the direction the particles will be emitted in.

Synopses:

    1.  |ParticleSystem:setDirection|( `direction` )

Variants:

    1.  |ParticleSystem:setDirection|( `direction` )

        See function description

        returns:

            None

        arguments:

            `direction`: <number>

                The direction of the particles (in radians).

-------------------------------------------------------------------------------
                                          *love-ParticleSystem:setEmissionRate*
|ParticleSystem:setEmissionRate|

Sets the amount of particles emitted per second.

Synopses:

    1.  |ParticleSystem:setEmissionRate|( `rate` )

Variants:

    1.  |ParticleSystem:setEmissionRate|( `rate` )

        See function description

        returns:

            None

        arguments:

            `rate`: <number>

                The amount of particles per second.

-------------------------------------------------------------------------------
                                       *love-ParticleSystem:setEmitterLifetime*
|ParticleSystem:setEmitterLifetime|

Sets how long the particle system should emit particles (if -1 then it emits
particles forever).

Synopses:

    1.  |ParticleSystem:setEmitterLifetime|( `life` )

Variants:

    1.  |ParticleSystem:setEmitterLifetime|( `life` )

        See function description

        returns:

            None

        arguments:

            `life`: <number>

                The lifetime of the emitter (in seconds).

-------------------------------------------------------------------------------
                                            *love-ParticleSystem:setInsertMode*
|ParticleSystem:setInsertMode|

Sets the mode to use when the ParticleSystem adds new particles.

Synopses:

    1.  |ParticleSystem:setInsertMode|( `mode` )

Variants:

    1.  |ParticleSystem:setInsertMode|( `mode` )

        See function description

        returns:

            None

        arguments:

            `mode`: <ParticleInsertMode>

                The mode to use when the ParticleSystem adds new particles.

-------------------------------------------------------------------------------
                                    *love-ParticleSystem:setLinearAcceleration*
|ParticleSystem:setLinearAcceleration|

Sets the linear acceleration (acceleration along the x and y axes) for
particles.

Every particle created will accelerate along the x and y axes between xmin,ymin
and xmax,ymax.

Synopses:

    1.  |ParticleSystem:setLinearAcceleration|( `xmin`, `ymin`, `xmax`,
        `ymax` )

Variants:

    1.  |ParticleSystem:setLinearAcceleration|( `xmin`, `ymin`, `xmax`,
        `ymax` )

        See function description

        returns:

            None

        arguments:

            `xmin`: <number>

                The minimum acceleration along the x axis.

            `ymin`: <number>

                The minimum acceleration along the y axis.

            `xmax`: <number>

                The maximum acceleration along the x axis.

            `ymax`: <number>

                The maximum acceleration along the y axis.

-------------------------------------------------------------------------------
                                         *love-ParticleSystem:setLinearDamping*
|ParticleSystem:setLinearDamping|

Sets the amount of linear damping (constant deceleration) for particles.

Synopses:

    1.  |ParticleSystem:setLinearDamping|( `min`, `max` )

Variants:

    1.  |ParticleSystem:setLinearDamping|( `min`, `max` )

        See function description

        returns:

            None

        arguments:

            `min`: <number>

                The minimum amount of linear damping applied to particles.

            `max`: <number>

                The maximum amount of linear damping applied to particles.

-------------------------------------------------------------------------------
                                                *love-ParticleSystem:setOffset*
|ParticleSystem:setOffset|

Set the offset position which the particle sprite is rotated around. If this
function is not used, the particles rotate around their center.

Synopses:

    1.  |ParticleSystem:setOffset|( `x`, `y` )

Variants:

    1.  |ParticleSystem:setOffset|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The x coordinate of the rotation offset.

            `y`: <number>

                The y coordinate of the rotation offset.

-------------------------------------------------------------------------------
                                      *love-ParticleSystem:setParticleLifetime*
|ParticleSystem:setParticleLifetime|

Sets the life of the particles.

Synopses:

    1.  |ParticleSystem:setParticleLifetime|( `min`, `max` )

Variants:

    1.  |ParticleSystem:setParticleLifetime|( `min`, `max` )

        See function description

        returns:

            None

        arguments:

            `min`: <number>

                The minimum life of the particles (seconds).

            `max`: <number>

                The maximum life of the particles (seconds).

-------------------------------------------------------------------------------
                                              *love-ParticleSystem:setPosition*
|ParticleSystem:setPosition|

Sets the position of the emitter.

Synopses:

    1.  |ParticleSystem:setPosition|( `x`, `y` )

Variants:

    1.  |ParticleSystem:setPosition|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                Position along x-axis.

            `y`: <number>

                Position along y-axis.

-------------------------------------------------------------------------------
                                                 *love-ParticleSystem:setQuads*
|ParticleSystem:setQuads|

Sets a series of Quads to use for the particle sprites. Particles will choose a
Quad from the list based on the particle's current lifetime, allowing for the
use of animated sprite sheets with ParticleSystems.

Synopses:

    1.  |ParticleSystem:setQuads|( `quad1`, `quad2` )
    2.  |ParticleSystem:setQuads|( `quads` )

Variants:

    1.  |ParticleSystem:setQuads|( `quad1`, `quad2` )

        See function description

        returns:

            None

        arguments:

            `quad1`: <Quad>

                The first Quad to use.

            `quad2`: <Quad>

                The second Quad to use.
    2.  |ParticleSystem:setQuads|( `quads` )

        See function description

        returns:

            None

        arguments:

            `quads`: <table>

                A table containing the Quads to use.

-------------------------------------------------------------------------------
                                    *love-ParticleSystem:setRadialAcceleration*
|ParticleSystem:setRadialAcceleration|

Set the radial acceleration (away from the emitter).

Synopses:

    1.  |ParticleSystem:setRadialAcceleration|( `min`, `max` )

Variants:

    1.  |ParticleSystem:setRadialAcceleration|( `min`, `max` )

        See function description

        returns:

            None

        arguments:

            `min`: <number>

                The minimum acceleration.

            `max`: <number>

                The maximum acceleration.

-------------------------------------------------------------------------------
                                      *love-ParticleSystem:setRelativeRotation*
|ParticleSystem:setRelativeRotation|

Sets whether particle angles and rotations are relative to their velocities. If
enabled, particles are aligned to the angle of their velocities and rotate
relative to that angle.

Synopses:

    1.  |ParticleSystem:setRelativeRotation|( `enable` )

Variants:

    1.  |ParticleSystem:setRelativeRotation|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: <boolean>

                True to enable relative particle rotation, false to disable it.

-------------------------------------------------------------------------------
                                              *love-ParticleSystem:setRotation*
|ParticleSystem:setRotation|

Sets the rotation of the image upon particle creation (in radians).

Synopses:

    1.  |ParticleSystem:setRotation|( `min`, `max` )

Variants:

    1.  |ParticleSystem:setRotation|( `min`, `max` )

        See function description

        returns:

            None

        arguments:

            `min`: <number>

                The minimum initial angle (radians).

            `max`: <number>

                The maximum initial angle (radians).

-------------------------------------------------------------------------------
                                                 *love-ParticleSystem:setSizes*
|ParticleSystem:setSizes|

Sets a series of sizes by which to scale a particle sprite. 1.0 is normal size.
The particle system will interpolate between each size evenly over the
particle's lifetime.

At least one size must be specified. A maximum of eight may be used.

Synopses:

    1.  |ParticleSystem:setSizes|( `size1`, `size2`, `...` )

Variants:

    1.  |ParticleSystem:setSizes|( `size1`, `size2`, `...` )

        See function description

        returns:

            None

        arguments:

            `size1`: <number>

                The first size.

            `size2`: <number>

                The second size.

            `...`: <number>

                Etc.

-------------------------------------------------------------------------------
                                         *love-ParticleSystem:setSizeVariation*
|ParticleSystem:setSizeVariation|

Sets the degree of variation (0 meaning no variation and 1 meaning full
variation between start and end).

Synopses:

    1.  |ParticleSystem:setSizeVariation|( `variation` )

Variants:

    1.  |ParticleSystem:setSizeVariation|( `variation` )

        See function description

        returns:

            None

        arguments:

            `variation`: <number>

                The degree of variation (0 meaning no variation and 1 meaning
                full variation between start and end).

-------------------------------------------------------------------------------
                                                 *love-ParticleSystem:setSpeed*
|ParticleSystem:setSpeed|

Sets the speed of the particles.

Synopses:

    1.  |ParticleSystem:setSpeed|( `min`, `max` )

Variants:

    1.  |ParticleSystem:setSpeed|( `min`, `max` )

        See function description

        returns:

            None

        arguments:

            `min`: <number>

                The minimum linear speed of the particles.

            `max`: <number>

                The maximum linear speed of the particles.

-------------------------------------------------------------------------------
                                                  *love-ParticleSystem:setSpin*
|ParticleSystem:setSpin|

Sets the spin of the sprite.

Synopses:

    1.  |ParticleSystem:setSpin|( `min`, `max` )

Variants:

    1.  |ParticleSystem:setSpin|( `min`, `max` )

        See function description

        returns:

            None

        arguments:

            `min`: <number>

                The minimum spin (radians per second).

            `max`: <number>

                The maximum spin (radians per second).

-------------------------------------------------------------------------------
                                         *love-ParticleSystem:setSpinVariation*
|ParticleSystem:setSpinVariation|

Sets the degree of variation (0 meaning no variation and 1 meaning full
variation between start and end).

Synopses:

    1.  |ParticleSystem:setSpinVariation|( `variation` )

Variants:

    1.  |ParticleSystem:setSpinVariation|( `variation` )

        See function description

        returns:

            None

        arguments:

            `variation`: <number>

                The degree of variation (0 meaning no variation and 1 meaning
                full variation between start and end).

-------------------------------------------------------------------------------
                                                *love-ParticleSystem:setSpread*
|ParticleSystem:setSpread|

Sets the amount of spread for the system.

Synopses:

    1.  |ParticleSystem:setSpread|( `spread` )

Variants:

    1.  |ParticleSystem:setSpread|( `spread` )

        See function description

        returns:

            None

        arguments:

            `spread`: <number>

                The amount of spread (radians).

-------------------------------------------------------------------------------
                                               *love-ParticleSystem:setTexture*
|ParticleSystem:setTexture|

Sets the Image or Canvas which is to be emitted.

Synopses:

    1.  |ParticleSystem:setTexture|( `texture` )

Variants:

    1.  |ParticleSystem:setTexture|( `texture` )

        See function description

        returns:

            None

        arguments:

            `texture`: <Texture>

                An Image or Canvas to use for the particle.

-------------------------------------------------------------------------------
                                *love-ParticleSystem:setTangentialAcceleration*
|ParticleSystem:setTangentialAcceleration|

Sets the tangential acceleration (acceleration perpendicular to the particle's
direction).

Synopses:

    1.  |ParticleSystem:setTangentialAcceleration|( `min`, `max` )

Variants:

    1.  |ParticleSystem:setTangentialAcceleration|( `min`, `max` )

        See function description

        returns:

            None

        arguments:

            `min`: <number>

                The minimum acceleration.

            `max`: <number>

                The maximum acceleration.

-------------------------------------------------------------------------------
                                                    *love-ParticleSystem:start*
|ParticleSystem:start|

Starts the particle emitter.

Synopses:

    1.  |ParticleSystem:start|()

Variants:

    1.  |ParticleSystem:start|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-ParticleSystem:stop*
|ParticleSystem:stop|

Stops the particle emitter, resetting the lifetime counter.

Synopses:

    1.  |ParticleSystem:stop|()

Variants:

    1.  |ParticleSystem:stop|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-ParticleSystem:update*
|ParticleSystem:update|

Updates the particle system; moving, creating and killing particles.

Synopses:

    1.  |ParticleSystem:update|( `dt` )

Variants:

    1.  |ParticleSystem:update|( `dt` )

        See function description

        returns:

            None

        arguments:

            `dt`: <number>

                The time (seconds) since last frame.

-------------------------------------------------------------------------------
                                                                    *love-Quad*
|Quad|

A quadrilateral (a polygon with four sides and four corners) with texture
coordinate information.

Quads can be used to select part of a texture to draw. In this way, one large
texture atlas can be loaded, and then split up into sub-images.

                                                       *love-Quad-constructors*
    constructors:

        |newQuad|                         |love-newQuad|

                                                         *love-Quad-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                           *love-Quad-subtypes*
    subtypes:

        None

                                                          *love-Quad-functions*
    functions:

        |getTextureDimensions|            |love-Quad:getTextureDimensions|
        |getViewport|                     |love-Quad:getViewport|
        |setViewport|                     |love-Quad:setViewport|

-------------------------------------------------------------------------------
                                               *love-Quad:getTextureDimensions*
|Quad:getTextureDimensions|

Gets reference texture dimensions initially specified in love.graphics.newQuad.

Synopses:

    1.  `sw`, `sh` = |Quad:getTextureDimensions|()

Variants:

    1.  `sw`, `sh` = |Quad:getTextureDimensions|()

        See function description

        returns:

            `sw`: <number>

                The Texture width used by the Quad.

            `sh`: <number>

                The Texture height used by the Quad.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Quad:getViewport*
|Quad:getViewport|

Gets the current viewport of this Quad.

Synopses:

    1.  `x`, `y`, `w`, `h` = |Quad:getViewport|()

Variants:

    1.  `x`, `y`, `w`, `h` = |Quad:getViewport|()

        See function description

        returns:

            `x`: <number>

                The top-left corner along the x-axis.

            `y`: <number>

                The top-right corner along the y-axis.

            `w`: <number>

                The width of the viewport.

            `h`: <number>

                The height of the viewport.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Quad:setViewport*
|Quad:setViewport|

Sets the texture coordinates according to a viewport.

Synopses:

    1.  |Quad:setViewport|( `x`, `y`, `w`, `h` )

Variants:

    1.  |Quad:setViewport|( `x`, `y`, `w`, `h` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The top-left corner along the x-axis.

            `y`: <number>

                The top-right corner along the y-axis.

            `w`: <number>

                The width of the viewport.

            `h`: <number>

                The height of the viewport.

-------------------------------------------------------------------------------
                                                                  *love-Shader*
|Shader|

A Shader is used for advanced hardware-accelerated pixel or vertex
manipulation. These effects are written in a language based on GLSL (OpenGL
Shading Language) with a few things simplified for easier coding.

Potential uses for shaders include HDR/bloom, motion blur,
grayscale/invert/sepia/any kind of color effect, reflection/refraction,
distortions, bump mapping, and much more! Here is a collection of basic shaders
and good starting point to learn: https://github.com/vrld/shine

                                                     *love-Shader-constructors*
    constructors:

        |newShader|                       |love-newShader|

                                                       *love-Shader-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                         *love-Shader-subtypes*
    subtypes:

        None

                                                        *love-Shader-functions*
    functions:

        |getExternVariable|               |love-Shader:getExternVariable|
        |getWarnings|                     |love-Shader:getWarnings|
        |send|                            |love-Shader:send|
        |sendColor|                       |love-Shader:sendColor|

-------------------------------------------------------------------------------
                                                *love-Shader:getExternVariable*
|Shader:getExternVariable|

Gets information about an 'extern' ('uniform') variable in the shader.

Synopses:

    1.  `type`, `components`, `arrayelements` =
        |Shader:getExternVariable|( `name` )

Variants:

    1.  `type`, `components`, `arrayelements` =
        |Shader:getExternVariable|( `name` )

        See function description

        returns:

            `type`: <ShaderVariableType>

                The base type of the variable.

            `components`: <number>

                The number of components in the variable (e.g. 2 for a vec2 or
                mat2.)

            `arrayelements`: <number>

                The number of elements in the array if the variable is an
                array, or 1 if not.

        arguments:

            `name`: <string>

                The name of the extern variable.

-------------------------------------------------------------------------------
                                                      *love-Shader:getWarnings*
|Shader:getWarnings|

Returns any warning and error messages from compiling the shader code. This can
be used for debugging your shaders if there's anything the graphics hardware
doesn't like.

Synopses:

    1.  `warnings` = |Shader:getWarnings|()

Variants:

    1.  `warnings` = |Shader:getWarnings|()

        See function description

        returns:

            `warnings`: <string>

                Warning messages (if any).

        arguments:

            None

-------------------------------------------------------------------------------
                                                             *love-Shader:send*
|Shader:send|

Sends one or more values to a special (uniform) variable inside the shader.
Uniform variables have to be marked using the uniform or extern keyword.

Synopses:

    1.  |Shader:send|( `name`, `number`, `...` )
    2.  |Shader:send|( `name`, `vector`, `...` )
    3.  |Shader:send|( `name`, `matrix`, `...` )
    4.  |Shader:send|( `name`, `texture` )
    5.  |Shader:send|( `name`, `boolean`, `...` )

Variants:

    1.  |Shader:send|( `name`, `number`, `...` )

        See function description

        returns:

            None

        arguments:

            `name`: <string>

                Name of the number to send to the shader.

            `number`: <number>

                Number to send to store in the uniform variable.

            `...`: <number>

                Additional numbers to send if the uniform variable is an array.
    2.  |Shader:send|( `name`, `vector`, `...` )

        See function description

        returns:

            None

        arguments:

            `name`: <string>

                Name of the vector to send to the shader.

            `vector`: <table>

                Numbers to send to the uniform variable as a vector. The number
                of elements in the table determines the type of the vector
                (e.g. two numbers -> vec2). At least two and at most four
                numbers can be used.

            `...`: <table>

                Additional vectors to send if the uniform variable is an array.
                All vectors need to be of the same size (e.g. only vec3's).
    3.  |Shader:send|( `name`, `matrix`, `...` )

        See function description

        returns:

            None

        arguments:

            `name`: <string>

                Name of the matrix to send to the shader.

            `matrix`: <table>

                2x2, 3x3, or 4x4 matrix to send to the uniform variable. Using
                table form: {{a,b,c,d}, {e,f,g,h}, ... }.

            `...`: <table>

                Additional matrices of the same type as matrix to store in a
                uniform array.
    4.  |Shader:send|( `name`, `texture` )

        See function description

        returns:

            None

        arguments:

            `name`: <string>

                Name of the Texture to send to the shader.

            `texture`: <Texture>

                Texture (Image or Canvas) to send to the uniform variable.
    5.  |Shader:send|( `name`, `boolean`, `...` )

        See function description

        returns:

            None

        arguments:

            `name`: <string>

                Name of the boolean to send to the shader.

            `boolean`: <boolean>

                Boolean to send to store in the uniform variable.

            `...`: <boolean>

                Additional booleans to send if the uniform variable is an
                array.

-------------------------------------------------------------------------------
                                                        *love-Shader:sendColor*
|Shader:sendColor|

Sends one or more colors to a special (extern / uniform) vec3 or vec4 variable
inside the shader. The color components must be in the range of [0, 255],
unlike Shader:send. The colors are gamma-corrected if global gamma-correction
is enabled.

Synopses:

    1.  |Shader:sendColor|( `name`, `color`, `...` )

Variants:

    1.  |Shader:sendColor|( `name`, `color`, `...` )

        See function description

        returns:

            None

        arguments:

            `name`: <string>

                The name of the color extern variable to send to in the shader.

            `color`: <table>

                A table with red, green, blue, and optional alpha color
                components in the range of [0, 255] to send to the extern as a
                vector.

            `...`: <table>

                Additional colors to send in case the extern is an array. All
                colors need to be of the same size (e.g. only vec3's).

-------------------------------------------------------------------------------
                                                             *love-SpriteBatch*
|SpriteBatch|

Using a single image, draw any number of identical copies of the image using a
single call to love.graphics.draw. This can be used, for example, to draw
repeating copies of a single background image.

A SpriteBatch can be even more useful when the underlying image is a Texture
Atlas (a single image file containing many independent images); by adding Quad
to the batch, different sub-images from within the atlas can be drawn.

                                                *love-SpriteBatch-constructors*
    constructors:

        |newSpriteBatch|                  |love-newSpriteBatch|

                                                  *love-SpriteBatch-supertypes*
    supertypes:

        |Drawable|                        |love-Drawable|
        |Object|                          |love-Object|

                                                    *love-SpriteBatch-subtypes*
    subtypes:

        None

                                                   *love-SpriteBatch-functions*
    functions:

        |add|                             |love-SpriteBatch:add|
        |attachAttribute|                 |love-SpriteBatch:attachAttribute|
        |clear|                           |love-SpriteBatch:clear|
        |flush|                           |love-SpriteBatch:flush|
        |getBufferSize|                   |love-SpriteBatch:getBufferSize|
        |getColor|                        |love-SpriteBatch:getColor|
        |getCount|                        |love-SpriteBatch:getCount|
        |getTexture|                      |love-SpriteBatch:getTexture|
        |set|                             |love-SpriteBatch:set|
        |setBufferSize|                   |love-SpriteBatch:setBufferSize|
        |setColor|                        |love-SpriteBatch:setColor|
        |setTexture|                      |love-SpriteBatch:setTexture|

-------------------------------------------------------------------------------
                                                         *love-SpriteBatch:add*
|SpriteBatch:add|

Add a sprite to the batch.

Synopses:

    1.  `id` = |SpriteBatch:add|( `x`, `y`, `r`, `sx`, `sy`, `ox`,
        `oy`, `kx`, `ky` )
    2.  `id` = |SpriteBatch:add|( `quad`, `x`, `y`, `r`, `sx`, `sy`,
        `ox`, `oy`, `kx`, `ky` )

Variants:

    1.  `id` = |SpriteBatch:add|( `x`, `y`, `r`, `sx`, `sy`, `ox`,
        `oy`, `kx`, `ky` )

        See function description

        returns:

            `id`: <number>

                An identifier for the added sprite.

        arguments:

            `x`: <number>

                The position to draw the object (x-axis).

            `y`: <number>

                The position to draw the object (y-axis).

            `r`: <number>

                Orientation (radians).

            `sx`: <number>

                Scale factor (x-axis).

            `sy`: <number>

                Scale factor (y-axis).

            `ox`: <number>

                Origin offset (x-axis).

            `oy`: <number>

                Origin offset (y-axis).

            `kx`: <number>

                Shear factor (x-axis).

            `ky`: <number>

                Shear factor (y-axis).
    2.  `id` = |SpriteBatch:add|( `quad`, `x`, `y`, `r`, `sx`, `sy`,
        `ox`, `oy`, `kx`, `ky` )

        See function description

        returns:

            `id`: <number>

                An identifier for the added sprite.

        arguments:

            `quad`: <Quad>

                The Quad to add.

            `x`: <number>

                The position to draw the object (x-axis).

            `y`: <number>

                The position to draw the object (y-axis).

            `r`: <number>

                Orientation (radians).

            `sx`: <number>

                Scale factor (x-axis).

            `sy`: <number>

                Scale factor (y-axis).

            `ox`: <number>

                Origin offset (x-axis).

            `oy`: <number>

                Origin offset (y-axis).

            `kx`: <number>

                Shear factor (x-axis).

            `ky`: <number>

                Shear factor (y-axis).

-------------------------------------------------------------------------------
                                             *love-SpriteBatch:attachAttribute*
|SpriteBatch:attachAttribute|

Attaches a per-vertex attribute from a Mesh onto this SpriteBatch, for use when
drawing. This can be combined with a Shader to augment a SpriteBatch with
per-vertex or additional per-sprite information instead of just having
per-sprite colors.

Each sprite in a SpriteBatch has 4 vertices in the following order: top-left,
bottom-left, top-right, bottom-right. The index returned by SpriteBatch:add
(and used by SpriteBatch:set) can be multiplied by 4 to determine the first
vertex in a specific sprite.

Synopses:

    1.  |SpriteBatch:attachAttribute|( `name`, `mesh` )

Variants:

    1.  |SpriteBatch:attachAttribute|( `name`, `mesh` )

        See function description

        returns:

            None

        arguments:

            `name`: <string>

                The name of the vertex attribute to attach.

            `mesh`: <Mesh>

                The Mesh to get the vertex attribute from.

-------------------------------------------------------------------------------
                                                       *love-SpriteBatch:clear*
|SpriteBatch:clear|

Removes all sprites from the buffer.

Synopses:

    1.  |SpriteBatch:clear|()

Variants:

    1.  |SpriteBatch:clear|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-SpriteBatch:flush*
|SpriteBatch:flush|

Immediately sends all new and modified sprite data in the batch to the graphics
card.

Synopses:

    1.  |SpriteBatch:flush|()

Variants:

    1.  |SpriteBatch:flush|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-SpriteBatch:getBufferSize*
|SpriteBatch:getBufferSize|

Gets the maximum number of sprites the SpriteBatch can hold.

Synopses:

    1.  `size` = |SpriteBatch:getBufferSize|()

Variants:

    1.  `size` = |SpriteBatch:getBufferSize|()

        See function description

        returns:

            `size`: <number>

                The maximum number of sprites the batch can hold.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-SpriteBatch:getColor*
|SpriteBatch:getColor|

Gets the color that will be used for the next add and set operations.

If no color has been set with SpriteBatch:setColor or the current SpriteBatch
color has been cleared, this method will return nil.

Synopses:

    1.  `r`, `g`, `b`, `a` = |SpriteBatch:getColor|()

Variants:

    1.  `r`, `g`, `b`, `a` = |SpriteBatch:getColor|()

        See function description

        returns:

            `r`: <number>

                The red component (0-255).

            `g`: <number>

                The green component (0-255).

            `b`: <number>

                The blue component (0-255).

            `a`: <number>

                The alpha component (0-255).

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-SpriteBatch:getCount*
|SpriteBatch:getCount|

Gets the amount of sprites currently in the SpriteBatch.

Synopses:

    1.  `count` = |SpriteBatch:getCount|()

Variants:

    1.  `count` = |SpriteBatch:getCount|()

        See function description

        returns:

            `count`: <number>

                The amount of sprites currently in the batch.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-SpriteBatch:getTexture*
|SpriteBatch:getTexture|

Returns the Image or Canvas used by the SpriteBatch.

Synopses:

    1.  `texture` = |SpriteBatch:getTexture|()

Variants:

    1.  `texture` = |SpriteBatch:getTexture|()

        See function description

        returns:

            `texture`: <Texture>

                The Image or Canvas for the sprites.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-SpriteBatch:set*
|SpriteBatch:set|

Changes a sprite in the batch. This requires the identifier returned by add and
addq.

Synopses:

    1.  |SpriteBatch:set|( `id`, `x`, `y`, `r`, `sx`, `sy`, `ox`, `oy`,
        `kx`, `ky` )
    2.  |SpriteBatch:set|( `id`, `quad`, `x`, `y`, `r`, `sx`, `sy`,
        `ox`, `oy`, `kx`, `ky` )

Variants:

    1.  |SpriteBatch:set|( `id`, `x`, `y`, `r`, `sx`, `sy`, `ox`, `oy`,
        `kx`, `ky` )

        See function description

        returns:

            None

        arguments:

            `id`: <number>

                The identifier of the sprite that will be changed.

            `x`: <number>

                The position to draw the object (x-axis).

            `y`: <number>

                The position to draw the object (y-axis).

            `r`: <number>

                Orientation (radians).

            `sx`: <number>

                Scale factor (x-axis).

            `sy`: <number>

                Scale factor (y-axis).

            `ox`: <number>

                Origin offset (x-axis).

            `oy`: <number>

                Origin offset (y-axis).

            `kx`: <number>

                Shear factor (x-axis).

            `ky`: <number>

                Shear factor (y-axis).
    2.  |SpriteBatch:set|( `id`, `quad`, `x`, `y`, `r`, `sx`, `sy`,
        `ox`, `oy`, `kx`, `ky` )

        See function description

        returns:

            None

        arguments:

            `id`: <number>

                The identifier of the sprite that will be changed.

            `quad`: <Quad>

                The quad used on the image of the batch.

            `x`: <number>

                The position to draw the object (x-axis).

            `y`: <number>

                The position to draw the object (y-axis).

            `r`: <number>

                Orientation (radians).

            `sx`: <number>

                Scale factor (x-axis).

            `sy`: <number>

                Scale factor (y-axis).

            `ox`: <number>

                Origin offset (x-axis).

            `oy`: <number>

                Origin offset (y-axis).

            `kx`: <number>

                Shear factor (x-axis).

            `ky`: <number>

                Shear factor (y-axis).

-------------------------------------------------------------------------------
                                               *love-SpriteBatch:setBufferSize*
|SpriteBatch:setBufferSize|

Sets the maximum number of sprites the SpriteBatch can hold. Existing sprites
in the batch (up to the new maximum) will not be cleared when this function is
called.

Synopses:

    1.  |SpriteBatch:setBufferSize|( `size` )

Variants:

    1.  |SpriteBatch:setBufferSize|( `size` )

        See function description

        returns:

            None

        arguments:

            `size`: <number>

                The new maximum number of sprites the batch can hold.

-------------------------------------------------------------------------------
                                                    *love-SpriteBatch:setColor*
|SpriteBatch:setColor|

Sets the color that will be used for the next add and set operations. Calling
the function without arguments will clear the color.

In version [[0.9.2]] and older, the global color set with
love.graphics.setColor will not work on the SpriteBatch if any of the sprites
has its own color.

Synopses:

    1.  |SpriteBatch:setColor|( `r`, `g`, `b`, `a` )
    2.  |SpriteBatch:setColor|()

Variants:

    1.  |SpriteBatch:setColor|( `r`, `g`, `b`, `a` )

        See function description

        returns:

            None

        arguments:

            `r`: <number>

                The amount of red.

            `g`: <number>

                The amount of green.

            `b`: <number>

                The amount of blue.

            `a`: <number>

                The amount of alpha.
    2.  |SpriteBatch:setColor|()

        Disables all per-sprite colors for this SpriteBatch.

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-SpriteBatch:setTexture*
|SpriteBatch:setTexture|

Replaces the Image or Canvas used for the sprites.

Synopses:

    1.  |SpriteBatch:setTexture|( `texture` )

Variants:

    1.  |SpriteBatch:setTexture|( `texture` )

        See function description

        returns:

            None

        arguments:

            `texture`: <Texture>

                The new Image or Canvas to use for the sprites.

-------------------------------------------------------------------------------
                                                                    *love-Text*
|Text|

Drawable text.

                                                       *love-Text-constructors*
    constructors:

        |newText|                         |love-newText|

                                                         *love-Text-supertypes*
    supertypes:

        |Drawable|                        |love-Drawable|
        |Object|                          |love-Object|

                                                           *love-Text-subtypes*
    subtypes:

        None

                                                          *love-Text-functions*
    functions:

        |add|                             |love-Text:add|
        |addf|                            |love-Text:addf|
        |clear|                           |love-Text:clear|
        |getDimensions|                   |love-Text:getDimensions|
        |getFont|                         |love-Text:getFont|
        |getHeight|                       |love-Text:getHeight|
        |getWidth|                        |love-Text:getWidth|
        |set|                             |love-Text:set|
        |setf|                            |love-Text:setf|
        |setFont|                         |love-Text:setFont|

-------------------------------------------------------------------------------
                                                                *love-Text:add*
|Text:add|

Adds additional colored text to the Text object at the specified position.

Synopses:

    1.  `index` = |Text:add|( `textstring`, `x`, `y`, `angle`, `sx`,
        `sy`, `ox`, `oy`, `kx`, `ky` )
    2.  `index` = |Text:add|( `coloredtext`, `x`, `y`, `angle`, `sx`,
        `sy`, `ox`, `oy`, `kx`, `ky` )

Variants:

    1.  `index` = |Text:add|( `textstring`, `x`, `y`, `angle`, `sx`,
        `sy`, `ox`, `oy`, `kx`, `ky` )

        See function description

        returns:

            `index`: <number>

                An index number that can be used with Text:getWidth or
                Text:getHeight.

        arguments:

            `textstring`: <string>

                The text to add to the object.

            `x`: <number>

                The position of the new text on the x-axis.

            `y`: <number>

                The position of the new text on the y-axis.

            `angle`: <number>

                The orientation of the new text in radians.

            `sx`: <number>

                Scale factor on the x-axis.

            `sy`: <number>

                Scale factor on the y-axis.

            `ox`: <number>

                Origin offset on the x-axis.

            `oy`: <number>

                Origin offset on the y-axis.

            `kx`: <number>

                Shearing / skew factor on the x-axis.

            `ky`: <number>

                Shearing / skew factor on the y-axis.
    2.  `index` = |Text:add|( `coloredtext`, `x`, `y`, `angle`, `sx`,
        `sy`, `ox`, `oy`, `kx`, `ky` )

        See function description

        returns:

            `index`: <number>

                An index number that can be used with Text:getWidth or
                Text:getHeight.

        arguments:

            `coloredtext`: <table>

                A table containing colors and strings to use as the new text,
                in the form of { color1, string1, color2, string2, ... }.

                `color1`: <table>

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string1`: <string>

                    A string of text which has a color specified by the
                    previous color.

                `color2`: <table>

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string2`: <string>

                    A string of text which has a color specified by the
                    previous color.

                `...`: <tables and strings>

                    Additional colors and strings.

            `x`: <number>

                The position of the new text on the x-axis.

            `y`: <number>

                The position of the new text on the y-axis.

            `angle`: <number>

                The orientation of the new text in radians.

            `sx`: <number>

                Scale factor on the x-axis.

            `sy`: <number>

                Scale factor on the y-axis.

            `ox`: <number>

                Origin offset on the x-axis.

            `oy`: <number>

                Origin offset on the y-axis.

            `kx`: <number>

                Shearing / skew factor on the x-axis.

            `ky`: <number>

                Shearing / skew factor on the y-axis.

-------------------------------------------------------------------------------
                                                               *love-Text:addf*
|Text:addf|

Adds additional formatted / colored text to the Text object at the specified
position.

Synopses:

    1.  `index` = |Text:addf|( `textstring`, `wraplimit`, `align`, `x`,
        `y`, `angle`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )
    2.  `index` = |Text:addf|( `coloredtext`, `wraplimit`, `align`,
        `x`, `y`, `angle`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

Variants:

    1.  `index` = |Text:addf|( `textstring`, `wraplimit`, `align`, `x`,
        `y`, `angle`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

        See function description

        returns:

            `index`: <number>

                An index number that can be used with Text:getWidth or
                Text:getHeight.

        arguments:

            `textstring`: <string>

                The text to add to the object.

            `wraplimit`: <number>

                The maximum width in pixels of the text before it gets
                automatically wrapped to a new line.

            `align`: <AlignMode>

                The alignment of the text.

            `x`: <number>

                The position of the new text on the x-axis.

            `y`: <number>

                The position of the new text on the y-axis.

            `angle`: <number>

                The orientation of the object in radians.

            `sx`: <number>

                Scale factor on the x-axis.

            `sy`: <number>

                Scale factor on the y-axis.

            `ox`: <number>

                Origin offset on the x-axis.

            `oy`: <number>

                Origin offset on the y-axis.

            `kx`: <number>

                Shearing / skew factor on the x-axis.

            `ky`: <number>

                Shearing / skew factor on the y-axis.
    2.  `index` = |Text:addf|( `coloredtext`, `wraplimit`, `align`,
        `x`, `y`, `angle`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

        See function description

        returns:

            `index`: <number>

                An index number that can be used with Text:getWidth or
                Text:getHeight.

        arguments:

            `coloredtext`: <table>

                A table containing colors and strings to use as the new text,
                in the form of { color1, string1, color2, string2, ... }.

                `color1`: <table>

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string1`: <string>

                    A string of text which has a color specified by the
                    previous color.

                `color2`: <table>

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string2`: <string>

                    A string of text which has a color specified by the
                    previous color.

                `...`: <tables and strings>

                    Additional colors and strings.

            `wraplimit`: <number>

                The maximum width in pixels of the text before it gets
                automatically wrapped to a new line.

            `align`: <AlignMode>

                The alignment of the text.

            `x`: <number>

                The position of the new text on the x-axis.

            `y`: <number>

                The position of the new text on the y-axis.

            `angle`: <number>

                The orientation of the object in radians.

            `sx`: <number>

                Scale factor on the x-axis.

            `sy`: <number>

                Scale factor on the y-axis.

            `ox`: <number>

                Origin offset on the x-axis.

            `oy`: <number>

                Origin offset on the y-axis.

            `kx`: <number>

                Shearing / skew factor on the x-axis.

            `ky`: <number>

                Shearing / skew factor on the y-axis.

-------------------------------------------------------------------------------
                                                              *love-Text:clear*
|Text:clear|

Clears the contents of the Text object.

Synopses:

    1.  |Text:clear|()

Variants:

    1.  |Text:clear|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Text:getDimensions*
|Text:getDimensions|

Gets the width and height of the text in pixels.

Synopses:

    1.  `width`, `height` = |Text:getDimensions|()
    2.  `width`, `height` = |Text:getDimensions|( `index` )

Variants:

    1.  `width`, `height` = |Text:getDimensions|()

        See function description

        returns:

            `width`: <number>

                The width of the text. If multiple sub-strings have been added
                with Text:add, the width of the last sub-string is returned.

            `height`: <number>

                The height of the text. If multiple sub-strings have been added
                with Text:add, the height of the last sub-string is returned.

        arguments:

            None
    2.  `width`, `height` = |Text:getDimensions|( `index` )

        Gets the width and height of a specific sub-string that was previously added to the Text object.

        returns:

            `width`: <number>

                The width of the sub-string (before scaling and other
                transformations).

            `height`: <number>

                The height of the sub-string (before scaling and other
                transformations).

        arguments:

            `index`: <number>

                An index number returned by Text:add or Text:addf.

-------------------------------------------------------------------------------
                                                            *love-Text:getFont*
|Text:getFont|

Gets the Font used with the Text object.

Synopses:

    1.  `font` = |Text:getFont|()

Variants:

    1.  `font` = |Text:getFont|()

        See function description

        returns:

            `font`: <Font>

                The font used with this Text object.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Text:getHeight*
|Text:getHeight|

Gets the height of the text in pixels.

Synopses:

    1.  `height` = |Text:getHeight|()
    2.  `height` = |Text:getHeight|( `index` )

Variants:

    1.  `height` = |Text:getHeight|()

        See function description

        returns:

            `height`: <number>

                The height of the text. If multiple sub-strings have been added
                with Text:add, the height of the last sub-string is returned.

        arguments:

            None
    2.  `height` = |Text:getHeight|( `index` )

        Gets the height of a specific sub-string that was previously added to the Text object.

        returns:

            `height`: <number>

                The height of the sub-string (before scaling and other
                transformations).

        arguments:

            `index`: <number>

                An index number returned by Text:add or Text:addf.

-------------------------------------------------------------------------------
                                                           *love-Text:getWidth*
|Text:getWidth|

Gets the width of the text in pixels.

Synopses:

    1.  `width` = |Text:getWidth|()
    2.  `width` = |Text:getWidth|( `index` )

Variants:

    1.  `width` = |Text:getWidth|()

        See function description

        returns:

            `width`: <number>

                The width of the text. If multiple sub-strings have been added
                with Text:add, the width of the last sub-string is returned.

        arguments:

            None
    2.  `width` = |Text:getWidth|( `index` )

        Gets the width of a specific sub-string that was previously added to the Text object.

        returns:

            `width`: <number>

                The width of the sub-string (before scaling and other
                transformations).

        arguments:

            `index`: <number>

                An index number returned by Text:add or Text:addf.

-------------------------------------------------------------------------------
                                                                *love-Text:set*
|Text:set|

Replaces the contents of the Text object with a new unformatted string.

Synopses:

    1.  |Text:set|( `textstring` )
    2.  |Text:set|( `coloredtext` )
    3.  |Text:set|()

Variants:

    1.  |Text:set|( `textstring` )

        See function description

        returns:

            None

        arguments:

            `textstring`: <string>

                The new string of text to use.
    2.  |Text:set|( `coloredtext` )

        See function description

        returns:

            None

        arguments:

            `coloredtext`: <table>

                A table containing colors and strings to use as the new text,
                in the form of { color1, string1, color2, string2, ... }.

                `color1`: <table>

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string1`: <string>

                    A string of text which has a color specified by the
                    previous color.

                `color2`: <table>

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string2`: <string>

                    A string of text which has a color specified by the
                    previous color.

                `...`: <tables and strings>

                    Additional colors and strings.
    3.  |Text:set|()

        Clears the contents of the Text object.

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                               *love-Text:setf*
|Text:setf|

Replaces the contents of the Text object with a new formatted string.

Synopses:

    1.  |Text:setf|( `textstring`, `wraplimit`, `align` )
    2.  |Text:setf|( `coloredtext`, `wraplimit`, `align` )
    3.  |Text:setf|()

Variants:

    1.  |Text:setf|( `textstring`, `wraplimit`, `align` )

        See function description

        returns:

            None

        arguments:

            `textstring`: <string>

                The new string of text to use.

            `wraplimit`: <number>

                The maximum width in pixels of the text before it gets
                automatically wrapped to a new line.

            `align`: <AlignMode>

                The alignment of the text.
    2.  |Text:setf|( `coloredtext`, `wraplimit`, `align` )

        See function description

        returns:

            None

        arguments:

            `coloredtext`: <table>

                A table containing colors and strings to use as the new text,
                in the form of { color1, string1, color2, string2, ... }.

                `color1`: <table>

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string1`: <string>

                    A string of text which has a color specified by the
                    previous color.

                `color2`: <table>

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string2`: <string>

                    A string of text which has a color specified by the
                    previous color.

                `...`: <tables and strings>

                    Additional colors and strings.

            `wraplimit`: <number>

                The maximum width in pixels of the text before it gets
                automatically wrapped to a new line.

            `align`: <AlignMode>

                The alignment of the text.
    3.  |Text:setf|()

        Clears the contents of the Text object.

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                            *love-Text:setFont*
|Text:setFont|

Replaces the Font used with the text.

Synopses:

    1.  |Text:setFont|( `font` )

Variants:

    1.  |Text:setFont|( `font` )

        See function description

        returns:

            None

        arguments:

            `font`: <Font>

                The new font to use with this Text object.

-------------------------------------------------------------------------------
                                                                 *love-Texture*
|Texture|

Superclass for drawable objects which represent a texture. All Textures can be
drawn with Quads. This is an abstract type that can't be created directly.

                                                    *love-Texture-constructors*
    constructors:

        None

                                                      *love-Texture-supertypes*
    supertypes:

        |Drawable|                        |love-Drawable|
        |Object|                          |love-Object|

                                                        *love-Texture-subtypes*
    subtypes:

        |Canvas|                          |love-Canvas|
        |Image|                           |love-Image|

                                                       *love-Texture-functions*
    functions:

        None

-------------------------------------------------------------------------------
                                                                   *love-Video*
|Video|

A drawable video.

                                                      *love-Video-constructors*
    constructors:

        |newVideo|                        |love-newVideo|

                                                        *love-Video-supertypes*
    supertypes:

        |Drawable|                        |love-Drawable|
        |Object|                          |love-Object|

                                                          *love-Video-subtypes*
    subtypes:

        None

                                                         *love-Video-functions*
    functions:

        |getDimensions|                   |love-Video:getDimensions|
        |getFilter|                       |love-Video:getFilter|
        |getHeight|                       |love-Video:getHeight|
        |getSource|                       |love-Video:getSource|
        |getStream|                       |love-Video:getStream|
        |getWidth|                        |love-Video:getWidth|
        |isPlaying|                       |love-Video:isPlaying|
        |pause|                           |love-Video:pause|
        |play|                            |love-Video:play|
        |rewind|                          |love-Video:rewind|
        |seek|                            |love-Video:seek|
        |setFilter|                       |love-Video:setFilter|
        |setSource|                       |love-Video:setSource|
        |tell|                            |love-Video:tell|

-------------------------------------------------------------------------------
                                                     *love-Video:getDimensions*
|Video:getDimensions|

Gets the width and height of the Video in pixels.

Synopses:

    1.  `width`, `height` = |Video:getDimensions|()

Variants:

    1.  `width`, `height` = |Video:getDimensions|()

        See function description

        returns:

            `width`: <number>

                The width of the Video.

            `height`: <number>

                The height of the video.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Video:getFilter*
|Video:getFilter|

Gets the scaling filters used when drawing the Video.

Synopses:

    1.  `min`, `mag`, `anisotropy` = |Video:getFilter|()

Variants:

    1.  `min`, `mag`, `anisotropy` = |Video:getFilter|()

        See function description

        returns:

            `min`: <FilterMode>

                The filter mode used when scaling the Video down.

            `mag`: <FilterMode>

                The filter mode used when scaling the Video up.

            `anisotropy`: <number>

                Maximum amount of anisotropic filtering used.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Video:getHeight*
|Video:getHeight|

Gets the height of the Video in pixels.

Synopses:

    1.  `height` = |Video:getHeight|()

Variants:

    1.  `height` = |Video:getHeight|()

        See function description

        returns:

            `height`: <number>

                The height of the Video.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Video:getSource*
|Video:getSource|

Gets the audio Source used for playing back the video's audio. May return nil
if the video has no audio, or if Video:setSource is called with a nil argument.

Synopses:

    1.  `source` = |Video:getSource|()

Variants:

    1.  `source` = |Video:getSource|()

        See function description

        returns:

            `source`: <Source>

                The audio Source used for audio playback, or nil if the video
                has no audio.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Video:getStream*
|Video:getStream|

Gets the VideoStream object used for decoding and controlling the video.

Synopses:

    1.  `stream` = |Video:getStream|()

Variants:

    1.  `stream` = |Video:getStream|()

        See function description

        returns:

            `stream`: <VideoStream>

                The VideoStream used for decoding and controlling the video.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Video:getWidth*
|Video:getWidth|

Gets the width of the Video in pixels.

Synopses:

    1.  `width` = |Video:getWidth|()

Variants:

    1.  `width` = |Video:getWidth|()

        See function description

        returns:

            `width`: <number>

                The width of the Video.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Video:isPlaying*
|Video:isPlaying|

Gets whether the Video is currently playing.

Synopses:

    1.  `playing` = |Video:isPlaying|()

Variants:

    1.  `playing` = |Video:isPlaying|()

        See function description

        returns:

            `playing`: <boolean>

                Whether the video is playing.

        arguments:

            None

-------------------------------------------------------------------------------
                                                             *love-Video:pause*
|Video:pause|

Pauses the Video.

Synopses:

    1.  |Video:pause|()

Variants:

    1.  |Video:pause|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                              *love-Video:play*
|Video:play|

Starts playing the Video. In order for the video to appear onscreen it must be
drawn with love.graphics.draw.

Synopses:

    1.  |Video:play|()

Variants:

    1.  |Video:play|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                            *love-Video:rewind*
|Video:rewind|

Rewinds the Video to the beginning.

Synopses:

    1.  |Video:rewind|()

Variants:

    1.  |Video:rewind|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                              *love-Video:seek*
|Video:seek|

Sets the current playback position of the Video.

Synopses:

    1.  |Video:seek|( `offset` )

Variants:

    1.  |Video:seek|( `offset` )

        See function description

        returns:

            None

        arguments:

            `offset`: <number>

                The time in seconds since the beginning of the Video.

-------------------------------------------------------------------------------
                                                         *love-Video:setFilter*
|Video:setFilter|

Sets the scaling filters used when drawing the Video.

Synopses:

    1.  |Video:setFilter|( `min`, `mag`, `anisotropy` )

Variants:

    1.  |Video:setFilter|( `min`, `mag`, `anisotropy` )

        See function description

        returns:

            None

        arguments:

            `min`: <FilterMode>

                The filter mode used when scaling the Video down.

            `mag`: <FilterMode>

                The filter mode used when scaling the Video up.

            `anisotropy`: <number>

                Maximum amount of anisotropic filtering used.

-------------------------------------------------------------------------------
                                                         *love-Video:setSource*
|Video:setSource|

Sets the audio Source used for playing back the video's audio. The audio Source
also controls playback speed and synchronization.

Synopses:

    1.  |Video:setSource|( `source` )

Variants:

    1.  |Video:setSource|( `source` )

        See function description

        returns:

            None

        arguments:

            `source`: <Source>

                The audio Source used for audio playback, or nil to disable
                audio synchronization.

-------------------------------------------------------------------------------
                                                              *love-Video:tell*
|Video:tell|

Gets the current playback position of the Video.

Synopses:

    1.  |Video:tell|( `seconds` )

Variants:

    1.  |Video:tell|( `seconds` )

        See function description

        returns:

            None

        arguments:

            `seconds`: <number>

                The time in seconds since the beginning of the Video.

===============================================================================
                                                              *love-love.image*
|love.image|

Provides an interface to decode encoded image data.

    |callbacks|                           |love-love.image-callbacks|
    |enums|                               |love-love.image-enums|
    |functions|                           |love-love.image-functions|
    |types|                               |love-love.image-types|

-------------------------------------------------------------------------------
                                                    *love-love.image-callbacks*
The callbacks of |love.image|:

    None

-------------------------------------------------------------------------------
                                                        *love-love.image-enums*
The enums of |love.image|:

    |CompressedImageFormat|               |love-CompressedImageFormat|
    |ImageFormat|                         |love-ImageFormat|

-------------------------------------------------------------------------------
                                                   *love-CompressedImageFormat*
|CompressedImageFormat|

Compressed image data formats. Here and here are a couple overviews of many of
the formats.

Unlike traditional PNG or jpeg, these formats stay compressed in RAM and in the
graphics card's VRAM. This is good for saving memory space as well as improving
performance, since the graphics card will be able to keep more of the image's
pixels in its fast-access cache when drawing it.

    constants:

        `DXT1`: <string>

            The DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits
            for ImageData and regular Images.) Suitable for fully opaque
            images. Suitable for fully opaque images on desktop systems.

        `DXT3`: <string>

            The DXT3 format. RGBA data at 8 bits per pixel. Smooth variations
            in opacity do not mix well with this format.

        `DXT5`: <string>

            The DXT5 format. RGBA data at 8 bits per pixel. Recommended for
            images with varying opacity on desktop systems.

        `BC4`: <string>

            The BC4 format (also known as 3Dc+ or ATI1.) Stores just the red
            channel, at 4 bits per pixel.

        `BC4s`: <string>

            The signed variant of the BC4 format. Same as above but the pixel
            values in the texture are in the range of [-1, 1] instead of [0, 1]
            in shaders.

        `BC5`: <string>

            The BC5 format (also known as 3Dc or ATI2.) Stores red and green
            channels at 8 bits per pixel.

        `BC5s`: <string>

            The signed variant of the BC5 format.

        `BC6h`: <string>

            The BC6H format. Stores half-precision floating-point RGB data in
            the range of [0, 65504] at 8 bits per pixel. Suitable for HDR
            images on desktop systems.

        `BC6hs`: <string>

            The signed variant of the BC6H format. Stores RGB data in the range
            of [-65504, +65504].

        `BC7`: <string>

            The BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8
            bits per pixel.

        `ETC1`: <string>

            The ETC1 format. RGB data at 4 bits per pixel. Suitable for fully
            opaque images on older Android devices.

        `ETC2rgb`: <string>

            The RGB variant of the ETC2 format. RGB data at 4 bits per pixel.
            Suitable for fully opaque images on newer mobile devices.

        `ETC2rgba`: <string>

            The RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel.
            Recommended for images with varying opacity on newer mobile
            devices.

        `ETC2rgba1`: <string>

            The RGBA variant of the ETC2 format where pixels are either fully
            transparent or fully opaque. RGBA data at 4 bits per pixel.

        `EACr`: <string>

            The single-channel variant of the EAC format. Stores just the red
            channel, at 4 bits per pixel.

        `EACrs`: <string>

            The signed single-channel variant of the EAC format. Same as above
            but pixel values in the texture are in the range of [-1, 1] instead
            of [0, 1] in shaders.

        `EACrg`: <string>

            The two-channel variant of the EAC format. Stores red and green
            channels at 8 bits per pixel.

        `EACrgs`: <string>

            The signed two-channel variant of the EAC format.

        `PVR1rgb2`: <string>

            The 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB
            data at 2 bits per pixel. Textures compressed with PVRTC1 formats
            must be square and power-of-two sized.

        `PVR1rgb4`: <string>

            The 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB
            data at 4 bits per pixel.

        `PVR1rgba2`: <string>

            The 2 bit per pixel RGBA variant of the PVRTC1 format.

        `PVR1rgba4`: <string>

            The 4 bit per pixel RGBA variant of the PVRTC1 format.

        `ASTC4x4`: <string>

            The 4x4 pixels per block variant of the ASTC format. RGBA data at 8
            bits per pixel.

        `ASTC5x4`: <string>

            The 5x4 pixels per block variant of the ASTC format. RGBA data at
            6.4 bits per pixel.

        `ASTC5x5`: <string>

            The 5x5 pixels per block variant of the ASTC format. RGBA data at
            5.12 bits per pixel.

        `ASTC6x5`: <string>

            The 6x5 pixels per block variant of the ASTC format. RGBA data at
            4.27 bits per pixel.

        `ASTC6x6`: <string>

            The 6x6 pixels per block variant of the ASTC format. RGBA data at
            3.56 bits per pixel.

        `ASTC8x5`: <string>

            The 8x5 pixels per block variant of the ASTC format. RGBA data at
            3.2 bits per pixel.

        `ASTC8x6`: <string>

            The 8x6 pixels per block variant of the ASTC format. RGBA data at
            2.67 bits per pixel.

        `ASTC8x8`: <string>

            The 8x8 pixels per block variant of the ASTC format. RGBA data at 2
            bits per pixel.

        `ASTC10x5`: <string>

            The 10x5 pixels per block variant of the ASTC format. RGBA data at
            2.56 bits per pixel.

        `ASTC10x6`: <string>

            The 10x6 pixels per block variant of the ASTC format. RGBA data at
            2.13 bits per pixel.

        `ASTC10x8`: <string>

            The 10x8 pixels per block variant of the ASTC format. RGBA data at
            1.6 bits per pixel.

        `ASTC10x10`: <string>

            The 10x10 pixels per block variant of the ASTC format. RGBA data at
            1.28 bits per pixel.

        `ASTC12x10`: <string>

            The 12x10 pixels per block variant of the ASTC format. RGBA data at
            1.07 bits per pixel.

        `ASTC12x12`: <string>

            The 12x12 pixels per block variant of the ASTC format. RGBA data at
            0.89 bits per pixel.

-------------------------------------------------------------------------------
                                                             *love-ImageFormat*
|ImageFormat|

Encoded image formats.

    constants:

        `tga`: <string>

            Targa image format.

        `png`: <string>

            PNG image format.

-------------------------------------------------------------------------------
                                                    *love-love.image-functions*
The functions of |love.image|:

    |isCompressed|                        |love-love.image.isCompressed|
    |newCompressedData|                   |love-love.image.newCompressedData|
    |newImageData|                        |love-love.image.newImageData|

-------------------------------------------------------------------------------
                                                 *love-love.image.isCompressed*
|love.image.isCompressed|

Determines whether a file can be loaded as CompressedImageData.

Synopses:

    1.  `compressed` = |love.image.isCompressed|( `filename` )
    2.  `compressed` = |love.image.isCompressed|( `fileData` )

Variants:

    1.  `compressed` = |love.image.isCompressed|( `filename` )

        See function description

        returns:

            `compressed`: <boolean>

                Whether the file can be loaded as CompressedImageData or not.

        arguments:

            `filename`: <string>

                The filename of the potentially compressed image file.
    2.  `compressed` = |love.image.isCompressed|( `fileData` )

        See function description

        returns:

            `compressed`: <boolean>

                Whether the FileData can be loaded as CompressedImageData or
                not.

        arguments:

            `fileData`: <FileData>

                A FileData potentially containing a compressed image.

-------------------------------------------------------------------------------
                                            *love-love.image.newCompressedData*
|love.image.newCompressedData|

Create a new CompressedImageData object from a compressed image file. LÖVE
supports several compressed texture formats, enumerated in the
CompressedImageFormat page.

Synopses:

    1.  `compressedImageData` = |love.image.newCompressedData|(
        `filename` )
    2.  `compressedImageData` = |love.image.newCompressedData|(
        `fileData` )

Variants:

    1.  `compressedImageData` = |love.image.newCompressedData|(
        `filename` )

        See function description

        returns:

            `compressedImageData`: <CompressedImageData>

                The new CompressedImageData object.

        arguments:

            `filename`: <string>

                The filename of the compressed image file.
    2.  `compressedImageData` = |love.image.newCompressedData|(
        `fileData` )

        See function description

        returns:

            `compressedImageData`: <CompressedImageData>

                The new CompressedImageData object.

        arguments:

            `fileData`: <FileData>

                A FileData containing a compressed image.

-------------------------------------------------------------------------------
                                                 *love-love.image.newImageData*
|love.image.newImageData|

Create a new ImageData object.

Synopses:

    1.  `imageData` = |love.image.newImageData|( `width`, `height` )
    2.  `imageData` = |love.image.newImageData|( `width`, `height`,
        `data` )
    3.  `imageData` = |love.image.newImageData|( `filename` )
    4.  `imageData` = |love.image.newImageData|( `filedata` )

Variants:

    1.  `imageData` = |love.image.newImageData|( `width`, `height` )

        See function description

        returns:

            `imageData`: <ImageData>

                The new blank ImageData object. Each pixel's color values,
                (including the alpha values!) will be set to zero.

        arguments:

            `width`: <number>

                The width of the ImageData.

            `height`: <number>

                The height of the ImageData.
    2.  `imageData` = |love.image.newImageData|( `width`, `height`,
        `data` )

        See function description

        returns:

            `imageData`: <ImageData>

                The new ImageData object.

        arguments:

            `width`: <number>

                The width of the ImageData.

            `height`: <number>

                The height of the ImageData.

            `data`: <string>

                The data to load into the ImageData (RGBA bytes, left to right
                and top to bottom).
    3.  `imageData` = |love.image.newImageData|( `filename` )

        See function description

        returns:

            `imageData`: <ImageData>

                The new ImageData object.

        arguments:

            `filename`: <string>

                The filename of the image file.
    4.  `imageData` = |love.image.newImageData|( `filedata` )

        See function description

        returns:

            `imageData`: <ImageData>

                The new ImageData object.

        arguments:

            `filedata`: <FileData>

                The encoded file data to decode into image data.
-------------------------------------------------------------------------------
                                                        *love-love.image-types*
The types of |love.image|:

    |CompressedImageData|                 |love-CompressedImageData|
    |ImageData|                           |love-ImageData|

-------------------------------------------------------------------------------
                                                     *love-CompressedImageData*
|CompressedImageData|

Represents compressed image data designed to stay compressed in RAM.

CompressedImageData encompasses standard compressed texture formats such as
DXT1, DXT5, and BC5 / 3Dc.

You can't draw CompressedImageData directly to the screen. See Image for that.

                                        *love-CompressedImageData-constructors*
    constructors:

        |newCompressedData|               |love-newCompressedData|

                                          *love-CompressedImageData-supertypes*
    supertypes:

        |Data|                            |love-Data|
        |Object|                          |love-Object|

                                            *love-CompressedImageData-subtypes*
    subtypes:

        None

                                           *love-CompressedImageData-functions*
    functions:

        |getDimensions|                   |love-CompressedImageData:getDimens-|
        |getFormat|                       |love-CompressedImageData:getFormat|
        |getHeight|                       |love-CompressedImageData:getHeight|
        |getMipmapCount|                  |love-CompressedImageData:getMipmap-|
        |getWidth|                        |love-CompressedImageData:getWidth|

-------------------------------------------------------------------------------
                                       *love-CompressedImageData:getDimensions*
|CompressedImageData:getDimensions|

Gets the width and height of the CompressedImageData.

Synopses:

    1.  `width`, `height` = |CompressedImageData:getDimensions|()
    2.  `width`, `height` = |CompressedImageData:getDimensions|(
        `level` )

Variants:

    1.  `width`, `height` = |CompressedImageData:getDimensions|()

        See function description

        returns:

            `width`: <number>

                The width of the CompressedImageData.

            `height`: <number>

                The height of the CompressedImageData.

        arguments:

            None
    2.  `width`, `height` = |CompressedImageData:getDimensions|(
        `level` )

        See function description

        returns:

            `width`: <number>

                The width of the CompressedImageData.

            `height`: <number>

                The height of the CompressedImageData.

        arguments:

            `level`: <number>

                A mipmap level. Must be in the range of [1,
                CompressedImageData:getMipmapCount()].

-------------------------------------------------------------------------------
                                           *love-CompressedImageData:getFormat*
|CompressedImageData:getFormat|

Gets the format of the CompressedImageData.

Synopses:

    1.  `format` = |CompressedImageData:getFormat|()

Variants:

    1.  `format` = |CompressedImageData:getFormat|()

        See function description

        returns:

            `format`: <CompressedImageFormat>

                The format of the CompressedImageData.

        arguments:

            None

-------------------------------------------------------------------------------
                                           *love-CompressedImageData:getHeight*
|CompressedImageData:getHeight|

Gets the height of the CompressedImageData.

Synopses:

    1.  `height` = |CompressedImageData:getHeight|()
    2.  `height` = |CompressedImageData:getHeight|( `level` )

Variants:

    1.  `height` = |CompressedImageData:getHeight|()

        See function description

        returns:

            `height`: <number>

                The height of the CompressedImageData.

        arguments:

            None
    2.  `height` = |CompressedImageData:getHeight|( `level` )

        See function description

        returns:

            `height`: <number>

                The height of the CompressedImageData.

        arguments:

            `level`: <number>

                A mipmap level. Must be in the range of [1,
                CompressedImageData:getMipmapCount()].

-------------------------------------------------------------------------------
                                      *love-CompressedImageData:getMipmapCount*
|CompressedImageData:getMipmapCount|

Gets the number of mipmap levels in the CompressedImageData. The base mipmap
level (original image) is included in the count.

Synopses:

    1.  `mipmaps` = |CompressedImageData:getMipmapCount|()

Variants:

    1.  `mipmaps` = |CompressedImageData:getMipmapCount|()

        See function description

        returns:

            `mipmaps`: <number>

                The number of mipmap levels stored in the CompressedImageData.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-CompressedImageData:getWidth*
|CompressedImageData:getWidth|

Gets the width of the CompressedImageData.

Synopses:

    1.  `width` = |CompressedImageData:getWidth|()
    2.  `width` = |CompressedImageData:getWidth|( `level` )

Variants:

    1.  `width` = |CompressedImageData:getWidth|()

        See function description

        returns:

            `width`: <number>

                The width of the CompressedImageData.

        arguments:

            None
    2.  `width` = |CompressedImageData:getWidth|( `level` )

        See function description

        returns:

            `width`: <number>

                The width of the CompressedImageData.

        arguments:

            `level`: <number>

                A mipmap level. Must be in the range of [1,
                CompressedImageData:getMipmapCount()].

-------------------------------------------------------------------------------
                                                               *love-ImageData*
|ImageData|

Raw (decoded) image data.

You can't draw ImageData directly to screen. See Image for that.

                                                  *love-ImageData-constructors*
    constructors:

        |newImageData|                    |love-newImageData|

                                                    *love-ImageData-supertypes*
    supertypes:

        |Data|                            |love-Data|
        |Object|                          |love-Object|

                                                      *love-ImageData-subtypes*
    subtypes:

        None

                                                     *love-ImageData-functions*
    functions:

        |encode|                          |love-ImageData:encode|
        |getDimensions|                   |love-ImageData:getDimensions|
        |getHeight|                       |love-ImageData:getHeight|
        |getPixel|                        |love-ImageData:getPixel|
        |getWidth|                        |love-ImageData:getWidth|
        |mapPixel|                        |love-ImageData:mapPixel|
        |paste|                           |love-ImageData:paste|
        |setPixel|                        |love-ImageData:setPixel|

-------------------------------------------------------------------------------
                                                        *love-ImageData:encode*
|ImageData:encode|

Encodes the ImageData and optionally writes it to the save directory.

Synopses:

    1.  `filedata` = |ImageData:encode|( `format`, `filename` )

Variants:

    1.  `filedata` = |ImageData:encode|( `format`, `filename` )

        See function description

        returns:

            `filedata`: <FileData>

                The encoded image as a new FileData object.

        arguments:

            `format`: <ImageFormat>

                The format to encode the image as.

            `filename`: <string>

                The filename to write the file to. If nil, no file will be
                written but the FileData will still be returned.

-------------------------------------------------------------------------------
                                                 *love-ImageData:getDimensions*
|ImageData:getDimensions|

Gets the width and height of the ImageData in pixels.

Synopses:

    1.  `width`, `height` = |ImageData:getDimensions|()

Variants:

    1.  `width`, `height` = |ImageData:getDimensions|()

        See function description

        returns:

            `width`: <number>

                The width of the ImageData in pixels.

            `height`: <number>

                The height of the ImageData in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-ImageData:getHeight*
|ImageData:getHeight|

Gets the height of the ImageData in pixels.

Synopses:

    1.  `height` = |ImageData:getHeight|()

Variants:

    1.  `height` = |ImageData:getHeight|()

        See function description

        returns:

            `height`: <number>

                The height of the ImageData in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-ImageData:getPixel*
|ImageData:getPixel|

Gets the color of a pixel at a specific position in the image.

Valid x and y values start at 0 and go up to image width and height minus 1.
Non-integer values are floored.

Synopses:

    1.  `r`, `g`, `b`, `a` = |ImageData:getPixel|( `x`, `y` )

Variants:

    1.  `r`, `g`, `b`, `a` = |ImageData:getPixel|( `x`, `y` )

        See function description

        returns:

            `r`: <number>

                The red component (0-255).

            `g`: <number>

                The green component (0-255).

            `b`: <number>

                The blue component (0-255).

            `a`: <number>

                The alpha component (0-255).

        arguments:

            `x`: <number>

                The position of the pixel on the x-axis.

            `y`: <number>

                The position of the pixel on the y-axis.

-------------------------------------------------------------------------------
                                                      *love-ImageData:getWidth*
|ImageData:getWidth|

Gets the width of the ImageData in pixels.

Synopses:

    1.  `width` = |ImageData:getWidth|()

Variants:

    1.  `width` = |ImageData:getWidth|()

        See function description

        returns:

            `width`: <number>

                The width of the ImageData in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-ImageData:mapPixel*
|ImageData:mapPixel|

Transform an image by applying a function to every pixel.

This function is a higher order function. It takes another function as a
parameter, and calls it once for each pixel in the ImageData.

The function parameter is called with six parameters for each pixel in turn.
The parameters are numbers that represent the x and y coordinates of the pixel
and its red, green, blue and alpha values. The function parameter can return up
to four number values, which become the new r, g, b and a values of the pixel.
If the function returns fewer values, the remaining components are set to 0.

Synopses:

    1.  |ImageData:mapPixel|( `pixelFunction` )

Variants:

    1.  |ImageData:mapPixel|( `pixelFunction` )

        See function description

        returns:

            None

        arguments:

            `pixelFunction`: <function>

                Function parameter to apply to every pixel.

-------------------------------------------------------------------------------
                                                         *love-ImageData:paste*
|ImageData:paste|

Paste into ImageData from another source ImageData.

Synopses:

    1.  |ImageData:paste|( `source`, `dx`, `dy`, `sx`, `sy`, `sw`, `sh`
        )

Variants:

    1.  |ImageData:paste|( `source`, `dx`, `dy`, `sx`, `sy`, `sw`, `sh`
        )

        See function description

        returns:

            None

        arguments:

            `source`: <ImageData>

                Source ImageData from which to copy.

            `dx`: <number>

                Destination top-left position on x-axis.

            `dy`: <number>

                Destination top-left position on y-axis.

            `sx`: <number>

                Source top-left position on x-axis.

            `sy`: <number>

                Source top-left position on y-axis.

            `sw`: <number>

                Source width.

            `sh`: <number>

                Source height.

-------------------------------------------------------------------------------
                                                      *love-ImageData:setPixel*
|ImageData:setPixel|

Sets the color of a pixel at a specific position in the image.

Valid x and y values start at 0 and go up to image width and height minus 1.

Synopses:

    1.  |ImageData:setPixel|( `x`, `y`, `r`, `g`, `b`, `a` )

Variants:

    1.  |ImageData:setPixel|( `x`, `y`, `r`, `g`, `b`, `a` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The position of the pixel on the x-axis.

            `y`: <number>

                The position of the pixel on the y-axis.

            `r`: <number>

                The red component (0-255).

            `g`: <number>

                The green component (0-255).

            `b`: <number>

                The blue component (0-255).

            `a`: <number>

                The alpha component (0-255).

===============================================================================
                                                           *love-love.joystick*
|love.joystick|

Provides an interface to the user's joystick.

    |callbacks|                           |love-love.joystick-callbacks|
    |enums|                               |love-love.joystick-enums|
    |functions|                           |love-love.joystick-functions|
    |types|                               |love-love.joystick-types|

-------------------------------------------------------------------------------
                                                 *love-love.joystick-callbacks*
The callbacks of |love.joystick|:

    None

-------------------------------------------------------------------------------
                                                     *love-love.joystick-enums*
The enums of |love.joystick|:

    |GamepadAxis|                         |love-GamepadAxis|
    |GamepadButton|                       |love-GamepadButton|
    |JoystickHat|                         |love-JoystickHat|
    |JoystickInputType|                   |love-JoystickInputType|

-------------------------------------------------------------------------------
                                                             *love-GamepadAxis*
|GamepadAxis|

Virtual gamepad axes.

    constants:

        `leftx`: <string>

            The x-axis of the left thumbstick.

        `lefty`: <string>

            The y-axis of the left thumbstick.

        `rightx`: <string>

            The x-axis of the right thumbstick.

        `righty`: <string>

            The y-axis of the right thumbstick.

        `triggerleft`: <string>

            Left analog trigger.

        `triggerright`: <string>

            Right analog trigger.

-------------------------------------------------------------------------------
                                                           *love-GamepadButton*
|GamepadButton|

Virtual gamepad buttons.

    constants:

        `a`: <string>

            Bottom face button (A).

        `b`: <string>

            Right face button (B).

        `x`: <string>

            Left face button (X).

        `y`: <string>

            Top face button (Y).

        `back`: <string>

            Back button.

        `guide`: <string>

            Guide button.

        `start`: <string>

            Start button.

        `leftstick`: <string>

            Left stick click button.

        `rightstick`: <string>

            Right stick click button.

        `leftshoulder`: <string>

            Left bumper.

        `rightshoulder`: <string>

            Right bumper.

        `dpup`: <string>

            D-pad up.

        `dpdown`: <string>

            D-pad down.

        `dpleft`: <string>

            D-pad left.

        `dpright`: <string>

            D-pad right.

-------------------------------------------------------------------------------
                                                             *love-JoystickHat*
|JoystickHat|

Joystick hat positions.

    constants:

        `c`: <string>

            Centered

        `d`: <string>

            Down

        `l`: <string>

            Left

        `ld`: <string>

            Left+Down

        `lu`: <string>

            Left+Up

        `r`: <string>

            Right

        `rd`: <string>

            Right+Down

        `ru`: <string>

            Right+Up

        `u`: <string>

            Up

-------------------------------------------------------------------------------
                                                       *love-JoystickInputType*
|JoystickInputType|

Types of Joystick inputs.

    constants:

        `axis`: <string>

            Analog axis.

        `button`: <string>

            Button.

        `hat`: <string>

            8-direction hat value.

-------------------------------------------------------------------------------
                                                 *love-love.joystick-functions*
The functions of |love.joystick|:

    |getJoystickCount|                    |love-love.joystick.getJoystickCount|
    |getJoysticks|                        |love-love.joystick.getJoysticks|
    |loadGamepadMappings|                 |love-love.joystick.loadGamepadMapp-|
    |saveGamepadMappings|                 |love-love.joystick.saveGamepadMapp-|
    |setGamepadMapping|                   |love-love.joystick.setGamepadMappi-|

-------------------------------------------------------------------------------
                                          *love-love.joystick.getJoystickCount*
|love.joystick.getJoystickCount|

Gets the number of connected joysticks.

Synopses:

    1.  `joystickcount` = |love.joystick.getJoystickCount|()

Variants:

    1.  `joystickcount` = |love.joystick.getJoystickCount|()

        See function description

        returns:

            `joystickcount`: <number>

                The number of connected joysticks.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.joystick.getJoysticks*
|love.joystick.getJoysticks|

Gets a list of connected Joysticks.

Synopses:

    1.  `joysticks` = |love.joystick.getJoysticks|()

Variants:

    1.  `joysticks` = |love.joystick.getJoysticks|()

        See function description

        returns:

            `joysticks`: <table>

                The list of currently connected Joysticks.

        arguments:

            None

-------------------------------------------------------------------------------
                                       *love-love.joystick.loadGamepadMappings*
|love.joystick.loadGamepadMappings|

Loads a gamepad mappings string or file created with
love.joystick.saveGamepadMappings.

Synopses:

    1.  |love.joystick.loadGamepadMappings|( `filename` )
    2.  |love.joystick.loadGamepadMappings|( `mappings` )

Variants:

    1.  |love.joystick.loadGamepadMappings|( `filename` )

        See function description

        returns:

            None

        arguments:

            `filename`: <string>

                The filename to load the mappings string from.
    2.  |love.joystick.loadGamepadMappings|( `mappings` )

        See function description

        returns:

            None

        arguments:

            `mappings`: <string>

                The mappings string to load.

-------------------------------------------------------------------------------
                                       *love-love.joystick.saveGamepadMappings*
|love.joystick.saveGamepadMappings|

Saves the virtual gamepad mappings of all Joysticks that are recognized as
gamepads and have either been recently used or their gamepad bindings have been
modified.

Synopses:

    1.  `mappings` = |love.joystick.saveGamepadMappings|( `filename` )
    2.  `mappings` = |love.joystick.saveGamepadMappings|()

Variants:

    1.  `mappings` = |love.joystick.saveGamepadMappings|( `filename` )

        See function description

        returns:

            `mappings`: <string>

                The mappings string that was written to the file.

        arguments:

            `filename`: <string>

                The filename to save the mappings string to.
    2.  `mappings` = |love.joystick.saveGamepadMappings|()

        See function description

        returns:

            `mappings`: <string>

                The mappings string.

        arguments:

            None

-------------------------------------------------------------------------------
                                         *love-love.joystick.setGamepadMapping*
|love.joystick.setGamepadMapping|

Binds a virtual gamepad input to a button, axis or hat for all Joysticks of a
certain type. For example, if this function is used with a GUID returned by a
Dualshock 3 controller in OS X, the binding will affect Joystick:getGamepadAxis
and Joystick:isGamepadDown for all Dualshock 3 controllers used with the game
when run in OS X.

LÖVE includes built-in gamepad bindings for many common controllers. This
function lets you change the bindings or add new ones for types of Joysticks
which aren't recognized as gamepads by default.

The virtual gamepad buttons and axes are designed around the Xbox 360
controller layout.

Synopses:

    1.  `success` = |love.joystick.setGamepadMapping|( `guid`,
        `button`, `inputtype`, `inputindex`, `hatdirection` )
    2.  `success` = |love.joystick.setGamepadMapping|( `guid`, `axis`,
        `inputtype`, `inputindex`, `hatdirection` )

Variants:

    1.  `success` = |love.joystick.setGamepadMapping|( `guid`,
        `button`, `inputtype`, `inputindex`, `hatdirection` )

        See function description

        returns:

            `success`: <boolean>

                Whether the virtual gamepad button was successfully bound.

        arguments:

            `guid`: <string>

                The OS-dependent GUID for the type of Joystick the binding will
                affect.

            `button`: <GamepadButton>

                The virtual gamepad button to bind.

            `inputtype`: <JoystickInputType>

                The type of input to bind the virtual gamepad button to.

            `inputindex`: <number>

                The index of the axis, button, or hat to bind the virtual
                gamepad button to.

            `hatdirection`: <JoystickHat>

                The direction of the hat, if the virtual gamepad button will be
                bound to a hat. nil otherwise.
    2.  `success` = |love.joystick.setGamepadMapping|( `guid`, `axis`,
        `inputtype`, `inputindex`, `hatdirection` )

        See function description

        returns:

            `success`: <boolean>

                Whether the virtual gamepad button was successfully bound.

        arguments:

            `guid`: <string>

                The OS-dependent GUID for the type of Joystick the binding will
                affect.

            `axis`: <GamepadAxis>

                The virtual gamepad axis to bind.

            `inputtype`: <JoystickInputType>

                The type of input to bind the virtual gamepad axis to.

            `inputindex`: <number>

                The index of the axis, button, or hat to bind the virtual
                gamepad axis to.

            `hatdirection`: <JoystickHat>

                The direction of the hat, if the virtual gamepad axis will be
                bound to a hat. nil otherwise.
-------------------------------------------------------------------------------
                                                     *love-love.joystick-types*
The types of |love.joystick|:

    |Joystick|                            |love-Joystick|

-------------------------------------------------------------------------------
                                                                *love-Joystick*
|Joystick|

Represents a physical joystick.

                                                   *love-Joystick-constructors*
    constructors:

        |getJoysticks|                    |love-getJoysticks|

                                                     *love-Joystick-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                       *love-Joystick-subtypes*
    subtypes:

        None

                                                      *love-Joystick-functions*
    functions:

        |getAxes|                         |love-Joystick:getAxes|
        |getAxis|                         |love-Joystick:getAxis|
        |getAxisCount|                    |love-Joystick:getAxisCount|
        |getButtonCount|                  |love-Joystick:getButtonCount|
        |getGUID|                         |love-Joystick:getGUID|
        |getGamepadAxis|                  |love-Joystick:getGamepadAxis|
        |getGamepadMapping|               |love-Joystick:getGamepadMapping|
        |getHat|                          |love-Joystick:getHat|
        |getHatCount|                     |love-Joystick:getHatCount|
        |getID|                           |love-Joystick:getID|
        |getName|                         |love-Joystick:getName|
        |getVibration|                    |love-Joystick:getVibration|
        |isConnected|                     |love-Joystick:isConnected|
        |isDown|                          |love-Joystick:isDown|
        |isGamepad|                       |love-Joystick:isGamepad|
        |isGamepadDown|                   |love-Joystick:isGamepadDown|
        |isVibrationSupported|            |love-Joystick:isVibrationSupported|
        |setVibration|                    |love-Joystick:setVibration|

-------------------------------------------------------------------------------
                                                        *love-Joystick:getAxes*
|Joystick:getAxes|

Gets the direction of each axis.

Synopses:

    1.  `axisDir1`, `axisDir2`, `axisDirN` = |Joystick:getAxes|()

Variants:

    1.  `axisDir1`, `axisDir2`, `axisDirN` = |Joystick:getAxes|()

        See function description

        returns:

            `axisDir1`: <number>

                Direction of axis1.

            `axisDir2`: <number>

                Direction of axis2.

            `axisDirN`: <number>

                Direction of axisN.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Joystick:getAxis*
|Joystick:getAxis|

Gets the direction of an axis.

Synopses:

    1.  `direction` = |Joystick:getAxis|( `axis` )

Variants:

    1.  `direction` = |Joystick:getAxis|( `axis` )

        See function description

        returns:

            `direction`: <number>

                Current value of the axis.

        arguments:

            `axis`: <number>

                The index of the axis to be checked.

-------------------------------------------------------------------------------
                                                   *love-Joystick:getAxisCount*
|Joystick:getAxisCount|

Gets the number of axes on the joystick.

Synopses:

    1.  `axes` = |Joystick:getAxisCount|()

Variants:

    1.  `axes` = |Joystick:getAxisCount|()

        See function description

        returns:

            `axes`: <number>

                The number of axes available.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-Joystick:getButtonCount*
|Joystick:getButtonCount|

Gets the number of buttons on the joystick.

Synopses:

    1.  `buttons` = |Joystick:getButtonCount|()

Variants:

    1.  `buttons` = |Joystick:getButtonCount|()

        See function description

        returns:

            `buttons`: <number>

                The number of buttons available.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Joystick:getGUID*
|Joystick:getGUID|

Gets a stable GUID unique to the type of the physical joystick which does not
change over time. For example, all Sony Dualshock 3 controllers in OS X have
the same GUID. The value is platform-dependent.

Synopses:

    1.  `guid` = |Joystick:getGUID|()

Variants:

    1.  `guid` = |Joystick:getGUID|()

        See function description

        returns:

            `guid`: <string>

                The Joystick type's OS-dependent unique identifier.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-Joystick:getGamepadAxis*
|Joystick:getGamepadAxis|

Gets the direction of a virtual gamepad axis. If the Joystick isn't recognized
as a gamepad or isn't connected, this function will always return 0.

Synopses:

    1.  `direction` = |Joystick:getGamepadAxis|( `axis` )

Variants:

    1.  `direction` = |Joystick:getGamepadAxis|( `axis` )

        See function description

        returns:

            `direction`: <number>

                Current value of the axis.

        arguments:

            `axis`: <GamepadAxis>

                The virtual axis to be checked.

-------------------------------------------------------------------------------
                                              *love-Joystick:getGamepadMapping*
|Joystick:getGamepadMapping|

Gets the button, axis or hat that a virtual gamepad input is bound to.

Synopses:

    1.  `inputtype`, `inputindex`, `hatdirection` =
        |Joystick:getGamepadMapping|( `axis` )
    2.  `inputtype`, `inputindex`, `hatdirection` =
        |Joystick:getGamepadMapping|( `button` )

Variants:

    1.  `inputtype`, `inputindex`, `hatdirection` =
        |Joystick:getGamepadMapping|( `axis` )

        See function description

        returns:

            `inputtype`: <JoystickInputType>

                The type of input the virtual gamepad axis is bound to.

            `inputindex`: <number>

                The index of the Joystick's button, axis or hat that the
                virtual gamepad axis is bound to.

            `hatdirection`: <JoystickHat>

                The direction of the hat, if the virtual gamepad axis is bound
                to a hat. nil otherwise.

        arguments:

            `axis`: <GamepadAxis>

                The virtual gamepad axis to get the binding for.
    2.  `inputtype`, `inputindex`, `hatdirection` =
        |Joystick:getGamepadMapping|( `button` )

        See function description

        returns:

            `inputtype`: <JoystickInputType>

                The type of input the virtual gamepad button is bound to.

            `inputindex`: <number>

                The index of the Joystick's button, axis or hat that the
                virtual gamepad button is bound to.

            `hatdirection`: <JoystickHat>

                The direction of the hat, if the virtual gamepad button is
                bound to a hat. nil otherwise.

        arguments:

            `button`: <GamepadAxis>

                The virtual gamepad button to get the binding for.

-------------------------------------------------------------------------------
                                                         *love-Joystick:getHat*
|Joystick:getHat|

Gets the direction of the Joystick's hat.

Synopses:

    1.  `direction` = |Joystick:getHat|( `hat` )

Variants:

    1.  `direction` = |Joystick:getHat|( `hat` )

        See function description

        returns:

            `direction`: <JoystickHat>

                The direction the hat is pushed.

        arguments:

            `hat`: <number>

                The index of the hat to be checked.

-------------------------------------------------------------------------------
                                                    *love-Joystick:getHatCount*
|Joystick:getHatCount|

Gets the number of hats on the joystick.

Synopses:

    1.  `hats` = |Joystick:getHatCount|()

Variants:

    1.  `hats` = |Joystick:getHatCount|()

        See function description

        returns:

            `hats`: <number>

                How many hats the joystick has.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Joystick:getID*
|Joystick:getID|

Gets the joystick's unique identifier. The identifier will remain the same for
the life of the game, even when the Joystick is disconnected and reconnected,
but it will change when the game is re-launched.

Synopses:

    1.  `id`, `instanceid` = |Joystick:getID|()

Variants:

    1.  `id`, `instanceid` = |Joystick:getID|()

        See function description

        returns:

            `id`: <number>

                The Joystick's unique identifier. Remains the same as long as
                the game is running.

            `instanceid`: <number>

                Unique instance identifier. Changes every time the Joystick is
                reconnected. nil if the Joystick is not connected.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Joystick:getName*
|Joystick:getName|

Gets the name of the joystick.

Synopses:

    1.  `name` = |Joystick:getName|()

Variants:

    1.  `name` = |Joystick:getName|()

        See function description

        returns:

            `name`: <string>

                The name of the joystick.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-Joystick:getVibration*
|Joystick:getVibration|

Gets the current vibration motor strengths on a Joystick with rumble support.

Synopses:

    1.  `left`, `right` = |Joystick:getVibration|()

Variants:

    1.  `left`, `right` = |Joystick:getVibration|()

        See function description

        returns:

            `left`: <number>

                Current strength of the left vibration motor on the Joystick.

            `right`: <number>

                Current strength of the right vibration motor on the Joystick.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-Joystick:isConnected*
|Joystick:isConnected|

Gets whether the Joystick is connected.

Synopses:

    1.  `connected` = |Joystick:isConnected|()

Variants:

    1.  `connected` = |Joystick:isConnected|()

        See function description

        returns:

            `connected`: <boolean>

                True if the Joystick is currently connected, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Joystick:isDown*
|Joystick:isDown|

Checks if a button on the Joystick is pressed.

LÖVE 0.9.0 had a bug which required the button indices passed to
Joystick:isDown to be 0-based instead of 1-based, for example button 1 would be
0 for this function. It was fixed in 0.9.1.

Synopses:

    1.  `anyDown` = |Joystick:isDown|( `...` )

Variants:

    1.  `anyDown` = |Joystick:isDown|( `...` )

        See function description

        returns:

            `anyDown`: <boolean>

                True if any supplied button is down, false if not.

        arguments:

            `...`: <number>

                The index of a button to check.

-------------------------------------------------------------------------------
                                                      *love-Joystick:isGamepad*
|Joystick:isGamepad|

Gets whether the Joystick is recognized as a gamepad. If this is the case, the
Joystick's buttons and axes can be used in a standardized manner across
different operating systems and joystick models via Joystick:getGamepadAxis and
related functions.

LÖVE automatically recognizes most popular controllers with a similar layout
to the Xbox 360 controller as gamepads, but you can add more with
love.joystick.setGamepadMapping.

Synopses:

    1.  `isgamepad` = |Joystick:isGamepad|()

Variants:

    1.  `isgamepad` = |Joystick:isGamepad|()

        See function description

        returns:

            `isgamepad`: <boolean>

                True if the Joystick is recognized as a gamepad, false
                otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Joystick:isGamepadDown*
|Joystick:isGamepadDown|

Checks if a virtual gamepad button on the Joystick is pressed. If the Joystick
is not recognized as a Gamepad or isn't connected, then this function will
always return false.

Synopses:

    1.  `anyDown` = |Joystick:isGamepadDown|( `...` )

Variants:

    1.  `anyDown` = |Joystick:isGamepadDown|( `...` )

        See function description

        returns:

            `anyDown`: <boolean>

                True if any supplied button is down, false if not.

        arguments:

            `...`: <GamepadButton>

                The gamepad button to check.

-------------------------------------------------------------------------------
                                           *love-Joystick:isVibrationSupported*
|Joystick:isVibrationSupported|

Gets whether the Joystick supports vibration.

Synopses:

    1.  `supported` = |Joystick:isVibrationSupported|()

Variants:

    1.  `supported` = |Joystick:isVibrationSupported|()

        See function description

        returns:

            `supported`: <boolean>

                True if rumble / force feedback vibration is supported on this
                Joystick, false if not.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-Joystick:setVibration*
|Joystick:setVibration|

Sets the vibration motor speeds on a Joystick with rumble support.

Synopses:

    1.  `success` = |Joystick:setVibration|( `left`, `right` )
    2.  `success` = |Joystick:setVibration|()
    3.  `success` = |Joystick:setVibration|( `left`, `right`,
        `duration` )

Variants:

    1.  `success` = |Joystick:setVibration|( `left`, `right` )

        See function description

        returns:

            `success`: <boolean>

                True if the vibration was successfully applied, false if not.

        arguments:

            `left`: <number>

                Strength of the left vibration motor on the Joystick. Must be
                in the range of [0, 1].

            `right`: <number>

                Strength of the right vibration motor on the Joystick. Must be
                in the range of [0, 1].
    2.  `success` = |Joystick:setVibration|()

        See function description

        returns:

            `success`: <boolean>

                True if the vibration was successfully disabled, false if not.

        arguments:

            None
    3.  `success` = |Joystick:setVibration|( `left`, `right`,
        `duration` )

        See function description

        returns:

            `success`: <boolean>

                True if the vibration was successfully applied, false if not.

        arguments:

            `left`: <number>

                Strength of the left vibration motor on the Joystick. Must be
                in the range of [0, 1].

            `right`: <number>

                Strength of the right vibration motor on the Joystick. Must be
                in the range of [0, 1].

            `duration`: <number>

                The duration of the vibration in seconds. A negative value
                means infinite duration.

===============================================================================
                                                           *love-love.keyboard*
|love.keyboard|

Provides an interface to the user's keyboard.

    |callbacks|                           |love-love.keyboard-callbacks|
    |enums|                               |love-love.keyboard-enums|
    |functions|                           |love-love.keyboard-functions|
    |types|                               |love-love.keyboard-types|

-------------------------------------------------------------------------------
                                                 *love-love.keyboard-callbacks*
The callbacks of |love.keyboard|:

    None

-------------------------------------------------------------------------------
                                                     *love-love.keyboard-enums*
The enums of |love.keyboard|:

    |KeyConstant|                         |love-KeyConstant|
    |Scancode|                            |love-Scancode|

-------------------------------------------------------------------------------
                                                             *love-KeyConstant*
|KeyConstant|

All the keys you can press. Note that some keys may not be available on your
keyboard or system.

    constants:

        `a`: <string>

            The A key

        `b`: <string>

            The B key

        `c`: <string>

            The C key

        `d`: <string>

            The D key

        `e`: <string>

            The E key

        `f`: <string>

            The F key

        `g`: <string>

            The G key

        `h`: <string>

            The H key

        `i`: <string>

            The I key

        `j`: <string>

            The J key

        `k`: <string>

            The K key

        `l`: <string>

            The L key

        `m`: <string>

            The M key

        `n`: <string>

            The N key

        `o`: <string>

            The O key

        `p`: <string>

            The P key

        `q`: <string>

            The Q key

        `r`: <string>

            The R key

        `s`: <string>

            The S key

        `t`: <string>

            The T key

        `u`: <string>

            The U key

        `v`: <string>

            The V key

        `w`: <string>

            The W key

        `x`: <string>

            The X key

        `y`: <string>

            The Y key

        `z`: <string>

            The Z key

        `0`: <string>

            The zero key

        `1`: <string>

            The one key

        `2`: <string>

            The two key

        `3`: <string>

            The three key

        `4`: <string>

            The four key

        `5`: <string>

            The five key

        `6`: <string>

            The six key

        `7`: <string>

            The seven key

        `8`: <string>

            The eight key

        `9`: <string>

            The nine key

        `space`: <string>

            Space key

        `!`: <string>

            Exclamation mark key

        `"`: <string>

            Double quote key

        `#`: <string>

            Hash key

        `$`: <string>

            Dollar key

        `&`: <string>

            Ampersand key

        `'`: <string>

            Single quote key

        `(`: <string>

            Left parenthesis key

        `)`: <string>

            Right parenthesis key

        `*`: <string>

            Asterisk key

        `+`: <string>

            Plus key

        `,`: <string>

            Comma key

        `-`: <string>

            Hyphen-minus key

        `.`: <string>

            Full stop key

        `/`: <string>

            Slash key

        `:`: <string>

            Colon key

        `;`: <string>

            Semicolon key

        `<`: <string>

            Less-than key

        `=`: <string>

            Equal key

        `>`: <string>

            Greater-than key

        `?`: <string>

            Question mark key

        `@`: <string>

            At sign key

        `[`: <string>

            Left square bracket key

        `\`: <string>

            Backslash key

        `]`: <string>

            Right square bracket key

        `^`: <string>

            Caret key

        `_`: <string>

            Underscore key

        ```: <string>

            Grave accent key

        `kp0`: <string>

            The numpad zero key

        `kp1`: <string>

            The numpad one key

        `kp2`: <string>

            The numpad two key

        `kp3`: <string>

            The numpad three key

        `kp4`: <string>

            The numpad four key

        `kp5`: <string>

            The numpad five key

        `kp6`: <string>

            The numpad six key

        `kp7`: <string>

            The numpad seven key

        `kp8`: <string>

            The numpad eight key

        `kp9`: <string>

            The numpad nine key

        `kp.`: <string>

            The numpad decimal point key

        `kp/`: <string>

            The numpad division key

        `kp*`: <string>

            The numpad multiplication key

        `kp-`: <string>

            The numpad substraction key

        `kp+`: <string>

            The numpad addition key

        `kpenter`: <string>

            The numpad enter key

        `kp=`: <string>

            The numpad equals key

        `up`: <string>

            Up cursor key

        `down`: <string>

            Down cursor key

        `right`: <string>

            Right cursor key

        `left`: <string>

            Left cursor key

        `home`: <string>

            Home key

        `end`: <string>

            End key

        `pageup`: <string>

            Page up key

        `pagedown`: <string>

            Page down key

        `insert`: <string>

            Insert key

        `backspace`: <string>

            Backspace key

        `tab`: <string>

            Tab key

        `clear`: <string>

            Clear key

        `return`: <string>

            Return key

        `delete`: <string>

            Delete key

        `f1`: <string>

            The 1st function key

        `f2`: <string>

            The 2nd function key

        `f3`: <string>

            The 3rd function key

        `f4`: <string>

            The 4th function key

        `f5`: <string>

            The 5th function key

        `f6`: <string>

            The 6th function key

        `f7`: <string>

            The 7th function key

        `f8`: <string>

            The 8th function key

        `f9`: <string>

            The 9th function key

        `f10`: <string>

            The 10th function key

        `f11`: <string>

            The 11th function key

        `f12`: <string>

            The 12th function key

        `f13`: <string>

            The 13th function key

        `f14`: <string>

            The 14th function key

        `f15`: <string>

            The 15th function key

        `numlock`: <string>

            Num-lock key

        `capslock`: <string>

            Caps-lock key

        `scrollock`: <string>

            Scroll-lock key

        `rshift`: <string>

            Right shift key

        `lshift`: <string>

            Left shift key

        `rctrl`: <string>

            Right control key

        `lctrl`: <string>

            Left control key

        `ralt`: <string>

            Right alt key

        `lalt`: <string>

            Left alt key

        `rmeta`: <string>

            Right meta key

        `lmeta`: <string>

            Left meta key

        `lsuper`: <string>

            Left super key

        `rsuper`: <string>

            Right super key

        `mode`: <string>

            Mode key

        `compose`: <string>

            Compose key

        `pause`: <string>

            Pause key

        `escape`: <string>

            Escape key

        `help`: <string>

            Help key

        `print`: <string>

            Print key

        `sysreq`: <string>

            System request key

        `break`: <string>

            Break key

        `menu`: <string>

            Menu key

        `power`: <string>

            Power key

        `euro`: <string>

            Euro (&euro;) key

        `undo`: <string>

            Undo key

        `www`: <string>

            WWW key

        `mail`: <string>

            Mail key

        `calculator`: <string>

            Calculator key

        `appsearch`: <string>

            Application search key

        `apphome`: <string>

            Application home key

        `appback`: <string>

            Application back key

        `appforward`: <string>

            Application forward key

        `apprefresh`: <string>

            Application refresh key

        `appbookmarks`: <string>

            Application bookmarks key

-------------------------------------------------------------------------------
                                                                *love-Scancode*
|Scancode|

Keyboard scancodes.

Scancodes are keyboard layout-independent, so the scancode "w" will be
generated if the key in the same place as the "w" key on an American QWERTY
keyboard is pressed, no matter what the key is labelled or what the user's
operating system settings are.

Using scancodes, rather than keycodes, is useful because keyboards with layouts
differing from the US/UK layout(s) might have keys that generate 'unknown'
keycodes, but the scancodes will still be detected. This however would
necessitate having a list for each keyboard layout one would choose to support.

One could use textinput or textedited instead, but those only give back the end
result of keys used, i.e. you can't get modifiers on their own from it, only
the final symbols that were generated.

    constants:

        `a`: <string>

            The 'A' key on an American layout.

        `b`: <string>

            The 'B' key on an American layout.

        `c`: <string>

            The 'C' key on an American layout.

        `d`: <string>

            The 'D' key on an American layout.

        `e`: <string>

            The 'E' key on an American layout.

        `f`: <string>

            The 'F' key on an American layout.

        `g`: <string>

            The 'G' key on an American layout.

        `h`: <string>

            The 'H' key on an American layout.

        `i`: <string>

            The 'I' key on an American layout.

        `j`: <string>

            The 'J' key on an American layout.

        `k`: <string>

            The 'K' key on an American layout.

        `l`: <string>

            The 'L' key on an American layout.

        `m`: <string>

            The 'M' key on an American layout.

        `n`: <string>

            The 'N' key on an American layout.

        `o`: <string>

            The 'O' key on an American layout.

        `p`: <string>

            The 'P' key on an American layout.

        `q`: <string>

            The 'Q' key on an American layout.

        `r`: <string>

            The 'R' key on an American layout.

        `s`: <string>

            The 'S' key on an American layout.

        `t`: <string>

            The 'T' key on an American layout.

        `u`: <string>

            The 'U' key on an American layout.

        `v`: <string>

            The 'V' key on an American layout.

        `w`: <string>

            The 'W' key on an American layout.

        `x`: <string>

            The 'X' key on an American layout.

        `y`: <string>

            The 'Y' key on an American layout.

        `z`: <string>

            The 'Z' key on an American layout.

        `1`: <string>

            The '1' key on an American layout.

        `2`: <string>

            The '2' key on an American layout.

        `3`: <string>

            The '3' key on an American layout.

        `4`: <string>

            The '4' key on an American layout.

        `5`: <string>

            The '5' key on an American layout.

        `6`: <string>

            The '6' key on an American layout.

        `7`: <string>

            The '7' key on an American layout.

        `8`: <string>

            The '8' key on an American layout.

        `9`: <string>

            The '9' key on an American layout.

        `0`: <string>

            The '0' key on an American layout.

        `return`: <string>

            The 'return' / 'enter' key on an American layout.

        `escape`: <string>

            The 'escape' key on an American layout.

        `backspace`: <string>

            The 'backspace' key on an American layout.

        `tab`: <string>

            The 'tab' key on an American layout.

        `space`: <string>

            The spacebar on an American layout.

        `-`: <string>

            The minus key on an American layout.

        `=`: <string>

            The equals key on an American layout.

        `[`: <string>

            The left-bracket key on an American layout.

        `]`: <string>

            The right-bracket key on an American layout.

        `\`: <string>

            The backslash key on an American layout.

        `nonus#`: <string>

            The non-U.S. hash scancode.

        `;`: <string>

            The semicolon key on an American layout.

        `'`: <string>

            The apostrophe key on an American layout.

        ```: <string>

            The back-tick / grave key on an American layout.

        `,`: <string>

            The comma key on an American layout.

        `.`: <string>

            The period key on an American layout.

        `/`: <string>

            The forward-slash key on an American layout.

        `capslock`: <string>

            The capslock key on an American layout.

        `f1`: <string>

            The F1 key on an American layout.

        `f2`: <string>

            The F2 key on an American layout.

        `f3`: <string>

            The F3 key on an American layout.

        `f4`: <string>

            The F4 key on an American layout.

        `f5`: <string>

            The F5 key on an American layout.

        `f6`: <string>

            The F6 key on an American layout.

        `f7`: <string>

            The F7 key on an American layout.

        `f8`: <string>

            The F8 key on an American layout.

        `f9`: <string>

            The F9 key on an American layout.

        `f10`: <string>

            The F10 key on an American layout.

        `f11`: <string>

            The F11 key on an American layout.

        `f12`: <string>

            The F12 key on an American layout.

        `f13`: <string>

            The F13 key on an American layout.

        `f14`: <string>

            The F14 key on an American layout.

        `f15`: <string>

            The F15 key on an American layout.

        `f16`: <string>

            The F16 key on an American layout.

        `f17`: <string>

            The F17 key on an American layout.

        `f18`: <string>

            The F18 key on an American layout.

        `f19`: <string>

            The F19 key on an American layout.

        `f20`: <string>

            The F20 key on an American layout.

        `f21`: <string>

            The F21 key on an American layout.

        `f22`: <string>

            The F22 key on an American layout.

        `f23`: <string>

            The F23 key on an American layout.

        `f24`: <string>

            The F24 key on an American layout.

        `lctrl`: <string>

            The left control key on an American layout.

        `lshift`: <string>

            The left shift key on an American layout.

        `lalt`: <string>

            The left alt / option key on an American layout.

        `lgui`: <string>

            The left GUI (command / windows / super) key on an American layout.

        `rctrl`: <string>

            The right control key on an American layout.

        `rshift`: <string>

            The right shift key on an American layout.

        `ralt`: <string>

            The right alt / option key on an American layout.

        `rgui`: <string>

            The right GUI (command / windows / super) key on an American
            layout.

        `printscreen`: <string>

            The printscreen key on an American layout.

        `scrolllock`: <string>

            The scroll-lock key on an American layout.

        `pause`: <string>

            The pause key on an American layout.

        `insert`: <string>

            The insert key on an American layout.

        `home`: <string>

            The home key on an American layout.

        `numlock`: <string>

            The numlock / clear key on an American layout.

        `pageup`: <string>

            The page-up key on an American layout.

        `delete`: <string>

            The forward-delete key on an American layout.

        `end`: <string>

            The end key on an American layout.

        `pagedown`: <string>

            The page-down key on an American layout.

        `right`: <string>

            The right-arrow key on an American layout.

        `left`: <string>

            The left-arrow key on an American layout.

        `down`: <string>

            The down-arrow key on an American layout.

        `up`: <string>

            The up-arrow key on an American layout.

        `nonusbackslash`: <string>

            The non-U.S. backslash scancode.

        `application`: <string>

            The application key on an American layout. Windows contextual menu,
            compose key.

        `execute`: <string>

            The 'execute' key on an American layout.

        `help`: <string>

            The 'help' key on an American layout.

        `menu`: <string>

            The 'menu' key on an American layout.

        `select`: <string>

            The 'select' key on an American layout.

        `stop`: <string>

            The 'stop' key on an American layout.

        `again`: <string>

            The 'again' key on an American layout.

        `undo`: <string>

            The 'undo' key on an American layout.

        `cut`: <string>

            The 'cut' key on an American layout.

        `copy`: <string>

            The 'copy' key on an American layout.

        `paste`: <string>

            The 'paste' key on an American layout.

        `find`: <string>

            The 'find' key on an American layout.

        `kp/`: <string>

            The keypad forward-slash key on an American layout.

        `kp*`: <string>

            The keypad '*' key on an American layout.

        `kp-`: <string>

            The keypad minus key on an American layout.

        `kp+`: <string>

            The keypad plus key on an American layout.

        `kp=`: <string>

            The keypad equals key on an American layout.

        `kpenter`: <string>

            The keypad enter key on an American layout.

        `kp1`: <string>

            The keypad '1' key on an American layout.

        `kp2`: <string>

            The keypad '2' key on an American layout.

        `kp3`: <string>

            The keypad '3' key on an American layout.

        `kp4`: <string>

            The keypad '4' key on an American layout.

        `kp5`: <string>

            The keypad '5' key on an American layout.

        `kp6`: <string>

            The keypad '6' key on an American layout.

        `kp7`: <string>

            The keypad '7' key on an American layout.

        `kp8`: <string>

            The keypad '8' key on an American layout.

        `kp9`: <string>

            The keypad '9' key on an American layout.

        `kp0`: <string>

            The keypad '0' key on an American layout.

        `kp.`: <string>

            The keypad period key on an American layout.

        `international1`: <string>

            The 1st international key on an American layout. Used on Asian
            keyboards.

        `international2`: <string>

            The 2nd international key on an American layout.

        `international3`: <string>

            The 3rd international key on an American layout. Yen.

        `international4`: <string>

            The 4th international key on an American layout.

        `international5`: <string>

            The 5th international key on an American layout.

        `international6`: <string>

            The 6th international key on an American layout.

        `international7`: <string>

            The 7th international key on an American layout.

        `international8`: <string>

            The 8th international key on an American layout.

        `international9`: <string>

            The 9th international key on an American layout.

        `lang1`: <string>

            Hangul/English toggle scancode.

        `lang2`: <string>

            Hanja conversion scancode.

        `lang3`: <string>

            Katakana scancode.

        `lang4`: <string>

            Hiragana scancode.

        `lang5`: <string>

            Zenkaku/Hankaku scancode.

        `mute`: <string>

            The mute key on an American layout.

        `volumeup`: <string>

            The volume up key on an American layout.

        `volumedown`: <string>

            The volume down key on an American layout.

        `audionext`: <string>

            The audio next track key on an American layout.

        `audioprev`: <string>

            The audio previous track key on an American layout.

        `audiostop`: <string>

            The audio stop key on an American layout.

        `audioplay`: <string>

            The audio play key on an American layout.

        `audiomute`: <string>

            The audio mute key on an American layout.

        `mediaselect`: <string>

            The media select key on an American layout.

        `www`: <string>

            The 'WWW' key on an American layout.

        `mail`: <string>

            The Mail key on an American layout.

        `calculator`: <string>

            The calculator key on an American layout.

        `computer`: <string>

            The 'computer' key on an American layout.

        `acsearch`: <string>

            The AC Search key on an American layout.

        `achome`: <string>

            The AC Home key on an American layout.

        `acback`: <string>

            The AC Back key on an American layout.

        `acforward`: <string>

            The AC Forward key on an American layout.

        `acstop`: <string>

            Th AC Stop key on an American layout.

        `acrefresh`: <string>

            The AC Refresh key on an American layout.

        `acbookmarks`: <string>

            The AC Bookmarks key on an American layout.

        `power`: <string>

            The system power scancode.

        `brightnessdown`: <string>

            The brightness-down scancode.

        `brightnessup`: <string>

            The brightness-up scancode.

        `displayswitch`: <string>

            The display switch scancode.

        `kbdillumtoggle`: <string>

            The keyboard illumination toggle scancode.

        `kbdillumdown`: <string>

            The keyboard illumination down scancode.

        `kbdillumup`: <string>

            The keyboard illumination up scancode.

        `eject`: <string>

            The eject scancode.

        `sleep`: <string>

            The system sleep scancode.

        `alterase`: <string>

            The alt-erase key on an American layout.

        `sysreq`: <string>

            The sysreq key on an American layout.

        `cancel`: <string>

            The 'cancel' key on an American layout.

        `clear`: <string>

            The 'clear' key on an American layout.

        `prior`: <string>

            The 'prior' key on an American layout.

        `return2`: <string>

            The 'return2' key on an American layout.

        `separator`: <string>

            The 'separator' key on an American layout.

        `out`: <string>

            The 'out' key on an American layout.

        `oper`: <string>

            The 'oper' key on an American layout.

        `clearagain`: <string>

            The 'clearagain' key on an American layout.

        `crsel`: <string>

            The 'crsel' key on an American layout.

        `exsel`: <string>

            The 'exsel' key on an American layout.

        `kp00`: <string>

            The keypad 00 key on an American layout.

        `kp000`: <string>

            The keypad 000 key on an American layout.

        `thsousandsseparator`: <string>

            The thousands-separator key on an American layout.

        `decimalseparator`: <string>

            The decimal separator key on an American layout.

        `currencyunit`: <string>

            The currency unit key on an American layout.

        `currencysubunit`: <string>

            The currency sub-unit key on an American layout.

        `app1`: <string>

            The 'app1' scancode.

        `app2`: <string>

            The 'app2' scancode.

        `unknown`: <string>

            An unknown key.

-------------------------------------------------------------------------------
                                                 *love-love.keyboard-functions*
The functions of |love.keyboard|:

    |getKeyFromScancode|                  |love-love.keyboard.getKeyFromScanc-|
    |getScancodeFromKey|                  |love-love.keyboard.getScancodeFrom-|
    |hasKeyRepeat|                        |love-love.keyboard.hasKeyRepeat|
    |hasTextInput|                        |love-love.keyboard.hasTextInput|
    |isDown|                              |love-love.keyboard.isDown|
    |isScancodeDown|                      |love-love.keyboard.isScancodeDown|
    |setKeyRepeat|                        |love-love.keyboard.setKeyRepeat|
    |setTextInput|                        |love-love.keyboard.setTextInput|

-------------------------------------------------------------------------------
                                        *love-love.keyboard.getKeyFromScancode*
|love.keyboard.getKeyFromScancode|

Gets the key corresponding to the given hardware scancode.

Unlike key constants, Scancodes are keyboard layout-independent. For example
the scancode "w" will be generated if the key in the same place as the "w" key
on an American keyboard is pressed, no matter what the key is labelled or what
the user's operating system settings are.

Scancodes are useful for creating default controls that have the same physical
locations on on all systems.

Synopses:

    1.  `key` = |love.keyboard.getKeyFromScancode|( `scancode` )

Variants:

    1.  `key` = |love.keyboard.getKeyFromScancode|( `scancode` )

        See function description

        returns:

            `key`: <KeyConstant>

                The key corresponding to the given scancode, or "unknown" if
                the scancode doesn't map to a KeyConstant on the current
                system.

        arguments:

            `scancode`: <Scancode>

                The scancode to get the key from.

-------------------------------------------------------------------------------
                                        *love-love.keyboard.getScancodeFromKey*
|love.keyboard.getScancodeFromKey|

Gets the hardware scancode corresponding to the given key.

Unlike key constants, Scancodes are keyboard layout-independent. For example
the scancode "w" will be generated if the key in the same place as the "w" key
on an American keyboard is pressed, no matter what the key is labelled or what
the user's operating system settings are.

Scancodes are useful for creating default controls that have the same physical
locations on on all systems.

Synopses:

    1.  `scancode` = |love.keyboard.getScancodeFromKey|( `key` )

Variants:

    1.  `scancode` = |love.keyboard.getScancodeFromKey|( `key` )

        See function description

        returns:

            `scancode`: <Scancode>

                The scancode corresponding to the given key, or "unknown" if
                the given key has no known physical representation on the
                current system.

        arguments:

            `key`: <KeyConstant>

                The key to get the scancode from.

-------------------------------------------------------------------------------
                                              *love-love.keyboard.hasKeyRepeat*
|love.keyboard.hasKeyRepeat|

Gets whether key repeat is enabled.

Synopses:

    1.  `enabled` = |love.keyboard.hasKeyRepeat|()

Variants:

    1.  `enabled` = |love.keyboard.hasKeyRepeat|()

        See function description

        returns:

            `enabled`: <boolean>

                Whether key repeat is enabled.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.keyboard.hasTextInput*
|love.keyboard.hasTextInput|

Gets whether text input events are enabled.

Synopses:

    1.  `enabled` = |love.keyboard.hasTextInput|()

Variants:

    1.  `enabled` = |love.keyboard.hasTextInput|()

        See function description

        returns:

            `enabled`: <boolean>

                Whether text input events are enabled.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.keyboard.isDown*
|love.keyboard.isDown|

Checks whether a certain key is down. Not to be confused with love.keypressed
or love.keyreleased.

Synopses:

    1.  `down` = |love.keyboard.isDown|( `key` )
    2.  `anyDown` = |love.keyboard.isDown|( `key`, `...` )

Variants:

    1.  `down` = |love.keyboard.isDown|( `key` )

        See function description

        returns:

            `down`: <boolean>

                True if the key is down, false if not.

        arguments:

            `key`: <KeyConstant>

                The key to check.
    2.  `anyDown` = |love.keyboard.isDown|( `key`, `...` )

        See function description

        returns:

            `anyDown`: <boolean>

                True if any supplied key is down, false if not.

        arguments:

            `key`: <KeyConstant>

                A key to check.

            `...`: <KeyConstant>

                Additional keys to check.

-------------------------------------------------------------------------------
                                            *love-love.keyboard.isScancodeDown*
|love.keyboard.isScancodeDown|

Checks whether the specified Scancodes are pressed. Not to be confused with
love.keypressed or love.keyreleased.

Unlike regular KeyConstants, Scancodes are keyboard layout-independent. The
scancode "w" is used if the key in the same place as the "w" key on an American
keyboard is pressed, no matter what the key is labelled or what the user's
operating system settings are.

Synopses:

    1.  `down` = |love.keyboard.isScancodeDown|( `scancode`, `...` )

Variants:

    1.  `down` = |love.keyboard.isScancodeDown|( `scancode`, `...` )

        See function description

        returns:

            `down`: <boolean>

                True if any supplied Scancode is down, false if not.

        arguments:

            `scancode`: <Scancode>

                A Scancode to check.

            `...`: <Scancode>

                Additional Scancodes to check.

-------------------------------------------------------------------------------
                                              *love-love.keyboard.setKeyRepeat*
|love.keyboard.setKeyRepeat|

Enables or disables key repeat. It is disabled by default.

The interval between repeats depends on the user's system settings.

Synopses:

    1.  |love.keyboard.setKeyRepeat|( `enable` )

Variants:

    1.  |love.keyboard.setKeyRepeat|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: <boolean>

                Whether repeat keypress events should be enabled when a key is
                held down.

-------------------------------------------------------------------------------
                                              *love-love.keyboard.setTextInput*
|love.keyboard.setTextInput|

Enables or disables text input events. It is enabled by default on Windows,
Mac, and Linux, and disabled by default on iOS and Android.

Synopses:

    1.  |love.keyboard.setTextInput|( `enable` )
    2.  |love.keyboard.setTextInput|( `enable`, `x`, `y`, `w`, `h` )

Variants:

    1.  |love.keyboard.setTextInput|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: <boolean>

                Whether text input events should be enabled.
    2.  |love.keyboard.setTextInput|( `enable`, `x`, `y`, `w`, `h` )

        See function description

        returns:

            None

        arguments:

            `enable`: <boolean>

                Whether text input events should be enabled.

            `x`: <number>

                On-screen keyboard x position.

            `y`: <number>

                On-screen keyboard y position.

            `w`: <number>

                On-screen keyboard width.

            `h`: <number>

                On-screen keyboard height.
-------------------------------------------------------------------------------
                                                     *love-love.keyboard-types*
The types of |love.keyboard|:

    None

===============================================================================
                                                               *love-love.math*
|love.math|

Provides system-independent mathematical functions.

    |callbacks|                           |love-love.math-callbacks|
    |enums|                               |love-love.math-enums|
    |functions|                           |love-love.math-functions|
    |types|                               |love-love.math-types|

-------------------------------------------------------------------------------
                                                     *love-love.math-callbacks*
The callbacks of |love.math|:

    None

-------------------------------------------------------------------------------
                                                         *love-love.math-enums*
The enums of |love.math|:

    |CompressedDataFormat|                |love-CompressedDataFormat|

-------------------------------------------------------------------------------
                                                    *love-CompressedDataFormat*
|CompressedDataFormat|

Compressed data formats.

    constants:

        `lz4`: <string>

            The LZ4 compression format. Compresses and decompresses very
            quickly, but the compression ratio is not the best. LZ4-HC is used
            when compression level 9 is specified.

        `zlib`: <string>

            The zlib format is DEFLATE-compressed data with a small bit of
            header data. Compresses relatively slowly and decompresses
            moderately quickly, and has a decent compression ratio.

        `gzip`: <string>

            The gzip format is DEFLATE-compressed data with a slightly larger
            header than zlib. Since it uses DEFLATE it has the same compression
            characteristics as the zlib format.

-------------------------------------------------------------------------------
                                                     *love-love.math-functions*
The functions of |love.math|:

    |compress|                            |love-love.math.compress|
    |decompress|                          |love-love.math.decompress|
    |gammaToLinear|                       |love-love.math.gammaToLinear|
    |getRandomSeed|                       |love-love.math.getRandomSeed|
    |getRandomState|                      |love-love.math.getRandomState|
    |isConvex|                            |love-love.math.isConvex|
    |linearToGamma|                       |love-love.math.linearToGamma|
    |newBezierCurve|                      |love-love.math.newBezierCurve|
    |newRandomGenerator|                  |love-love.math.newRandomGenerator|
    |noise|                               |love-love.math.noise|
    |random|                              |love-love.math.random|
    |randomNormal|                        |love-love.math.randomNormal|
    |setRandomSeed|                       |love-love.math.setRandomSeed|
    |setRandomState|                      |love-love.math.setRandomState|
    |triangulate|                         |love-love.math.triangulate|

-------------------------------------------------------------------------------
                                                      *love-love.math.compress*
|love.math.compress|

Compresses a string or data using a specific compression algorithm.

Synopses:

    1.  `compressedData` = |love.math.compress|( `rawstring`, `format`,
        `level` )
    2.  `compressedData` = |love.math.compress|( `data`, `format`,
        `level` )

Variants:

    1.  `compressedData` = |love.math.compress|( `rawstring`, `format`,
        `level` )

        See function description

        returns:

            `compressedData`: <CompressedData>

                A new Data object containing the compressed version of the
                string.

        arguments:

            `rawstring`: <string>

                The raw (un-compressed) string to compress.

            `format`: <CompressedDataFormat>

                The format to use when compressing the string.

            `level`: <number>

                The level of compression to use, between 0 and 9. -1 indicates
                the default level. The meaning of this argument depends on the
                compression format being used.
    2.  `compressedData` = |love.math.compress|( `data`, `format`,
        `level` )

        See function description

        returns:

            `compressedData`: <CompressedData>

                A new Data object containing the compressed version of the raw
                data.

        arguments:

            `data`: <Data>

                A Data object containing the raw (un-compressed) data to
                compress.

            `format`: <CompressedDataFormat>

                The format to use when compressing the data.

            `level`: <number>

                The level of compression to use, between 0 and 9. -1 indicates
                the default level. The meaning of this argument depends on the
                compression format being used.

-------------------------------------------------------------------------------
                                                    *love-love.math.decompress*
|love.math.decompress|

Decompresses a CompressedData or previously compressed string or Data object.

Synopses:

    1.  `rawstring` = |love.math.decompress|( `compressedData` )
    2.  `rawstring` = |love.math.decompress|( `compressedString`,
        `format` )
    3.  `rawstring` = |love.math.decompress|( `data`, `format` )

Variants:

    1.  `rawstring` = |love.math.decompress|( `compressedData` )

        See function description

        returns:

            `rawstring`: <string>

                A string containing the raw decompressed data.

        arguments:

            `compressedData`: <CompressedData>

                The compressed data to decompress.
    2.  `rawstring` = |love.math.decompress|( `compressedString`,
        `format` )

        See function description

        returns:

            `rawstring`: <string>

                A string containing the raw decompressed data.

        arguments:

            `compressedString`: <string>

                A string containing data previously compressed with
                love.math.compress.

            `format`: <CompressedDataFormat>

                The format that was used to compress the given string.
    3.  `rawstring` = |love.math.decompress|( `data`, `format` )

        See function description

        returns:

            `rawstring`: <string>

                A string containing the raw decompressed data.

        arguments:

            `data`: <Data>

                A Data object containing data previously compressed with
                love.math.compress.

            `format`: <CompressedDataFormat>

                The format that was used to compress the given data.

-------------------------------------------------------------------------------
                                                 *love-love.math.gammaToLinear*
|love.math.gammaToLinear|

Converts a color from gamma-space (sRGB) to linear-space (RGB). This is useful
when doing gamma-correct rendering and you need to do math in linear RGB in the
few cases where LÖVE doesn't handle conversions automatically.

Synopses:

    1.  `lr`, `lg`, `lb` = |love.math.gammaToLinear|( `r`, `g`, `b` )
    2.  `lr`, `lg`, `lb` = |love.math.gammaToLinear|( `color` )
    3.  `lc` = |love.math.gammaToLinear|( `c` )

Variants:

    1.  `lr`, `lg`, `lb` = |love.math.gammaToLinear|( `r`, `g`, `b` )

        See function description

        returns:

            `lr`: <number>

                The red channel of the converted color in linear RGB space.

            `lg`: <number>

                The green channel of the converted color in linear RGB space.

            `lb`: <number>

                The blue channel of the converted color in linear RGB space.

        arguments:

            `r`: <number>

                The red channel of the sRGB color to convert.

            `g`: <number>

                The green channel of the sRGB color to convert.

            `b`: <number>

                The blue channel of the sRGB color to convert.
    2.  `lr`, `lg`, `lb` = |love.math.gammaToLinear|( `color` )

        See function description

        returns:

            `lr`: <number>

                The red channel of the converted color in linear RGB space.

            `lg`: <number>

                The green channel of the converted color in linear RGB space.

            `lb`: <number>

                The blue channel of the converted color in linear RGB space.

        arguments:

            `color`: <table>

                An array with the red, green, and blue channels of the sRGB
                color to convert.
    3.  `lc` = |love.math.gammaToLinear|( `c` )

        See function description

        returns:

            `lc`: <number>

                The value of the color channel in linear RGB space.

        arguments:

            `c`: <number>

                The value of a color channel in sRGB space to convert.

-------------------------------------------------------------------------------
                                                 *love-love.math.getRandomSeed*
|love.math.getRandomSeed|

Gets the seed of the random number generator.

The state is split into two numbers due to Lua's use of doubles for all number
values - doubles can't accurately represent integer values above 2^53.

Synopses:

    1.  `low`, `high` = |love.math.getRandomSeed|()

Variants:

    1.  `low`, `high` = |love.math.getRandomSeed|()

        See function description

        returns:

            `low`: <number>

                Integer number representing the lower 32 bits of the random
                number generator's 64 bit state value.

            `high`: <number>

                Integer number representing the higher 32 bits of the random
                number generator's 64 bit state value.

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-love.math.getRandomState*
|love.math.getRandomState|

Gets the current state of the random number generator. This returns an opaque
implementation-dependent string which is only useful for later use with
RandomGenerator:setState.

This is different from RandomGenerator:getSeed in that getState gets the
RandomGenerator's current state, whereas getSeed gets the previously set seed
number.

The value of the state string does not depend on the current operating system.

Synopses:

    1.  `state` = |love.math.getRandomState|()

Variants:

    1.  `state` = |love.math.getRandomState|()

        See function description

        returns:

            `state`: <string>

                The current state of the RandomGenerator object, represented as
                a string.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-love.math.isConvex*
|love.math.isConvex|

Checks whether a polygon is convex.

PolygonShapes in love.physics, some forms of Mesh, and polygons drawn with
love.graphics.polygon must be simple convex polygons.

Synopses:

    1.  `convex` = |love.math.isConvex|( `vertices` )
    2.  `convex` = |love.math.isConvex|( `x1`, `y1`, `x2`, `y2`, `x3`,
        `y3`, `...` )

Variants:

    1.  `convex` = |love.math.isConvex|( `vertices` )

        See function description

        returns:

            `convex`: <boolean>

                Whether the given polygon is convex.

        arguments:

            `vertices`: <table>

                The vertices of the polygon as a table in the form of {x1, y1,
                x2, y2, x3, y3, ...}.
    2.  `convex` = |love.math.isConvex|( `x1`, `y1`, `x2`, `y2`, `x3`,
        `y3`, `...` )

        See function description

        returns:

            `convex`: <boolean>

                Whether the given polygon is convex.

        arguments:

            `x1`: <number>

                The position of the first vertex of the polygon on the x-axis.

            `y1`: <number>

                The position of the first vertex of the polygon on the y-axis.

            `x2`: <number>

                The position of the second vertex of the polygon on the x-axis.

            `y2`: <number>

                The position of the second vertex of the polygon on the y-axis.

            `x3`: <number>

                The position of the third vertex of the polygon on the x-axis.

            `y3`: <number>

                The position of the third vertex of the polygon on the y-axis.

            `...`: <number>

                Additional vertices.

-------------------------------------------------------------------------------
                                                 *love-love.math.linearToGamma*
|love.math.linearToGamma|

Converts a color from linear-space (RGB) to gamma-space (sRGB). This is useful
when storing linear RGB color values in an image, because the linear RGB color
space has less precision than sRGB for dark colors, which can result in
noticeable color banding when drawing.

In general, colors chosen based on what they look like on-screen are already in
gamma-space and should not be double-converted. Colors calculated using math
are often in the linear RGB space.

Synopses:

    1.  `cr`, `cg`, `cb` = |love.math.linearToGamma|( `lr`, `lg`, `lb`
        )
    2.  `cr`, `cg`, `cb` = |love.math.linearToGamma|( `color` )
    3.  `c` = |love.math.linearToGamma|( `lc` )

Variants:

    1.  `cr`, `cg`, `cb` = |love.math.linearToGamma|( `lr`, `lg`, `lb`
        )

        See function description

        returns:

            `cr`: <number>

                The red channel of the converted color in gamma sRGB space.

            `cg`: <number>

                The green channel of the converted color in gamma sRGB space.

            `cb`: <number>

                The blue channel of the converted color in gamma sRGB space.

        arguments:

            `lr`: <number>

                The red channel of the linear RGB color to convert.

            `lg`: <number>

                The green channel of the linear RGB color to convert.

            `lb`: <number>

                The blue channel of the linear RGB color to convert.
    2.  `cr`, `cg`, `cb` = |love.math.linearToGamma|( `color` )

        See function description

        returns:

            `cr`: <number>

                The red channel of the converted color in gamma sRGB space.

            `cg`: <number>

                The green channel of the converted color in gamma sRGB space.

            `cb`: <number>

                The blue channel of the converted color in gamma sRGB space.

        arguments:

            `color`: <table>

                An array with the red, green, and blue channels of the linear
                RGB color to convert.
    3.  `c` = |love.math.linearToGamma|( `lc` )

        See function description

        returns:

            `c`: <number>

                The value of the color channel in gamma sRGB space.

        arguments:

            `lc`: <number>

                The value of a color channel in linear RGB space to convert.

-------------------------------------------------------------------------------
                                                *love-love.math.newBezierCurve*
|love.math.newBezierCurve|

Creates a new BezierCurve object.

The number of vertices in the control polygon determines the degree of the
curve, e.g. three vertices define a quadratic (degree 2) Bézier curve, four
vertices define a cubic (degree 3) Bézier curve, etc.

Synopses:

    1.  `curve` = |love.math.newBezierCurve|( `vertices` )
    2.  `curve` = |love.math.newBezierCurve|( `x1`, `y1`, `x2`, `y2`,
        `x3`, `y3`, `...` )

Variants:

    1.  `curve` = |love.math.newBezierCurve|( `vertices` )

        See function description

        returns:

            `curve`: <BezierCurve>

                A Bézier curve object.

        arguments:

            `vertices`: <table>

                The vertices of the control polygon as a table in the form of
                {x1, y1, x2, y2, x3, y3, ...}.
    2.  `curve` = |love.math.newBezierCurve|( `x1`, `y1`, `x2`, `y2`,
        `x3`, `y3`, `...` )

        See function description

        returns:

            `curve`: <BezierCurve>

                A Bézier curve object.

        arguments:

            `x1`: <number>

                The position of the first vertex of the control polygon on the
                x-axis.

            `y1`: <number>

                The position of the first vertex of the control polygon on the
                y-axis.

            `x2`: <number>

                The position of the second vertex of the control polygon on the
                x-axis.

            `y2`: <number>

                The position of the second vertex of the control polygon on the
                y-axis.

            `x3`: <number>

                The position of the third vertex of the control polygon on the
                x-axis.

            `y3`: <number>

                The position of the third vertex of the control polygon on the
                y-axis.

            `...`: <number>

                Additional vertices.

-------------------------------------------------------------------------------
                                            *love-love.math.newRandomGenerator*
|love.math.newRandomGenerator|

Creates a new RandomGenerator object which is completely independent of other
RandomGenerator objects and random functions.

Synopses:

    1.  `rng` = |love.math.newRandomGenerator|()
    2.  `rng` = |love.math.newRandomGenerator|( `seed` )
    3.  `rng` = |love.math.newRandomGenerator|( `low`, `high` )

Variants:

    1.  `rng` = |love.math.newRandomGenerator|()

        See function description

        returns:

            `rng`: <RandomGenerator>

                The new Random Number Generator object.

        arguments:

            None
    2.  `rng` = |love.math.newRandomGenerator|( `seed` )

        See function description

        returns:

            `rng`: <RandomGenerator>

                The new Random Number Generator object.

        arguments:

            `seed`: <number>

                The initial seed number to use for this object.
    3.  `rng` = |love.math.newRandomGenerator|( `low`, `high` )

        See function description

        returns:

            `rng`: <RandomGenerator>

                The new Random Number Generator object.

        arguments:

            `low`: <number>

                The lower 32 bits of the state number to use for this instance
                of the object.

            `high`: <number>

                The higher 32 bits of the state number to use for this instance
                of the object.

-------------------------------------------------------------------------------
                                                         *love-love.math.noise*
|love.math.noise|

Generates a Simplex or Perlin noise value in 1-4 dimensions. The return value
will always be the same, given the same arguments.

Simplex noise is closely related to Perlin noise. It is widely used for
procedural content generation.

There are many webpages which discuss Perlin and Simplex noise in detail.

Synopses:

    1.  `value` = |love.math.noise|( `x` )
    2.  `value` = |love.math.noise|( `x`, `y` )
    3.  `value` = |love.math.noise|( `x`, `y`, `z` )
    4.  `value` = |love.math.noise|( `x`, `y`, `z`, `w` )

Variants:

    1.  `value` = |love.math.noise|( `x` )

        Generates Simplex noise from 1 dimension.

        returns:

            `value`: <number>

                The noise value in the range of [0, 1].

        arguments:

            `x`: <number>

                The number used to generate the noise value.
    2.  `value` = |love.math.noise|( `x`, `y` )

        Generates Simplex noise from 2 dimensions.

        returns:

            `value`: <number>

                The noise value in the range of [0, 1].

        arguments:

            `x`: <number>

                The first value of the 2-dimensional vector used to generate
                the noise value.

            `y`: <number>

                The second value of the 2-dimensional vector used to generate
                the noise value.
    3.  `value` = |love.math.noise|( `x`, `y`, `z` )

        Generates Perlin noise (Simplex noise in version 0.9.2 and older) from 3 dimensions.

        returns:

            `value`: <number>

                The noise value in the range of [0, 1].

        arguments:

            `x`: <number>

                The first value of the 3-dimensional vector used to generate
                the noise value.

            `y`: <number>

                The second value of the 3-dimensional vector used to generate
                the noise value.

            `z`: <number>

                The third value of the 3-dimensional vector used to generate
                the noise value.
    4.  `value` = |love.math.noise|( `x`, `y`, `z`, `w` )

        Generates Perlin noise (Simplex noise in version 0.9.2 and older) from 4 dimensions.

        returns:

            `value`: <number>

                The noise value in the range of [0, 1].

        arguments:

            `x`: <number>

                The first value of the 4-dimensional vector used to generate
                the noise value.

            `y`: <number>

                The second value of the 4-dimensional vector used to generate
                the noise value.

            `z`: <number>

                The third value of the 4-dimensional vector used to generate
                the noise value.

            `w`: <number>

                The fourth value of the 4-dimensional vector used to generate
                the noise value.

-------------------------------------------------------------------------------
                                                        *love-love.math.random*
|love.math.random|

Generates a pseudo-random number in a platform independent manner.

Synopses:

    1.  `number` = |love.math.random|()
    2.  `number` = |love.math.random|( `max` )
    3.  `number` = |love.math.random|( `min`, `max` )

Variants:

    1.  `number` = |love.math.random|()

        Get uniformly distributed pseudo-random real number within [0, 1].

        returns:

            `number`: <number>

                The pseudo-random number.

        arguments:

            None
    2.  `number` = |love.math.random|( `max` )

        Get a uniformly distributed pseudo-random integer within [1, max].

        returns:

            `number`: <number>

                The pseudo-random integer number.

        arguments:

            `max`: <number>

                The maximum possible value it should return.
    3.  `number` = |love.math.random|( `min`, `max` )

        Get uniformly distributed pseudo-random integer within [min, max].

        returns:

            `number`: <number>

                The pseudo-random integer number.

        arguments:

            `min`: <number>

                The minimum possible value it should return.

            `max`: <number>

                The maximum possible value it should return.

-------------------------------------------------------------------------------
                                                  *love-love.math.randomNormal*
|love.math.randomNormal|

Get a normally distributed pseudo random number.

Synopses:

    1.  `number` = |love.math.randomNormal|( `stddev`, `mean` )

Variants:

    1.  `number` = |love.math.randomNormal|( `stddev`, `mean` )

        See function description

        returns:

            `number`: <number>

                Normally distributed random number with variance (stddev)² and
                the specified mean.

        arguments:

            `stddev`: <number>

                Standard deviation of the distribution.

            `mean`: <number>

                The mean of the distribution.

-------------------------------------------------------------------------------
                                                 *love-love.math.setRandomSeed*
|love.math.setRandomSeed|

Sets the seed of the random number generator using the specified integer
number.

Synopses:

    1.  |love.math.setRandomSeed|( `seed` )
    2.  |love.math.setRandomSeed|( `low`, `high` )

Variants:

    1.  |love.math.setRandomSeed|( `seed` )

        See function description

        returns:

            None

        arguments:

            `seed`: <number>

                The integer number with which you want to seed the
                randomization. Must be within the range of [1, 2^53].
    2.  |love.math.setRandomSeed|( `low`, `high` )

        See function description

        returns:

            None

        arguments:

            `low`: <number>

                The lower 32 bits of the state value. Must be within the range
                of [0, 2^32 - 1].

            `high`: <number>

                The higher 32 bits of the state value. Must be within the range
                of [0, 2^32 - 1].

-------------------------------------------------------------------------------
                                                *love-love.math.setRandomState*
|love.math.setRandomState|

Gets the current state of the random number generator. This returns an opaque
implementation-dependent string which is only useful for later use with
RandomGenerator:setState.

This is different from RandomGenerator:getSeed in that getState gets the
RandomGenerator's current state, whereas getSeed gets the previously set seed
number.

The value of the state string does not depend on the current operating system.

Synopses:

    1.  |love.math.setRandomState|( `state` )

Variants:

    1.  |love.math.setRandomState|( `state` )

        See function description

        returns:

            None

        arguments:

            `state`: <string>

                The current state of the RandomGenerator object, represented as
                a string.

-------------------------------------------------------------------------------
                                                   *love-love.math.triangulate*
|love.math.triangulate|

Triangulate a simple polygon.

Synopses:

    1.  `triangles` = |love.math.triangulate|( `polygon` )
    2.  `triangles` = |love.math.triangulate|( `x1`, `y1`, `x2`, `y2`,
        `x3`, `y3`, `...` )

Variants:

    1.  `triangles` = |love.math.triangulate|( `polygon` )

        See function description

        returns:

            `triangles`: <table>

                List of triangles the polygon is composed of, in the form of
                {{x1, y1, x2, y2, x3, y3}, {x1, y1, x2, y2, x3, y3}, ...}.

        arguments:

            `polygon`: <table>

                Polygon to triangulate. Must not intersect itself.
    2.  `triangles` = |love.math.triangulate|( `x1`, `y1`, `x2`, `y2`,
        `x3`, `y3`, `...` )

        See function description

        returns:

            `triangles`: <table>

                List of triangles the polygon is composed of, in the form of
                {{x1, y1, x2, y2, x3, y3}, {x1, y1, x2, y2, x3, y3}, ...}.

        arguments:

            `x1`: <number>

                The position of the first vertex of the polygon on the x-axis.

            `y1`: <number>

                The position of the first vertex of the polygon on the y-axis.

            `x2`: <number>

                The position of the second vertex of the polygon on the x-axis.

            `y2`: <number>

                The position of the second vertex of the polygon on the y-axis.

            `x3`: <number>

                The position of the third vertex of the polygon on the x-axis.

            `y3`: <number>

                The position of the third vertex of the polygon on the y-axis.

            `...`: <number>

                Additional vertices.
-------------------------------------------------------------------------------
                                                         *love-love.math-types*
The types of |love.math|:

    |BezierCurve|                         |love-BezierCurve|
    |CompressedData|                      |love-CompressedData|
    |RandomGenerator|                     |love-RandomGenerator|

-------------------------------------------------------------------------------
                                                             *love-BezierCurve*
|BezierCurve|

A Bézier curve object that can evaluate and render Bézier curves of arbitrary
degree.

                                                *love-BezierCurve-constructors*
    constructors:

        |newBezierCurve|                  |love-newBezierCurve|

                                                  *love-BezierCurve-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                    *love-BezierCurve-subtypes*
    subtypes:

        None

                                                   *love-BezierCurve-functions*
    functions:

        |evaluate|                        |love-BezierCurve:evaluate|
        |getControlPoint|                 |love-BezierCurve:getControlPoint|
        |getControlPointCount|            |love-BezierCurve:getControlPointCo-|
        |getDegree|                       |love-BezierCurve:getDegree|
        |getDerivative|                   |love-BezierCurve:getDerivative|
        |getSegment|                      |love-BezierCurve:getSegment|
        |insertControlPoint|              |love-BezierCurve:insertControlPoint|
        |removeControlPoint|              |love-BezierCurve:removeControlPoint|
        |render|                          |love-BezierCurve:render|
        |renderSegment|                   |love-BezierCurve:renderSegment|
        |rotate|                          |love-BezierCurve:rotate|
        |scale|                           |love-BezierCurve:scale|
        |setControlPoint|                 |love-BezierCurve:setControlPoint|
        |translate|                       |love-BezierCurve:translate|

-------------------------------------------------------------------------------
                                                    *love-BezierCurve:evaluate*
|BezierCurve:evaluate|

Evaluate Bézier curve at parameter t. The parameter must be between 0 and 1
(inclusive).

This function can be used to move objects along paths or tween parameters.
However it should not be used to render the curve, see BezierCurve:render for
that purpose.

Synopses:

    1.  `x`, `y` = |BezierCurve:evaluate|( `t` )

Variants:

    1.  `x`, `y` = |BezierCurve:evaluate|( `t` )

        See function description

        returns:

            `x`: <number>

                x coordinate of the curve at parameter t.

            `y`: <number>

                y coordinate of the curve at parameter t.

        arguments:

            `t`: <number>

                Where to evaluate the curve.

-------------------------------------------------------------------------------
                                             *love-BezierCurve:getControlPoint*
|BezierCurve:getControlPoint|

Get coordinates of the i-th control point. Indices start with 1.

Synopses:

    1.  `x`, `y` = |BezierCurve:getControlPoint|( `i` )

Variants:

    1.  `x`, `y` = |BezierCurve:getControlPoint|( `i` )

        See function description

        returns:

            `x`: <number>

                Position of the control point along the x axis.

            `y`: <number>

                Position of the control point along the y axis.

        arguments:

            `i`: <number>

                Index of the control point.

-------------------------------------------------------------------------------
                                        *love-BezierCurve:getControlPointCount*
|BezierCurve:getControlPointCount|

Get the number of control points in the Bézier curve.

Synopses:

    1.  `count` = |BezierCurve:getControlPointCount|()

Variants:

    1.  `count` = |BezierCurve:getControlPointCount|()

        See function description

        returns:

            `count`: <number>

                The number of control points.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-BezierCurve:getDegree*
|BezierCurve:getDegree|

Get degree of the Bézier curve. The degree is equal to
number-of-control-points - 1.

Synopses:

    1.  `degree` = |BezierCurve:getDegree|()

Variants:

    1.  `degree` = |BezierCurve:getDegree|()

        See function description

        returns:

            `degree`: <number>

                Degree of the Bézier curve.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-BezierCurve:getDerivative*
|BezierCurve:getDerivative|

Get the derivative of the Bézier curve.

This function can be used to rotate sprites moving along a curve in the
direction of the movement and compute the direction perpendicular to the curve
at some parameter t.

Synopses:

    1.  `derivative` = |BezierCurve:getDerivative|()

Variants:

    1.  `derivative` = |BezierCurve:getDerivative|()

        See function description

        returns:

            `derivative`: <BezierCurve>

                The derivative curve.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-BezierCurve:getSegment*
|BezierCurve:getSegment|

Gets a BezierCurve that corresponds to the specified segment of this
BezierCurve.

Synopses:

    1.  `curve` = |BezierCurve:getSegment|( `startpoint`, `endpoint` )

Variants:

    1.  `curve` = |BezierCurve:getSegment|( `startpoint`, `endpoint` )

        See function description

        returns:

            `curve`: <BezierCurve>

                A BezierCurve that corresponds to the specified segment.

        arguments:

            `startpoint`: <number>

                The starting point along the curve. Must be between 0 and 1.

            `endpoint`: <number>

                The end of the segment. Must be between 0 and 1.

-------------------------------------------------------------------------------
                                          *love-BezierCurve:insertControlPoint*
|BezierCurve:insertControlPoint|

Insert control point as the new i-th control point. Existing control points
from i onwards are pushed back by 1. Indices start with 1. Negative indices
wrap around: -1 is the last control point, -2 the one before the last, etc.

Synopses:

    1.  |BezierCurve:insertControlPoint|( `x`, `y`, `i` )

Variants:

    1.  |BezierCurve:insertControlPoint|( `x`, `y`, `i` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                Position of the control point along the x axis.

            `y`: <number>

                Position of the control point along the y axis.

            `i`: <number>

                Index of the control point.

-------------------------------------------------------------------------------
                                          *love-BezierCurve:removeControlPoint*
|BezierCurve:removeControlPoint|

Removes the specified control point.

Synopses:

    1.  |BezierCurve:removeControlPoint|( `index` )

Variants:

    1.  |BezierCurve:removeControlPoint|( `index` )

        See function description

        returns:

            None

        arguments:

            `index`: <number>

                The index of the control point to remove.

-------------------------------------------------------------------------------
                                                      *love-BezierCurve:render*
|BezierCurve:render|

Get a list of coordinates to be used with love.graphics.line.

This function samples the Bézier curve using recursive subdivision. You can
control the recursion depth using the depth parameter.

If you are just interested to know the position on the curve given a parameter,
use BezierCurve:evaluate.

Synopses:

    1.  `coordinates` = |BezierCurve:render|( `depth` )

Variants:

    1.  `coordinates` = |BezierCurve:render|( `depth` )

        See function description

        returns:

            `coordinates`: <table>

                List of x,y-coordinate pairs of points on the curve.

        arguments:

            `depth`: <number>

                Number of recursive subdivision steps.

-------------------------------------------------------------------------------
                                               *love-BezierCurve:renderSegment*
|BezierCurve:renderSegment|

Get a list of coordinates on a specific part of the curve, to be used with
love.graphics.line.

This function samples the Bézier curve using recursive subdivision. You can
control the recursion depth using the depth parameter.

If you are just need to know the position on the curve given a parameter, use
BezierCurve:evaluate.

Synopses:

    1.  `coordinates` = |BezierCurve:renderSegment|( `startpoint`,
        `endpoint`, `depth` )

Variants:

    1.  `coordinates` = |BezierCurve:renderSegment|( `startpoint`,
        `endpoint`, `depth` )

        See function description

        returns:

            `coordinates`: <table>

                List of x,y-coordinate pairs of points on the curve.

        arguments:

            `startpoint`: <number>

                The starting point along the curve. Must be between 0 and 1.

            `endpoint`: <number>

                The end of the segment to render. Must be between 0 and 1.

            `depth`: <number>

                Number of recursive subdivision steps.

-------------------------------------------------------------------------------
                                                      *love-BezierCurve:rotate*
|BezierCurve:rotate|

Rotate the Bézier curve by an angle.

Synopses:

    1.  |BezierCurve:rotate|( `angle`, `ox`, `oy` )

Variants:

    1.  |BezierCurve:rotate|( `angle`, `ox`, `oy` )

        See function description

        returns:

            None

        arguments:

            `angle`: <number>

                Rotation angle in radians.

            `ox`: <number>

                X coordinate of the rotation center.

            `oy`: <number>

                Y coordinate of the rotation center.

-------------------------------------------------------------------------------
                                                       *love-BezierCurve:scale*
|BezierCurve:scale|

Scale the Bézier curve by a factor.

Synopses:

    1.  |BezierCurve:scale|( `s`, `ox`, `oy` )

Variants:

    1.  |BezierCurve:scale|( `s`, `ox`, `oy` )

        See function description

        returns:

            None

        arguments:

            `s`: <number>

                Scale factor.

            `ox`: <number>

                X coordinate of the scaling center.

            `oy`: <number>

                Y coordinate of the scaling center.

-------------------------------------------------------------------------------
                                             *love-BezierCurve:setControlPoint*
|BezierCurve:setControlPoint|

Set coordinates of the i-th control point. Indices start with 1.

Synopses:

    1.  |BezierCurve:setControlPoint|( `i`, `ox`, `oy` )

Variants:

    1.  |BezierCurve:setControlPoint|( `i`, `ox`, `oy` )

        See function description

        returns:

            None

        arguments:

            `i`: <number>

                Index of the control point.

            `ox`: <number>

                Position of the control point along the x axis.

            `oy`: <number>

                Position of the control point along the y axis.

-------------------------------------------------------------------------------
                                                   *love-BezierCurve:translate*
|BezierCurve:translate|

Move the Bézier curve by an offset.

Synopses:

    1.  |BezierCurve:translate|( `dx`, `dy` )

Variants:

    1.  |BezierCurve:translate|( `dx`, `dy` )

        See function description

        returns:

            None

        arguments:

            `dx`: <number>

                Offset along the x axis.

            `dy`: <number>

                Offset along the y axis.

-------------------------------------------------------------------------------
                                                          *love-CompressedData*
|CompressedData|

Represents byte data compressed using a specific algorithm.

love.math.decompress can be used to de-compress the data.

                                             *love-CompressedData-constructors*
    constructors:

        |compress|                        |love-compress|

                                               *love-CompressedData-supertypes*
    supertypes:

        |Data|                            |love-Data|
        |Object|                          |love-Object|

                                                 *love-CompressedData-subtypes*
    subtypes:

        None

                                                *love-CompressedData-functions*
    functions:

        |getFormat|                       |love-CompressedData:getFormat|

-------------------------------------------------------------------------------
                                                *love-CompressedData:getFormat*
|CompressedData:getFormat|

Gets the compression format of the CompressedData.

Synopses:

    1.  `format` = |CompressedData:getFormat|()

Variants:

    1.  `format` = |CompressedData:getFormat|()

        See function description

        returns:

            `format`: <CompressedDataFormat>

                The format of the CompressedData.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-RandomGenerator*
|RandomGenerator|

A random number generation object which has its own random state.

                                            *love-RandomGenerator-constructors*
    constructors:

        |newRandomGenerator|              |love-newRandomGenerator|

                                              *love-RandomGenerator-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                *love-RandomGenerator-subtypes*
    subtypes:

        None

                                               *love-RandomGenerator-functions*
    functions:

        |getSeed|                         |love-RandomGenerator:getSeed|
        |getState|                        |love-RandomGenerator:getState|
        |random|                          |love-RandomGenerator:random|
        |randomNormal|                    |love-RandomGenerator:randomNormal|
        |setSeed|                         |love-RandomGenerator:setSeed|
        |setState|                        |love-RandomGenerator:setState|

-------------------------------------------------------------------------------
                                                 *love-RandomGenerator:getSeed*
|RandomGenerator:getSeed|

Gets the state of the random number generator.

The state is split into two numbers due to Lua's use of doubles for all number
values - doubles can't accurately represent integer values above 2^53.

Synopses:

    1.  `low`, `high` = |RandomGenerator:getSeed|()

Variants:

    1.  `low`, `high` = |RandomGenerator:getSeed|()

        See function description

        returns:

            `low`: <number>

                Integer number representing the lower 32 bits of the random
                number generator's 64 bit state value.

            `high`: <number>

                Integer number representing the higher 32 bits of the random
                number generator's 64 bit state value.

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-RandomGenerator:getState*
|RandomGenerator:getState|

Gets the current state of the random number generator. This returns an opaque
implementation-dependent string which is only useful for later use with
RandomGenerator:setState.

This is different from RandomGenerator:getSeed in that getState gets the
RandomGenerator's current state, whereas getSeed gets the previously set seed
number.

The value of the state string does not depend on the current operating system.

Synopses:

    1.  `state` = |RandomGenerator:getState|()

Variants:

    1.  `state` = |RandomGenerator:getState|()

        See function description

        returns:

            `state`: <string>

                The current state of the RandomGenerator object, represented as
                a string.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-RandomGenerator:random*
|RandomGenerator:random|

Generates a pseudo-random number in a platform independent manner.

Synopses:

    1.  `number` = |RandomGenerator:random|()
    2.  `number` = |RandomGenerator:random|( `max` )
    3.  `number` = |RandomGenerator:random|( `min`, `max` )

Variants:

    1.  `number` = |RandomGenerator:random|()

        Get uniformly distributed pseudo-random number within [0, 1].

        returns:

            `number`: <number>

                The pseudo random number.

        arguments:

            None
    2.  `number` = |RandomGenerator:random|( `max` )

        Get uniformly distributed pseudo-random integer number within [1, max].

        returns:

            `number`: <number>

                The pseudo-random integer number.

        arguments:

            `max`: <number>

                The maximum possible value it should return.
    3.  `number` = |RandomGenerator:random|( `min`, `max` )

        Get uniformly distributed pseudo-random integer number within [min, max].

        returns:

            `number`: <number>

                The pseudo-random integer number.

        arguments:

            `min`: <number>

                The minimum possible value it should return.

            `max`: <number>

                The maximum possible value it should return.

-------------------------------------------------------------------------------
                                            *love-RandomGenerator:randomNormal*
|RandomGenerator:randomNormal|

Get a normally distributed pseudo random number.

Synopses:

    1.  `number` = |RandomGenerator:randomNormal|( `stddev`, `mean` )

Variants:

    1.  `number` = |RandomGenerator:randomNormal|( `stddev`, `mean` )

        See function description

        returns:

            `number`: <number>

                Normally distributed random number with variance (stddev)² and
                the specified mean.

        arguments:

            `stddev`: <number>

                Standard deviation of the distribution.

            `mean`: <number>

                The mean of the distribution.

-------------------------------------------------------------------------------
                                                 *love-RandomGenerator:setSeed*
|RandomGenerator:setSeed|

Sets the seed of the random number generator using the specified integer
number.

Synopses:

    1.  |RandomGenerator:setSeed|( `seed` )
    2.  |RandomGenerator:setSeed|( `low`, `high` )

Variants:

    1.  |RandomGenerator:setSeed|( `seed` )

        See function description

        returns:

            None

        arguments:

            `seed`: <number>

                The integer number with which you want to seed the
                randomization. Must be within the range of [1, 2^53].
    2.  |RandomGenerator:setSeed|( `low`, `high` )

        See function description

        returns:

            None

        arguments:

            `low`: <number>

                The lower 32 bits of the state value. Must be within the range
                of [0, 2^32 - 1].

            `high`: <number>

                The higher 32 bits of the state value. Must be within the range
                of [0, 2^32 - 1].

-------------------------------------------------------------------------------
                                                *love-RandomGenerator:setState*
|RandomGenerator:setState|

Sets the current state of the random number generator. The value used as an
argument for this function is an opaque implementation-dependent string and
should only originate from a previous call to RandomGenerator:getState.

This is different from RandomGenerator:setSeed in that setState directly sets
the RandomGenerator's current implementation-dependent state, whereas setSeed
gives it a new seed value.

The effect of the state string does not depend on the current operating system.

Synopses:

    1.  |RandomGenerator:setState|( `state` )

Variants:

    1.  |RandomGenerator:setState|( `state` )

        See function description

        returns:

            None

        arguments:

            `state`: <string>

                The new state of the RandomGenerator object, represented as a
                string. This should originate from a previous call to
                RandomGenerator:getState.

===============================================================================
                                                              *love-love.mouse*
|love.mouse|

Provides an interface to the user's mouse.

    |callbacks|                           |love-love.mouse-callbacks|
    |enums|                               |love-love.mouse-enums|
    |functions|                           |love-love.mouse-functions|
    |types|                               |love-love.mouse-types|

-------------------------------------------------------------------------------
                                                    *love-love.mouse-callbacks*
The callbacks of |love.mouse|:

    None

-------------------------------------------------------------------------------
                                                        *love-love.mouse-enums*
The enums of |love.mouse|:

    |CursorType|                          |love-CursorType|

-------------------------------------------------------------------------------
                                                              *love-CursorType*
|CursorType|

Types of hardware cursors.

    constants:

        `image`: <string>

            The cursor is using a custom image.

        `arrow`: <string>

            An arrow pointer.

        `ibeam`: <string>

            An I-beam, normally used when mousing over editable or selectable
            text.

        `wait`: <string>

            Wait graphic.

        `waitarrow`: <string>

            Small wait cursor with an arrow pointer.

        `crosshair`: <string>

            Crosshair symbol.

        `sizenwse`: <string>

            Double arrow pointing to the top-left and bottom-right.

        `sizenesw`: <string>

            Double arrow pointing to the top-right and bottom-left.

        `sizewe`: <string>

            Double arrow pointing left and right.

        `sizens`: <string>

            Double arrow pointing up and down.

        `sizeall`: <string>

            Four-pointed arrow pointing up, down, left, and right.

        `no`: <string>

            Slashed circle or crossbones.

        `hand`: <string>

            Hand symbol.

-------------------------------------------------------------------------------
                                                    *love-love.mouse-functions*
The functions of |love.mouse|:

    |getCursor|                           |love-love.mouse.getCursor|
    |getPosition|                         |love-love.mouse.getPosition|
    |getRelativeMode|                     |love-love.mouse.getRelativeMode|
    |getSystemCursor|                     |love-love.mouse.getSystemCursor|
    |getX|                                |love-love.mouse.getX|
    |getY|                                |love-love.mouse.getY|
    |hasCursor|                           |love-love.mouse.hasCursor|
    |isDown|                              |love-love.mouse.isDown|
    |isGrabbed|                           |love-love.mouse.isGrabbed|
    |isVisible|                           |love-love.mouse.isVisible|
    |newCursor|                           |love-love.mouse.newCursor|
    |setCursor|                           |love-love.mouse.setCursor|
    |setGrabbed|                          |love-love.mouse.setGrabbed|
    |setPosition|                         |love-love.mouse.setPosition|
    |setRelativeMode|                     |love-love.mouse.setRelativeMode|
    |setVisible|                          |love-love.mouse.setVisible|
    |setX|                                |love-love.mouse.setX|
    |setY|                                |love-love.mouse.setY|

-------------------------------------------------------------------------------
                                                    *love-love.mouse.getCursor*
|love.mouse.getCursor|

Gets the current Cursor.

Synopses:

    1.  `cursor` = |love.mouse.getCursor|()

Variants:

    1.  `cursor` = |love.mouse.getCursor|()

        See function description

        returns:

            `cursor`: <Cursor>

                The current cursor, or nil if no cursor is set.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-love.mouse.getPosition*
|love.mouse.getPosition|

Returns the current position of the mouse.

Synopses:

    1.  `x`, `y` = |love.mouse.getPosition|()

Variants:

    1.  `x`, `y` = |love.mouse.getPosition|()

        See function description

        returns:

            `x`: <number>

                The position of the mouse along the x-axis.

            `y`: <number>

                The position of the mouse along the y-axis.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.mouse.getRelativeMode*
|love.mouse.getRelativeMode|

Gets whether relative mode is enabled for the mouse.

If relative mode is enabled, the cursor is hidden and doesn't move when the
mouse does, but relative mouse motion events are still generated via
love.mousemoved. This lets the mouse move in any direction indefinitely without
the cursor getting stuck at the edges of the screen.

The reported position of the mouse is not updated while relative mode is
enabled, even when relative mouse motion events are generated.

Synopses:

    1.  `enabled` = |love.mouse.getRelativeMode|()

Variants:

    1.  `enabled` = |love.mouse.getRelativeMode|()

        See function description

        returns:

            `enabled`: <boolean>

                True if relative mode is enabled, false if it's disabled.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.mouse.getSystemCursor*
|love.mouse.getSystemCursor|

Gets a Cursor object representing a system-native hardware cursor.

 Hardware cursors are framerate-independent and work the same way as normal
operating system cursors. Unlike drawing an image at the mouse's current
coordinates, hardware cursors never have visible lag between when the mouse is
moved and when the cursor position updates, even at low framerates.

Synopses:

    1.  `cursor` = |love.mouse.getSystemCursor|( `ctype` )

Variants:

    1.  `cursor` = |love.mouse.getSystemCursor|( `ctype` )

        See function description

        returns:

            `cursor`: <Cursor>

                The Cursor object representing the system cursor type.

        arguments:

            `ctype`: <CursorType>

                The type of system cursor to get.

-------------------------------------------------------------------------------
                                                         *love-love.mouse.getX*
|love.mouse.getX|

Returns the current x position of the mouse.

Synopses:

    1.  `x` = |love.mouse.getX|()

Variants:

    1.  `x` = |love.mouse.getX|()

        See function description

        returns:

            `x`: <number>

                The position of the mouse along the x-axis.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-love.mouse.getY*
|love.mouse.getY|

Returns the current y position of the mouse.

Synopses:

    1.  `y` = |love.mouse.getY|()

Variants:

    1.  `y` = |love.mouse.getY|()

        See function description

        returns:

            `y`: <number>

                The position of the mouse along the y-axis.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.mouse.hasCursor*
|love.mouse.hasCursor|

Gets whether cursor functionality is supported.

If it isn't supported, calling love.mouse.newCursor and
love.mouse.getSystemCursor will cause an error. Mobile devices do not support
cursors.

Synopses:

    1.  `hascursor` = |love.mouse.hasCursor|()

Variants:

    1.  `hascursor` = |love.mouse.hasCursor|()

        See function description

        returns:

            `hascursor`: <boolean>

                Whether the system has cursor functionality.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-love.mouse.isDown*
|love.mouse.isDown|

Checks whether a certain mouse button is down. This function does not detect
mousewheel scrolling; you must use the love.wheelmoved (or love.mousepressed in
version 0.9.2 and older) callback for that.

Synopses:

    1.  `down` = |love.mouse.isDown|( `button`, `...` )

Variants:

    1.  `down` = |love.mouse.isDown|( `button`, `...` )

        See function description

        returns:

            `down`: <boolean>

                True if the specified button is down.

        arguments:

            `button`: <number>

                The index of a button to check. 1 is the primary mouse button,
                2 is the secondary mouse button, etc.

            `...`: <number>

                Additional button numbers to check.

-------------------------------------------------------------------------------
                                                    *love-love.mouse.isGrabbed*
|love.mouse.isGrabbed|

Checks if the mouse is grabbed.

Synopses:

    1.  `grabbed` = |love.mouse.isGrabbed|()

Variants:

    1.  `grabbed` = |love.mouse.isGrabbed|()

        See function description

        returns:

            `grabbed`: <boolean>

                True if the cursor is grabbed, false if it is not.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.mouse.isVisible*
|love.mouse.isVisible|

Checks if the cursor is visible.

Synopses:

    1.  `visible` = |love.mouse.isVisible|()

Variants:

    1.  `visible` = |love.mouse.isVisible|()

        See function description

        returns:

            `visible`: <boolean>

                True if the cursor to visible, false if the cursor is hidden.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.mouse.newCursor*
|love.mouse.newCursor|

Creates a new hardware Cursor object from an image file or ImageData.

Hardware cursors are framerate-independent and work the same way as normal
operating system cursors. Unlike drawing an image at the mouse's current
coordinates, hardware cursors never have visible lag between when the mouse is
moved and when the cursor position updates, even at low framerates.

The hot spot is the point the operating system uses to determine what was
clicked and at what position the mouse cursor is. For example, the normal arrow
pointer normally has its hot spot at the top left of the image, but a crosshair
cursor might have it in the middle.

Synopses:

    1.  `cursor` = |love.mouse.newCursor|( `imageData`, `hotx`, `hoty`
        )
    2.  `cursor` = |love.mouse.newCursor|( `filepath`, `hotx`, `hoty` )
    3.  `cursor` = |love.mouse.newCursor|( `fileData`, `hotx`, `hoty` )

Variants:

    1.  `cursor` = |love.mouse.newCursor|( `imageData`, `hotx`, `hoty`
        )

        See function description

        returns:

            `cursor`: <Cursor>

                The new Cursor object.

        arguments:

            `imageData`: <ImageData>

                The ImageData to use for the the new Cursor.

            `hotx`: <number>

                The x-coordinate in the ImageData of the cursor's hot spot.

            `hoty`: <number>

                The y-coordinate in the ImageData of the cursor's hot spot.
    2.  `cursor` = |love.mouse.newCursor|( `filepath`, `hotx`, `hoty` )

        See function description

        returns:

            `cursor`: <Cursor>

                The new Cursor object.

        arguments:

            `filepath`: <string>

                Path to the image to use for the new Cursor.

            `hotx`: <number>

                The x-coordinate in the ImageData of the cursor's hot spot.

            `hoty`: <number>

                The y-coordinate in the ImageData of the cursor's hot spot.
    3.  `cursor` = |love.mouse.newCursor|( `fileData`, `hotx`, `hoty` )

        See function description

        returns:

            `cursor`: <Cursor>

                The new Cursor object.

        arguments:

            `fileData`: <FileData>

                Data representing the image to use for the new Cursor.

            `hotx`: <number>

                The x-coordinate in the ImageData of the cursor's hot spot.

            `hoty`: <number>

                The y-coordinate in the ImageData of the cursor's hot spot.

-------------------------------------------------------------------------------
                                                    *love-love.mouse.setCursor*
|love.mouse.setCursor|

Sets the current mouse cursor.

Resets the current mouse cursor to the default when called without arguments.

Synopses:

    1.  |love.mouse.setCursor|()
    2.  |love.mouse.setCursor|( `cursor` )

Variants:

    1.  |love.mouse.setCursor|()

        See function description

        returns:

            None

        arguments:

            None
    2.  |love.mouse.setCursor|( `cursor` )

        See function description

        returns:

            None

        arguments:

            `cursor`: <Cursor>

                The Cursor object to use as the current mouse cursor.

-------------------------------------------------------------------------------
                                                   *love-love.mouse.setGrabbed*
|love.mouse.setGrabbed|

Grabs the mouse and confines it to the window.

Synopses:

    1.  |love.mouse.setGrabbed|( `grab` )

Variants:

    1.  |love.mouse.setGrabbed|( `grab` )

        See function description

        returns:

            None

        arguments:

            `grab`: <boolean>

                True to confine the mouse, false to let it leave the window.

-------------------------------------------------------------------------------
                                                  *love-love.mouse.setPosition*
|love.mouse.setPosition|

Sets the current position of the mouse. Non-integer values are floored.

Synopses:

    1.  |love.mouse.setPosition|( `x`, `y` )

Variants:

    1.  |love.mouse.setPosition|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The new position of the mouse along the x-axis.

            `y`: <number>

                The new position of the mouse along the y-axis.

-------------------------------------------------------------------------------
                                              *love-love.mouse.setRelativeMode*
|love.mouse.setRelativeMode|

Sets whether relative mode is enabled for the mouse.

When relative mode is enabled, the cursor is hidden and doesn't move when the
mouse does, but relative mouse motion events are still generated via
love.mousemoved. This lets the mouse move in any direction indefinitely without
the cursor getting stuck at the edges of the screen.

The reported position of the mouse is not updated while relative mode is
enabled, even when relative mouse motion events are generated.

Synopses:

    1.  |love.mouse.setRelativeMode|( `enable` )

Variants:

    1.  |love.mouse.setRelativeMode|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: <boolean>

                True to enable relative mode, false to disable it.

-------------------------------------------------------------------------------
                                                   *love-love.mouse.setVisible*
|love.mouse.setVisible|

Sets the visibility of the cursor.

Synopses:

    1.  |love.mouse.setVisible|( `visible` )

Variants:

    1.  |love.mouse.setVisible|( `visible` )

        See function description

        returns:

            None

        arguments:

            `visible`: <boolean>

                True to set the cursor to visible, false to hide the cursor.

-------------------------------------------------------------------------------
                                                         *love-love.mouse.setX*
|love.mouse.setX|

Sets the current X position of the mouse. Non-integer values are floored.

Synopses:

    1.  |love.mouse.setX|( `x` )

Variants:

    1.  |love.mouse.setX|( `x` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The new position of the mouse along the x-axis.

-------------------------------------------------------------------------------
                                                         *love-love.mouse.setY*
|love.mouse.setY|

Sets the current Y position of the mouse. Non-integer values are floored.

Synopses:

    1.  |love.mouse.setY|( `y` )

Variants:

    1.  |love.mouse.setY|( `y` )

        See function description

        returns:

            None

        arguments:

            `y`: <number>

                The new position of the mouse along the y-axis.
-------------------------------------------------------------------------------
                                                        *love-love.mouse-types*
The types of |love.mouse|:

    |Cursor|                              |love-Cursor|

-------------------------------------------------------------------------------
                                                                  *love-Cursor*
|Cursor|

Represents a hardware cursor.

                                                     *love-Cursor-constructors*
    constructors:

        |getSystemCursor|                 |love-getSystemCursor|
        |newCursor|                       |love-newCursor|

                                                       *love-Cursor-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                         *love-Cursor-subtypes*
    subtypes:

        None

                                                        *love-Cursor-functions*
    functions:

        |getType|                         |love-Cursor:getType|

-------------------------------------------------------------------------------
                                                          *love-Cursor:getType*
|Cursor:getType|

Gets the type of the Cursor.

Synopses:

    1.  `cursortype` = |Cursor:getType|()

Variants:

    1.  `cursortype` = |Cursor:getType|()

        See function description

        returns:

            `cursortype`: <CursorType>

                The type of the Cursor.

        arguments:

            None

===============================================================================
                                                            *love-love.physics*
|love.physics|

Can simulate 2D rigid body physics in a realistic manner. This module is based
on Box2D, and this API corresponds to the Box2D API as closely as possible.

    |callbacks|                           |love-love.physics-callbacks|
    |enums|                               |love-love.physics-enums|
    |functions|                           |love-love.physics-functions|
    |types|                               |love-love.physics-types|

-------------------------------------------------------------------------------
                                                  *love-love.physics-callbacks*
The callbacks of |love.physics|:

    None

-------------------------------------------------------------------------------
                                                      *love-love.physics-enums*
The enums of |love.physics|:

    |BodyType|                            |love-BodyType|
    |JointType|                           |love-JointType|
    |ShapeType|                           |love-ShapeType|

-------------------------------------------------------------------------------
                                                                *love-BodyType*
|BodyType|

The types of a Body.

    constants:

        `static`: <string>

            Static bodies do not move.

        `dynamic`: <string>

            Dynamic bodies collide with all bodies.

        `kinematic`: <string>

            Kinematic bodies only collide with dynamic bodies.

-------------------------------------------------------------------------------
                                                               *love-JointType*
|JointType|

Different types of joints.

    constants:

        `distance`: <string>

            A DistanceJoint.

        `gear`: <string>

            A GearJoint.

        `mouse`: <string>

            A MouseJoint.

        `prismatic`: <string>

            A PrismaticJoint.

        `pulley`: <string>

            A PulleyJoint.

        `revolute`: <string>

            A RevoluteJoint.

        `friction`: <string>

            A FrictionJoint.

        `weld`: <string>

            A WeldJoint.

        `rope`: <string>

            A RopeJoint.

-------------------------------------------------------------------------------
                                                               *love-ShapeType*
|ShapeType|

The different types of Shapes, as returned by Shape:getType.

    constants:

        `circle`: <string>

            The Shape is a CircleShape.

        `polygon`: <string>

            The Shape is a PolygonShape.

        `edge`: <string>

            The Shape is a EdgeShape.

        `chain`: <string>

            The Shape is a ChainShape.

-------------------------------------------------------------------------------
                                                  *love-love.physics-functions*
The functions of |love.physics|:

    |getDistance|                         |love-love.physics.getDistance|
    |getMeter|                            |love-love.physics.getMeter|
    |newBody|                             |love-love.physics.newBody|
    |newChainShape|                       |love-love.physics.newChainShape|
    |newCircleShape|                      |love-love.physics.newCircleShape|
    |newDistanceJoint|                    |love-love.physics.newDistanceJoint|
    |newEdgeShape|                        |love-love.physics.newEdgeShape|
    |newFixture|                          |love-love.physics.newFixture|
    |newFrictionJoint|                    |love-love.physics.newFrictionJoint|
    |newGearJoint|                        |love-love.physics.newGearJoint|
    |newMotorJoint|                       |love-love.physics.newMotorJoint|
    |newMouseJoint|                       |love-love.physics.newMouseJoint|
    |newPolygonShape|                     |love-love.physics.newPolygonShape|
    |newPrismaticJoint|                   |love-love.physics.newPrismaticJoint|
    |newPulleyJoint|                      |love-love.physics.newPulleyJoint|
    |newRectangleShape|                   |love-love.physics.newRectangleShape|
    |newRevoluteJoint|                    |love-love.physics.newRevoluteJoint|
    |newRopeJoint|                        |love-love.physics.newRopeJoint|
    |newWeldJoint|                        |love-love.physics.newWeldJoint|
    |newWheelJoint|                       |love-love.physics.newWheelJoint|
    |newWorld|                            |love-love.physics.newWorld|
    |setMeter|                            |love-love.physics.setMeter|

-------------------------------------------------------------------------------
                                                *love-love.physics.getDistance*
|love.physics.getDistance|

Returns the two closest points between two fixtures and their distance.

Synopses:

    1.  `distance`, `x1`, `y1`, `x2`, `y2` =
        |love.physics.getDistance|( `fixture1`, `fixture2` )

Variants:

    1.  `distance`, `x1`, `y1`, `x2`, `y2` =
        |love.physics.getDistance|( `fixture1`, `fixture2` )

        See function description

        returns:

            `distance`: <number>

                The distance of the two points.

            `x1`: <number>

                The x-coordinate of the first point.

            `y1`: <number>

                The y-coordinate of the first point.

            `x2`: <number>

                The x-coordinate of the second point.

            `y2`: <number>

                The y-coordinate of the second point.

        arguments:

            `fixture1`: <Fixture>

                The first fixture.

            `fixture2`: <Fixture>

                The second fixture.

-------------------------------------------------------------------------------
                                                   *love-love.physics.getMeter*
|love.physics.getMeter|

Get the scale of the world.

The world scale is the number of pixels per meter. Try to keep your shape sizes
less than 10 times this scale.

This is important because the physics in Box2D is tuned to work well for
objects of size 0.1m up to 10m. All physics coordinates are divided by this
number for the physics calculations.

Synopses:

    1.  `scale` = |love.physics.getMeter|()

Variants:

    1.  `scale` = |love.physics.getMeter|()

        See function description

        returns:

            `scale`: <number>

                The size of 1 meter in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.physics.newBody*
|love.physics.newBody|

Creates a new body.

There are three types of bodies. Static bodies do not move, have a infinite
mass, and can be used for level boundaries. Dynamic bodies are the main actors
in the simulation, they collide with everything. Kinematic bodies do not react
to forces and only collide with dynamic bodies.

The mass of the body gets calculated when a Fixture is attached or removed, but
can be changed at any time with Body:setMass or Body:resetMassData.

Synopses:

    1.  `body` = |love.physics.newBody|( `world`, `x`, `y`, `type` )

Variants:

    1.  `body` = |love.physics.newBody|( `world`, `x`, `y`, `type` )

        See function description

        returns:

            `body`: <Body>

                A new body.

        arguments:

            `world`: <World>

                The world to create the body in.

            `x`: <number>

                The x position of the body.

            `y`: <number>

                The y position of the body.

            `type`: <BodyType>

                The type of the body.

-------------------------------------------------------------------------------
                                              *love-love.physics.newChainShape*
|love.physics.newChainShape|

Creates a new ChainShape.

Synopses:

    1.  `shape` = |love.physics.newChainShape|( `loop`, `x1`, `y1`,
        `x2`, `y2`, `...` )
    2.  `shape` = |love.physics.newChainShape|( `loop`, `points` )

Variants:

    1.  `shape` = |love.physics.newChainShape|( `loop`, `x1`, `y1`,
        `x2`, `y2`, `...` )

        See function description

        returns:

            `shape`: <ChainShape>

                The new shape.

        arguments:

            `loop`: <boolean>

                If the chain should loop back to the first point.

            `x1`: <number>

                The x position of the first point.

            `y1`: <number>

                The y position of the first point.

            `x2`: <number>

                The x position of the second point.

            `y2`: <number>

                The y position of the second point.

            `...`: <number>

                Additional point positions.
    2.  `shape` = |love.physics.newChainShape|( `loop`, `points` )

        See function description

        returns:

            `shape`: <ChainShape>

                The new shape.

        arguments:

            `loop`: <boolean>

                If the chain should loop back to the first point.

            `points`: <table>

                A list of points to construct the ChainShape, in the form of
                {x1, y1, x2, y2, ...}.

-------------------------------------------------------------------------------
                                             *love-love.physics.newCircleShape*
|love.physics.newCircleShape|

Creates a new CircleShape.

Synopses:

    1.  `shape` = |love.physics.newCircleShape|( `radius` )
    2.  `shape` = |love.physics.newCircleShape|( `x`, `y`, `radius` )

Variants:

    1.  `shape` = |love.physics.newCircleShape|( `radius` )

        See function description

        returns:

            `shape`: <CircleShape>

                The new shape.

        arguments:

            `radius`: <number>

                The radius of the circle.
    2.  `shape` = |love.physics.newCircleShape|( `x`, `y`, `radius` )

        See function description

        returns:

            `shape`: <CircleShape>

                The new shape.

        arguments:

            `x`: <number>

                The x offset of the circle.

            `y`: <number>

                The y offset of the circle.

            `radius`: <number>

                The radius of the circle.

-------------------------------------------------------------------------------
                                           *love-love.physics.newDistanceJoint*
|love.physics.newDistanceJoint|

Create a distance joint between two bodies.

This joint constrains the distance between two points on two bodies to be
constant. These two points are specified in world coordinates and the two
bodies are assumed to be in place when this joint is created. The first anchor
point is connected to the first body and the second to the second body, and the
points define the length of the distance joint.

Synopses:

    1.  `joint` = |love.physics.newDistanceJoint|( `body1`, `body2`,
        `x1`, `y1`, `x2`, `y2`, `collideConnected` )

Variants:

    1.  `joint` = |love.physics.newDistanceJoint|( `body1`, `body2`,
        `x1`, `y1`, `x2`, `y2`, `collideConnected` )

        See function description

        returns:

            `joint`: <DistanceJoint>

                The new distance joint.

        arguments:

            `body1`: <Body>

                The first body to attach to the joint.

            `body2`: <Body>

                The second body to attach to the joint.

            `x1`: <number>

                The x position of the first anchor point (world space).

            `y1`: <number>

                The y position of the first anchor point (world space).

            `x2`: <number>

                The x position of the second anchor point (world space).

            `y2`: <number>

                The y position of the second anchor point (world space).

            `collideConnected`: <boolean>

                Specifies whether the two bodies should collide with each
                other.

-------------------------------------------------------------------------------
                                               *love-love.physics.newEdgeShape*
|love.physics.newEdgeShape|

Creates a edge shape.

Synopses:

    1.  `shape` = |love.physics.newEdgeShape|( `x1`, `y1`, `x2`, `y2` )

Variants:

    1.  `shape` = |love.physics.newEdgeShape|( `x1`, `y1`, `x2`, `y2` )

        See function description

        returns:

            `shape`: <EdgeShape>

                The new shape.

        arguments:

            `x1`: <number>

                The x position of the first point.

            `y1`: <number>

                The y position of the first point.

            `x2`: <number>

                The x position of the second point.

            `y2`: <number>

                The y position of the second point.

-------------------------------------------------------------------------------
                                                 *love-love.physics.newFixture*
|love.physics.newFixture|

Creates and attaches a Fixture to a body.

Synopses:

    1.  `fixture` = |love.physics.newFixture|( `body`, `shape`,
        `density` )

Variants:

    1.  `fixture` = |love.physics.newFixture|( `body`, `shape`,
        `density` )

        See function description

        returns:

            `fixture`: <Fixture>

                The new fixture.

        arguments:

            `body`: <Body>

                The body which gets the fixture attached.

            `shape`: <Shape>

                The shape of the fixture.

            `density`: <number>

                The density of the fixture.

-------------------------------------------------------------------------------
                                           *love-love.physics.newFrictionJoint*
|love.physics.newFrictionJoint|

Create a friction joint between two bodies. A FrictionJoint applies friction to
a body.

Synopses:

    1.  `joint` = |love.physics.newFrictionJoint|( `body1`, `body2`,
        `x`, `y`, `collideConnected` )

Variants:

    1.  `joint` = |love.physics.newFrictionJoint|( `body1`, `body2`,
        `x`, `y`, `collideConnected` )

        See function description

        returns:

            `joint`: <FrictionJoint>

                The new FrictionJoint.

        arguments:

            `body1`: <Body>

                The first body to attach to the joint.

            `body2`: <Body>

                The second body to attach to the joint.

            `x`: <number>

                The x position of the anchor point.

            `y`: <number>

                The y position of the anchor point.

            `collideConnected`: <boolean>

                Specifies whether the two bodies should collide with eachother.

-------------------------------------------------------------------------------
                                               *love-love.physics.newGearJoint*
|love.physics.newGearJoint|

Create a gear joint connecting two joints.

The gear joint connects two joints that must be either prismatic or revolute
joints. Using this joint requires that the joints it uses connect their
respective bodies to the ground and have the ground as the first body. When
destroying the bodies and joints you must make sure you destroy the gear joint
before the other joints.

The gear joint has a ratio the determines how the angular or distance values of
the connected joints relate to each other. The formula coordinate1 + ratio *
coordinate2 always has a constant value that is set when the gear joint is
created.

Synopses:

    1.  `joint` = |love.physics.newGearJoint|( `joint1`, `joint2`,
        `ratio`, `collideConnected` )

Variants:

    1.  `joint` = |love.physics.newGearJoint|( `joint1`, `joint2`,
        `ratio`, `collideConnected` )

        See function description

        returns:

            `joint`: <GearJoint>

                The new gear joint.

        arguments:

            `joint1`: <Joint>

                The first joint to connect with a gear joint.

            `joint2`: <Joint>

                The second joint to connect with a gear joint.

            `ratio`: <number>

                The gear ratio.

            `collideConnected`: <boolean>

                Specifies whether the two bodies should collide with each
                other.

-------------------------------------------------------------------------------
                                              *love-love.physics.newMotorJoint*
|love.physics.newMotorJoint|

Creates a joint between two bodies which controls the relative motion between
them.

Position and rotation offsets can be specified once the MotorJoint has been
created, as well as the maximum motor force and torque that will be be applied
to reach the target offsets.

Synopses:

    1.  `joint` = |love.physics.newMotorJoint|( `body1`, `body2`,
        `correctionFactor` )
    2.  `joint` = |love.physics.newMotorJoint|( `body1`, `body2`,
        `correctionFactor`, `collideConnected` )

Variants:

    1.  `joint` = |love.physics.newMotorJoint|( `body1`, `body2`,
        `correctionFactor` )

        See function description

        returns:

            `joint`: <MotorJoint>

                The new MotorJoint.

        arguments:

            `body1`: <Body>

                The first body to attach to the joint.

            `body2`: <Body>

                The second body to attach to the joint.

            `correctionFactor`: <number>

                The joint's initial position correction factor, in the range of
                [0, 1].
    2.  `joint` = |love.physics.newMotorJoint|( `body1`, `body2`,
        `correctionFactor`, `collideConnected` )

        See function description

        returns:

            `joint`: <MotorJoint>

                The new MotorJoint.

        arguments:

            `body1`: <Body>

                The first body to attach to the joint.

            `body2`: <Body>

                The second body to attach to the joint.

            `correctionFactor`: <number>

                The joint's initial position correction factor, in the range of
                [0, 1].

            `collideConnected`: <boolean>

                Specifies whether the two bodies should collide with each
                other.

-------------------------------------------------------------------------------
                                              *love-love.physics.newMouseJoint*
|love.physics.newMouseJoint|

Create a joint between a body and the mouse.

This joint actually connects the body to a fixed point in the world. To make it
follow the mouse, the fixed point must be updated every timestep (example
below).

The advantage of using a MouseJoint instead of just changing a body position
directly is that collisions and reactions to other joints are handled by the
physics engine.

Synopses:

    1.  `joint` = |love.physics.newMouseJoint|( `body`, `x`, `y` )

Variants:

    1.  `joint` = |love.physics.newMouseJoint|( `body`, `x`, `y` )

        See function description

        returns:

            `joint`: <MouseJoint>

                The new mouse joint.

        arguments:

            `body`: <Body>

                The body to attach to the mouse.

            `x`: <number>

                The x position of the connecting point.

            `y`: <number>

                The y position of the connecting point.

-------------------------------------------------------------------------------
                                            *love-love.physics.newPolygonShape*
|love.physics.newPolygonShape|

Creates a new PolygonShape.

This shape can have 8 vertices at most, and must form a convex shape.

Synopses:

    1.  `shape` = |love.physics.newPolygonShape|( `x1`, `y1`, `x2`,
        `y2`, `...` )
    2.  `shape` = |love.physics.newPolygonShape|( `vertices` )

Variants:

    1.  `shape` = |love.physics.newPolygonShape|( `x1`, `y1`, `x2`,
        `y2`, `...` )

        See function description

        returns:

            `shape`: <PolygonShape>

                A new PolygonShape.

        arguments:

            `x1`: <number>

                The position of first point on the x-axis.

            `y1`: <number>

                The position of first point on the y-axis.

            `x2`: <number>

                The position of second point on the x-axis.

            `y2`: <number>

                The position of second point on the y-axis.

            `...`: <number>

                You can continue passing more point positions to create the
                PolygonShape.
    2.  `shape` = |love.physics.newPolygonShape|( `vertices` )

        See function description

        returns:

            `shape`: <PolygonShape>

                A new PolygonShape.

        arguments:

            `vertices`: <table>

                A list of vertices to construct the polygon, in the form of
                {x1, y1, x2, y2, x3, y3, ...}.

-------------------------------------------------------------------------------
                                          *love-love.physics.newPrismaticJoint*
|love.physics.newPrismaticJoint|

Create a prismatic joints between two bodies.

A prismatic joint constrains two bodies to move relatively to each other on a
specified axis. It does not allow for relative rotation. Its definition and
operation are similar to a revolute joint, but with translation and force
substituted for angle and torque.

Synopses:

    1.  `joint` = |love.physics.newPrismaticJoint|( `body1`, `body2`,
        `x`, `y`, `ax`, `ay`, `collideConnected` )
    2.  `joint` = |love.physics.newPrismaticJoint|( `body1`, `body2`,
        `x1`, `y1`, `x2`, `y2`, `ax`, `ay`, `collideConnected` )
    3.  `joint` = |love.physics.newPrismaticJoint|( `body1`, `body2`,
        `x1`, `y1`, `x2`, `y2`, `ax`, `ay`, `collideConnected`,
        `referenceAngle` )

Variants:

    1.  `joint` = |love.physics.newPrismaticJoint|( `body1`, `body2`,
        `x`, `y`, `ax`, `ay`, `collideConnected` )

        See function description

        returns:

            `joint`: <PrismaticJoint>

                The new prismatic joint.

        arguments:

            `body1`: <Body>

                The first body to connect with a prismatic joint.

            `body2`: <Body>

                The second body to connect with a prismatic joint.

            `x`: <number>

                The x coordinate of the anchor point.

            `y`: <number>

                The y coordinate of the anchor point.

            `ax`: <number>

                The x coordinate of the axis unit vector.

            `ay`: <number>

                The y coordinate of the axis unit vector.

            `collideConnected`: <boolean>

                Specifies whether the two bodies should collide with each
                other.
    2.  `joint` = |love.physics.newPrismaticJoint|( `body1`, `body2`,
        `x1`, `y1`, `x2`, `y2`, `ax`, `ay`, `collideConnected` )

        See function description

        returns:

            `joint`: <PrismaticJoint>

                The new prismatic joint.

        arguments:

            `body1`: <Body>

                The first body to connect with a prismatic joint.

            `body2`: <Body>

                The second body to connect with a prismatic joint.

            `x1`: <number>

                The x coordinate of the first anchor point.

            `y1`: <number>

                The y coordinate of the first anchor point.

            `x2`: <number>

                The x coordinate of the second anchor point.

            `y2`: <number>

                The y coordinate of the second anchor point.

            `ax`: <number>

                The x coordinate of the axis unit vector.

            `ay`: <number>

                The y coordinate of the axis unit vector.

            `collideConnected`: <boolean>

                Specifies whether the two bodies should collide with each
                other.
    3.  `joint` = |love.physics.newPrismaticJoint|( `body1`, `body2`,
        `x1`, `y1`, `x2`, `y2`, `ax`, `ay`, `collideConnected`,
        `referenceAngle` )

        See function description

        returns:

            `joint`: <PrismaticJoint>

                The new prismatic joint.

        arguments:

            `body1`: <Body>

                The first body to connect with a prismatic joint.

            `body2`: <Body>

                The second body to connect with a prismatic joint.

            `x1`: <number>

                The x coordinate of the first anchor point.

            `y1`: <number>

                The y coordinate of the first anchor point.

            `x2`: <number>

                The x coordinate of the second anchor point.

            `y2`: <number>

                The y coordinate of the second anchor point.

            `ax`: <number>

                The x coordinate of the axis unit vector.

            `ay`: <number>

                The y coordinate of the axis unit vector.

            `collideConnected`: <boolean>

                Specifies whether the two bodies should collide with each
                other.

            `referenceAngle`: <number>

                The reference angle between body1 and body2, in radians.

-------------------------------------------------------------------------------
                                             *love-love.physics.newPulleyJoint*
|love.physics.newPulleyJoint|

Create a pulley joint to join two bodies to each other and the ground.

The pulley joint simulates a pulley with an optional block and tackle. If the
ratio parameter has a value different from one, then the simulated rope extends
faster on one side than the other. In a pulley joint the total length of the
simulated rope is the constant length1 + ratio * length2, which is set when the
pulley joint is created.

Pulley joints can behave unpredictably if one side is fully extended. It is
recommended that the method setMaxLengths  be used to constrain the maximum
lengths each side can attain.

Synopses:

    1.  `joint` = |love.physics.newPulleyJoint|( `body1`, `body2`,
        `gx1`, `gy1`, `gx2`, `gy2`, `x1`, `y1`, `x2`, `y2`, `ratio`,
        `collideConnected` )

Variants:

    1.  `joint` = |love.physics.newPulleyJoint|( `body1`, `body2`,
        `gx1`, `gy1`, `gx2`, `gy2`, `x1`, `y1`, `x2`, `y2`, `ratio`,
        `collideConnected` )

        See function description

        returns:

            `joint`: <PulleyJoint>

                The new pulley joint.

        arguments:

            `body1`: <Body>

                The first body to connect with a pulley joint.

            `body2`: <Body>

                The second body to connect with a pulley joint.

            `gx1`: <number>

                The x coordinate of the first body's ground anchor.

            `gy1`: <number>

                The y coordinate of the first body's ground anchor.

            `gx2`: <number>

                The x coordinate of the second body's ground anchor.

            `gy2`: <number>

                The y coordinate of the second body's ground anchor.

            `x1`: <number>

                The x coordinate of the pulley joint anchor in the first body.

            `y1`: <number>

                The y coordinate of the pulley joint anchor in the first body.

            `x2`: <number>

                The x coordinate of the pulley joint anchor in the second body.

            `y2`: <number>

                The y coordinate of the pulley joint anchor in the second body.

            `ratio`: <number>

                The joint ratio.

            `collideConnected`: <boolean>

                Specifies whether the two bodies should collide with each
                other.

-------------------------------------------------------------------------------
                                          *love-love.physics.newRectangleShape*
|love.physics.newRectangleShape|

Shorthand for creating rectangular PolygonShapes.

By default, the local origin is located at the center of the rectangle as
opposed to the top left for graphics.

Synopses:

    1.  `shape` = |love.physics.newRectangleShape|( `width`, `height` )
    2.  `shape` = |love.physics.newRectangleShape|( `x`, `y`, `width`,
        `height`, `angle` )

Variants:

    1.  `shape` = |love.physics.newRectangleShape|( `width`, `height` )

        See function description

        returns:

            `shape`: <PolygonShape>

                A new PolygonShape.

        arguments:

            `width`: <number>

                The width of the rectangle.

            `height`: <number>

                The height of the rectangle.
    2.  `shape` = |love.physics.newRectangleShape|( `x`, `y`, `width`,
        `height`, `angle` )

        See function description

        returns:

            `shape`: <PolygonShape>

                A new PolygonShape.

        arguments:

            `x`: <number>

                The offset along the x-axis.

            `y`: <number>

                The offset along the y-axis.

            `width`: <number>

                The width of the rectangle.

            `height`: <number>

                The height of the rectangle.

            `angle`: <number>

                The initial angle of the rectangle.

-------------------------------------------------------------------------------
                                           *love-love.physics.newRevoluteJoint*
|love.physics.newRevoluteJoint|

Creates a pivot joint between two bodies.

This joint connects two bodies to a point around which they can pivot.

Synopses:

    1.  `joint` = |love.physics.newRevoluteJoint|( `body1`, `body2`,
        `x`, `y`, `collideConnected` )
    2.  `joint` = |love.physics.newRevoluteJoint|( `body1`, `body2`,
        `x1`, `y1`, `x2`, `y2`, `collideConnected`, `referenceAngle` )

Variants:

    1.  `joint` = |love.physics.newRevoluteJoint|( `body1`, `body2`,
        `x`, `y`, `collideConnected` )

        See function description

        returns:

            `joint`: <RevoluteJoint>

                The new revolute joint.

        arguments:

            `body1`: <Body>

                The first body.

            `body2`: <Body>

                The second body.

            `x`: <number>

                The x position of the connecting point.

            `y`: <number>

                The y position of the connecting point.

            `collideConnected`: <boolean>

                Specifies whether the two bodies should collide with each
                other.
    2.  `joint` = |love.physics.newRevoluteJoint|( `body1`, `body2`,
        `x1`, `y1`, `x2`, `y2`, `collideConnected`, `referenceAngle` )

        See function description

        returns:

            `joint`: <RevoluteJoint>

                The new revolute joint.

        arguments:

            `body1`: <Body>

                The first body.

            `body2`: <Body>

                The second body.

            `x1`: <number>

                The x position of the first connecting point.

            `y1`: <number>

                The y position of the first connecting point.

            `x2`: <number>

                The x position of the second connecting point.

            `y2`: <number>

                The y position of the second connecting point.

            `collideConnected`: <boolean>

                Specifies whether the two bodies should collide with each
                other.

            `referenceAngle`: <number>

                Specifies whether the two bodies should collide with each
                other.

-------------------------------------------------------------------------------
                                               *love-love.physics.newRopeJoint*
|love.physics.newRopeJoint|

Create a joint between two bodies. Its only function is enforcing a max
distance between these bodies.

Synopses:

    1.  `joint` = |love.physics.newRopeJoint|( `body1`, `body2`, `x1`,
        `y1`, `x2`, `y2`, `maxLength`, `collideConnected` )

Variants:

    1.  `joint` = |love.physics.newRopeJoint|( `body1`, `body2`, `x1`,
        `y1`, `x2`, `y2`, `maxLength`, `collideConnected` )

        See function description

        returns:

            `joint`: <RopeJoint>

                The new RopeJoint.

        arguments:

            `body1`: <Body>

                The first body to attach to the joint.

            `body2`: <Body>

                The second body to attach to the joint.

            `x1`: <number>

                The x position of the first anchor point.

            `y1`: <number>

                The y position of the first anchor point.

            `x2`: <number>

                The x position of the second anchor point.

            `y2`: <number>

                The y position of the second anchor point.

            `maxLength`: <number>

                The maximum distance for the bodies.

            `collideConnected`: <boolean>

                Specifies whether the two bodies should collide with each
                other.

-------------------------------------------------------------------------------
                                               *love-love.physics.newWeldJoint*
|love.physics.newWeldJoint|

Creates a constraint joint between two bodies. A WeldJoint essentially glues
two bodies together. The constraint is a bit soft, however, due to Box2D's
iterative solver.

Synopses:

    1.  `joint` = |love.physics.newWeldJoint|( `body1`, `body2`, `x`,
        `y`, `collideConnected` )
    2.  `joint` = |love.physics.newWeldJoint|( `body1`, `body2`, `x1`,
        `y1`, `x2`, `y2`, `collideConnected` )
    3.  `joint` = |love.physics.newWeldJoint|( `body1`, `body2`, `x1`,
        `y1`, `x2`, `y2`, `collideConnected`, `referenceAngle` )

Variants:

    1.  `joint` = |love.physics.newWeldJoint|( `body1`, `body2`, `x`,
        `y`, `collideConnected` )

        See function description

        returns:

            `joint`: <WeldJoint>

                The new WeldJoint.

        arguments:

            `body1`: <Body>

                The first body to attach to the joint.

            `body2`: <Body>

                The second body to attach to the joint.

            `x`: <number>

                The x position of the anchor point (world space).

            `y`: <number>

                The y position of the anchor point (world space).

            `collideConnected`: <boolean>

                Specifies whether the two bodies should collide with each
                other.
    2.  `joint` = |love.physics.newWeldJoint|( `body1`, `body2`, `x1`,
        `y1`, `x2`, `y2`, `collideConnected` )

        See function description

        returns:

            `joint`: <WeldJoint>

                The new WeldJoint.

        arguments:

            `body1`: <Body>

                The first body to attach to the joint.

            `body2`: <Body>

                The second body to attach to the joint.

            `x1`: <number>

                The x position of the first anchor point (world space).

            `y1`: <number>

                The y position of the first anchor point (world space).

            `x2`: <number>

                The x position of the second anchor point (world space).

            `y2`: <number>

                The y position of the second anchor point (world space).

            `collideConnected`: <boolean>

                Specifies whether the two bodies should collide with each
                other.
    3.  `joint` = |love.physics.newWeldJoint|( `body1`, `body2`, `x1`,
        `y1`, `x2`, `y2`, `collideConnected`, `referenceAngle` )

        See function description

        returns:

            `joint`: <WeldJoint>

                The new WeldJoint.

        arguments:

            `body1`: <Body>

                The first body to attach to the joint.

            `body2`: <Body>

                The second body to attach to the joint.

            `x1`: <number>

                The x position of the first anchor point (world space).

            `y1`: <number>

                The y position of the first anchor point (world space).

            `x2`: <number>

                The x position of the second anchor point (world space).

            `y2`: <number>

                The y position of the second anchor point (world space).

            `collideConnected`: <boolean>

                Specifies whether the two bodies should collide with each
                other.

            `referenceAngle`: <number>

                The reference angle between body1 and body2, in radians.

-------------------------------------------------------------------------------
                                              *love-love.physics.newWheelJoint*
|love.physics.newWheelJoint|

Creates a wheel joint.

Synopses:

    1.  `joint` = |love.physics.newWheelJoint|( `body1`, `body2`, `x`,
        `y`, `ax`, `ay`, `collideConnected` )

Variants:

    1.  `joint` = |love.physics.newWheelJoint|( `body1`, `body2`, `x`,
        `y`, `ax`, `ay`, `collideConnected` )

        See function description

        returns:

            `joint`: <WheelJoint>

                The new WheelJoint.

        arguments:

            `body1`: <Body>

                The first body.

            `body2`: <Body>

                The second body.

            `x`: <number>

                The x position of the anchor point.

            `y`: <number>

                The y position of the anchor point.

            `ax`: <number>

                The x position of the axis unit vector.

            `ay`: <number>

                The y position of the axis unit vector.

            `collideConnected`: <boolean>

                Specifies whether the two bodies should collide with each
                other.

-------------------------------------------------------------------------------
                                                   *love-love.physics.newWorld*
|love.physics.newWorld|

Creates a new World.

Synopses:

    1.  `world` = |love.physics.newWorld|( `xg`, `yg`, `sleep` )

Variants:

    1.  `world` = |love.physics.newWorld|( `xg`, `yg`, `sleep` )

        See function description

        returns:

            `world`: <World>

                A brave new World.

        arguments:

            `xg`: <number>

                The x component of gravity.

            `yg`: <number>

                The y component of gravity.

            `sleep`: <boolean>

                Whether the bodies in this world are allowed to sleep.

-------------------------------------------------------------------------------
                                                   *love-love.physics.setMeter*
|love.physics.setMeter|

Sets the pixels to meter scale factor.

All coordinates in the physics module are divided by this number and converted
to meters, and it creates a convenient way to draw the objects directly to the
screen without the need for graphics transformations.

It is recommended to create shapes no larger than 10 times the scale. This is
important because Box2D is tuned to work well with shape sizes from 0.1 to 10
meters. The default meter scale is 30.

love.physics.setMeter does not apply retroactively to created objects. Created
objects retain their meter coordinates but the scale factor will affect their
pixel coordinates.

Synopses:

    1.  |love.physics.setMeter|( `scale` )

Variants:

    1.  |love.physics.setMeter|( `scale` )

        See function description

        returns:

            None

        arguments:

            `scale`: <number>

                The scale factor as an integer.
-------------------------------------------------------------------------------
                                                      *love-love.physics-types*
The types of |love.physics|:

    |Body|                                |love-Body|
    |ChainShape|                          |love-ChainShape|
    |CircleShape|                         |love-CircleShape|
    |Contact|                             |love-Contact|
    |EdgeShape|                           |love-EdgeShape|
    |DistanceJoint|                       |love-DistanceJoint|
    |Fixture|                             |love-Fixture|
    |FrictionJoint|                       |love-FrictionJoint|
    |GearJoint|                           |love-GearJoint|
    |Joint|                               |love-Joint|
    |MotorJoint|                          |love-MotorJoint|
    |MouseJoint|                          |love-MouseJoint|
    |PolygonShape|                        |love-PolygonShape|
    |PrismaticJoint|                      |love-PrismaticJoint|
    |PulleyJoint|                         |love-PulleyJoint|
    |RevoluteJoint|                       |love-RevoluteJoint|
    |RopeJoint|                           |love-RopeJoint|
    |Shape|                               |love-Shape|
    |WeldJoint|                           |love-WeldJoint|
    |WheelJoint|                          |love-WheelJoint|
    |World|                               |love-World|

-------------------------------------------------------------------------------
                                                                    *love-Body*
|Body|

Bodies are objects with velocity and position.

                                                       *love-Body-constructors*
    constructors:

        |newBody|                         |love-newBody|

                                                         *love-Body-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                           *love-Body-subtypes*
    subtypes:

        None

                                                          *love-Body-functions*
    functions:

        |applyAngularImpulse|             |love-Body:applyAngularImpulse|
        |applyForce|                      |love-Body:applyForce|
        |applyLinearImpulse|              |love-Body:applyLinearImpulse|
        |applyTorque|                     |love-Body:applyTorque|
        |destroy|                         |love-Body:destroy|
        |getAngle|                        |love-Body:getAngle|
        |getAngularDamping|               |love-Body:getAngularDamping|
        |getAngularVelocity|              |love-Body:getAngularVelocity|
        |getContactList|                  |love-Body:getContactList|
        |getFixtureList|                  |love-Body:getFixtureList|
        |getGravityScale|                 |love-Body:getGravityScale|
        |getInertia|                      |love-Body:getInertia|
        |getJointList|                    |love-Body:getJointList|
        |getLinearDamping|                |love-Body:getLinearDamping|
        |getLinearVelocity|               |love-Body:getLinearVelocity|
        |getLinearVelocityFromLocalPoi-|  |love-Body:getLinearVelocityFromLoc-|
        |getLinearVelocityFromWorldPoi-|  |love-Body:getLinearVelocityFromWor-|
        |getLocalCenter|                  |love-Body:getLocalCenter|
        |getLocalPoint|                   |love-Body:getLocalPoint|
        |getLocalVector|                  |love-Body:getLocalVector|
        |getMass|                         |love-Body:getMass|
        |getMassData|                     |love-Body:getMassData|
        |getPosition|                     |love-Body:getPosition|
        |getType|                         |love-Body:getType|
        |getUserData|                     |love-Body:getUserData|
        |getWorld|                        |love-Body:getWorld|
        |getWorldCenter|                  |love-Body:getWorldCenter|
        |getWorldPoint|                   |love-Body:getWorldPoint|
        |getWorldPoints|                  |love-Body:getWorldPoints|
        |getWorldVector|                  |love-Body:getWorldVector|
        |getX|                            |love-Body:getX|
        |getY|                            |love-Body:getY|
        |isActive|                        |love-Body:isActive|
        |isAwake|                         |love-Body:isAwake|
        |isBullet|                        |love-Body:isBullet|
        |isDestroyed|                     |love-Body:isDestroyed|
        |isFixedRotation|                 |love-Body:isFixedRotation|
        |isSleepingAllowed|               |love-Body:isSleepingAllowed|
        |resetMassData|                   |love-Body:resetMassData|
        |setActive|                       |love-Body:setActive|
        |setAngle|                        |love-Body:setAngle|
        |setAngularDamping|               |love-Body:setAngularDamping|
        |setAngularVelocity|              |love-Body:setAngularVelocity|
        |setAwake|                        |love-Body:setAwake|
        |setBullet|                       |love-Body:setBullet|
        |setFixedRotation|                |love-Body:setFixedRotation|
        |setGravityScale|                 |love-Body:setGravityScale|
        |setInertia|                      |love-Body:setInertia|
        |setLinearDamping|                |love-Body:setLinearDamping|
        |setLinearVelocity|               |love-Body:setLinearVelocity|
        |setMass|                         |love-Body:setMass|
        |setMassData|                     |love-Body:setMassData|
        |setPosition|                     |love-Body:setPosition|
        |setSleepingAllowed|              |love-Body:setSleepingAllowed|
        |setType|                         |love-Body:setType|
        |setUserData|                     |love-Body:setUserData|
        |setX|                            |love-Body:setX|
        |setY|                            |love-Body:setY|

-------------------------------------------------------------------------------
                                                *love-Body:applyAngularImpulse*
|Body:applyAngularImpulse|

Applies an angular impulse to a body. This makes a single, instantaneous
addition to the body momentum.

A body with with a larger mass will react less. The reaction does not depend on
the timestep, and is equivalent to applying a force continuously for 1 second.
Impulses are best used to give a single push to a body. For a continuous push
to a body it is better to use Body:applyForce.

Synopses:

    1.  |Body:applyAngularImpulse|( `impulse` )

Variants:

    1.  |Body:applyAngularImpulse|( `impulse` )

        See function description

        returns:

            None

        arguments:

            `impulse`: <number>

                The impulse in kilogram-square meter per second.

-------------------------------------------------------------------------------
                                                         *love-Body:applyForce*
|Body:applyForce|

Apply force to a Body.

A force pushes a body in a direction. A body with with a larger mass will react
less. The reaction also depends on how long a force is applied: since the force
acts continuously over the entire timestep, a short timestep will only push the
body for a short time. Thus forces are best used for many timesteps to give a
continuous push to a body (like gravity). For a single push that is independent
of timestep, it is better to use Body:applyLinearImpulse.

If the position to apply the force is not given, it will act on the center of
mass of the body. The part of the force not directed towards the center of mass
will cause the body to spin (and depends on the rotational inertia).

Note that the force components and position must be given in world coordinates.

Synopses:

    1.  |Body:applyForce|( `fx`, `fy` )
    2.  |Body:applyForce|( `fx`, `fy`, `x`, `y` )

Variants:

    1.  |Body:applyForce|( `fx`, `fy` )

        See function description

        returns:

            None

        arguments:

            `fx`: <number>

                The x component of force to apply to the center of mass.

            `fy`: <number>

                The y component of force to apply to the center of mass.
    2.  |Body:applyForce|( `fx`, `fy`, `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `fx`: <number>

                The x component of force to apply.

            `fy`: <number>

                The y component of force to apply.

            `x`: <number>

                The x position to apply the force.

            `y`: <number>

                The y position to apply the force.

-------------------------------------------------------------------------------
                                                 *love-Body:applyLinearImpulse*
|Body:applyLinearImpulse|

Applies an impulse to a body. This makes a single, instantaneous addition to
the body momentum.

An impulse pushes a body in a direction. A body with with a larger mass will
react less. The reaction does not depend on the timestep, and is equivalent to
applying a force continuously for 1 second. Impulses are best used to give a
single push to a body. For a continuous push to a body it is better to use
Body:applyForce.

If the position to apply the impulse is not given, it will act on the center of
mass of the body. The part of the impulse not directed towards the center of
mass will cause the body to spin (and depends on the rotational inertia).

Note that the impulse components and position must be given in world
coordinates.

Synopses:

    1.  |Body:applyLinearImpulse|( `ix`, `iy` )
    2.  |Body:applyLinearImpulse|( `ix`, `iy`, `x`, `y` )

Variants:

    1.  |Body:applyLinearImpulse|( `ix`, `iy` )

        See function description

        returns:

            None

        arguments:

            `ix`: <number>

                The x component of the impulse applied to the center of mass.

            `iy`: <number>

                The y component of the impulse applied to the center of mass.
    2.  |Body:applyLinearImpulse|( `ix`, `iy`, `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `ix`: <number>

                The x component of the impulse.

            `iy`: <number>

                The y component of the impulse.

            `x`: <number>

                The x position to apply the impulse.

            `y`: <number>

                The y position to apply the impulse.

-------------------------------------------------------------------------------
                                                        *love-Body:applyTorque*
|Body:applyTorque|

Apply torque to a body.

Torque is like a force that will change the angular velocity (spin) of a body.
The effect will depend on the rotational inertia a body has.

Synopses:

    1.  |Body:applyTorque|( `torque` )

Variants:

    1.  |Body:applyTorque|( `torque` )

        See function description

        returns:

            None

        arguments:

            `torque`: <number>

                The torque to apply.

-------------------------------------------------------------------------------
                                                            *love-Body:destroy*
|Body:destroy|

Explicitly destroys the Body. When you don't have time to wait for garbage
collection, this function may be used to free the object immediately, but note
that an error will occur if you attempt to use the object after calling this
function.

Synopses:

    1.  |Body:destroy|()

Variants:

    1.  |Body:destroy|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                           *love-Body:getAngle*
|Body:getAngle|

Get the angle of the body.

The angle is measured in radians. If you need to transform it to degrees, use
math.deg.

A value of 0 radians will mean "looking to the right". Although radians
increase counter-clockwise, the y-axis points down so it becomes clockwise from
our point of view.

Synopses:

    1.  `angle` = |Body:getAngle|()

Variants:

    1.  `angle` = |Body:getAngle|()

        See function description

        returns:

            `angle`: <number>

                The angle in radians.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Body:getAngularDamping*
|Body:getAngularDamping|

Gets the Angular damping of the Body

The angular damping is the rate of decrease of the angular velocity over time:
A spinning body with no damping and no external forces will continue spinning
indefinitely. A spinning body with damping will gradually stop spinning.

Damping is not the same as friction - they can be modelled together. However,
only damping is provided by Box2D (and LÖVE).

Damping parameters should be between 0 and infinity, with 0 meaning no damping,
and infinity meaning full damping. Normally you will use a damping value
between 0 and 0.1.

Synopses:

    1.  `damping` = |Body:getAngularDamping|()

Variants:

    1.  `damping` = |Body:getAngularDamping|()

        See function description

        returns:

            `damping`: <number>

                The value of the angular damping.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-Body:getAngularVelocity*
|Body:getAngularVelocity|

Get the angular velocity of the Body.

The angular velocity is the rate of change of angle over time.

It is changed in World:update by applying torques, off centre forces/impulses,
and angular damping. It can be set directly with Body:setAngularVelocity.

If you need the rate of change of position over time, use
Body:getLinearVelocity.

Synopses:

    1.  `w` = |Body:getAngularVelocity|()

Variants:

    1.  `w` = |Body:getAngularVelocity|()

        See function description

        returns:

            `w`: <number>

                The angular velocity in radians/second.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Body:getContactList*
|Body:getContactList|

Gets a list of all Contacts attached to the Body.

Synopses:

    1.  `contacts` = |Body:getContactList|()

Variants:

    1.  `contacts` = |Body:getContactList|()

        See function description

        returns:

            `contacts`: <table>

                A list with all contacts associated with the Body.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Body:getFixtureList*
|Body:getFixtureList|

Returns a table with all fixtures.

Synopses:

    1.  `fixtures` = |Body:getFixtureList|()

Variants:

    1.  `fixtures` = |Body:getFixtureList|()

        See function description

        returns:

            `fixtures`: <table>

                A sequence with all fixtures.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-Body:getGravityScale*
|Body:getGravityScale|

Returns the gravity scale factor.

Synopses:

    1.  `scale` = |Body:getGravityScale|()

Variants:

    1.  `scale` = |Body:getGravityScale|()

        See function description

        returns:

            `scale`: <number>

                The gravity scale factor.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Body:getInertia*
|Body:getInertia|

Gets the rotational inertia of the body.

The rotational inertia is how hard is it to make the body spin.

Synopses:

    1.  `inertia` = |Body:getInertia|()

Variants:

    1.  `inertia` = |Body:getInertia|()

        See function description

        returns:

            `inertia`: <number>

                The rotational inertial of the body.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Body:getJointList*
|Body:getJointList|

Returns a table containing the Joints attached to this Body.

Synopses:

    1.  `joints` = |Body:getJointList|()

Variants:

    1.  `joints` = |Body:getJointList|()

        See function description

        returns:

            `joints`: <table>

                A sequence with the Joints attached to the Body.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-Body:getLinearDamping*
|Body:getLinearDamping|

Gets the linear damping of the Body.

The linear damping is the rate of decrease of the linear velocity over time. A
moving body with no damping and no external forces will continue moving
indefinitely, as is the case in space. A moving body with damping will
gradually stop moving.

Damping is not the same as friction - they can be modelled together. However,
only damping is provided by Box2D (and LÖVE).

Synopses:

    1.  `damping` = |Body:getLinearDamping|()

Variants:

    1.  `damping` = |Body:getLinearDamping|()

        See function description

        returns:

            `damping`: <number>

                The value of the linear damping.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Body:getLinearVelocity*
|Body:getLinearVelocity|

Gets the linear velocity of the Body from its center of mass.

The linear velocity is the rate of change of position over time.

If you need the rate of change of angle over time, use Body:getAngularVelocity.
If you need to get the linear velocity of a point different from the center of
mass:

Body:getLinearVelocityFromLocalPoint allows you to specify the point in local
coordinates.

Body:getLinearVelocityFromWorldPoint allows you to specify the point in world
coordinates.

Synopses:

    1.  `x`, `y` = |Body:getLinearVelocity|()

Variants:

    1.  `x`, `y` = |Body:getLinearVelocity|()

        See function description

        returns:

            `x`: <number>

                The x component of the velocity vector.

            `y`: <number>

                The y component of the velocity vector.

        arguments:

            None

-------------------------------------------------------------------------------
                                    *love-Body:getLinearVelocityFromLocalPoint*
|Body:getLinearVelocityFromLocalPoint|

Get the linear velocity of a point on the body.

The linear velocity for a point on the body is the velocity of the body center
of mass plus the velocity at that point from the body spinning.

The point on the body must given in local coordinates. Use
Body:getLinearVelocityFromWorldPoint to specify this with world coordinates.

Synopses:

    1.  `vx`, `vy` = |Body:getLinearVelocityFromLocalPoint|( `x`, `y` )

Variants:

    1.  `vx`, `vy` = |Body:getLinearVelocityFromLocalPoint|( `x`, `y` )

        See function description

        returns:

            `vx`: <number>

                The x component of velocity at point (x,y).

            `vy`: <number>

                The y component of velocity at point (x,y).

        arguments:

            `x`: <number>

                The x position to measure velocity.

            `y`: <number>

                The y position to measure velocity.

-------------------------------------------------------------------------------
                                    *love-Body:getLinearVelocityFromWorldPoint*
|Body:getLinearVelocityFromWorldPoint|

Get the linear velocity of a point on the body.

The linear velocity for a point on the body is the velocity of the body center
of mass plus the velocity at that point from the body spinning.

The point on the body must given in world coordinates. Use
Body:getLinearVelocityFromLocalPoint to specify this with local coordinates.

Synopses:

    1.  `vx`, `vy` = |Body:getLinearVelocityFromWorldPoint|( `x`, `y` )

Variants:

    1.  `vx`, `vy` = |Body:getLinearVelocityFromWorldPoint|( `x`, `y` )

        See function description

        returns:

            `vx`: <number>

                The x component of velocity at point (x,y).

            `vy`: <number>

                The y component of velocity at point (x,y).

        arguments:

            `x`: <number>

                The x position to measure velocity.

            `y`: <number>

                The y position to measure velocity.

-------------------------------------------------------------------------------
                                                     *love-Body:getLocalCenter*
|Body:getLocalCenter|

Get the center of mass position in local coordinates.

Use Body:getWorldCenter to get the center of mass in world coordinates.

Synopses:

    1.  `x`, `y` = |Body:getLocalCenter|()

Variants:

    1.  `x`, `y` = |Body:getLocalCenter|()

        See function description

        returns:

            `x`: <number>

                The x coordinate of the center of mass.

            `y`: <number>

                The y coordinate of the center of mass.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Body:getLocalPoint*
|Body:getLocalPoint|

Transform a point from world coordinates to local coordinates.

Synopses:

    1.  `localX`, `localY` = |Body:getLocalPoint|( `worldX`, `worldY` )

Variants:

    1.  `localX`, `localY` = |Body:getLocalPoint|( `worldX`, `worldY` )

        See function description

        returns:

            `localX`: <number>

                The x position in local coordinates.

            `localY`: <number>

                The y position in local coordinates.

        arguments:

            `worldX`: <number>

                The x position in world coordinates.

            `worldY`: <number>

                The y position in world coordinates.

-------------------------------------------------------------------------------
                                                     *love-Body:getLocalVector*
|Body:getLocalVector|

Transform a vector from world coordinates to local coordinates.

Synopses:

    1.  `localX`, `localY` = |Body:getLocalVector|( `worldX`, `worldY`
        )

Variants:

    1.  `localX`, `localY` = |Body:getLocalVector|( `worldX`, `worldY`
        )

        See function description

        returns:

            `localX`: <number>

                The vector x component in local coordinates.

            `localY`: <number>

                The vector y component in local coordinates.

        arguments:

            `worldX`: <number>

                The vector x component in world coordinates.

            `worldY`: <number>

                The vector y component in world coordinates.

-------------------------------------------------------------------------------
                                                            *love-Body:getMass*
|Body:getMass|

Get the mass of the body.

Synopses:

    1.  `mass` = |Body:getMass|()

Variants:

    1.  `mass` = |Body:getMass|()

        See function description

        returns:

            `mass`: <number>

                The mass of the body (in kilograms).

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Body:getMassData*
|Body:getMassData|

Returns the mass, its center, and the rotational inertia.

Synopses:

    1.  `x`, `y`, `mass`, `inertia` = |Body:getMassData|()

Variants:

    1.  `x`, `y`, `mass`, `inertia` = |Body:getMassData|()

        See function description

        returns:

            `x`: <number>

                The x position of the center of mass.

            `y`: <number>

                The y position of the center of mass.

            `mass`: <number>

                The mass of the body.

            `inertia`: <number>

                The rotational inertia.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Body:getPosition*
|Body:getPosition|

Get the position of the body.

Note that this may not be the center of mass of the body.

Synopses:

    1.  `x`, `y` = |Body:getPosition|()

Variants:

    1.  `x`, `y` = |Body:getPosition|()

        See function description

        returns:

            `x`: <number>

                The x position.

            `y`: <number>

                The y position.

        arguments:

            None

-------------------------------------------------------------------------------
                                                            *love-Body:getType*
|Body:getType|

Returns the type of the body.

Synopses:

    1.  `type` = |Body:getType|()

Variants:

    1.  `type` = |Body:getType|()

        See function description

        returns:

            `type`: <BodyType>

                The body type.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Body:getUserData*
|Body:getUserData|

Returns the Lua value associated with this Body.

Synopses:

    1.  `value` = |Body:getUserData|()

Variants:

    1.  `value` = |Body:getUserData|()

        See function description

        returns:

            `value`: <any>

                The Lua value associated with the Body.

        arguments:

            None

-------------------------------------------------------------------------------
                                                           *love-Body:getWorld*
|Body:getWorld|

Gets the World the body lives in.

Synopses:

    1.  `world` = |Body:getWorld|()

Variants:

    1.  `world` = |Body:getWorld|()

        See function description

        returns:

            `world`: <World>

                The world the body lives in.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Body:getWorldCenter*
|Body:getWorldCenter|

Get the center of mass position in world coordinates.

Use Body:getLocalCenter to get the center of mass in local coordinates.

Synopses:

    1.  `x`, `y` = |Body:getWorldCenter|()

Variants:

    1.  `x`, `y` = |Body:getWorldCenter|()

        See function description

        returns:

            `x`: <number>

                The x coordinate of the center of mass.

            `y`: <number>

                The y coordinate of the center of mass.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Body:getWorldPoint*
|Body:getWorldPoint|

Transform a point from local coordinates to world coordinates.

Synopses:

    1.  `worldX`, `worldY` = |Body:getWorldPoint|( `localX`, `localY` )

Variants:

    1.  `worldX`, `worldY` = |Body:getWorldPoint|( `localX`, `localY` )

        See function description

        returns:

            `worldX`: <number>

                The x position in world coordinates.

            `worldY`: <number>

                The y position in world coordinates.

        arguments:

            `localX`: <number>

                The x position in local coordinates.

            `localY`: <number>

                The y position in local coordinates.

-------------------------------------------------------------------------------
                                                     *love-Body:getWorldPoints*
|Body:getWorldPoints|

Transforms multiple points from local coordinates to world coordinates.

Synopses:

    1.  `x1`, `y1`, `x2`, `y2`, `...` = |Body:getWorldPoints|( `x1`,
        `y1`, `x2`, `y2`, `...` )

Variants:

    1.  `x1`, `y1`, `x2`, `y2`, `...` = |Body:getWorldPoints|( `x1`,
        `y1`, `x2`, `y2`, `...` )

        See function description

        returns:

            `x1`: <number>

                The transformed x position of the first point.

            `y1`: <number>

                The transformed y position of the first point.

            `x2`: <number>

                The transformed x position of the second point.

            `y2`: <number>

                The transformed y position of the second point.

            `...`: <number>

                The transformed x and y positions of additional points.

        arguments:

            `x1`: <number>

                The x position of the first point.

            `y1`: <number>

                The y position of the first point.

            `x2`: <number>

                The x position of the second point.

            `y2`: <number>

                The y position of the second point.

            `...`: <number>

                More x and y points.

-------------------------------------------------------------------------------
                                                     *love-Body:getWorldVector*
|Body:getWorldVector|

Transform a vector from local coordinates to world coordinates.

Synopses:

    1.  `worldX`, `worldY` = |Body:getWorldVector|( `localX`, `localY`
        )

Variants:

    1.  `worldX`, `worldY` = |Body:getWorldVector|( `localX`, `localY`
        )

        See function description

        returns:

            `worldX`: <number>

                The vector x component in world coordinates.

            `worldY`: <number>

                The vector y component in world coordinates.

        arguments:

            `localX`: <number>

                The vector x component in local coordinates.

            `localY`: <number>

                The vector y component in local coordinates.

-------------------------------------------------------------------------------
                                                               *love-Body:getX*
|Body:getX|

Get the x position of the body in world coordinates.

Synopses:

    1.  `x` = |Body:getX|()

Variants:

    1.  `x` = |Body:getX|()

        See function description

        returns:

            `x`: <number>

                The x position in world coordinates.

        arguments:

            None

-------------------------------------------------------------------------------
                                                               *love-Body:getY*
|Body:getY|

Get the y position of the body in world coordinates.

Synopses:

    1.  `y` = |Body:getY|()

Variants:

    1.  `y` = |Body:getY|()

        See function description

        returns:

            `y`: <number>

                The y position in world coordinates.

        arguments:

            None

-------------------------------------------------------------------------------
                                                           *love-Body:isActive*
|Body:isActive|

Returns whether the body is actively used in the simulation.

Synopses:

    1.  `status` = |Body:isActive|()

Variants:

    1.  `status` = |Body:isActive|()

        See function description

        returns:

            `status`: <boolean>

                True if the body is active or false if not.

        arguments:

            None

-------------------------------------------------------------------------------
                                                            *love-Body:isAwake*
|Body:isAwake|

Returns the sleep status of the body.

Synopses:

    1.  `status` = |Body:isAwake|()

Variants:

    1.  `status` = |Body:isAwake|()

        See function description

        returns:

            `status`: <boolean>

                True if the body is awake or false if not.

        arguments:

            None

-------------------------------------------------------------------------------
                                                           *love-Body:isBullet*
|Body:isBullet|

Get the bullet status of a body.

There are two methods to check for body collisions:

at their location when the world is updated (default)

using continuous collision detection (CCD)

The default method is efficient, but a body moving very quickly may sometimes
jump over another body without producing a collision. A body that is set as a
bullet will use CCD. This is less efficient, but is guaranteed not to jump when
moving quickly.

Note that static bodies (with zero mass) always use CCD, so your walls will not
let a fast moving body pass through even if it is not a bullet.

Synopses:

    1.  `status` = |Body:isBullet|()

Variants:

    1.  `status` = |Body:isBullet|()

        See function description

        returns:

            `status`: <boolean>

                The bullet status of the body.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Body:isDestroyed*
|Body:isDestroyed|

Gets whether the Body is destroyed. Destroyed bodies cannot be used.

Synopses:

    1.  `destroyed` = |Body:isDestroyed|()

Variants:

    1.  `destroyed` = |Body:isDestroyed|()

        See function description

        returns:

            `destroyed`: <boolean>

                Whether the Body is destroyed.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-Body:isFixedRotation*
|Body:isFixedRotation|

Returns whether the body rotation is locked.

Synopses:

    1.  `fixed` = |Body:isFixedRotation|()

Variants:

    1.  `fixed` = |Body:isFixedRotation|()

        See function description

        returns:

            `fixed`: <boolean>

                True if the body's rotation is locked or false if not.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Body:isSleepingAllowed*
|Body:isSleepingAllowed|

Returns the sleeping behaviour of the body.

Synopses:

    1.  `status` = |Body:isSleepingAllowed|()

Variants:

    1.  `status` = |Body:isSleepingAllowed|()

        See function description

        returns:

            `status`: <boolean>

                True if the body is allowed to sleep or false if not.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Body:resetMassData*
|Body:resetMassData|

Resets the mass of the body by recalculating it from the mass properties of the
fixtures.

Synopses:

    1.  |Body:resetMassData|()

Variants:

    1.  |Body:resetMassData|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Body:setActive*
|Body:setActive|

Sets whether the body is active in the world.

An inactive body does not take part in the simulation. It will not move or
cause any collisions.

Synopses:

    1.  |Body:setActive|( `active` )

Variants:

    1.  |Body:setActive|( `active` )

        See function description

        returns:

            None

        arguments:

            `active`: <boolean>

                If the body is active or not.

-------------------------------------------------------------------------------
                                                           *love-Body:setAngle*
|Body:setAngle|

Set the angle of the body.

The angle is measured in radians. If you need to transform it from degrees, use
math.rad.

A value of 0 radians will mean "looking to the right". Although radians
increase counter-clockwise, the y-axis points down so it becomes clockwise from
our point of view.

It is possible to cause a collision with another body by changing its angle.

Synopses:

    1.  |Body:setAngle|( `angle` )

Variants:

    1.  |Body:setAngle|( `angle` )

        See function description

        returns:

            None

        arguments:

            `angle`: <number>

                The angle in radians.

-------------------------------------------------------------------------------
                                                  *love-Body:setAngularDamping*
|Body:setAngularDamping|

Sets the angular damping of a Body.

See Body:getAngularDamping for a definition of angular damping.

Angular damping can take any value from 0 to infinity. It is recommended to
stay between 0 and 0.1, though. Other values will look unrealistic.

Synopses:

    1.  |Body:setAngularDamping|( `damping` )

Variants:

    1.  |Body:setAngularDamping|( `damping` )

        See function description

        returns:

            None

        arguments:

            `damping`: <number>

                The new angular damping.

-------------------------------------------------------------------------------
                                                 *love-Body:setAngularVelocity*
|Body:setAngularVelocity|

Sets the angular velocity of a Body.

The angular velocity is the rate of change of angle over time.

This function will not accumulate anything; any impulses previously applied
since the last call to World:update will be lost.

Synopses:

    1.  |Body:setAngularVelocity|( `w` )

Variants:

    1.  |Body:setAngularVelocity|( `w` )

        See function description

        returns:

            None

        arguments:

            `w`: <number>

                The new angular velocity, in radians per second

-------------------------------------------------------------------------------
                                                           *love-Body:setAwake*
|Body:setAwake|

Wakes the body up or puts it to sleep.

Synopses:

    1.  |Body:setAwake|( `awake` )

Variants:

    1.  |Body:setAwake|( `awake` )

        See function description

        returns:

            None

        arguments:

            `awake`: <boolean>

                The body sleep status.

-------------------------------------------------------------------------------
                                                          *love-Body:setBullet*
|Body:setBullet|

Set the bullet status of a body.

There are two methods to check for body collisions:

at their location when the world is updated (default)

using continuous collision detection (CCD)

The default method is efficient, but a body moving very quickly may sometimes
jump over another body without producing a collision. A body that is set as a
bullet will use CCD. This is less efficient, but is guaranteed not to jump when
moving quickly.

Note that static bodies (with zero mass) always use CCD, so your walls will not
let a fast moving body pass through even if it is not a bullet.

Synopses:

    1.  |Body:setBullet|( `status` )

Variants:

    1.  |Body:setBullet|( `status` )

        See function description

        returns:

            None

        arguments:

            `status`: <boolean>

                The bullet status of the body.

-------------------------------------------------------------------------------
                                                   *love-Body:setFixedRotation*
|Body:setFixedRotation|

Set whether a body has fixed rotation.

Bodies with fixed rotation don't vary the speed at which they rotate.

Synopses:

    1.  |Body:setFixedRotation|( `fixed` )

Variants:

    1.  |Body:setFixedRotation|( `fixed` )

        See function description

        returns:

            None

        arguments:

            `fixed`: <boolean>

                Whether the body should have fixed rotation.

-------------------------------------------------------------------------------
                                                    *love-Body:setGravityScale*
|Body:setGravityScale|

Sets a new gravity scale factor for the body.

Synopses:

    1.  |Body:setGravityScale|( `scale` )

Variants:

    1.  |Body:setGravityScale|( `scale` )

        See function description

        returns:

            None

        arguments:

            `scale`: <number>

                The new gravity scale factor.

-------------------------------------------------------------------------------
                                                         *love-Body:setInertia*
|Body:setInertia|

Set the inertia of a body.

Synopses:

    1.  |Body:setInertia|( `inertia` )

Variants:

    1.  |Body:setInertia|( `inertia` )

        See function description

        returns:

            None

        arguments:

            `inertia`: <number>

                The new moment of inertia, in kilograms per meter squared.

-------------------------------------------------------------------------------
                                                   *love-Body:setLinearDamping*
|Body:setLinearDamping|

Sets the linear damping of a Body

See Body:getLinearDamping for a definition of linear damping.

Linear damping can take any value from 0 to infinity. It is recommended to stay
between 0 and 0.1, though. Other values will make the objects look "floaty".

Synopses:

    1.  |Body:setLinearDamping|( `ld` )

Variants:

    1.  |Body:setLinearDamping|( `ld` )

        See function description

        returns:

            None

        arguments:

            `ld`: <number>

                The new linear damping.

-------------------------------------------------------------------------------
                                                  *love-Body:setLinearVelocity*
|Body:setLinearVelocity|

Sets a new linear velocity for the Body.

This function will not accumulate anything; any impulses previously applied
since the last call to World:update will be lost.

Synopses:

    1.  |Body:setLinearVelocity|( `x`, `y` )

Variants:

    1.  |Body:setLinearVelocity|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The x component of the velocity vector.

            `y`: <number>

                The y component of the velocity vector.

-------------------------------------------------------------------------------
                                                            *love-Body:setMass*
|Body:setMass|

Sets the mass in kilograms.

Synopses:

    1.  |Body:setMass|( `mass` )

Variants:

    1.  |Body:setMass|( `mass` )

        See function description

        returns:

            None

        arguments:

            `mass`: <number>

                The mass, in kilograms.

-------------------------------------------------------------------------------
                                                        *love-Body:setMassData*
|Body:setMassData|

Overrides the calculated mass data.

Synopses:

    1.  |Body:setMassData|( `x`, `y`, `mass`, `inertia` )

Variants:

    1.  |Body:setMassData|( `x`, `y`, `mass`, `inertia` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The x component of the center of mass in local coordinates.

            `y`: <number>

                The y component of the center of mass in local coordinates.

            `mass`: <number>

                The mass, in kilograms.

            `inertia`: <number>

                The rotational inertia, in kilograms per squared meter.

-------------------------------------------------------------------------------
                                                        *love-Body:setPosition*
|Body:setPosition|

Set the position of the body.

Note that this may not be the center of mass of the body.

Synopses:

    1.  |Body:setPosition|( `x`, `y` )

Variants:

    1.  |Body:setPosition|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The x position.

            `y`: <number>

                The y position.

-------------------------------------------------------------------------------
                                                 *love-Body:setSleepingAllowed*
|Body:setSleepingAllowed|

Sets the sleeping behaviour of the body.

Synopses:

    1.  |Body:setSleepingAllowed|( `allowed` )

Variants:

    1.  |Body:setSleepingAllowed|( `allowed` )

        See function description

        returns:

            None

        arguments:

            `allowed`: <boolean>

                True if the body is allowed to sleep or false if not.

-------------------------------------------------------------------------------
                                                            *love-Body:setType*
|Body:setType|

Sets a new body type.

Synopses:

    1.  |Body:setType|( `type` )

Variants:

    1.  |Body:setType|( `type` )

        See function description

        returns:

            None

        arguments:

            `type`: <BodyType>

                The new type.

-------------------------------------------------------------------------------
                                                        *love-Body:setUserData*
|Body:setUserData|

Associates a Lua value with the Body.

To delete the reference, explicitly pass nil.

Synopses:

    1.  |Body:setUserData|( `value` )

Variants:

    1.  |Body:setUserData|( `value` )

        See function description

        returns:

            None

        arguments:

            `value`: <any>

                The Lua value to associate with the Body.

-------------------------------------------------------------------------------
                                                               *love-Body:setX*
|Body:setX|

Set the x position of the body.

Synopses:

    1.  |Body:setX|( `x` )

Variants:

    1.  |Body:setX|( `x` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The x position.

-------------------------------------------------------------------------------
                                                               *love-Body:setY*
|Body:setY|

Set the y position of the body.

Synopses:

    1.  |Body:setY|( `y` )

Variants:

    1.  |Body:setY|( `y` )

        See function description

        returns:

            None

        arguments:

            `y`: <number>

                The y position.

-------------------------------------------------------------------------------
                                                              *love-ChainShape*
|ChainShape|

A ChainShape consists of multiple line segments. It can be used to create the
boundaries of your terrain. The shape does not have volume and can only collide
with PolygonShape and CircleShape.

Unlike the PolygonShape, the ChainShape does not have a vertices limit or has
to form a convex shape, but self intersections are not supported.

                                                 *love-ChainShape-constructors*
    constructors:

        |newChainShape|                   |love-newChainShape|

                                                   *love-ChainShape-supertypes*
    supertypes:

        |Shape|                           |love-Shape|
        |Object|                          |love-Object|

                                                     *love-ChainShape-subtypes*
    subtypes:

        None

                                                    *love-ChainShape-functions*
    functions:

        |getChildEdge|                    |love-ChainShape:getChildEdge|
        |getNextVertex|                   |love-ChainShape:getNextVertex|
        |getPoint|                        |love-ChainShape:getPoint|
        |getPoints|                       |love-ChainShape:getPoints|
        |getPreviousVertex|               |love-ChainShape:getPreviousVertex|
        |getVertexCount|                  |love-ChainShape:getVertexCount|
        |setNextVertex|                   |love-ChainShape:setNextVertex|
        |setPreviousVertex|               |love-ChainShape:setPreviousVertex|

-------------------------------------------------------------------------------
                                                 *love-ChainShape:getChildEdge*
|ChainShape:getChildEdge|

Returns a child of the shape as an EdgeShape.

Synopses:

    1.  `EdgeShape` = |ChainShape:getChildEdge|( `index` )

Variants:

    1.  `EdgeShape` = |ChainShape:getChildEdge|( `index` )

        See function description

        returns:

            `EdgeShape`: <number>

                The child as an EdgeShape.

        arguments:

            `index`: <number>

                The index of the child.

-------------------------------------------------------------------------------
                                                *love-ChainShape:getNextVertex*
|ChainShape:getNextVertex|

Gets the vertex that establishes a connection to the next shape.

Setting next and previous ChainShape vertices can help prevent unwanted
collisions when a flat shape slides along the edge and moves over to the new
shape.

Synopses:

    1.  |ChainShape:getNextVertex|( `x`, `y` )

Variants:

    1.  |ChainShape:getNextVertex|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The x-component of the vertex, or nil if
                ChainShape:setNextVertex hasn't been called.

            `y`: <number>

                The y-component of the vertex, or nil if
                ChainShape:setNextVertex hasn't been called.

-------------------------------------------------------------------------------
                                                     *love-ChainShape:getPoint*
|ChainShape:getPoint|

Returns a point of the shape.

Synopses:

    1.  `x`, `y` = |ChainShape:getPoint|( `index` )

Variants:

    1.  `x`, `y` = |ChainShape:getPoint|( `index` )

        See function description

        returns:

            `x`: <number>

                The x-coordinate of the point.

            `y`: <number>

                The y-coordinate of the point.

        arguments:

            `index`: <number>

                The index of the point to return.

-------------------------------------------------------------------------------
                                                    *love-ChainShape:getPoints*
|ChainShape:getPoints|

Returns all points of the shape.

Synopses:

    1.  `x1`, `y1`, `x2`, `y2`, `...` = |ChainShape:getPoints|()

Variants:

    1.  `x1`, `y1`, `x2`, `y2`, `...` = |ChainShape:getPoints|()

        See function description

        returns:

            `x1`: <number>

                The x-coordinate of the first point.

            `y1`: <number>

                The y-coordinate of the first point.

            `x2`: <number>

                The x-coordinate of the second point.

            `y2`: <number>

                The y-coordinate of the second point.

            `...`: <number>

                Additional x and y values.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-ChainShape:getPreviousVertex*
|ChainShape:getPreviousVertex|

Gets the vertex that establishes a connection to the previous shape.

Setting next and previous ChainShape vertices can help prevent unwanted
collisions when a flat shape slides along the edge and moves over to the new
shape.

Synopses:

    1.  `x`, `y` = |ChainShape:getPreviousVertex|()

Variants:

    1.  `x`, `y` = |ChainShape:getPreviousVertex|()

        See function description

        returns:

            `x`: <number>

                The x-component of the vertex, or nil if
                ChainShape:setNextVertex hasn't been called.

            `y`: <number>

                The y-component of the vertex, or nil if
                ChainShape:setNextVertex hasn't been called.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-ChainShape:getVertexCount*
|ChainShape:getVertexCount|

Returns the number of vertices the shape has.

Synopses:

    1.  `count` = |ChainShape:getVertexCount|()

Variants:

    1.  `count` = |ChainShape:getVertexCount|()

        See function description

        returns:

            `count`: <number>

                The number of vertices.

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-ChainShape:setNextVertex*
|ChainShape:setNextVertex|

Sets a vertex that establishes a connection to the next shape.

This can help prevent unwanted collisions when a flat shape slides along the
edge and moves over to the new shape.

Synopses:

    1.  |ChainShape:setNextVertex|( `x`, `y` )

Variants:

    1.  |ChainShape:setNextVertex|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The x component of the vertex.

            `y`: <number>

                The y component of the vertex.

-------------------------------------------------------------------------------
                                            *love-ChainShape:setPreviousVertex*
|ChainShape:setPreviousVertex|

Sets a vertex that establishes a connection to the previous shape.

This can help prevent unwanted collisions when a flat shape slides along the
edge and moves over to the new shape.

Synopses:

    1.  |ChainShape:setPreviousVertex|( `x`, `y` )

Variants:

    1.  |ChainShape:setPreviousVertex|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The x component of the vertex.

            `y`: <number>

                The y component of the vertex.

-------------------------------------------------------------------------------
                                                             *love-CircleShape*
|CircleShape|

Circle extends Shape and adds a radius and a local position.

                                                *love-CircleShape-constructors*
    constructors:

        |newCircleShape|                  |love-newCircleShape|

                                                  *love-CircleShape-supertypes*
    supertypes:

        |Shape|                           |love-Shape|
        |Object|                          |love-Object|

                                                    *love-CircleShape-subtypes*
    subtypes:

        None

                                                   *love-CircleShape-functions*
    functions:

        |getPoint|                        |love-CircleShape:getPoint|
        |getRadius|                       |love-CircleShape:getRadius|
        |setPoint|                        |love-CircleShape:setPoint|
        |setRadius|                       |love-CircleShape:setRadius|

-------------------------------------------------------------------------------
                                                    *love-CircleShape:getPoint*
|CircleShape:getPoint|

Gets the center point of the circle shape.

Synopses:

    1.  `x`, `y` = |CircleShape:getPoint|()

Variants:

    1.  `x`, `y` = |CircleShape:getPoint|()

        See function description

        returns:

            `x`: <number>

                The x-component of the center point of the circle.

            `y`: <number>

                The y-component of the center point of the circle.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-CircleShape:getRadius*
|CircleShape:getRadius|

Gets the radius of the circle shape.

Synopses:

    1.  `radius` = |CircleShape:getRadius|()

Variants:

    1.  `radius` = |CircleShape:getRadius|()

        See function description

        returns:

            `radius`: <number>

                The radius of the circle.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-CircleShape:setPoint*
|CircleShape:setPoint|

Sets the location of the center of the circle shape.

Synopses:

    1.  |CircleShape:setPoint|( `x`, `y` )

Variants:

    1.  |CircleShape:setPoint|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The x-component of the new center point of the circle.

            `y`: <number>

                The y-component of the new center point of the circle.

-------------------------------------------------------------------------------
                                                   *love-CircleShape:setRadius*
|CircleShape:setRadius|

Sets the radius of the circle.

Synopses:

    1.  |CircleShape:setRadius|( `radius` )

Variants:

    1.  |CircleShape:setRadius|( `radius` )

        See function description

        returns:

            None

        arguments:

            `radius`: <number>

                The radius of the circle.

-------------------------------------------------------------------------------
                                                                 *love-Contact*
|Contact|

Contacts are objects created to manage collisions in worlds.

                                                    *love-Contact-constructors*
    constructors:

        None

                                                      *love-Contact-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                        *love-Contact-subtypes*
    subtypes:

        None

                                                       *love-Contact-functions*
    functions:

        |getFixtures|                     |love-Contact:getFixtures|
        |getFriction|                     |love-Contact:getFriction|
        |getNormal|                       |love-Contact:getNormal|
        |getPositions|                    |love-Contact:getPositions|
        |getRestitution|                  |love-Contact:getRestitution|
        |isEnabled|                       |love-Contact:isEnabled|
        |isTouching|                      |love-Contact:isTouching|
        |resetFriction|                   |love-Contact:resetFriction|
        |resetRestitution|                |love-Contact:resetRestitution|
        |setEnabled|                      |love-Contact:setEnabled|
        |setFriction|                     |love-Contact:setFriction|
        |setRestitution|                  |love-Contact:setRestitution|

-------------------------------------------------------------------------------
                                                     *love-Contact:getFixtures*
|Contact:getFixtures|

Gets the two Fixtures that hold the shapes that are in contact.

Synopses:

    1.  `fixtureA`, `fixtureB` = |Contact:getFixtures|()

Variants:

    1.  `fixtureA`, `fixtureB` = |Contact:getFixtures|()

        See function description

        returns:

            `fixtureA`: <Fixture>

                The first Fixture.

            `fixtureB`: <Fixture>

                The second Fixture.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Contact:getFriction*
|Contact:getFriction|

Get the friction between two shapes that are in contact.

Synopses:

    1.  `friction` = |Contact:getFriction|()

Variants:

    1.  `friction` = |Contact:getFriction|()

        See function description

        returns:

            `friction`: <number>

                The friction of the contact.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Contact:getNormal*
|Contact:getNormal|

Get the normal vector between two shapes that are in contact.

This function returns the coordinates of a unit vector that points from the
first shape to the second.

Synopses:

    1.  `nx`, `ny` = |Contact:getNormal|()

Variants:

    1.  `nx`, `ny` = |Contact:getNormal|()

        See function description

        returns:

            `nx`: <number>

                The x component of the normal vector.

            `ny`: <number>

                The y component of the normal vector.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-Contact:getPositions*
|Contact:getPositions|

Returns the contact points of the two colliding fixtures. There can be one or
two points.

Synopses:

    1.  `x1`, `y1`, `x2`, `y2` = |Contact:getPositions|()

Variants:

    1.  `x1`, `y1`, `x2`, `y2` = |Contact:getPositions|()

        See function description

        returns:

            `x1`: <number>

                The x coordinate of the first contact point.

            `y1`: <number>

                The y coordinate of the first contact point.

            `x2`: <number>

                The x coordinate of the second contact point.

            `y2`: <number>

                The y coordinate of the second contact point.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Contact:getRestitution*
|Contact:getRestitution|

Get the restitution between two shapes that are in contact.

Synopses:

    1.  `restitution` = |Contact:getRestitution|()

Variants:

    1.  `restitution` = |Contact:getRestitution|()

        See function description

        returns:

            `restitution`: <number>

                The restitution between the two shapes.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Contact:isEnabled*
|Contact:isEnabled|

Returns whether the contact is enabled. The collision will be ignored if a
contact gets disabled in the preSolve callback.

Synopses:

    1.  `enabled` = |Contact:isEnabled|()

Variants:

    1.  `enabled` = |Contact:isEnabled|()

        See function description

        returns:

            `enabled`: <boolean>

                True if enabled, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Contact:isTouching*
|Contact:isTouching|

Returns whether the two colliding fixtures are touching each other.

Synopses:

    1.  `touching` = |Contact:isTouching|()

Variants:

    1.  `touching` = |Contact:isTouching|()

        See function description

        returns:

            `touching`: <boolean>

                True if they touch or false if not.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-Contact:resetFriction*
|Contact:resetFriction|

Resets the contact friction to the mixture value of both fixtures.

Synopses:

    1.  |Contact:resetFriction|()

Variants:

    1.  |Contact:resetFriction|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-Contact:resetRestitution*
|Contact:resetRestitution|

Resets the contact restitution to the mixture value of both fixtures.

Synopses:

    1.  |Contact:resetRestitution|()

Variants:

    1.  |Contact:resetRestitution|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Contact:setEnabled*
|Contact:setEnabled|

Enables or disables the contact.

Synopses:

    1.  |Contact:setEnabled|( `enabled` )

Variants:

    1.  |Contact:setEnabled|( `enabled` )

        See function description

        returns:

            None

        arguments:

            `enabled`: <boolean>

                True to enable or false to disable.

-------------------------------------------------------------------------------
                                                     *love-Contact:setFriction*
|Contact:setFriction|

Sets the contact friction.

Synopses:

    1.  |Contact:setFriction|( `friction` )

Variants:

    1.  |Contact:setFriction|( `friction` )

        See function description

        returns:

            None

        arguments:

            `friction`: <number>

                The contact friction.

-------------------------------------------------------------------------------
                                                  *love-Contact:setRestitution*
|Contact:setRestitution|

Sets the contact restitution.

Synopses:

    1.  |Contact:setRestitution|( `restitution` )

Variants:

    1.  |Contact:setRestitution|( `restitution` )

        See function description

        returns:

            None

        arguments:

            `restitution`: <number>

                The contact restitution.

-------------------------------------------------------------------------------
                                                               *love-EdgeShape*
|EdgeShape|

A EdgeShape is a line segment. They can be used to create the boundaries of
your terrain. The shape does not have volume and can only collide with
PolygonShape and CircleShape.

                                                  *love-EdgeShape-constructors*
    constructors:

        |newEdgeShape|                    |love-newEdgeShape|

                                                    *love-EdgeShape-supertypes*
    supertypes:

        |Shape|                           |love-Shape|
        |Object|                          |love-Object|

                                                      *love-EdgeShape-subtypes*
    subtypes:

        None

                                                     *love-EdgeShape-functions*
    functions:

        |getPoints|                       |love-EdgeShape:getPoints|
        |getNextVertex|                   |love-EdgeShape:getNextVertex|
        |getPreviousVertex|               |love-EdgeShape:getPreviousVertex|
        |setNextVertex|                   |love-EdgeShape:setNextVertex|
        |setPreviousVertex|               |love-EdgeShape:setPreviousVertex|

-------------------------------------------------------------------------------
                                                     *love-EdgeShape:getPoints*
|EdgeShape:getPoints|

Returns the local coordinates of the edge points.

Synopses:

    1.  `x1`, `y1`, `x2`, `y2` = |EdgeShape:getPoints|()

Variants:

    1.  `x1`, `y1`, `x2`, `y2` = |EdgeShape:getPoints|()

        See function description

        returns:

            `x1`: <number>

                The x component of the first vertex.

            `y1`: <number>

                The y component of the first vertex.

            `x2`: <number>

                The x component of the second vertex.

            `y2`: <number>

                The y component of the second vertex.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-EdgeShape:getNextVertex*
|EdgeShape:getNextVertex|

Gets the vertex that establishes a connection to the next shape.

Setting next and previous EdgeShape vertices can help prevent unwanted
collisions when a flat shape slides along the edge and moves over to the new
shape.

Synopses:

    1.  `x`, `y` = |EdgeShape:getNextVertex|()

Variants:

    1.  `x`, `y` = |EdgeShape:getNextVertex|()

        See function description

        returns:

            `x`: <number>

                The x-component of the vertex, or nil if
                EdgeShape:setNextVertex hasn't been called.

            `y`: <number>

                The y-component of the vertex, or nil if
                EdgeShape:setNextVertex hasn't been called.

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-EdgeShape:getPreviousVertex*
|EdgeShape:getPreviousVertex|

Gets the vertex that establishes a connection to the previous shape.

Setting next and previous EdgeShape vertices can help prevent unwanted
collisions when a flat shape slides along the edge and moves over to the new
shape.

Synopses:

    1.  `x`, `y` = |EdgeShape:getPreviousVertex|()

Variants:

    1.  `x`, `y` = |EdgeShape:getPreviousVertex|()

        See function description

        returns:

            `x`: <number>

                The x-component of the vertex, or nil if
                EdgeShape:setPreviousVertex hasn't been called.

            `y`: <number>

                The y-component of the vertex, or nil if
                EdgeShape:setPreviousVertex hasn't been called.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-EdgeShape:setNextVertex*
|EdgeShape:setNextVertex|

Sets a vertex that establishes a connection to the next shape.

This can help prevent unwanted collisions when a flat shape slides along the
edge and moves over to the new shape.

Synopses:

    1.  |EdgeShape:setNextVertex|( `x`, `y` )

Variants:

    1.  |EdgeShape:setNextVertex|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The x-component of the vertex.

            `y`: <number>

                The y-component of the vertex.

-------------------------------------------------------------------------------
                                             *love-EdgeShape:setPreviousVertex*
|EdgeShape:setPreviousVertex|

Sets a vertex that establishes a connection to the previous shape.

This can help prevent unwanted collisions when a flat shape slides along the
edge and moves over to the new shape.

Synopses:

    1.  |EdgeShape:setPreviousVertex|( `x`, `y` )

Variants:

    1.  |EdgeShape:setPreviousVertex|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The x-component of the vertex.

            `y`: <number>

                The y-component of the vertex.

-------------------------------------------------------------------------------
                                                           *love-DistanceJoint*
|DistanceJoint|

Keeps two bodies at the same distance.

                                              *love-DistanceJoint-constructors*
    constructors:

        |newDistanceJoint|                |love-newDistanceJoint|

                                                *love-DistanceJoint-supertypes*
    supertypes:

        |Object|                          |love-Object|
        |Joint|                           |love-Joint|

                                                  *love-DistanceJoint-subtypes*
    subtypes:

        None

                                                 *love-DistanceJoint-functions*
    functions:

        |getDampingRatio|                 |love-DistanceJoint:getDampingRatio|
        |getFrequency|                    |love-DistanceJoint:getFrequency|
        |getLength|                       |love-DistanceJoint:getLength|
        |setDampingRatio|                 |love-DistanceJoint:setDampingRatio|
        |setFrequency|                    |love-DistanceJoint:setFrequency|
        |setLength|                       |love-DistanceJoint:setLength|

-------------------------------------------------------------------------------
                                           *love-DistanceJoint:getDampingRatio*
|DistanceJoint:getDampingRatio|

Gets the damping ratio.

Synopses:

    1.  `ratio` = |DistanceJoint:getDampingRatio|()

Variants:

    1.  `ratio` = |DistanceJoint:getDampingRatio|()

        See function description

        returns:

            `ratio`: <number>

                The damping ratio.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-DistanceJoint:getFrequency*
|DistanceJoint:getFrequency|

Gets the response speed.

Synopses:

    1.  `Hz` = |DistanceJoint:getFrequency|()

Variants:

    1.  `Hz` = |DistanceJoint:getFrequency|()

        See function description

        returns:

            `Hz`: <number>

                The response speed.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-DistanceJoint:getLength*
|DistanceJoint:getLength|

Gets the equilibrium distance between the two Bodies.

Synopses:

    1.  `l` = |DistanceJoint:getLength|()

Variants:

    1.  `l` = |DistanceJoint:getLength|()

        See function description

        returns:

            `l`: <number>

                The length between the two Bodies.

        arguments:

            None

-------------------------------------------------------------------------------
                                           *love-DistanceJoint:setDampingRatio*
|DistanceJoint:setDampingRatio|

Sets the damping ratio.

Synopses:

    1.  |DistanceJoint:setDampingRatio|( `ratio` )

Variants:

    1.  |DistanceJoint:setDampingRatio|( `ratio` )

        See function description

        returns:

            None

        arguments:

            `ratio`: <number>

                The damping ratio.

-------------------------------------------------------------------------------
                                              *love-DistanceJoint:setFrequency*
|DistanceJoint:setFrequency|

Sets the response speed.

Synopses:

    1.  |DistanceJoint:setFrequency|( `Hz` )

Variants:

    1.  |DistanceJoint:setFrequency|( `Hz` )

        See function description

        returns:

            None

        arguments:

            `Hz`: <number>

                The response speed.

-------------------------------------------------------------------------------
                                                 *love-DistanceJoint:setLength*
|DistanceJoint:setLength|

Sets the equilibrium distance between the two Bodies.

Synopses:

    1.  |DistanceJoint:setLength|( `l` )

Variants:

    1.  |DistanceJoint:setLength|( `l` )

        See function description

        returns:

            None

        arguments:

            `l`: <number>

                The length between the two Bodies.

-------------------------------------------------------------------------------
                                                                 *love-Fixture*
|Fixture|

Fixtures attach shapes to bodies.

                                                    *love-Fixture-constructors*
    constructors:

        |newFixture|                      |love-newFixture|

                                                      *love-Fixture-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                        *love-Fixture-subtypes*
    subtypes:

        None

                                                       *love-Fixture-functions*
    functions:

        |destroy|                         |love-Fixture:destroy|
        |getBody|                         |love-Fixture:getBody|
        |getBoundingBox|                  |love-Fixture:getBoundingBox|
        |getCategory|                     |love-Fixture:getCategory|
        |getDensity|                      |love-Fixture:getDensity|
        |getFilterData|                   |love-Fixture:getFilterData|
        |getFriction|                     |love-Fixture:getFriction|
        |getGroupIndex|                   |love-Fixture:getGroupIndex|
        |getMask|                         |love-Fixture:getMask|
        |getMassData|                     |love-Fixture:getMassData|
        |getRestitution|                  |love-Fixture:getRestitution|
        |getShape|                        |love-Fixture:getShape|
        |getUserData|                     |love-Fixture:getUserData|
        |isDestroyed|                     |love-Fixture:isDestroyed|
        |isSensor|                        |love-Fixture:isSensor|
        |rayCast|                         |love-Fixture:rayCast|
        |setCategory|                     |love-Fixture:setCategory|
        |setDensity|                      |love-Fixture:setDensity|
        |setFilterData|                   |love-Fixture:setFilterData|
        |setFriction|                     |love-Fixture:setFriction|
        |setGroupIndex|                   |love-Fixture:setGroupIndex|
        |setMask|                         |love-Fixture:setMask|
        |setRestitution|                  |love-Fixture:setRestitution|
        |setSensor|                       |love-Fixture:setSensor|
        |setUserData|                     |love-Fixture:setUserData|
        |testPoint|                       |love-Fixture:testPoint|

-------------------------------------------------------------------------------
                                                         *love-Fixture:destroy*
|Fixture:destroy|

Destroys the fixture

Synopses:

    1.  |Fixture:destroy|()

Variants:

    1.  |Fixture:destroy|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Fixture:getBody*
|Fixture:getBody|

Returns the body to which the fixture is attached.

Synopses:

    1.  `body` = |Fixture:getBody|()

Variants:

    1.  `body` = |Fixture:getBody|()

        See function description

        returns:

            `body`: <Body>

                The parent body.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Fixture:getBoundingBox*
|Fixture:getBoundingBox|

Returns the points of the fixture bounding box. In case the fixture has
multiple children a 1-based index can be specified. For example, a fixture will
have multiple children with a chain shape.

Synopses:

    1.  `topLeftX`, `topLeftY`, `bottomRightX`, `bottomRightY` =
        |Fixture:getBoundingBox|( `index` )

Variants:

    1.  `topLeftX`, `topLeftY`, `bottomRightX`, `bottomRightY` =
        |Fixture:getBoundingBox|( `index` )

        See function description

        returns:

            `topLeftX`: <number>

                The x position of the top-left point.

            `topLeftY`: <number>

                The y position of the top-left point.

            `bottomRightX`: <number>

                The x position of the bottom-right point.

            `bottomRightY`: <number>

                The y position of the bottom-right point.

        arguments:

            `index`: <number>

                A bounding box of the fixture.

-------------------------------------------------------------------------------
                                                     *love-Fixture:getCategory*
|Fixture:getCategory|

Returns the categories the fixture belongs to.

Synopses:

    1.  `category1`, `category2`, `...` = |Fixture:getCategory|()

Variants:

    1.  `category1`, `category2`, `...` = |Fixture:getCategory|()

        See function description

        returns:

            `category1`: <number>

                The first category.

            `category2`: <number>

                The second category.

            `...`: <number>

                Additional categories.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Fixture:getDensity*
|Fixture:getDensity|

Returns the density of the fixture.

Synopses:

    1.  `density` = |Fixture:getDensity|()

Variants:

    1.  `density` = |Fixture:getDensity|()

        See function description

        returns:

            `density`: <number>

                The fixture density in kilograms per square meter.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-Fixture:getFilterData*
|Fixture:getFilterData|

Returns the filter data of the fixture. Categories and masks are encoded as the
bits of a 16-bit integer.

Synopses:

    1.  `categories`, `mask`, `group` = |Fixture:getFilterData|()

Variants:

    1.  `categories`, `mask`, `group` = |Fixture:getFilterData|()

        See function description

        returns:

            `categories`: <number>

                The categories as an integer from 0 to 65535.

            `mask`: <number>

                The mask as an integer from 0 to 65535.

            `group`: <number>

                The group as an integer from -32768 to 32767.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Fixture:getFriction*
|Fixture:getFriction|

Returns the friction of the fixture.

Synopses:

    1.  `friction` = |Fixture:getFriction|()

Variants:

    1.  `friction` = |Fixture:getFriction|()

        See function description

        returns:

            `friction`: <number>

                The fixture friction.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-Fixture:getGroupIndex*
|Fixture:getGroupIndex|

Returns the group the fixture belongs to. Fixtures with the same group will
always collide if the group is positive or never collide if it's negative. The
group zero means no group.

The groups range from -32768 to 32767.

Synopses:

    1.  `group` = |Fixture:getGroupIndex|()

Variants:

    1.  `group` = |Fixture:getGroupIndex|()

        See function description

        returns:

            `group`: <number>

                The group of the fixture.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Fixture:getMask*
|Fixture:getMask|

Returns the category mask of the fixture.

Synopses:

    1.  `mask1`, `mask2`, `...` = |Fixture:getMask|()

Variants:

    1.  `mask1`, `mask2`, `...` = |Fixture:getMask|()

        See function description

        returns:

            `mask1`: <number>

                The first category selected by the mask.

            `mask2`: <number>

                The second category selected by the mask.

            `...`: <number>

                Additional categories selected by the mask.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Fixture:getMassData*
|Fixture:getMassData|

Returns the mass, its center and the rotational inertia.

Synopses:

    1.  `x`, `y`, `mass`, `inertia` = |Fixture:getMassData|()

Variants:

    1.  `x`, `y`, `mass`, `inertia` = |Fixture:getMassData|()

        See function description

        returns:

            `x`: <number>

                The x position of the center of mass.

            `y`: <number>

                The y position of the center of mass.

            `mass`: <number>

                The mass of the fixture.

            `inertia`: <number>

                The rotational inertia.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Fixture:getRestitution*
|Fixture:getRestitution|

Returns the restitution of the fixture.

Synopses:

    1.  `restitution` = |Fixture:getRestitution|()

Variants:

    1.  `restitution` = |Fixture:getRestitution|()

        See function description

        returns:

            `restitution`: <number>

                The fixture restitution.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Fixture:getShape*
|Fixture:getShape|

Returns the shape of the fixture. This shape is a reference to the actual data
used in the simulation. It's possible to change its values between timesteps.

Do not call any functions on this shape after the parent fixture has been
destroyed. This shape will point to an invalid memory address and likely cause
crashes if you interact further with it.

Synopses:

    1.  `shape` = |Fixture:getShape|()

Variants:

    1.  `shape` = |Fixture:getShape|()

        See function description

        returns:

            `shape`: <Shape>

                The fixture's shape.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Fixture:getUserData*
|Fixture:getUserData|

Returns the Lua value associated with this fixture.

Use this function in one thread only.

Synopses:

    1.  `value` = |Fixture:getUserData|()

Variants:

    1.  `value` = |Fixture:getUserData|()

        See function description

        returns:

            `value`: <any>

                The Lua value associated with the fixture.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Fixture:isDestroyed*
|Fixture:isDestroyed|

Gets whether the Fixture is destroyed. Destroyed fixtures cannot be used.

Synopses:

    1.  `destroyed` = |Fixture:isDestroyed|()

Variants:

    1.  `destroyed` = |Fixture:isDestroyed|()

        See function description

        returns:

            `destroyed`: <boolean>

                Whether the Fixture is destroyed.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Fixture:isSensor*
|Fixture:isSensor|

Returns whether the fixture is a sensor.

Synopses:

    1.  `sensor` = |Fixture:isSensor|()

Variants:

    1.  `sensor` = |Fixture:isSensor|()

        See function description

        returns:

            `sensor`: <boolean>

                If the fixture is a sensor.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Fixture:rayCast*
|Fixture:rayCast|

Casts a ray against the shape of the fixture and returns the surface normal
vector and the line position where the ray hit. If the ray missed the shape,
nil will be returned.

The ray starts on the first point of the input line and goes towards the second
point of the line. The fourth argument is the maximum distance the ray is going
to travel as a scale factor of the input line length.

The childIndex parameter is used to specify which child of a parent shape, such
as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the
first edge on the chain. Ray casting a parent shape will only test the child
specified so if you want to test every shape of the parent, you must loop
through all of its children.

The world position of the impact can be calculated by multiplying the line
vector with the third return value and adding it to the line starting point.

hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction

Synopses:

    1.  `x`, `y`, `fraction` = |Fixture:rayCast|( `x1`, `y1`, `x2`,
        `y1`, `maxFraction`, `childIndex` )

Variants:

    1.  `x`, `y`, `fraction` = |Fixture:rayCast|( `x1`, `y1`, `x2`,
        `y1`, `maxFraction`, `childIndex` )

        See function description

        returns:

            `x`: <number>

                The x position where the ray intersects with the shape.

            `y`: <number>

                The y position where the ray intersects with the shape.

            `fraction`: <number>

                The position on the input vector where the intersection
                happened as a number from 0 to 1.

        arguments:

            `x1`: <number>

                The x position of the ray starting point.

            `y1`: <number>

                The y position of the ray starting point.

            `x2`: <number>

                The x position of the ray end point.

            `y1`: <number>

                The y position of the ray end point.

            `maxFraction`: <number>

                The maximum distance the ray is going to travel as a number
                from 0 to 1.

            `childIndex`: <number>

                The index of the child the ray gets cast against.

-------------------------------------------------------------------------------
                                                     *love-Fixture:setCategory*
|Fixture:setCategory|

Sets the categories the fixture belongs to. There can be up to 16 categories
represented as a number from 1 to 16.

Synopses:

    1.  |Fixture:setCategory|( `category1`, `category2`, `...` )

Variants:

    1.  |Fixture:setCategory|( `category1`, `category2`, `...` )

        See function description

        returns:

            None

        arguments:

            `category1`: <number>

                The first category.

            `category2`: <number>

                The second category.

            `...`: <number>

                Additional categories.

-------------------------------------------------------------------------------
                                                      *love-Fixture:setDensity*
|Fixture:setDensity|

Sets the density of the fixture. Call Body:resetMassData if this needs to take
effect immediately.

Synopses:

    1.  |Fixture:setDensity|( `density` )

Variants:

    1.  |Fixture:setDensity|( `density` )

        See function description

        returns:

            None

        arguments:

            `density`: <number>

                The fixture density in kilograms per square meter.

-------------------------------------------------------------------------------
                                                   *love-Fixture:setFilterData*
|Fixture:setFilterData|

Sets the filter data of the fixture.

Groups, categories, and mask can be used to define the collision behaviour of
the fixture.

If two fixtures are in the same group they either always collide if the group
is positive, or never collide if it's negative. If the group is zero or they do
not match, then the contact filter checks if the fixtures select a category of
the other fixture with their masks. The fixtures do not collide if that's not
the case. If they do have each other's categories selected, the return value of
the custom contact filter will be used. They always collide if none was set.

There can be up to 16 categories. Categories and masks are encoded as the bits
of a 16-bit integer.

Synopses:

    1.  |Fixture:setFilterData|( `categories`, `mask`, `group` )

Variants:

    1.  |Fixture:setFilterData|( `categories`, `mask`, `group` )

        See function description

        returns:

            None

        arguments:

            `categories`: <number>

                The categories as an integer from 0 to 65535.

            `mask`: <number>

                The mask as an integer from 0 to 65535.

            `group`: <number>

                The group as an integer from -32768 to 32767.

-------------------------------------------------------------------------------
                                                     *love-Fixture:setFriction*
|Fixture:setFriction|

Sets the friction of the fixture.

Synopses:

    1.  |Fixture:setFriction|( `friction` )

Variants:

    1.  |Fixture:setFriction|( `friction` )

        See function description

        returns:

            None

        arguments:

            `friction`: <number>

                The fixture friction.

-------------------------------------------------------------------------------
                                                   *love-Fixture:setGroupIndex*
|Fixture:setGroupIndex|

Sets the group the fixture belongs to. Fixtures with the same group will always
collide if the group is positive or never collide if it's negative. The group
zero means no group.

The groups range from -32768 to 32767.

Synopses:

    1.  |Fixture:setGroupIndex|( `group` )

Variants:

    1.  |Fixture:setGroupIndex|( `group` )

        See function description

        returns:

            None

        arguments:

            `group`: <number>

                The group as an integer from -32768 to 32767.

-------------------------------------------------------------------------------
                                                         *love-Fixture:setMask*
|Fixture:setMask|

Sets the category mask of the fixture. There can be up to 16 categories
represented as a number from 1 to 16.

This fixture will collide with the fixtures that are in the selected categories
if the other fixture also has a category of this fixture selected.

Synopses:

    1.  |Fixture:setMask|( `mask1`, `mask2`, `...` )

Variants:

    1.  |Fixture:setMask|( `mask1`, `mask2`, `...` )

        See function description

        returns:

            None

        arguments:

            `mask1`: <number>

                The first category.

            `mask2`: <number>

                The second category.

            `...`: <number>

                Additional categories.

-------------------------------------------------------------------------------
                                                  *love-Fixture:setRestitution*
|Fixture:setRestitution|

Sets the restitution of the fixture.

Synopses:

    1.  |Fixture:setRestitution|( `restitution` )

Variants:

    1.  |Fixture:setRestitution|( `restitution` )

        See function description

        returns:

            None

        arguments:

            `restitution`: <number>

                The fixture restitution.

-------------------------------------------------------------------------------
                                                       *love-Fixture:setSensor*
|Fixture:setSensor|

Sets whether the fixture should act as a sensor.

Sensor do not produce collisions responses, but the begin and end callbacks
will still be called for this fixture.

Synopses:

    1.  |Fixture:setSensor|( `sensor` )

Variants:

    1.  |Fixture:setSensor|( `sensor` )

        See function description

        returns:

            None

        arguments:

            `sensor`: <boolean>

                The sensor status.

-------------------------------------------------------------------------------
                                                     *love-Fixture:setUserData*
|Fixture:setUserData|

Associates a Lua value with the fixture.

Use this function in one thread only.

Synopses:

    1.  |Fixture:setUserData|( `value` )

Variants:

    1.  |Fixture:setUserData|( `value` )

        See function description

        returns:

            None

        arguments:

            `value`: <any>

                The Lua value associated with the fixture.

-------------------------------------------------------------------------------
                                                       *love-Fixture:testPoint*
|Fixture:testPoint|

Checks if a point is inside the shape of the fixture.

Synopses:

    1.  `isInside` = |Fixture:testPoint|( `x`, `y` )

Variants:

    1.  `isInside` = |Fixture:testPoint|( `x`, `y` )

        See function description

        returns:

            `isInside`: <boolean>

                True if the point is inside or false if it is outside.

        arguments:

            `x`: <number>

                The x position of the point.

            `y`: <number>

                The y position of the point.

-------------------------------------------------------------------------------
                                                           *love-FrictionJoint*
|FrictionJoint|

A FrictionJoint applies friction to a body.

                                              *love-FrictionJoint-constructors*
    constructors:

        |newFrictionJoint|                |love-newFrictionJoint|

                                                *love-FrictionJoint-supertypes*
    supertypes:

        |Object|                          |love-Object|
        |Joint|                           |love-Joint|

                                                  *love-FrictionJoint-subtypes*
    subtypes:

        None

                                                 *love-FrictionJoint-functions*
    functions:

        |getMaxForce|                     |love-FrictionJoint:getMaxForce|
        |getMaxTorque|                    |love-FrictionJoint:getMaxTorque|
        |setMaxForce|                     |love-FrictionJoint:setMaxForce|
        |setMaxTorque|                    |love-FrictionJoint:setMaxTorque|

-------------------------------------------------------------------------------
                                               *love-FrictionJoint:getMaxForce*
|FrictionJoint:getMaxForce|

Gets the maximum friction force in Newtons.

Synopses:

    1.  `force` = |FrictionJoint:getMaxForce|()

Variants:

    1.  `force` = |FrictionJoint:getMaxForce|()

        See function description

        returns:

            `force`: <number>

                Maximum force in Newtons.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-FrictionJoint:getMaxTorque*
|FrictionJoint:getMaxTorque|

Gets the maximum friction torque in Newton-meters.

Synopses:

    1.  `torque` = |FrictionJoint:getMaxTorque|()

Variants:

    1.  `torque` = |FrictionJoint:getMaxTorque|()

        See function description

        returns:

            `torque`: <number>

                Maximum torque in Newton-meters.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-FrictionJoint:setMaxForce*
|FrictionJoint:setMaxForce|

Sets the maximum friction force in Newtons.

Synopses:

    1.  |FrictionJoint:setMaxForce|( `maxForce` )

Variants:

    1.  |FrictionJoint:setMaxForce|( `maxForce` )

        See function description

        returns:

            None

        arguments:

            `maxForce`: <number>

                Max force in Newtons.

-------------------------------------------------------------------------------
                                              *love-FrictionJoint:setMaxTorque*
|FrictionJoint:setMaxTorque|

Sets the maximum friction torque in Newton-meters.

Synopses:

    1.  |FrictionJoint:setMaxTorque|( `torque` )

Variants:

    1.  |FrictionJoint:setMaxTorque|( `torque` )

        See function description

        returns:

            None

        arguments:

            `torque`: <number>

                Maximum torque in Newton-meters.

-------------------------------------------------------------------------------
                                                               *love-GearJoint*
|GearJoint|

Keeps bodies together in such a way that they act like gears.

                                                  *love-GearJoint-constructors*
    constructors:

        |newGearJoint|                    |love-newGearJoint|

                                                    *love-GearJoint-supertypes*
    supertypes:

        |Object|                          |love-Object|
        |Joint|                           |love-Joint|

                                                      *love-GearJoint-subtypes*
    subtypes:

        None

                                                     *love-GearJoint-functions*
    functions:

        |getJoints|                       |love-GearJoint:getJoints|
        |getRatio|                        |love-GearJoint:getRatio|
        |setRatio|                        |love-GearJoint:setRatio|

-------------------------------------------------------------------------------
                                                     *love-GearJoint:getJoints*
|GearJoint:getJoints|

Get the Joints connected by this GearJoint.

Synopses:

    1.  `joint1`, `joint2` = |GearJoint:getJoints|()

Variants:

    1.  `joint1`, `joint2` = |GearJoint:getJoints|()

        See function description

        returns:

            `joint1`: <Joint>

                The first connected Joint.

            `joint2`: <Joint>

                The second connected Joint.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-GearJoint:getRatio*
|GearJoint:getRatio|

Get the ratio of a gear joint.

Synopses:

    1.  `ratio` = |GearJoint:getRatio|()

Variants:

    1.  `ratio` = |GearJoint:getRatio|()

        See function description

        returns:

            `ratio`: <number>

                The ratio of the joint.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-GearJoint:setRatio*
|GearJoint:setRatio|

Set the ratio of a gear joint.

Synopses:

    1.  |GearJoint:setRatio|( `ratio` )

Variants:

    1.  |GearJoint:setRatio|( `ratio` )

        See function description

        returns:

            None

        arguments:

            `ratio`: <number>

                The new ratio of the joint.

-------------------------------------------------------------------------------
                                                                   *love-Joint*
|Joint|

Attach multiple bodies together to interact in unique ways.

                                                      *love-Joint-constructors*
    constructors:

        None

                                                        *love-Joint-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                          *love-Joint-subtypes*
    subtypes:

        |DistanceJoint|                   |love-DistanceJoint|
        |FrictionJoint|                   |love-FrictionJoint|
        |GearJoint|                       |love-GearJoint|
        |MotorJoint|                      |love-MotorJoint|
        |MouseJoint|                      |love-MouseJoint|
        |PrismaticJoint|                  |love-PrismaticJoint|
        |PulleyJoint|                     |love-PulleyJoint|
        |RevoluteJoint|                   |love-RevoluteJoint|
        |RopeJoint|                       |love-RopeJoint|
        |WeldJoint|                       |love-WeldJoint|
        |WheelJoint|                      |love-WheelJoint|

                                                         *love-Joint-functions*
    functions:

        |destroy|                         |love-Joint:destroy|
        |getAnchors|                      |love-Joint:getAnchors|
        |getBodies|                       |love-Joint:getBodies|
        |getCollideConnected|             |love-Joint:getCollideConnected|
        |getReactionForce|                |love-Joint:getReactionForce|
        |getReactionTorque|               |love-Joint:getReactionTorque|
        |getType|                         |love-Joint:getType|
        |getUserData|                     |love-Joint:getUserData|
        |isDestroyed|                     |love-Joint:isDestroyed|
        |setUserData|                     |love-Joint:setUserData|

-------------------------------------------------------------------------------
                                                           *love-Joint:destroy*
|Joint:destroy|

Explicitly destroys the Joint. When you don't have time to wait for garbage
collection, this function may be used to free the object immediately, but note
that an error will occur if you attempt to use the object after calling this
function.

Synopses:

    1.  |Joint:destroy|()

Variants:

    1.  |Joint:destroy|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Joint:getAnchors*
|Joint:getAnchors|

Get the anchor points of the joint.

Synopses:

    1.  `x1`, `y1`, `x2`, `y2` = |Joint:getAnchors|()

Variants:

    1.  `x1`, `y1`, `x2`, `y2` = |Joint:getAnchors|()

        See function description

        returns:

            `x1`: <number>

                The x component of the anchor on Body 1.

            `y1`: <number>

                The y component of the anchor on Body 1.

            `x2`: <number>

                The x component of the anchor on Body 2.

            `y2`: <number>

                The y component of the anchor on Body 2.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Joint:getBodies*
|Joint:getBodies|

Gets the bodies that the Joint is attached to.

Synopses:

    1.  `bodyA`, `bodyB` = |Joint:getBodies|()

Variants:

    1.  `bodyA`, `bodyB` = |Joint:getBodies|()

        See function description

        returns:

            `bodyA`: <Body>

                The first Body.

            `bodyB`: <Body>

                The second Body.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-Joint:getCollideConnected*
|Joint:getCollideConnected|

Gets whether the connected Bodies collide.

Synopses:

    1.  `c` = |Joint:getCollideConnected|()

Variants:

    1.  `c` = |Joint:getCollideConnected|()

        See function description

        returns:

            `c`: <boolean>

                True if they collide, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Joint:getReactionForce*
|Joint:getReactionForce|

Gets the reaction force on Body 2 at the joint anchor.

Synopses:

    1.  `x`, `y` = |Joint:getReactionForce|()

Variants:

    1.  `x`, `y` = |Joint:getReactionForce|()

        See function description

        returns:

            `x`: <number>

                The x component of the force.

            `y`: <number>

                The y component of the force.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-Joint:getReactionTorque*
|Joint:getReactionTorque|

Returns the reaction torque on the second body.

Synopses:

    1.  `torque` = |Joint:getReactionTorque|( `invdt` )

Variants:

    1.  `torque` = |Joint:getReactionTorque|( `invdt` )

        See function description

        returns:

            `torque`: <number>

                The reaction torque on the second body.

        arguments:

            `invdt`: <number>

                How long the force applies. Usually the inverse time step or
                1/dt.

-------------------------------------------------------------------------------
                                                           *love-Joint:getType*
|Joint:getType|

Gets a string representing the type.

Synopses:

    1.  `type` = |Joint:getType|()

Variants:

    1.  `type` = |Joint:getType|()

        See function description

        returns:

            `type`: <JointType>

                A string with the name of the Joint type.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Joint:getUserData*
|Joint:getUserData|

Returns the Lua value associated with this Joint.

Synopses:

    1.  `value` = |Joint:getUserData|()

Variants:

    1.  `value` = |Joint:getUserData|()

        See function description

        returns:

            `value`: <any>

                The Lua value associated with the Joint.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Joint:isDestroyed*
|Joint:isDestroyed|

Gets whether the Joint is destroyed. Destroyed joints cannot be used.

Synopses:

    1.  `destroyed` = |Joint:isDestroyed|()

Variants:

    1.  `destroyed` = |Joint:isDestroyed|()

        See function description

        returns:

            `destroyed`: <boolean>

                Whether the Joint is destroyed.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Joint:setUserData*
|Joint:setUserData|

Associates a Lua value with the Joint.

To delete the reference, explicitly pass nil.

Synopses:

    1.  |Joint:setUserData|( `value` )

Variants:

    1.  |Joint:setUserData|( `value` )

        See function description

        returns:

            None

        arguments:

            `value`: <any>

                The Lua value to associate with the Joint.

-------------------------------------------------------------------------------
                                                              *love-MotorJoint*
|MotorJoint|

Controls the relative motion between two Bodies. Position and rotation offsets
can be specified, as well as the maximum motor force and torque that will be
applied to reach the target offsets.

                                                 *love-MotorJoint-constructors*
    constructors:

        |newMotorJoint|                   |love-newMotorJoint|

                                                   *love-MotorJoint-supertypes*
    supertypes:

        |Object|                          |love-Object|
        |Joint|                           |love-Joint|

                                                     *love-MotorJoint-subtypes*
    subtypes:

        None

                                                    *love-MotorJoint-functions*
    functions:

        |getAngularOffset|                |love-MotorJoint:getAngularOffset|
        |getLinearOffset|                 |love-MotorJoint:getLinearOffset|
        |setAngularOffset|                |love-MotorJoint:setAngularOffset|
        |setLinearOffset|                 |love-MotorJoint:setLinearOffset|

-------------------------------------------------------------------------------
                                             *love-MotorJoint:getAngularOffset*
|MotorJoint:getAngularOffset|

Gets the target angular offset between the two Bodies the Joint is attached to.

Synopses:

    1.  `angularoffset` = |MotorJoint:getAngularOffset|()

Variants:

    1.  `angularoffset` = |MotorJoint:getAngularOffset|()

        See function description

        returns:

            `angularoffset`: <number>

                The target angular offset in radians: the second body's angle
                minus the first body's angle.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-MotorJoint:getLinearOffset*
|MotorJoint:getLinearOffset|

Gets the target linear offset between the two Bodies the Joint is attached to.

Synopses:

    1.  `x`, `y` = |MotorJoint:getLinearOffset|()

Variants:

    1.  `x`, `y` = |MotorJoint:getLinearOffset|()

        See function description

        returns:

            `x`: <number>

                The x component of the target linear offset, relative to the
                first Body.

            `y`: <number>

                The y component of the target linear offset, relative to the
                first Body.

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-MotorJoint:setAngularOffset*
|MotorJoint:setAngularOffset|

Sets the target angluar offset between the two Bodies the Joint is attached to.

Synopses:

    1.  |MotorJoint:setAngularOffset|( `angularoffset` )

Variants:

    1.  |MotorJoint:setAngularOffset|( `angularoffset` )

        See function description

        returns:

            None

        arguments:

            `angularoffset`: <number>

                The target angular offset in radians: the second body's angle
                minus the first body's angle.

-------------------------------------------------------------------------------
                                              *love-MotorJoint:setLinearOffset*
|MotorJoint:setLinearOffset|

Sets the target linear offset between the two Bodies the Joint is attached to.

Synopses:

    1.  |MotorJoint:setLinearOffset|( `x`, `y` )

Variants:

    1.  |MotorJoint:setLinearOffset|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The x component of the target linear offset, relative to the
                first Body.

            `y`: <number>

                The y component of the target linear offset, relative to the
                first Body.

-------------------------------------------------------------------------------
                                                              *love-MouseJoint*
|MouseJoint|

For controlling objects with the mouse.

                                                 *love-MouseJoint-constructors*
    constructors:

        |newMouseJoint|                   |love-newMouseJoint|

                                                   *love-MouseJoint-supertypes*
    supertypes:

        |Object|                          |love-Object|
        |Joint|                           |love-Joint|

                                                     *love-MouseJoint-subtypes*
    subtypes:

        None

                                                    *love-MouseJoint-functions*
    functions:

        |getDampingRatio|                 |love-MouseJoint:getDampingRatio|
        |getFrequency|                    |love-MouseJoint:getFrequency|
        |getMaxForce|                     |love-MouseJoint:getMaxForce|
        |getTarget|                       |love-MouseJoint:getTarget|
        |setDampingRatio|                 |love-MouseJoint:setDampingRatio|
        |setFrequency|                    |love-MouseJoint:setFrequency|
        |setMaxForce|                     |love-MouseJoint:setMaxForce|
        |setTarget|                       |love-MouseJoint:setTarget|

-------------------------------------------------------------------------------
                                              *love-MouseJoint:getDampingRatio*
|MouseJoint:getDampingRatio|

Returns the damping ratio.

Synopses:

    1.  `ratio` = |MouseJoint:getDampingRatio|()

Variants:

    1.  `ratio` = |MouseJoint:getDampingRatio|()

        See function description

        returns:

            `ratio`: <number>

                The new damping ratio.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-MouseJoint:getFrequency*
|MouseJoint:getFrequency|

Returns the frequency.

Synopses:

    1.  `freq` = |MouseJoint:getFrequency|()

Variants:

    1.  `freq` = |MouseJoint:getFrequency|()

        See function description

        returns:

            `freq`: <number>

                The frequency in hertz.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-MouseJoint:getMaxForce*
|MouseJoint:getMaxForce|

Gets the highest allowed force.

Synopses:

    1.  `f` = |MouseJoint:getMaxForce|()

Variants:

    1.  `f` = |MouseJoint:getMaxForce|()

        See function description

        returns:

            `f`: <number>

                The max allowed force.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-MouseJoint:getTarget*
|MouseJoint:getTarget|

Gets the target point.

Synopses:

    1.  `x`, `y` = |MouseJoint:getTarget|()

Variants:

    1.  `x`, `y` = |MouseJoint:getTarget|()

        See function description

        returns:

            `x`: <number>

                The x component of the target.

            `y`: <number>

                The x component of the target.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-MouseJoint:setDampingRatio*
|MouseJoint:setDampingRatio|

Sets a new damping ratio.

Synopses:

    1.  |MouseJoint:setDampingRatio|( `ratio` )

Variants:

    1.  |MouseJoint:setDampingRatio|( `ratio` )

        See function description

        returns:

            None

        arguments:

            `ratio`: <number>

                The new damping ratio.

-------------------------------------------------------------------------------
                                                 *love-MouseJoint:setFrequency*
|MouseJoint:setFrequency|

Sets a new frequency.

Synopses:

    1.  |MouseJoint:setFrequency|( `freq` )

Variants:

    1.  |MouseJoint:setFrequency|( `freq` )

        See function description

        returns:

            None

        arguments:

            `freq`: <number>

                The new frequency in hertz.

-------------------------------------------------------------------------------
                                                  *love-MouseJoint:setMaxForce*
|MouseJoint:setMaxForce|

Sets the highest allowed force.

Synopses:

    1.  |MouseJoint:setMaxForce|( `f` )

Variants:

    1.  |MouseJoint:setMaxForce|( `f` )

        See function description

        returns:

            None

        arguments:

            `f`: <number>

                The max allowed force.

-------------------------------------------------------------------------------
                                                    *love-MouseJoint:setTarget*
|MouseJoint:setTarget|

Sets the target point.

Synopses:

    1.  |MouseJoint:setTarget|( `x`, `y` )

Variants:

    1.  |MouseJoint:setTarget|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The x component of the target.

            `y`: <number>

                The y component of the target.

-------------------------------------------------------------------------------
                                                            *love-PolygonShape*
|PolygonShape|

Polygon is a convex polygon with up to 8 sides.

                                               *love-PolygonShape-constructors*
    constructors:

        |newPolygonShape|                 |love-newPolygonShape|
        |newRectangleShape|               |love-newRectangleShape|

                                                 *love-PolygonShape-supertypes*
    supertypes:

        |Shape|                           |love-Shape|
        |Object|                          |love-Object|

                                                   *love-PolygonShape-subtypes*
    subtypes:

        None

                                                  *love-PolygonShape-functions*
    functions:

        |getPoints|                       |love-PolygonShape:getPoints|

-------------------------------------------------------------------------------
                                                  *love-PolygonShape:getPoints*
|PolygonShape:getPoints|

Get the local coordinates of the polygon's vertices.

This function has a variable number of return values. It can be used in a
nested fashion with love.graphics.polygon.

This function may have up to 16 return values, since it returns two values for
each vertex in the polygon. In other words, it can return the coordinates of up
to 8 points.

Synopses:

    1.  `x1`, `y1`, `x2`, `y2`, `...` = |PolygonShape:getPoints|()

Variants:

    1.  `x1`, `y1`, `x2`, `y2`, `...` = |PolygonShape:getPoints|()

        See function description

        returns:

            `x1`: <number>

                The x component of the first vertex.

            `y1`: <number>

                The y component of the first vertex.

            `x2`: <number>

                The x component of the second vertex.

            `y2`: <number>

                The y component of the second vertex.

            `...`: <number>

                Additional x and y values.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-PrismaticJoint*
|PrismaticJoint|

Restricts relative motion between Bodies to one shared axis.

                                             *love-PrismaticJoint-constructors*
    constructors:

        |newPrismaticJoint|               |love-newPrismaticJoint|

                                               *love-PrismaticJoint-supertypes*
    supertypes:

        |Object|                          |love-Object|
        |Joint|                           |love-Joint|

                                                 *love-PrismaticJoint-subtypes*
    subtypes:

        None

                                                *love-PrismaticJoint-functions*
    functions:

        |getAxis|                         |love-PrismaticJoint:getAxis|
        |getJointSpeed|                   |love-PrismaticJoint:getJointSpeed|
        |getJointTranslation|             |love-PrismaticJoint:getJointTransl-|
        |getLimits|                       |love-PrismaticJoint:getLimits|
        |getLowerLimit|                   |love-PrismaticJoint:getLowerLimit|
        |getMaxMotorForce|                |love-PrismaticJoint:getMaxMotorFor-|
        |getMotorForce|                   |love-PrismaticJoint:getMotorForce|
        |getMotorSpeed|                   |love-PrismaticJoint:getMotorSpeed|
        |getUpperLimit|                   |love-PrismaticJoint:getUpperLimit|
        |hasLimitsEnabled|                |love-PrismaticJoint:hasLimitsEnabl-|
        |isMotorEnabled|                  |love-PrismaticJoint:isMotorEnabled|
        |setLimits|                       |love-PrismaticJoint:setLimits|
        |setLimitsEnabled|                |love-PrismaticJoint:setLimitsEnabl-|
        |setLowerLimit|                   |love-PrismaticJoint:setLowerLimit|
        |setMaxMotorForce|                |love-PrismaticJoint:setMaxMotorFor-|
        |setMotorEnabled|                 |love-PrismaticJoint:setMotorEnabled|
        |setMotorSpeed|                   |love-PrismaticJoint:setMotorSpeed|
        |setUpperLimit|                   |love-PrismaticJoint:setUpperLimit|

-------------------------------------------------------------------------------
                                                  *love-PrismaticJoint:getAxis*
|PrismaticJoint:getAxis|

Gets the world-space axis vector of the Prismatic Joint.

Synopses:

    1.  `x`, `y` = |PrismaticJoint:getAxis|()

Variants:

    1.  `x`, `y` = |PrismaticJoint:getAxis|()

        See function description

        returns:

            `x`: <number>

                The x-axis coordinate of the world-space axis vector.

            `y`: <number>

                The y-axis coordinate of the world-space axis vector.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-PrismaticJoint:getJointSpeed*
|PrismaticJoint:getJointSpeed|

Get the current joint angle speed.

Synopses:

    1.  `s` = |PrismaticJoint:getJointSpeed|()

Variants:

    1.  `s` = |PrismaticJoint:getJointSpeed|()

        See function description

        returns:

            `s`: <number>

                Joint angle speed in meters/second.

        arguments:

            None

-------------------------------------------------------------------------------
                                      *love-PrismaticJoint:getJointTranslation*
|PrismaticJoint:getJointTranslation|

Get the current joint translation.

Synopses:

    1.  `t` = |PrismaticJoint:getJointTranslation|()

Variants:

    1.  `t` = |PrismaticJoint:getJointTranslation|()

        See function description

        returns:

            `t`: <number>

                Joint translation, usually in meters.

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-PrismaticJoint:getLimits*
|PrismaticJoint:getLimits|

Gets the joint limits.

Synopses:

    1.  `lower`, `upper` = |PrismaticJoint:getLimits|()

Variants:

    1.  `lower`, `upper` = |PrismaticJoint:getLimits|()

        See function description

        returns:

            `lower`: <number>

                The lower limit, usually in meters.

            `upper`: <number>

                The upper limit, usually in meters.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-PrismaticJoint:getLowerLimit*
|PrismaticJoint:getLowerLimit|

Gets the lower limit.

Synopses:

    1.  `lower` = |PrismaticJoint:getLowerLimit|()

Variants:

    1.  `lower` = |PrismaticJoint:getLowerLimit|()

        See function description

        returns:

            `lower`: <number>

                The lower limit, usually in meters.

        arguments:

            None

-------------------------------------------------------------------------------
                                         *love-PrismaticJoint:getMaxMotorForce*
|PrismaticJoint:getMaxMotorForce|

Gets the maximum motor force.

Synopses:

    1.  `f` = |PrismaticJoint:getMaxMotorForce|()

Variants:

    1.  `f` = |PrismaticJoint:getMaxMotorForce|()

        See function description

        returns:

            `f`: <number>

                The maximum motor force, usually in N.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-PrismaticJoint:getMotorForce*
|PrismaticJoint:getMotorForce|

Get the current motor force.

Synopses:

    1.  `f` = |PrismaticJoint:getMotorForce|()

Variants:

    1.  `f` = |PrismaticJoint:getMotorForce|()

        See function description

        returns:

            `f`: <number>

                The current motor force, usually in N.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-PrismaticJoint:getMotorSpeed*
|PrismaticJoint:getMotorSpeed|

Gets the motor speed.

Synopses:

    1.  `s` = |PrismaticJoint:getMotorSpeed|()

Variants:

    1.  `s` = |PrismaticJoint:getMotorSpeed|()

        See function description

        returns:

            `s`: <number>

                The motor speed, usually in meters per second.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-PrismaticJoint:getUpperLimit*
|PrismaticJoint:getUpperLimit|

Gets the upper limit.

Synopses:

    1.  `upper` = |PrismaticJoint:getUpperLimit|()

Variants:

    1.  `upper` = |PrismaticJoint:getUpperLimit|()

        See function description

        returns:

            `upper`: <number>

                The upper limit, usually in meters.

        arguments:

            None

-------------------------------------------------------------------------------
                                         *love-PrismaticJoint:hasLimitsEnabled*
|PrismaticJoint:hasLimitsEnabled|

Checks whether the limits are enabled.

Synopses:

    1.  `enabled` = |PrismaticJoint:hasLimitsEnabled|()

Variants:

    1.  `enabled` = |PrismaticJoint:hasLimitsEnabled|()

        See function description

        returns:

            `enabled`: <boolean>

                True if enabled, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                           *love-PrismaticJoint:isMotorEnabled*
|PrismaticJoint:isMotorEnabled|

Checks whether the motor is enabled.

Synopses:

    1.  `enabled` = |PrismaticJoint:isMotorEnabled|()

Variants:

    1.  `enabled` = |PrismaticJoint:isMotorEnabled|()

        See function description

        returns:

            `enabled`: <boolean>

                True if enabled, false if disabled.

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-PrismaticJoint:setLimits*
|PrismaticJoint:setLimits|

Sets the limits.

Synopses:

    1.  |PrismaticJoint:setLimits|( `lower`, `upper` )

Variants:

    1.  |PrismaticJoint:setLimits|( `lower`, `upper` )

        See function description

        returns:

            None

        arguments:

            `lower`: <number>

                The lower limit, usually in meters.

            `upper`: <number>

                The upper limit, usually in meters.

-------------------------------------------------------------------------------
                                         *love-PrismaticJoint:setLimitsEnabled*
|PrismaticJoint:setLimitsEnabled|

Enables or disables the limits of the joint.

Synopses:

    1.  |PrismaticJoint:setLimitsEnabled|( `enable` )

Variants:

    1.  |PrismaticJoint:setLimitsEnabled|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: <boolean>

                True to enable, false to disable.

-------------------------------------------------------------------------------
                                            *love-PrismaticJoint:setLowerLimit*
|PrismaticJoint:setLowerLimit|

Sets the lower limit.

Synopses:

    1.  |PrismaticJoint:setLowerLimit|( `lower` )

Variants:

    1.  |PrismaticJoint:setLowerLimit|( `lower` )

        See function description

        returns:

            None

        arguments:

            `lower`: <number>

                The lower limit, usually in meters.

-------------------------------------------------------------------------------
                                         *love-PrismaticJoint:setMaxMotorForce*
|PrismaticJoint:setMaxMotorForce|

Set the maximum motor force.

Synopses:

    1.  |PrismaticJoint:setMaxMotorForce|( `f` )

Variants:

    1.  |PrismaticJoint:setMaxMotorForce|( `f` )

        See function description

        returns:

            None

        arguments:

            `f`: <number>

                The maximum motor force, usually in N.

-------------------------------------------------------------------------------
                                          *love-PrismaticJoint:setMotorEnabled*
|PrismaticJoint:setMotorEnabled|

Starts or stops the joint motor.

Synopses:

    1.  |PrismaticJoint:setMotorEnabled|( `enable` )

Variants:

    1.  |PrismaticJoint:setMotorEnabled|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: <boolean>

                True to enable, false to disable.

-------------------------------------------------------------------------------
                                            *love-PrismaticJoint:setMotorSpeed*
|PrismaticJoint:setMotorSpeed|

Sets the motor speed.

Synopses:

    1.  |PrismaticJoint:setMotorSpeed|( `s` )

Variants:

    1.  |PrismaticJoint:setMotorSpeed|( `s` )

        See function description

        returns:

            None

        arguments:

            `s`: <number>

                The motor speed, usually in meters per second.

-------------------------------------------------------------------------------
                                            *love-PrismaticJoint:setUpperLimit*
|PrismaticJoint:setUpperLimit|

Sets the upper limit.

Synopses:

    1.  |PrismaticJoint:setUpperLimit|( `upper` )

Variants:

    1.  |PrismaticJoint:setUpperLimit|( `upper` )

        See function description

        returns:

            None

        arguments:

            `upper`: <number>

                The upper limit, usually in meters.

-------------------------------------------------------------------------------
                                                             *love-PulleyJoint*
|PulleyJoint|

Allows you to simulate bodies connected through pulleys.

                                                *love-PulleyJoint-constructors*
    constructors:

        |newPulleyJoint|                  |love-newPulleyJoint|

                                                  *love-PulleyJoint-supertypes*
    supertypes:

        |Object|                          |love-Object|
        |Joint|                           |love-Joint|

                                                    *love-PulleyJoint-subtypes*
    subtypes:

        None

                                                   *love-PulleyJoint-functions*
    functions:

        |getConstant|                     |love-PulleyJoint:getConstant|
        |getGroundAnchors|                |love-PulleyJoint:getGroundAnchors|
        |getLengthA|                      |love-PulleyJoint:getLengthA|
        |getLengthB|                      |love-PulleyJoint:getLengthB|
        |getMaxLengths|                   |love-PulleyJoint:getMaxLengths|
        |getRatio|                        |love-PulleyJoint:getRatio|
        |setConstant|                     |love-PulleyJoint:setConstant|
        |setMaxLengths|                   |love-PulleyJoint:setMaxLengths|
        |setRatio|                        |love-PulleyJoint:setRatio|

-------------------------------------------------------------------------------
                                                 *love-PulleyJoint:getConstant*
|PulleyJoint:getConstant|

Get the total length of the rope.

Synopses:

    1.  `length` = |PulleyJoint:getConstant|()

Variants:

    1.  `length` = |PulleyJoint:getConstant|()

        See function description

        returns:

            `length`: <number>

                The length of the rope in the joint.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-PulleyJoint:getGroundAnchors*
|PulleyJoint:getGroundAnchors|

Get the ground anchor positions in world coordinates.

Synopses:

    1.  `a1x`, `a1y`, `a2x`, `a2y` = |PulleyJoint:getGroundAnchors|()

Variants:

    1.  `a1x`, `a1y`, `a2x`, `a2y` = |PulleyJoint:getGroundAnchors|()

        See function description

        returns:

            `a1x`: <number>

                The x coordinate of the first anchor.

            `a1y`: <number>

                The y coordinate of the first anchor.

            `a2x`: <number>

                The x coordinate of the second anchor.

            `a2y`: <number>

                The y coordinate of the second anchor.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-PulleyJoint:getLengthA*
|PulleyJoint:getLengthA|

Get the current length of the rope segment attached to the first body.

Synopses:

    1.  `length` = |PulleyJoint:getLengthA|()

Variants:

    1.  `length` = |PulleyJoint:getLengthA|()

        See function description

        returns:

            `length`: <number>

                The length of the rope segment.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-PulleyJoint:getLengthB*
|PulleyJoint:getLengthB|

Get the current length of the rope segment attached to the second body.

Synopses:

    1.  `length` = |PulleyJoint:getLengthB|()

Variants:

    1.  `length` = |PulleyJoint:getLengthB|()

        See function description

        returns:

            `length`: <number>

                The length of the rope segment.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-PulleyJoint:getMaxLengths*
|PulleyJoint:getMaxLengths|

Get the maximum lengths of the rope segments.

Synopses:

    1.  `len1`, `len2` = |PulleyJoint:getMaxLengths|()

Variants:

    1.  `len1`, `len2` = |PulleyJoint:getMaxLengths|()

        See function description

        returns:

            `len1`: <number>

                The maximum length of the first rope segment.

            `len2`: <number>

                The maximum length of the second rope segment.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-PulleyJoint:getRatio*
|PulleyJoint:getRatio|

Get the pulley ratio.

Synopses:

    1.  `ratio` = |PulleyJoint:getRatio|()

Variants:

    1.  `ratio` = |PulleyJoint:getRatio|()

        See function description

        returns:

            `ratio`: <number>

                The pulley ratio of the joint.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-PulleyJoint:setConstant*
|PulleyJoint:setConstant|

Set the total length of the rope.

Setting a new length for the rope updates the maximum length values of the
joint.

Synopses:

    1.  |PulleyJoint:setConstant|( `length` )

Variants:

    1.  |PulleyJoint:setConstant|( `length` )

        See function description

        returns:

            None

        arguments:

            `length`: <number>

                The new length of the rope in the joint.

-------------------------------------------------------------------------------
                                               *love-PulleyJoint:setMaxLengths*
|PulleyJoint:setMaxLengths|

Set the maximum lengths of the rope segments.

The physics module also imposes maximum values for the rope segments. If the
parameters exceed these values, the maximum values are set instead of the
requested values.

Synopses:

    1.  |PulleyJoint:setMaxLengths|( `max1`, `max2` )

Variants:

    1.  |PulleyJoint:setMaxLengths|( `max1`, `max2` )

        See function description

        returns:

            None

        arguments:

            `max1`: <number>

                The new maximum length of the first segment.

            `max2`: <number>

                The new maximum length of the second segment.

-------------------------------------------------------------------------------
                                                    *love-PulleyJoint:setRatio*
|PulleyJoint:setRatio|

Set the pulley ratio.

Synopses:

    1.  |PulleyJoint:setRatio|( `ratio` )

Variants:

    1.  |PulleyJoint:setRatio|( `ratio` )

        See function description

        returns:

            None

        arguments:

            `ratio`: <number>

                The new pulley ratio of the joint.

-------------------------------------------------------------------------------
                                                           *love-RevoluteJoint*
|RevoluteJoint|

Allow two Bodies to revolve around a shared point.

                                              *love-RevoluteJoint-constructors*
    constructors:

        |newRevoluteJoint|                |love-newRevoluteJoint|

                                                *love-RevoluteJoint-supertypes*
    supertypes:

        |Object|                          |love-Object|
        |Joint|                           |love-Joint|

                                                  *love-RevoluteJoint-subtypes*
    subtypes:

        None

                                                 *love-RevoluteJoint-functions*
    functions:

        |setLimitsEnabled|                |love-RevoluteJoint:setLimitsEnabled|
        |setMotorEnabled|                 |love-RevoluteJoint:setMotorEnabled|
        |getJointAngle|                   |love-RevoluteJoint:getJointAngle|
        |getJointSpeed|                   |love-RevoluteJoint:getJointSpeed|
        |getLimits|                       |love-RevoluteJoint:getLimits|
        |getLowerLimit|                   |love-RevoluteJoint:getLowerLimit|
        |getMaxMotorTorque|               |love-RevoluteJoint:getMaxMotorTorq-|
        |getMotorSpeed|                   |love-RevoluteJoint:getMotorSpeed|
        |getMotorTorque|                  |love-RevoluteJoint:getMotorTorque|
        |getUpperLimit|                   |love-RevoluteJoint:getUpperLimit|
        |hasLimitsEnabled|                |love-RevoluteJoint:hasLimitsEnabled|
        |isMotorEnabled|                  |love-RevoluteJoint:isMotorEnabled|
        |setLimits|                       |love-RevoluteJoint:setLimits|
        |setLowerLimit|                   |love-RevoluteJoint:setLowerLimit|
        |setMaxMotorTorque|               |love-RevoluteJoint:setMaxMotorTorq-|
        |setMotorSpeed|                   |love-RevoluteJoint:setMotorSpeed|
        |setUpperLimit|                   |love-RevoluteJoint:setUpperLimit|

-------------------------------------------------------------------------------
                                          *love-RevoluteJoint:setLimitsEnabled*
|RevoluteJoint:setLimitsEnabled|

Enables or disables the joint limits.

Synopses:

    1.  |RevoluteJoint:setLimitsEnabled|( `enable` )

Variants:

    1.  |RevoluteJoint:setLimitsEnabled|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: <boolean>

                True to enable, false to disable.

-------------------------------------------------------------------------------
                                           *love-RevoluteJoint:setMotorEnabled*
|RevoluteJoint:setMotorEnabled|

Starts or stops the joint motor.

Synopses:

    1.  |RevoluteJoint:setMotorEnabled|( `enable` )

Variants:

    1.  |RevoluteJoint:setMotorEnabled|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: <boolean>

                True to enable, false to disable.

-------------------------------------------------------------------------------
                                             *love-RevoluteJoint:getJointAngle*
|RevoluteJoint:getJointAngle|

Get the current joint angle.

Synopses:

    1.  `angle` = |RevoluteJoint:getJointAngle|()

Variants:

    1.  `angle` = |RevoluteJoint:getJointAngle|()

        See function description

        returns:

            `angle`: <number>

                The joint angle in radians.

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-RevoluteJoint:getJointSpeed*
|RevoluteJoint:getJointSpeed|

Get the current joint angle speed.

Synopses:

    1.  `s` = |RevoluteJoint:getJointSpeed|()

Variants:

    1.  `s` = |RevoluteJoint:getJointSpeed|()

        See function description

        returns:

            `s`: <number>

                Joint angle speed in radians/second.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-RevoluteJoint:getLimits*
|RevoluteJoint:getLimits|

Gets the joint limits.

Synopses:

    1.  `lower`, `upper` = |RevoluteJoint:getLimits|()

Variants:

    1.  `lower`, `upper` = |RevoluteJoint:getLimits|()

        See function description

        returns:

            `lower`: <number>

                The lower limit, in radians.

            `upper`: <number>

                The upper limit, in radians.

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-RevoluteJoint:getLowerLimit*
|RevoluteJoint:getLowerLimit|

Gets the lower limit.

Synopses:

    1.  `lower` = |RevoluteJoint:getLowerLimit|()

Variants:

    1.  `lower` = |RevoluteJoint:getLowerLimit|()

        See function description

        returns:

            `lower`: <number>

                The lower limit, in radians.

        arguments:

            None

-------------------------------------------------------------------------------
                                         *love-RevoluteJoint:getMaxMotorTorque*
|RevoluteJoint:getMaxMotorTorque|

Gets the maximum motor force.

Synopses:

    1.  `f` = |RevoluteJoint:getMaxMotorTorque|()

Variants:

    1.  `f` = |RevoluteJoint:getMaxMotorTorque|()

        See function description

        returns:

            `f`: <number>

                The maximum motor force, in Nm.

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-RevoluteJoint:getMotorSpeed*
|RevoluteJoint:getMotorSpeed|

Gets the motor speed.

Synopses:

    1.  `s` = |RevoluteJoint:getMotorSpeed|()

Variants:

    1.  `s` = |RevoluteJoint:getMotorSpeed|()

        See function description

        returns:

            `s`: <number>

                The motor speed, radians per second.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-RevoluteJoint:getMotorTorque*
|RevoluteJoint:getMotorTorque|

Get the current motor force.

Synopses:

    1.  `f` = |RevoluteJoint:getMotorTorque|()

Variants:

    1.  `f` = |RevoluteJoint:getMotorTorque|()

        See function description

        returns:

            `f`: <number>

                The current motor force, in Nm.

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-RevoluteJoint:getUpperLimit*
|RevoluteJoint:getUpperLimit|

Gets the upper limit.

Synopses:

    1.  `upper` = |RevoluteJoint:getUpperLimit|()

Variants:

    1.  `upper` = |RevoluteJoint:getUpperLimit|()

        See function description

        returns:

            `upper`: <number>

                The upper limit, in radians.

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-RevoluteJoint:hasLimitsEnabled*
|RevoluteJoint:hasLimitsEnabled|

Checks whether limits are enabled.

Synopses:

    1.  `enabled` = |RevoluteJoint:hasLimitsEnabled|()

Variants:

    1.  `enabled` = |RevoluteJoint:hasLimitsEnabled|()

        See function description

        returns:

            `enabled`: <boolean>

                True if enabled, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-RevoluteJoint:isMotorEnabled*
|RevoluteJoint:isMotorEnabled|

Checks whether the motor is enabled.

Synopses:

    1.  `enabled` = |RevoluteJoint:isMotorEnabled|()

Variants:

    1.  `enabled` = |RevoluteJoint:isMotorEnabled|()

        See function description

        returns:

            `enabled`: <boolean>

                True if enabled, false if disabled.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-RevoluteJoint:setLimits*
|RevoluteJoint:setLimits|

Sets the limits.

Synopses:

    1.  |RevoluteJoint:setLimits|( `lower`, `upper` )

Variants:

    1.  |RevoluteJoint:setLimits|( `lower`, `upper` )

        See function description

        returns:

            None

        arguments:

            `lower`: <number>

                The lower limit, in radians.

            `upper`: <number>

                The upper limit, in radians.

-------------------------------------------------------------------------------
                                             *love-RevoluteJoint:setLowerLimit*
|RevoluteJoint:setLowerLimit|

Sets the lower limit.

Synopses:

    1.  |RevoluteJoint:setLowerLimit|( `lower` )

Variants:

    1.  |RevoluteJoint:setLowerLimit|( `lower` )

        See function description

        returns:

            None

        arguments:

            `lower`: <number>

                The lower limit, in radians.

-------------------------------------------------------------------------------
                                         *love-RevoluteJoint:setMaxMotorTorque*
|RevoluteJoint:setMaxMotorTorque|

Set the maximum motor force.

Synopses:

    1.  |RevoluteJoint:setMaxMotorTorque|( `f` )

Variants:

    1.  |RevoluteJoint:setMaxMotorTorque|( `f` )

        See function description

        returns:

            None

        arguments:

            `f`: <number>

                The maximum motor force, in Nm.

-------------------------------------------------------------------------------
                                             *love-RevoluteJoint:setMotorSpeed*
|RevoluteJoint:setMotorSpeed|

Sets the motor speed.

Synopses:

    1.  |RevoluteJoint:setMotorSpeed|( `s` )

Variants:

    1.  |RevoluteJoint:setMotorSpeed|( `s` )

        See function description

        returns:

            None

        arguments:

            `s`: <number>

                The motor speed, radians per second.

-------------------------------------------------------------------------------
                                             *love-RevoluteJoint:setUpperLimit*
|RevoluteJoint:setUpperLimit|

Sets the upper limit.

Synopses:

    1.  |RevoluteJoint:setUpperLimit|( `upper` )

Variants:

    1.  |RevoluteJoint:setUpperLimit|( `upper` )

        See function description

        returns:

            None

        arguments:

            `upper`: <number>

                The upper limit, in radians.

-------------------------------------------------------------------------------
                                                               *love-RopeJoint*
|RopeJoint|

The RopeJoint enforces a maximum distance between two points on two bodies. It
has no other effect.

                                                  *love-RopeJoint-constructors*
    constructors:

        |newRopeJoint|                    |love-newRopeJoint|

                                                    *love-RopeJoint-supertypes*
    supertypes:

        |Object|                          |love-Object|
        |Joint|                           |love-Joint|

                                                      *love-RopeJoint-subtypes*
    subtypes:

        None

                                                     *love-RopeJoint-functions*
    functions:

        |getMaxLength|                    |love-RopeJoint:getMaxLength|

-------------------------------------------------------------------------------
                                                  *love-RopeJoint:getMaxLength*
|RopeJoint:getMaxLength|

Gets the maximum length of a RopeJoint.

Synopses:

    1.  `maxLength` = |RopeJoint:getMaxLength|()

Variants:

    1.  `maxLength` = |RopeJoint:getMaxLength|()

        See function description

        returns:

            `maxLength`: <number>

                The maximum length of the RopeJoint.

        arguments:

            None

-------------------------------------------------------------------------------
                                                                   *love-Shape*
|Shape|

Shapes are solid 2d geometrical objects used in love.physics.

Shapes are attached to a Body via a Fixture. The Shape object is copied when
this happens. Shape position is relative to Body position.

                                                      *love-Shape-constructors*
    constructors:

        |newChainShape|                   |love-newChainShape|
        |newEdgeShape|                    |love-newEdgeShape|
        |newPolygonShape|                 |love-newPolygonShape|
        |newRectangleShape|               |love-newRectangleShape|

                                                        *love-Shape-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                          *love-Shape-subtypes*
    subtypes:

        |ChainShape|                      |love-ChainShape|
        |CircleShape|                     |love-CircleShape|
        |EdgeShape|                       |love-EdgeShape|
        |PolygonShape|                    |love-PolygonShape|

                                                         *love-Shape-functions*
    functions:

        |computeAABB|                     |love-Shape:computeAABB|
        |computeMass|                     |love-Shape:computeMass|
        |getChildCount|                   |love-Shape:getChildCount|
        |getRadius|                       |love-Shape:getRadius|
        |getType|                         |love-Shape:getType|
        |rayCast|                         |love-Shape:rayCast|
        |testPoint|                       |love-Shape:testPoint|

-------------------------------------------------------------------------------
                                                       *love-Shape:computeAABB*
|Shape:computeAABB|

Returns the points of the bounding box for the transformed shape.

Synopses:

    1.  `topLeftX`, `topLeftY`, `bottomRightX`, `bottomRightY` =
        |Shape:computeAABB|( `tx`, `ty`, `tr`, `childIndex` )

Variants:

    1.  `topLeftX`, `topLeftY`, `bottomRightX`, `bottomRightY` =
        |Shape:computeAABB|( `tx`, `ty`, `tr`, `childIndex` )

        See function description

        returns:

            `topLeftX`: <number>

                The x position of the top-left point.

            `topLeftY`: <number>

                The y position of the top-left point.

            `bottomRightX`: <number>

                The x position of the bottom-right point.

            `bottomRightY`: <number>

                The y position of the bottom-right point.

        arguments:

            `tx`: <number>

                The translation of the shape on the x-axis.

            `ty`: <number>

                The translation of the shape on the y-axis.

            `tr`: <number>

                The shape rotation.

            `childIndex`: <number>

                The index of the child to compute the bounding box of.

-------------------------------------------------------------------------------
                                                       *love-Shape:computeMass*
|Shape:computeMass|

Computes the mass properties for the shape with the specified density.

Synopses:

    1.  `x`, `y`, `mass`, `inertia` = |Shape:computeMass|( `density` )

Variants:

    1.  `x`, `y`, `mass`, `inertia` = |Shape:computeMass|( `density` )

        See function description

        returns:

            `x`: <number>

                The x postition of the center of mass.

            `y`: <number>

                The y postition of the center of mass.

            `mass`: <number>

                The mass of the shape.

            `inertia`: <number>

                The rotational inertia.

        arguments:

            `density`: <number>

                The shape density.

-------------------------------------------------------------------------------
                                                     *love-Shape:getChildCount*
|Shape:getChildCount|

Returns the number of children the shape has.

Synopses:

    1.  `count` = |Shape:getChildCount|()

Variants:

    1.  `count` = |Shape:getChildCount|()

        See function description

        returns:

            `count`: <number>

                The number of children.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Shape:getRadius*
|Shape:getRadius|

Gets the radius of the shape.

Synopses:

    1.  `radius` = |Shape:getRadius|()

Variants:

    1.  `radius` = |Shape:getRadius|()

        See function description

        returns:

            `radius`: <number>

                The radius of the shape.

        arguments:

            None

-------------------------------------------------------------------------------
                                                           *love-Shape:getType*
|Shape:getType|

Gets a string representing the Shape. This function can be useful for
conditional debug drawing.

Synopses:

    1.  `type` = |Shape:getType|()

Variants:

    1.  `type` = |Shape:getType|()

        See function description

        returns:

            `type`: <ShapeType>

                The type of the Shape.

        arguments:

            None

-------------------------------------------------------------------------------
                                                           *love-Shape:rayCast*
|Shape:rayCast|

Casts a ray against the shape and returns the surface normal vector and the
line position where the ray hit. If the ray missed the shape, nil will be
returned. The Shape can be transformed to get it into the desired position.

The ray starts on the first point of the input line and goes towards the second
point of the line. The fourth argument is the maximum distance the ray is going
to travel as a scale factor of the input line length.

The childIndex parameter is used to specify which child of a parent shape, such
as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the
first edge on the chain. Ray casting a parent shape will only test the child
specified so if you want to test every shape of the parent, you must loop
through all of its children.

The world position of the impact can be calculated by multiplying the line
vector with the third return value and adding it to the line starting point.

hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction

Synopses:

    1.  `xn`, `yn`, `fraction` = |Shape:rayCast|( `x1`, `y1`, `x2`,
        `y2`, `maxFraction`, `tx`, `ty`, `tr`, `childIndex` )

Variants:

    1.  `xn`, `yn`, `fraction` = |Shape:rayCast|( `x1`, `y1`, `x2`,
        `y2`, `maxFraction`, `tx`, `ty`, `tr`, `childIndex` )

        See function description

        returns:

            `xn`: <number>

                The x component of the normal vector of the edge where the ray
                hit the shape.

            `yn`: <number>

                The y component of the normal vector of the edge where the ray
                hit the shape.

            `fraction`: <number>

                The position on the input line where the intersection happened
                as a factor of the line length.

        arguments:

            `x1`: <number>

                The x position of the input line starting point.

            `y1`: <number>

                The y position of the input line starting point.

            `x2`: <number>

                The x position of the input line end point.

            `y2`: <number>

                The y position of the input line end point.

            `maxFraction`: <number>

                Ray length parameter.

            `tx`: <number>

                The translation of the shape on the x-axis.

            `ty`: <number>

                The translation of the shape on the y-axis.

            `tr`: <number>

                The shape rotation.

            `childIndex`: <number>

                The index of the child the ray gets cast against.

-------------------------------------------------------------------------------
                                                         *love-Shape:testPoint*
|Shape:testPoint|

Checks whether a point lies inside the shape. This is particularly useful for
mouse interaction with the shapes. By looping through all shapes and testing
the mouse position with this function, we can find which shapes the mouse
touches.

Synopses:

    1.  `hit` = |Shape:testPoint|( `x`, `y` )

Variants:

    1.  `hit` = |Shape:testPoint|( `x`, `y` )

        See function description

        returns:

            `hit`: <boolean>

                True if inside, false if outside

        arguments:

            `x`: <number>

                The x component of the point.

            `y`: <number>

                The y component of the point.

-------------------------------------------------------------------------------
                                                               *love-WeldJoint*
|WeldJoint|

A WeldJoint essentially glues two bodies together.

                                                  *love-WeldJoint-constructors*
    constructors:

        |newWeldJoint|                    |love-newWeldJoint|

                                                    *love-WeldJoint-supertypes*
    supertypes:

        |Object|                          |love-Object|
        |Joint|                           |love-Joint|

                                                      *love-WeldJoint-subtypes*
    subtypes:

        None

                                                     *love-WeldJoint-functions*
    functions:

        |getDampingRatio|                 |love-WeldJoint:getDampingRatio|
        |getFrequency|                    |love-WeldJoint:getFrequency|
        |setDampingRatio|                 |love-WeldJoint:setDampingRatio|
        |setFrequency|                    |love-WeldJoint:setFrequency|

-------------------------------------------------------------------------------
                                               *love-WeldJoint:getDampingRatio*
|WeldJoint:getDampingRatio|

Returns the damping ratio of the joint.

Synopses:

    1.  `ratio` = |WeldJoint:getDampingRatio|()

Variants:

    1.  `ratio` = |WeldJoint:getDampingRatio|()

        See function description

        returns:

            `ratio`: <number>

                The damping ratio.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-WeldJoint:getFrequency*
|WeldJoint:getFrequency|

Returns the frequency.

Synopses:

    1.  `freq` = |WeldJoint:getFrequency|()

Variants:

    1.  `freq` = |WeldJoint:getFrequency|()

        See function description

        returns:

            `freq`: <number>

                The frequency in hertz.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-WeldJoint:setDampingRatio*
|WeldJoint:setDampingRatio|

The new damping ratio.

Synopses:

    1.  |WeldJoint:setDampingRatio|( `ratio` )

Variants:

    1.  |WeldJoint:setDampingRatio|( `ratio` )

        See function description

        returns:

            None

        arguments:

            `ratio`: <number>

                The new damping ratio.

-------------------------------------------------------------------------------
                                                  *love-WeldJoint:setFrequency*
|WeldJoint:setFrequency|

Sets a new frequency.

Synopses:

    1.  |WeldJoint:setFrequency|( `freq` )

Variants:

    1.  |WeldJoint:setFrequency|( `freq` )

        See function description

        returns:

            None

        arguments:

            `freq`: <number>

                The new frequency in hertz.

-------------------------------------------------------------------------------
                                                              *love-WheelJoint*
|WheelJoint|

Restricts a point on the second body to a line on the first body.

                                                 *love-WheelJoint-constructors*
    constructors:

        |newWheelJoint|                   |love-newWheelJoint|

                                                   *love-WheelJoint-supertypes*
    supertypes:

        |Object|                          |love-Object|
        |Joint|                           |love-Joint|

                                                     *love-WheelJoint-subtypes*
    subtypes:

        None

                                                    *love-WheelJoint-functions*
    functions:

        |getAxis|                         |love-WheelJoint:getAxis|
        |getJointSpeed|                   |love-WheelJoint:getJointSpeed|
        |getJointTranslation|             |love-WheelJoint:getJointTranslation|
        |getMaxMotorTorque|               |love-WheelJoint:getMaxMotorTorque|
        |getMotorSpeed|                   |love-WheelJoint:getMotorSpeed|
        |getMotorTorque|                  |love-WheelJoint:getMotorTorque|
        |getSpringDampingRatio|           |love-WheelJoint:getSpringDampingRa-|
        |getSpringFrequency|              |love-WheelJoint:getSpringFrequency|
        |setMaxMotorTorque|               |love-WheelJoint:setMaxMotorTorque|
        |setMotorEnabled|                 |love-WheelJoint:setMotorEnabled|
        |setMotorSpeed|                   |love-WheelJoint:setMotorSpeed|
        |setSpringDampingRatio|           |love-WheelJoint:setSpringDampingRa-|
        |setSpringFrequency|              |love-WheelJoint:setSpringFrequency|

-------------------------------------------------------------------------------
                                                      *love-WheelJoint:getAxis*
|WheelJoint:getAxis|

Gets the world-space axis vector of the Wheel Joint.

Synopses:

    1.  `x`, `y` = |WheelJoint:getAxis|()

Variants:

    1.  `x`, `y` = |WheelJoint:getAxis|()

        See function description

        returns:

            `x`: <number>

                The x-axis coordinate of the world-space axis vector.

            `y`: <number>

                The y-axis coordinate of the world-space axis vector.

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-WheelJoint:getJointSpeed*
|WheelJoint:getJointSpeed|

Returns the current joint translation speed.

Synopses:

    1.  `speed` = |WheelJoint:getJointSpeed|()

Variants:

    1.  `speed` = |WheelJoint:getJointSpeed|()

        See function description

        returns:

            `speed`: <number>

                The translation speed of the joint in meters per second.

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-WheelJoint:getJointTranslation*
|WheelJoint:getJointTranslation|

Returns the current joint translation.

Synopses:

    1.  `position` = |WheelJoint:getJointTranslation|()

Variants:

    1.  `position` = |WheelJoint:getJointTranslation|()

        See function description

        returns:

            `position`: <number>

                The translation of the joint in meters.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-WheelJoint:getMaxMotorTorque*
|WheelJoint:getMaxMotorTorque|

Returns the maximum motor torque.

Synopses:

    1.  `maxTorque` = |WheelJoint:getMaxMotorTorque|()

Variants:

    1.  `maxTorque` = |WheelJoint:getMaxMotorTorque|()

        See function description

        returns:

            `maxTorque`: <number>

                The maximum torque of the joint motor in newton meters.

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-WheelJoint:getMotorSpeed*
|WheelJoint:getMotorSpeed|

Returns the speed of the motor.

Synopses:

    1.  `speed` = |WheelJoint:getMotorSpeed|()

Variants:

    1.  `speed` = |WheelJoint:getMotorSpeed|()

        See function description

        returns:

            `speed`: <number>

                The speed of the joint motor in radians per second.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-WheelJoint:getMotorTorque*
|WheelJoint:getMotorTorque|

Returns the current torque on the motor.

Synopses:

    1.  `torque` = |WheelJoint:getMotorTorque|( `invdt` )

Variants:

    1.  `torque` = |WheelJoint:getMotorTorque|( `invdt` )

        See function description

        returns:

            `torque`: <number>

                The torque on the motor in newton meters.

        arguments:

            `invdt`: <number>

                How long the force applies. Usually the inverse time step or
                1/dt.

-------------------------------------------------------------------------------
                                        *love-WheelJoint:getSpringDampingRatio*
|WheelJoint:getSpringDampingRatio|

Returns the damping ratio.

Synopses:

    1.  `ratio` = |WheelJoint:getSpringDampingRatio|()

Variants:

    1.  `ratio` = |WheelJoint:getSpringDampingRatio|()

        See function description

        returns:

            `ratio`: <number>

                The damping ratio.

        arguments:

            None

-------------------------------------------------------------------------------
                                           *love-WheelJoint:getSpringFrequency*
|WheelJoint:getSpringFrequency|

Returns the spring frequency.

Synopses:

    1.  `freq` = |WheelJoint:getSpringFrequency|()

Variants:

    1.  `freq` = |WheelJoint:getSpringFrequency|()

        See function description

        returns:

            `freq`: <number>

                The frequency in hertz.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-WheelJoint:setMaxMotorTorque*
|WheelJoint:setMaxMotorTorque|

Sets a new maximum motor torque.

Synopses:

    1.  |WheelJoint:setMaxMotorTorque|( `maxTorque` )

Variants:

    1.  |WheelJoint:setMaxMotorTorque|( `maxTorque` )

        See function description

        returns:

            None

        arguments:

            `maxTorque`: <number>

                The new maximum torque for the joint motor in newton meters.

-------------------------------------------------------------------------------
                                              *love-WheelJoint:setMotorEnabled*
|WheelJoint:setMotorEnabled|

Starts and stops the joint motor.

Synopses:

    1.  |WheelJoint:setMotorEnabled|( `enable` )

Variants:

    1.  |WheelJoint:setMotorEnabled|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: <boolean>

                True turns the motor on and false turns it off.

-------------------------------------------------------------------------------
                                                *love-WheelJoint:setMotorSpeed*
|WheelJoint:setMotorSpeed|

Sets a new speed for the motor.

Synopses:

    1.  |WheelJoint:setMotorSpeed|( `speed` )

Variants:

    1.  |WheelJoint:setMotorSpeed|( `speed` )

        See function description

        returns:

            None

        arguments:

            `speed`: <number>

                The new speed for the joint motor in radians per second.

-------------------------------------------------------------------------------
                                        *love-WheelJoint:setSpringDampingRatio*
|WheelJoint:setSpringDampingRatio|

Sets a new damping ratio.

Synopses:

    1.  |WheelJoint:setSpringDampingRatio|( `ratio` )

Variants:

    1.  |WheelJoint:setSpringDampingRatio|( `ratio` )

        See function description

        returns:

            None

        arguments:

            `ratio`: <number>

                The new damping ratio.

-------------------------------------------------------------------------------
                                           *love-WheelJoint:setSpringFrequency*
|WheelJoint:setSpringFrequency|

Sets a new spring frequency.

Synopses:

    1.  |WheelJoint:setSpringFrequency|( `freq` )

Variants:

    1.  |WheelJoint:setSpringFrequency|( `freq` )

        See function description

        returns:

            None

        arguments:

            `freq`: <number>

                The new frequency in hertz.

-------------------------------------------------------------------------------
                                                                   *love-World*
|World|

A world is an object that contains all bodies and joints.

                                                      *love-World-constructors*
    constructors:

        |newWorld|                        |love-newWorld|

                                                        *love-World-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                          *love-World-subtypes*
    subtypes:

        None

                                                         *love-World-functions*
    functions:

        |destroy|                         |love-World:destroy|
        |getBodyCount|                    |love-World:getBodyCount|
        |getBodyList|                     |love-World:getBodyList|
        |getCallbacks|                    |love-World:getCallbacks|
        |getContactCount|                 |love-World:getContactCount|
        |getContactFilter|                |love-World:getContactFilter|
        |getContactList|                  |love-World:getContactList|
        |getGravity|                      |love-World:getGravity|
        |getJointCount|                   |love-World:getJointCount|
        |getJointList|                    |love-World:getJointList|
        |isDestroyed|                     |love-World:isDestroyed|
        |isLocked|                        |love-World:isLocked|
        |isSleepingAllowed|               |love-World:isSleepingAllowed|
        |queryBoundingBox|                |love-World:queryBoundingBox|
        |rayCast|                         |love-World:rayCast|
        |setCallbacks|                    |love-World:setCallbacks|
        |setContactFilter|                |love-World:setContactFilter|
        |setGravity|                      |love-World:setGravity|
        |setSleepingAllowed|              |love-World:setSleepingAllowed|
        |translateOrigin|                 |love-World:translateOrigin|
        |update|                          |love-World:update|

-------------------------------------------------------------------------------
                                                           *love-World:destroy*
|World:destroy|

Destroys the world, taking all bodies, joints, fixtures and their shapes with
it.

An error will occur if you attempt to use any of the destroyed objects after
calling this function.

Synopses:

    1.  |World:destroy|()

Variants:

    1.  |World:destroy|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-World:getBodyCount*
|World:getBodyCount|

Get the number of bodies in the world.

Synopses:

    1.  `n` = |World:getBodyCount|()

Variants:

    1.  `n` = |World:getBodyCount|()

        See function description

        returns:

            `n`: <number>

                The number of bodies in the world.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-World:getBodyList*
|World:getBodyList|

Returns a table with all bodies.

Synopses:

    1.  `bodies` = |World:getBodyList|()

Variants:

    1.  `bodies` = |World:getBodyList|()

        See function description

        returns:

            `bodies`: <table>

                A sequence with all bodies.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-World:getCallbacks*
|World:getCallbacks|

Returns functions for the callbacks during the world update.

Synopses:

    1.  `beginContact`, `endContact`, `preSolve`, `postSolve` =
        |World:getCallbacks|()

Variants:

    1.  `beginContact`, `endContact`, `preSolve`, `postSolve` =
        |World:getCallbacks|()

        See function description

        returns:

            `beginContact`: <function>

                Gets called when two fixtures begin to overlap.

            `endContact`: <function>

                Gets called when two fixtures cease to overlap.

            `preSolve`: <function>

                Gets called before a collision gets resolved.

            `postSolve`: <function>

                Gets called after the collision has been resolved.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-World:getContactCount*
|World:getContactCount|

Returns the number of contacts in the world.

Synopses:

    1.  `n` = |World:getContactCount|()

Variants:

    1.  `n` = |World:getContactCount|()

        See function description

        returns:

            `n`: <number>

                The number of contacts in the world.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-World:getContactFilter*
|World:getContactFilter|

Returns the function for collision filtering.

Synopses:

    1.  `contactFilter` = |World:getContactFilter|()

Variants:

    1.  `contactFilter` = |World:getContactFilter|()

        See function description

        returns:

            `contactFilter`: <function>

                The function that handles the contact filtering.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-World:getContactList*
|World:getContactList|

Returns a table with all contacts.

Synopses:

    1.  `contacts` = |World:getContactList|()

Variants:

    1.  `contacts` = |World:getContactList|()

        See function description

        returns:

            `contacts`: <table>

                A sequence with all contacts.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-World:getGravity*
|World:getGravity|

Get the gravity of the world.

Synopses:

    1.  `x`, `y` = |World:getGravity|()

Variants:

    1.  `x`, `y` = |World:getGravity|()

        See function description

        returns:

            `x`: <number>

                The x component of gravity.

            `y`: <number>

                The y component of gravity.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-World:getJointCount*
|World:getJointCount|

Get the number of joints in the world.

Synopses:

    1.  `n` = |World:getJointCount|()

Variants:

    1.  `n` = |World:getJointCount|()

        See function description

        returns:

            `n`: <number>

                The number of joints in the world.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-World:getJointList*
|World:getJointList|

Returns a table with all joints.

Synopses:

    1.  `joints` = |World:getJointList|()

Variants:

    1.  `joints` = |World:getJointList|()

        See function description

        returns:

            `joints`: <table>

                A sequence with all joints.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-World:isDestroyed*
|World:isDestroyed|

Gets whether the World is destroyed. Destroyed worlds cannot be used.

Synopses:

    1.  `destroyed` = |World:isDestroyed|()

Variants:

    1.  `destroyed` = |World:isDestroyed|()

        See function description

        returns:

            `destroyed`: <boolean>

                Whether the World is destroyed.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-World:isLocked*
|World:isLocked|

Returns if the world is updating its state.

This will return true inside the callbacks from World:setCallbacks.

Synopses:

    1.  `locked` = |World:isLocked|()

Variants:

    1.  `locked` = |World:isLocked|()

        See function description

        returns:

            `locked`: <boolean>

                Will be true if the world is in the process of updating its
                state.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-World:isSleepingAllowed*
|World:isSleepingAllowed|

Returns the sleep behaviour of the world.

Synopses:

    1.  `allowSleep` = |World:isSleepingAllowed|()

Variants:

    1.  `allowSleep` = |World:isSleepingAllowed|()

        See function description

        returns:

            `allowSleep`: <boolean>

                True if the bodies are allowed to sleep or false if not.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-World:queryBoundingBox*
|World:queryBoundingBox|

Calls a function for each fixture inside the specified area.

Synopses:

    1.  |World:queryBoundingBox|( `topLeftX`, `topLeftY`,
        `bottomRightX`, `bottomRightY`, `callback` )

Variants:

    1.  |World:queryBoundingBox|( `topLeftX`, `topLeftY`,
        `bottomRightX`, `bottomRightY`, `callback` )

        See function description

        returns:

            None

        arguments:

            `topLeftX`: <number>

                The x position of the top-left point.

            `topLeftY`: <number>

                The y position of the top-left point.

            `bottomRightX`: <number>

                The x position of the bottom-right point.

            `bottomRightY`: <number>

                The y position of the bottom-right point.

            `callback`: <function>

                This function gets passed one argument, the fixture, and should
                return a boolean. The search will continue if it is true or
                stop if it is false.

-------------------------------------------------------------------------------
                                                           *love-World:rayCast*
|World:rayCast|

Casts a ray and calls a function for each fixtures it intersects.

Synopses:

    1.  |World:rayCast|( `x1`, `y1`, `x2`, `y2`, `callback` )

Variants:

    1.  |World:rayCast|( `x1`, `y1`, `x2`, `y2`, `callback` )

        See function description

        returns:

            None

        arguments:

            `x1`: <number>

                The x position of the starting point of the ray.

            `y1`: <number>

                The y position of the starting point of the ray.

            `x2`: <number>

                The x position of the end point of the ray.

            `y2`: <number>

                The y position of the end point of the ray.

            `callback`: <function>

                This function gets six arguments and should return a number.

-------------------------------------------------------------------------------
                                                      *love-World:setCallbacks*
|World:setCallbacks|

Sets functions for the collision callbacks during the world update.

Four Lua functions can be given as arguments. The value nil removes a function.

When called, each function will be passed three arguments. The first two
arguments are the colliding fixtures and the third argument is the Contact
between them. The PostSolve callback additionally gets the normal and tangent
impulse for each contact point.

Synopses:

    1.  |World:setCallbacks|( `beginContact`, `endContact`, `preSolve`,
        `postSolve` )

Variants:

    1.  |World:setCallbacks|( `beginContact`, `endContact`, `preSolve`,
        `postSolve` )

        See function description

        returns:

            None

        arguments:

            `beginContact`: <function>

                Gets called when two fixtures begin to overlap.

            `endContact`: <function>

                Gets called when two fixtures cease to overlap.

            `preSolve`: <function>

                Gets called before a collision gets resolved.

            `postSolve`: <function>

                Gets called after the collision has been resolved.

-------------------------------------------------------------------------------
                                                  *love-World:setContactFilter*
|World:setContactFilter|

Sets a function for collision filtering.

If the group and category filtering doesn't generate a collision decision, this
function gets called with the two fixtures as arguments. The function should
return a boolean value where true means the fixtures will collide and false
means they will pass through each other.

Synopses:

    1.  |World:setContactFilter|( `filter` )

Variants:

    1.  |World:setContactFilter|( `filter` )

        See function description

        returns:

            None

        arguments:

            `filter`: <function>

                The function handling the contact filtering.

-------------------------------------------------------------------------------
                                                        *love-World:setGravity*
|World:setGravity|

Set the gravity of the world.

Synopses:

    1.  |World:setGravity|( `x`, `y` )

Variants:

    1.  |World:setGravity|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The x component of gravity.

            `y`: <number>

                The y component of gravity.

-------------------------------------------------------------------------------
                                                *love-World:setSleepingAllowed*
|World:setSleepingAllowed|

Set the sleep behaviour of the world.

A sleeping body is much more efficient to simulate than when awake.

If sleeping is allowed, any body that has come to rest will sleep.

Synopses:

    1.  |World:setSleepingAllowed|( `allowSleep` )

Variants:

    1.  |World:setSleepingAllowed|( `allowSleep` )

        See function description

        returns:

            None

        arguments:

            `allowSleep`: <boolean>

                True if the bodies are allowed to sleep or false if not.

-------------------------------------------------------------------------------
                                                   *love-World:translateOrigin*
|World:translateOrigin|

Translates the World's origin. Useful in large worlds where floating point
precision issues become noticeable at far distances from the origin.

Synopses:

    1.  |World:translateOrigin|( `x`, `y` )

Variants:

    1.  |World:translateOrigin|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The x component of the new origin with respect to the old
                origin.

            `y`: <number>

                The y component of the new origin with respect to the old
                origin.

-------------------------------------------------------------------------------
                                                            *love-World:update*
|World:update|

Update the state of the world.

Synopses:

    1.  |World:update|( `dt` )

Variants:

    1.  |World:update|( `dt` )

        See function description

        returns:

            None

        arguments:

            `dt`: <number>

                The time (in seconds) to advance the physics simulation.

===============================================================================
                                                              *love-love.sound*
|love.sound|

This module is responsible for decoding sound files. It can't play the sounds,
see love.audio for that.

    |callbacks|                           |love-love.sound-callbacks|
    |enums|                               |love-love.sound-enums|
    |functions|                           |love-love.sound-functions|
    |types|                               |love-love.sound-types|

-------------------------------------------------------------------------------
                                                    *love-love.sound-callbacks*
The callbacks of |love.sound|:

    None

-------------------------------------------------------------------------------
                                                        *love-love.sound-enums*
The enums of |love.sound|:

    None

-------------------------------------------------------------------------------
                                                    *love-love.sound-functions*
The functions of |love.sound|:

    |newDecoder|                          |love-love.sound.newDecoder|
    |newSoundData|                        |love-love.sound.newSoundData|

-------------------------------------------------------------------------------
                                                   *love-love.sound.newDecoder*
|love.sound.newDecoder|

Attempts to find a decoder for the encoded sound data in the specified file.

Synopses:

    1.  `decoder` = |love.sound.newDecoder|( `file`, `buffer` )
    2.  `decoder` = |love.sound.newDecoder|( `filename`, `buffer` )

Variants:

    1.  `decoder` = |love.sound.newDecoder|( `file`, `buffer` )

        See function description

        returns:

            `decoder`: <Decoder>

                A new Decoder object.

        arguments:

            `file`: <File>

                The file with encoded sound data.

            `buffer`: <number>

                The size of each decoded chunk, in bytes.
    2.  `decoder` = |love.sound.newDecoder|( `filename`, `buffer` )

        See function description

        returns:

            `decoder`: <Decoder>

                A new Decoder object.

        arguments:

            `filename`: <string>

                The filename of the file with encoded sound data.

            `buffer`: <number>

                The size of each decoded chunk, in bytes.

-------------------------------------------------------------------------------
                                                 *love-love.sound.newSoundData*
|love.sound.newSoundData|

Creates new SoundData from a file. It's also possible to create SoundData with
a custom sample rate, channel and bit depth.

The sound data will be decoded to the memory in a raw format. It is recommended
to create only short sounds like effects, as a 3 minute song uses 30 MB of
memory this way.

Synopses:

    1.  `soundData` = |love.sound.newSoundData|( `filename` )
    2.  `soundData` = |love.sound.newSoundData|( `file` )
    3.  `soundData` = |love.sound.newSoundData|( `data` )
    4.  `soundData` = |love.sound.newSoundData|( `samples`, `rate`,
        `bits`, `channels` )

Variants:

    1.  `soundData` = |love.sound.newSoundData|( `filename` )

        See function description

        returns:

            `soundData`: <SoundData>

                A new SoundData object.

        arguments:

            `filename`: <string>

                The filename of the file to load.
    2.  `soundData` = |love.sound.newSoundData|( `file` )

        See function description

        returns:

            `soundData`: <SoundData>

                A new SoundData object.

        arguments:

            `file`: <File>

                A File pointing to an audio file.
    3.  `soundData` = |love.sound.newSoundData|( `data` )

        See function description

        returns:

            `soundData`: <SoundData>

                A new SoundData object.

        arguments:

            `data`: <Data>

                The encoded data to decode into audio.
    4.  `soundData` = |love.sound.newSoundData|( `samples`, `rate`,
        `bits`, `channels` )

        See function description

        returns:

            `soundData`: <SoundData>

                A new SoundData object.

        arguments:

            `samples`: <number>

                Total number of samples.

            `rate`: <number>

                Number of samples per second

            `bits`: <number>

                Bits per sample (8 or 16).

            `channels`: <number>

                Either 1 for mono or 2 for stereo.
-------------------------------------------------------------------------------
                                                        *love-love.sound-types*
The types of |love.sound|:

    |Decoder|                             |love-Decoder|
    |SoundData|                           |love-SoundData|

-------------------------------------------------------------------------------
                                                                 *love-Decoder*
|Decoder|

An object which can gradually decode a sound file.

                                                    *love-Decoder-constructors*
    constructors:

        |newDecoder|                      |love-newDecoder|

                                                      *love-Decoder-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                        *love-Decoder-subtypes*
    subtypes:

        None

                                                       *love-Decoder-functions*
    functions:

        |getBitDepth|                     |love-Decoder:getBitDepth|
        |getChannels|                     |love-Decoder:getChannels|
        |getDuration|                     |love-Decoder:getDuration|
        |getSampleRate|                   |love-Decoder:getSampleRate|

-------------------------------------------------------------------------------
                                                     *love-Decoder:getBitDepth*
|Decoder:getBitDepth|

Returns the number of bits per sample.

Synopses:

    1.  `bitDepth` = |Decoder:getBitDepth|()

Variants:

    1.  `bitDepth` = |Decoder:getBitDepth|()

        See function description

        returns:

            `bitDepth`: <number>

                Either 8 or 16.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Decoder:getChannels*
|Decoder:getChannels|

Returns the number of channels in the stream.

Synopses:

    1.  `channels` = |Decoder:getChannels|()

Variants:

    1.  `channels` = |Decoder:getChannels|()

        See function description

        returns:

            `channels`: <number>

                1 for mono, 2 for stereo.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Decoder:getDuration*
|Decoder:getDuration|

Gets the duration of the sound file. It may not always be sample-accurate, and
it may return -1 if the duration cannot be determined at all.

Synopses:

    1.  `duration` = |Decoder:getDuration|()

Variants:

    1.  `duration` = |Decoder:getDuration|()

        See function description

        returns:

            `duration`: <number>

                The duration of the sound file in seconds, or -1 if it cannot
                be determined.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-Decoder:getSampleRate*
|Decoder:getSampleRate|

Returns the sample rate of the Decoder.

Synopses:

    1.  `rate` = |Decoder:getSampleRate|()

Variants:

    1.  `rate` = |Decoder:getSampleRate|()

        See function description

        returns:

            `rate`: <number>

                Number of samples per second.

        arguments:

            None

-------------------------------------------------------------------------------
                                                               *love-SoundData*
|SoundData|

Contains raw audio samples. You can not play SoundData back directly. You must
wrap a Source object around it.

                                                  *love-SoundData-constructors*
    constructors:

        |newSoundData|                    |love-newSoundData|

                                                    *love-SoundData-supertypes*
    supertypes:

        |Data|                            |love-Data|
        |Object|                          |love-Object|

                                                      *love-SoundData-subtypes*
    subtypes:

        None

                                                     *love-SoundData-functions*
    functions:

        |getBitDepth|                     |love-SoundData:getBitDepth|
        |getChannels|                     |love-SoundData:getChannels|
        |getDuration|                     |love-SoundData:getDuration|
        |getSample|                       |love-SoundData:getSample|
        |getSampleCount|                  |love-SoundData:getSampleCount|
        |getSampleRate|                   |love-SoundData:getSampleRate|
        |setSample|                       |love-SoundData:setSample|

-------------------------------------------------------------------------------
                                                   *love-SoundData:getBitDepth*
|SoundData:getBitDepth|

Returns the number of bits per sample.

Synopses:

    1.  `bits` = |SoundData:getBitDepth|()

Variants:

    1.  `bits` = |SoundData:getBitDepth|()

        See function description

        returns:

            `bits`: <number>

                Either 8 or 16.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-SoundData:getChannels*
|SoundData:getChannels|

Returns the number of channels in the stream.

Synopses:

    1.  `channels` = |SoundData:getChannels|()

Variants:

    1.  `channels` = |SoundData:getChannels|()

        See function description

        returns:

            `channels`: <number>

                1 for mono, 2 for stereo.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-SoundData:getDuration*
|SoundData:getDuration|

Gets the duration of the sound data.

Synopses:

    1.  `duration` = |SoundData:getDuration|()

Variants:

    1.  `duration` = |SoundData:getDuration|()

        See function description

        returns:

            `duration`: <number>

                The duration of the sound data in seconds.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-SoundData:getSample*
|SoundData:getSample|

Gets the sample at the specified position.

Synopses:

    1.  `sample` = |SoundData:getSample|( `i` )

Variants:

    1.  `sample` = |SoundData:getSample|( `i` )

        See function description

        returns:

            `sample`: <number>

                The normalized sample (range -1.0 to 1.0).

        arguments:

            `i`: <number>

                An integer value specifying the position of the sample (0
                points to the first sample).

-------------------------------------------------------------------------------
                                                *love-SoundData:getSampleCount*
|SoundData:getSampleCount|

Returns the number of samples per channel of the SoundData.

Synopses:

    1.  `count` = |SoundData:getSampleCount|()

Variants:

    1.  `count` = |SoundData:getSampleCount|()

        See function description

        returns:

            `count`: <number>

                Total number of samples.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-SoundData:getSampleRate*
|SoundData:getSampleRate|

Returns the sample rate of the SoundData.

Synopses:

    1.  `rate` = |SoundData:getSampleRate|()

Variants:

    1.  `rate` = |SoundData:getSampleRate|()

        See function description

        returns:

            `rate`: <number>

                Number of samples per second.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-SoundData:setSample*
|SoundData:setSample|

Sets the sample at the specified position.

Synopses:

    1.  |SoundData:setSample|( `i`, `sample` )

Variants:

    1.  |SoundData:setSample|( `i`, `sample` )

        See function description

        returns:

            None

        arguments:

            `i`: <number>

                The position of the sample (0 means first sample).

            `sample`: <number>

                A normalized sample (range -1.0 to 1.0).

===============================================================================
                                                             *love-love.system*
|love.system|

Provides access to information about the user's system.

    |callbacks|                           |love-love.system-callbacks|
    |enums|                               |love-love.system-enums|
    |functions|                           |love-love.system-functions|
    |types|                               |love-love.system-types|

-------------------------------------------------------------------------------
                                                   *love-love.system-callbacks*
The callbacks of |love.system|:

    None

-------------------------------------------------------------------------------
                                                       *love-love.system-enums*
The enums of |love.system|:

    |PowerState|                          |love-PowerState|

-------------------------------------------------------------------------------
                                                              *love-PowerState*
|PowerState|

The basic state of the system's power supply.

    constants:

        `unknown`: <string>

            Cannot determine power status.

        `battery`: <string>

            Not plugged in, running on a battery.

        `nobattery`: <string>

            Plugged in, no battery available.

        `charging`: <string>

            Plugged in, charging battery.

        `charged`: <string>

            Plugged in, battery is fully charged.

-------------------------------------------------------------------------------
                                                   *love-love.system-functions*
The functions of |love.system|:

    |getClipboardText|                    |love-love.system.getClipboardText|
    |getOS|                               |love-love.system.getOS|
    |getPowerInfo|                        |love-love.system.getPowerInfo|
    |getProcessorCount|                   |love-love.system.getProcessorCount|
    |openURL|                             |love-love.system.openURL|
    |setClipboardText|                    |love-love.system.setClipboardText|
    |vibrate|                             |love-love.system.vibrate|

-------------------------------------------------------------------------------
                                            *love-love.system.getClipboardText*
|love.system.getClipboardText|

Gets text from the clipboard.

Synopses:

    1.  `text` = |love.system.getClipboardText|()

Variants:

    1.  `text` = |love.system.getClipboardText|()

        See function description

        returns:

            `text`: <string>

                The text currently held in the system's clipboard.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-love.system.getOS*
|love.system.getOS|

Gets the current operating system. In general, LÖVE abstracts away the need to
know the current operating system, but there are a few cases where it can be
useful (especially in combination with os.execute.)

Synopses:

    1.  `osString` = |love.system.getOS|()

Variants:

    1.  `osString` = |love.system.getOS|()

        See function description

        returns:

            `osString`: <string>

                The current operating system. "OS X", "Windows", "Linux",
                "Android" or "iOS".

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-love.system.getPowerInfo*
|love.system.getPowerInfo|

Gets information about the system's power supply.

Synopses:

    1.  `state`, `percent`, `seconds` = |love.system.getPowerInfo|()

Variants:

    1.  `state`, `percent`, `seconds` = |love.system.getPowerInfo|()

        See function description

        returns:

            `state`: <PowerState>

                The basic state of the power supply.

            `percent`: <number>

                Percentage of battery life left, between 0 and 100. nil if the
                value can't be determined or there's no battery.

            `seconds`: <number>

                Seconds of battery life left. nil if the value can't be
                determined or there's no battery.

        arguments:

            None

-------------------------------------------------------------------------------
                                           *love-love.system.getProcessorCount*
|love.system.getProcessorCount|

Gets the number of CPU cores in the system.

The number includes the threads reported if technologies such as Intel's
Hyper-threading are enabled. For example, on a 4-core CPU with Hyper-threading,
this function will return 8.

Synopses:

    1.  `cores` = |love.system.getProcessorCount|()

Variants:

    1.  `cores` = |love.system.getProcessorCount|()

        See function description

        returns:

            `cores`: <number>

                Gets the number of CPU cores in the system.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-love.system.openURL*
|love.system.openURL|

Opens a URL with the user's web or file browser.

Synopses:

    1.  `success` = |love.system.openURL|( `url` )

Variants:

    1.  `success` = |love.system.openURL|( `url` )

        See function description

        returns:

            `success`: <boolean>

                Whether the URL was opened successfully.

        arguments:

            `url`: <string>

                The URL to open. Must be formatted as a proper URL.

                To open a file or folder, "file://" must be prepended to the
                path.

-------------------------------------------------------------------------------
                                            *love-love.system.setClipboardText*
|love.system.setClipboardText|

Puts text in the clipboard.

Synopses:

    1.  |love.system.setClipboardText|( `text` )

Variants:

    1.  |love.system.setClipboardText|( `text` )

        See function description

        returns:

            None

        arguments:

            `text`: <string>

                The new text to hold in the system's clipboard.

-------------------------------------------------------------------------------
                                                     *love-love.system.vibrate*
|love.system.vibrate|

Causes the device to vibrate, if possible. Currently this will only work on
Android and iOS devices that have a built-in vibration motor.

Synopses:

    1.  |love.system.vibrate|( `seconds` )

Variants:

    1.  |love.system.vibrate|( `seconds` )

        See function description

        returns:

            None

        arguments:

            `seconds`: <number>

                The duration to vibrate for. If called on an iOS device, it
                will always vibrate for 0.5 seconds due to limitations in the
                iOS system APIs.
-------------------------------------------------------------------------------
                                                       *love-love.system-types*
The types of |love.system|:

    None

===============================================================================
                                                             *love-love.thread*
|love.thread|

Allows you to work with threads.

Threads are separate Lua environments, running in parallel to the main code. As
their code runs separately, they can be used to compute complex operations
without adversely affecting the frame rate of the main thread. However, as they
are separate environments, they cannot access the variables and functions of
the main thread, and communication between threads is limited.

All LOVE objects (userdata) are shared among threads so you'll only have to
send their references across threads. You may run into concurrency issues if
you manipulate an object on multiple threads at the same time.

When a Thread is started, it only loads the love.thread module. Every other
module has to be loaded with require.

    |callbacks|                           |love-love.thread-callbacks|
    |enums|                               |love-love.thread-enums|
    |functions|                           |love-love.thread-functions|
    |types|                               |love-love.thread-types|

-------------------------------------------------------------------------------
                                                   *love-love.thread-callbacks*
The callbacks of |love.thread|:

    None

-------------------------------------------------------------------------------
                                                       *love-love.thread-enums*
The enums of |love.thread|:

    None

-------------------------------------------------------------------------------
                                                   *love-love.thread-functions*
The functions of |love.thread|:

    |getChannel|                          |love-love.thread.getChannel|
    |newChannel|                          |love-love.thread.newChannel|
    |newThread|                           |love-love.thread.newThread|

-------------------------------------------------------------------------------
                                                  *love-love.thread.getChannel*
|love.thread.getChannel|

Creates or retrieves a named thread channel.

Synopses:

    1.  `channel` = |love.thread.getChannel|( `name` )

Variants:

    1.  `channel` = |love.thread.getChannel|( `name` )

        See function description

        returns:

            `channel`: <Channel>

                A named channel object which can be further manipulated.

        arguments:

            `name`: <string>

                The name of the channel you want to create or retrieve.

-------------------------------------------------------------------------------
                                                  *love-love.thread.newChannel*
|love.thread.newChannel|

Create a new unnamed thread channel.

One use for them is to pass new unnamed channels to other threads via
Channel:push

Synopses:

    1.  `channel` = |love.thread.newChannel|()

Variants:

    1.  `channel` = |love.thread.newChannel|()

        See function description

        returns:

            `channel`: <Channel>

                A unnamed channel object which can be further manipulated.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-love.thread.newThread*
|love.thread.newThread|

Creates a new Thread from a File or Data object.

Synopses:

    1.  `thread` = |love.thread.newThread|( `filename` )
    2.  `thread` = |love.thread.newThread|( `fileData` )
    3.  `thread` = |love.thread.newThread|( `codestring` )

Variants:

    1.  `thread` = |love.thread.newThread|( `filename` )

        See function description

        returns:

            `thread`: <Thread>

                A new Thread that has yet to be started.

        arguments:

            `filename`: <string>

                The name of the Lua File to use as source.
    2.  `thread` = |love.thread.newThread|( `fileData` )

        See function description

        returns:

            `thread`: <Thread>

                A new Thread that has yet to be started.

        arguments:

            `fileData`: <FileData>

                The FileData containing the Lua code to use as the source.
    3.  `thread` = |love.thread.newThread|( `codestring` )

        See function description

        returns:

            `thread`: <Thread>

                A new Thread that has yet to be started.

        arguments:

            `codestring`: <string>

                A string containing the Lua code to use as the source. It needs
                to either be at least 1024 characters long, or contain at least
                one newline.
-------------------------------------------------------------------------------
                                                       *love-love.thread-types*
The types of |love.thread|:

    |Thread|                              |love-Thread|
    |Channel|                             |love-Channel|

-------------------------------------------------------------------------------
                                                                  *love-Thread*
|Thread|

A Thread is a chunk of code that can run in parallel with other threads. Data
can be sent between different threads with Channel objects.

                                                     *love-Thread-constructors*
    constructors:

        |newThread|                       |love-newThread|

                                                       *love-Thread-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                         *love-Thread-subtypes*
    subtypes:

        None

                                                        *love-Thread-functions*
    functions:

        |getError|                        |love-Thread:getError|
        |start|                           |love-Thread:start|
        |wait|                            |love-Thread:wait|
        |isRunning|                       |love-Thread:isRunning|

-------------------------------------------------------------------------------
                                                         *love-Thread:getError*
|Thread:getError|

Retrieves the error string from the thread if it produced an error.

Synopses:

    1.  `message` = |Thread:getError|()

Variants:

    1.  `message` = |Thread:getError|()

        See function description

        returns:

            `message`: <string>

                The error message.

        arguments:

            None

-------------------------------------------------------------------------------
                                                            *love-Thread:start*
|Thread:start|

Starts the thread.

Threads can be restarted after they have completed their execution.

Synopses:

    1.  |Thread:start|()
    2.  |Thread:start|( `arg1`, `arg2`, `...` )

Variants:

    1.  |Thread:start|()

        See function description

        returns:

            None

        arguments:

            None
    2.  |Thread:start|( `arg1`, `arg2`, `...` )

        See function description

        returns:

            None

        arguments:

            `arg1`: <Variant>

                A string, number, boolean, LÖVE object, or simple table.

            `arg2`: <Variant>

                A string, number, boolean, LÖVE object, or simple table.

            `...`: <Variant>

                You can continue passing values to the thread.

-------------------------------------------------------------------------------
                                                             *love-Thread:wait*
|Thread:wait|

Wait for a thread to finish. This call will block until the thread finishes.

Synopses:

    1.  |Thread:wait|()

Variants:

    1.  |Thread:wait|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Thread:isRunning*
|Thread:isRunning|

Returns whether the thread is currently running.

Threads which are not running can be (re)started with Thread:start.

Synopses:

    1.  `running` = |Thread:isRunning|()

Variants:

    1.  `running` = |Thread:isRunning|()

        See function description

        returns:

            `running`: <boolean>

                True if the thread is running, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                                 *love-Channel*
|Channel|

A channel is a way to send and receive data to and from different threads.

                                                    *love-Channel-constructors*
    constructors:

        |getChannel|                      |love-getChannel|
        |newChannel|                      |love-newChannel|

                                                      *love-Channel-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                        *love-Channel-subtypes*
    subtypes:

        None

                                                       *love-Channel-functions*
    functions:

        |clear|                           |love-Channel:clear|
        |demand|                          |love-Channel:demand|
        |getCount|                        |love-Channel:getCount|
        |peek|                            |love-Channel:peek|
        |performAtomic|                   |love-Channel:performAtomic|
        |pop|                             |love-Channel:pop|
        |push|                            |love-Channel:push|
        |supply|                          |love-Channel:supply|

-------------------------------------------------------------------------------
                                                           *love-Channel:clear*
|Channel:clear|

Clears all the messages in the Channel queue.

Synopses:

    1.  |Channel:clear|()

Variants:

    1.  |Channel:clear|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Channel:demand*
|Channel:demand|

Retrieves the value of a Channel message and removes it from the message queue.

It waits until a message is in the queue then returns the message value.

Synopses:

    1.  `value` = |Channel:demand|()

Variants:

    1.  `value` = |Channel:demand|()

        See function description

        returns:

            `value`: <Variant>

                The contents of the message.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Channel:getCount*
|Channel:getCount|

Retrieves the number of messages in the thread Channel queue.

Synopses:

    1.  `count` = |Channel:getCount|()

Variants:

    1.  `count` = |Channel:getCount|()

        See function description

        returns:

            `count`: <number>

                The number of messages in the queue.

        arguments:

            None

-------------------------------------------------------------------------------
                                                            *love-Channel:peek*
|Channel:peek|

Retrieves the value of a Channel message, but leaves it in the queue.

It returns nil if there's no message in the queue.

Synopses:

    1.  `value` = |Channel:peek|()

Variants:

    1.  `value` = |Channel:peek|()

        See function description

        returns:

            `value`: <Variant>

                The contents of the message.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-Channel:performAtomic*
|Channel:performAtomic|

Executes the specified function atomically with respect to this Channel.

Calling multiple methods in a row on the same Channel is often useful. However
if multiple Threads are calling this Channel's methods at the same time, the
different calls on each Thread might end up interleaved (e.g. one or more of
the second thread's calls may happen in between the first thread's calls.)

This method avoids that issue by making sure the Thread calling the method has
exclusive access to the Channel until the specified function has returned.

Synopses:

    1.  `ret1`, `...` = |Channel:performAtomic|( `func`, `arg1`, `...`
        )

Variants:

    1.  `ret1`, `...` = |Channel:performAtomic|( `func`, `arg1`, `...`
        )

        See function description

        returns:

            `ret1`: <any>

                The first return value of the given function (if any.)

            `...`: <any>

                Any other return values.

        arguments:

            `func`: <function>

                The function to call, the form of function(channel, arg1, arg2,
                ...) end. The Channel is passed as the first argument to the
                function when it is called.

            `arg1`: <any>

                Additional arguments that the given function will receive when
                it is called.

            `...`: <any>

                Additional arguments that the given function will receive when
                it is called.

-------------------------------------------------------------------------------
                                                             *love-Channel:pop*
|Channel:pop|

Retrieves the value of a Channel message and removes it from the message queue.

It returns nil if there are no messages in the queue.

Synopses:

    1.  `value` = |Channel:pop|()

Variants:

    1.  `value` = |Channel:pop|()

        See function description

        returns:

            `value`: <Variant>

                The contents of the message.

        arguments:

            None

-------------------------------------------------------------------------------
                                                            *love-Channel:push*
|Channel:push|

Send a message to the thread Channel.

See Variant for the list of supported types.

Synopses:

    1.  |Channel:push|( `value` )

Variants:

    1.  |Channel:push|( `value` )

        See function description

        returns:

            None

        arguments:

            `value`: <Variant>

                The contents of the message.

-------------------------------------------------------------------------------
                                                          *love-Channel:supply*
|Channel:supply|

Send a message to the thread Channel and wait for a thread to accept it.

See Variant for the list of supported types.

Synopses:

    1.  |Channel:supply|( `value` )

Variants:

    1.  |Channel:supply|( `value` )

        See function description

        returns:

            None

        arguments:

            `value`: <Variant>

                The contents of the message.

===============================================================================
                                                              *love-love.timer*
|love.timer|

Provides an interface to the user's clock.

    |callbacks|                           |love-love.timer-callbacks|
    |enums|                               |love-love.timer-enums|
    |functions|                           |love-love.timer-functions|
    |types|                               |love-love.timer-types|

-------------------------------------------------------------------------------
                                                    *love-love.timer-callbacks*
The callbacks of |love.timer|:

    None

-------------------------------------------------------------------------------
                                                        *love-love.timer-enums*
The enums of |love.timer|:

    None

-------------------------------------------------------------------------------
                                                    *love-love.timer-functions*
The functions of |love.timer|:

    |getAverageDelta|                     |love-love.timer.getAverageDelta|
    |getDelta|                            |love-love.timer.getDelta|
    |getFPS|                              |love-love.timer.getFPS|
    |getTime|                             |love-love.timer.getTime|
    |sleep|                               |love-love.timer.sleep|
    |step|                                |love-love.timer.step|

-------------------------------------------------------------------------------
                                              *love-love.timer.getAverageDelta*
|love.timer.getAverageDelta|

Returns the average delta time (seconds per frame) over the last second.

Synopses:

    1.  `delta` = |love.timer.getAverageDelta|()

Variants:

    1.  `delta` = |love.timer.getAverageDelta|()

        See function description

        returns:

            `delta`: <number>

                The average delta time over the last second.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-love.timer.getDelta*
|love.timer.getDelta|

Returns the time between the last two frames.

Synopses:

    1.  `dt` = |love.timer.getDelta|()

Variants:

    1.  `dt` = |love.timer.getDelta|()

        See function description

        returns:

            `dt`: <number>

                The time passed (in seconds).

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-love.timer.getFPS*
|love.timer.getFPS|

Returns the current frames per second.

Synopses:

    1.  `fps` = |love.timer.getFPS|()

Variants:

    1.  `fps` = |love.timer.getFPS|()

        See function description

        returns:

            `fps`: <number>

                The current FPS.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-love.timer.getTime*
|love.timer.getTime|

Returns the value of a timer with an unspecified starting time. This function
should only be used to calculate differences between points in time, as the
starting time of the timer is unknown.

Synopses:

    1.  `time` = |love.timer.getTime|()

Variants:

    1.  `time` = |love.timer.getTime|()

        See function description

        returns:

            `time`: <number>

                The time in seconds.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-love.timer.sleep*
|love.timer.sleep|

Sleeps the program for the specified amount of time.

Synopses:

    1.  |love.timer.sleep|( `s` )

Variants:

    1.  |love.timer.sleep|( `s` )

        See function description

        returns:

            None

        arguments:

            `s`: <number>

                Seconds to sleep for.

-------------------------------------------------------------------------------
                                                         *love-love.timer.step*
|love.timer.step|

Measures the time between two frames. Calling this changes the return value of
love.timer.getDelta.

Synopses:

    1.  |love.timer.step|()

Variants:

    1.  |love.timer.step|()

        See function description

        returns:

            None

        arguments:

            None
-------------------------------------------------------------------------------
                                                        *love-love.timer-types*
The types of |love.timer|:

    None

===============================================================================
                                                              *love-love.touch*
|love.touch|

Provides an interface to touch-screen presses.

    |callbacks|                           |love-love.touch-callbacks|
    |enums|                               |love-love.touch-enums|
    |functions|                           |love-love.touch-functions|
    |types|                               |love-love.touch-types|

-------------------------------------------------------------------------------
                                                    *love-love.touch-callbacks*
The callbacks of |love.touch|:

    None

-------------------------------------------------------------------------------
                                                        *love-love.touch-enums*
The enums of |love.touch|:

    None

-------------------------------------------------------------------------------
                                                    *love-love.touch-functions*
The functions of |love.touch|:

    |getPosition|                         |love-love.touch.getPosition|
    |getPressure|                         |love-love.touch.getPressure|
    |getTouches|                          |love-love.touch.getTouches|

-------------------------------------------------------------------------------
                                                  *love-love.touch.getPosition*
|love.touch.getPosition|

Gets the current position of the specified touch-press, in pixels.

Synopses:

    1.  `x`, `y` = |love.touch.getPosition|( `id` )

Variants:

    1.  `x`, `y` = |love.touch.getPosition|( `id` )

        See function description

        returns:

            `x`: <number>

                The position along the x-axis of the touch-press inside the
                window, in pixels.

            `y`: <number>

                The position along the y-axis of the touch-press inside the
                window, in pixels.

        arguments:

            `id`: <light userdata>

                The identifier of the touch-press. Use love.touch.getTouches,
                love.touchpressed, or love.touchmoved to obtain touch id
                values.

-------------------------------------------------------------------------------
                                                  *love-love.touch.getPressure*
|love.touch.getPressure|

Gets the current pressure of the specified touch-press.

Synopses:

    1.  `pressure` = |love.touch.getPressure|( `id` )

Variants:

    1.  `pressure` = |love.touch.getPressure|( `id` )

        See function description

        returns:

            `pressure`: <number>

                The pressure of the touch-press. Most touch screens aren't
                pressure sensitive, in which case the pressure will be 1.

        arguments:

            `id`: <light userdata>

                The identifier of the touch-press. Use love.touch.getTouches,
                love.touchpressed, or love.touchmoved to obtain touch id
                values.

-------------------------------------------------------------------------------
                                                   *love-love.touch.getTouches*
|love.touch.getTouches|

Gets a list of all active touch-presses.

Synopses:

    1.  `touches` = |love.touch.getTouches|()

Variants:

    1.  `touches` = |love.touch.getTouches|()

        See function description

        returns:

            `touches`: <table>

                A list of active touch-press id values, which can be used with
                love.touch.getPosition.

        arguments:

            None
-------------------------------------------------------------------------------
                                                        *love-love.touch-types*
The types of |love.touch|:

    None

===============================================================================
                                                              *love-love.video*
|love.video|

This module is responsible for decoding, controlling, and streaming video
files.

It can't draw the videos, see love.graphics.newVideo and Video objects for
that.

    |callbacks|                           |love-love.video-callbacks|
    |enums|                               |love-love.video-enums|
    |functions|                           |love-love.video-functions|
    |types|                               |love-love.video-types|

-------------------------------------------------------------------------------
                                                    *love-love.video-callbacks*
The callbacks of |love.video|:

    None

-------------------------------------------------------------------------------
                                                        *love-love.video-enums*
The enums of |love.video|:

    None

-------------------------------------------------------------------------------
                                                    *love-love.video-functions*
The functions of |love.video|:

    |newVideoStream|                      |love-love.video.newVideoStream|

-------------------------------------------------------------------------------
                                               *love-love.video.newVideoStream*
|love.video.newVideoStream|

Creates a new VideoStream. Currently only Ogg Theora video files are supported.
VideoStreams can't draw videos, see love.graphics.newVideo for that.

Synopses:

    1.  `videostream` = |love.video.newVideoStream|( `filename` )
    2.  `videostream` = |love.video.newVideoStream|( `file` )

Variants:

    1.  `videostream` = |love.video.newVideoStream|( `filename` )

        See function description

        returns:

            `videostream`: <VideoStream>

                A new VideoStream.

        arguments:

            `filename`: <string>

                The file path to the Ogg Theora video file.
    2.  `videostream` = |love.video.newVideoStream|( `file` )

        See function description

        returns:

            `videostream`: <VideoStream>

                A new VideoStream.

        arguments:

            `file`: <File>

                The File object containing the Ogg Theora video.
-------------------------------------------------------------------------------
                                                        *love-love.video-types*
The types of |love.video|:

    |VideoStream|                         |love-VideoStream|

-------------------------------------------------------------------------------
                                                             *love-VideoStream*
|VideoStream|

An object which decodes, streams, and controls Videos.

                                                *love-VideoStream-constructors*
    constructors:

        |newVideoStream|                  |love-newVideoStream|

                                                  *love-VideoStream-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                    *love-VideoStream-subtypes*
    subtypes:

        None

                                                   *love-VideoStream-functions*
    functions:

        None

===============================================================================
                                                             *love-love.window*
|love.window|

Provides an interface for modifying and retrieving information about the
program's window.

    |callbacks|                           |love-love.window-callbacks|
    |enums|                               |love-love.window-enums|
    |functions|                           |love-love.window-functions|
    |types|                               |love-love.window-types|

-------------------------------------------------------------------------------
                                                   *love-love.window-callbacks*
The callbacks of |love.window|:

    None

-------------------------------------------------------------------------------
                                                       *love-love.window-enums*
The enums of |love.window|:

    |FullscreenType|                      |love-FullscreenType|
    |MessageBoxType|                      |love-MessageBoxType|

-------------------------------------------------------------------------------
                                                          *love-FullscreenType*
|FullscreenType|

Types of fullscreen modes.

In normal fullscreen mode, if a window size is used which does not match one of
the monitor's supported display modes, the window will be resized to the next
largest display mode.

Normal fullscreen mode is sometimes avoided by users because it can cause
issues in some window managers and with multi-monitor setups. In OS X it
prevents switching to a different program until fullscreen mode is exited. The
"desktop" fullscreen mode generally avoids these issues.

    constants:

        `desktop`: <string>

            Sometimes known as borderless fullscreen windowed mode. A
            borderless screen-sized window is created which sits on top of all
            desktop UI elements. The window is automatically resized to match
            the dimensions of the desktop, and its size cannot be changed.

        `exclusive`: <string>

            Standard exclusive-fullscreen mode. Changes the display mode
            (actual resolution) of the monitor.

-------------------------------------------------------------------------------
                                                          *love-MessageBoxType*
|MessageBoxType|

Types of message box dialogs. Different types may have slightly different
looks.

    constants:

        `info`: <string>

            Informational dialog.

        `warning`: <string>

            Warning dialog.

        `error`: <string>

            Error dialog.

-------------------------------------------------------------------------------
                                                   *love-love.window-functions*
The functions of |love.window|:

    |close|                               |love-love.window.close|
    |fromPixels|                          |love-love.window.fromPixels|
    |getDisplayName|                      |love-love.window.getDisplayName|
    |getFullscreen|                       |love-love.window.getFullscreen|
    |getFullscreenModes|                  |love-love.window.getFullscreenModes|
    |getIcon|                             |love-love.window.getIcon|
    |getMode|                             |love-love.window.getMode|
    |getPixelScale|                       |love-love.window.getPixelScale|
    |getPosition|                         |love-love.window.getPosition|
    |getTitle|                            |love-love.window.getTitle|
    |hasFocus|                            |love-love.window.hasFocus|
    |hasMouseFocus|                       |love-love.window.hasMouseFocus|
    |isDisplaySleepEnabled|               |love-love.window.isDisplaySleepEna-|
    |isMaximized|                         |love-love.window.isMaximized|
    |isOpen|                              |love-love.window.isOpen|
    |isVisible|                           |love-love.window.isVisible|
    |maximize|                            |love-love.window.maximize|
    |minimize|                            |love-love.window.minimize|
    |requestAttention|                    |love-love.window.requestAttention|
    |setDisplaySleepEnabled|              |love-love.window.setDisplaySleepEn-|
    |setFullscreen|                       |love-love.window.setFullscreen|
    |setIcon|                             |love-love.window.setIcon|
    |setMode|                             |love-love.window.setMode|
    |setPosition|                         |love-love.window.setPosition|
    |setTitle|                            |love-love.window.setTitle|
    |showMessageBox|                      |love-love.window.showMessageBox|
    |toPixels|                            |love-love.window.toPixels|

-------------------------------------------------------------------------------
                                                       *love-love.window.close*
|love.window.close|

Closes the window. It can be reopened with love.window.setMode.

Synopses:

    1.  |love.window.close|()

Variants:

    1.  |love.window.close|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-love.window.fromPixels*
|love.window.fromPixels|

Converts a number from pixels to density-independent units.

The pixel density inside the window might be greater (or smaller) than the
"size" of the window. For example on a retina screen in Mac OS X with the
highdpi window flag enabled, the window may take up the same physical size as
an 800x600 window, but the area inside the window uses 1600x1200 pixels.
love.window.fromPixels(1600) would return 800 in that case.

This function converts coordinates from pixels to the size users are expecting
them to display at onscreen. love.window.toPixels does the opposite. The
highdpi window flag must be enabled to use the full pixel density of a Retina
screen on Mac OS X and iOS. The flag currently does nothing on Windows and
Linux, and on Android it is effectively always enabled.

Most LÖVE functions return values and expect arguments in terms of pixels
rather than density-independent units.

Synopses:

    1.  `value` = |love.window.fromPixels|( `pixelvalue` )
    2.  `x`, `y` = |love.window.fromPixels|( `px`, `py` )

Variants:

    1.  `value` = |love.window.fromPixels|( `pixelvalue` )

        See function description

        returns:

            `value`: <number>

                The converted number, in density-independent units.

        arguments:

            `pixelvalue`: <number>

                A number in pixels to convert to density-independent units.
    2.  `x`, `y` = |love.window.fromPixels|( `px`, `py` )

        See function description

        returns:

            `x`: <number>

                The converted x-axis value of the coordinate, in
                density-independent units.

            `y`: <number>

                The converted y-axis value of the coordinate, in
                density-independent units.

        arguments:

            `px`: <number>

                The x-axis value of a coordinate in pixels.

            `py`: <number>

                The y-axis value of a coordinate in pixels.

-------------------------------------------------------------------------------
                                              *love-love.window.getDisplayName*
|love.window.getDisplayName|

Gets the name of a display.

Synopses:

    1.  `name` = |love.window.getDisplayName|( `displayindex` )

Variants:

    1.  `name` = |love.window.getDisplayName|( `displayindex` )

        See function description

        returns:

            `name`: <string>

                The name of the specified display.

        arguments:

            `displayindex`: <number>

                The index of the display to get the name of.

-------------------------------------------------------------------------------
                                               *love-love.window.getFullscreen*
|love.window.getFullscreen|

Gets whether the window is fullscreen.

Synopses:

    1.  `fullscreen`, `fstype` = |love.window.getFullscreen|()

Variants:

    1.  `fullscreen`, `fstype` = |love.window.getFullscreen|()

        See function description

        returns:

            `fullscreen`: <boolean>

                True if the window is fullscreen, false otherwise.

            `fstype`: <FullscreenType>

                The type of fullscreen mode used.

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-love.window.getFullscreenModes*
|love.window.getFullscreenModes|

Gets a list of supported fullscreen modes.

Synopses:

    1.  `modes` = |love.window.getFullscreenModes|( `display` )

Variants:

    1.  `modes` = |love.window.getFullscreenModes|( `display` )

        See function description

        returns:

            `modes`: <table>

                A table of width/height pairs. (Note that this may not be in
                order.)

        arguments:

            `display`: <number>

                The index of the display, if multiple monitors are available.

-------------------------------------------------------------------------------
                                                     *love-love.window.getIcon*
|love.window.getIcon|

Gets the window icon.

Synopses:

    1.  `imagedata` = |love.window.getIcon|()

Variants:

    1.  `imagedata` = |love.window.getIcon|()

        See function description

        returns:

            `imagedata`: <ImageData>

                The window icon imagedata, or nil of no icon has been set with
                love.window.setIcon.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-love.window.getMode*
|love.window.getMode|

Returns the current display mode.

Synopses:

    1.  `width`, `height`, `flags` = |love.window.getMode|()

Variants:

    1.  `width`, `height`, `flags` = |love.window.getMode|()

        See function description

        returns:

            `width`: <number>

                Window width.

            `height`: <number>

                Window height.

            `flags`: <table>

                Table containing the window properties.

                `fullscreen`: <boolean>

                    Fullscreen (true), or windowed (false).

                `fullscreentype`: <FullscreenType>

                    The type of fullscreen mode used.

                `vsync`: <boolean>

                    True if the graphics framerate is synchronized with the
                    monitor's refresh rate, false otherwise.

                `msaa`: <number>

                    The number of antialiasing samples used (0 if MSAA is
                    disabled).

                `resizable`: <boolean>

                    True if the window is resizable in windowed mode, false
                    otherwise.

                `borderless`: <boolean>

                    True if the window is borderless in windowed mode, false
                    otherwise.

                `centered`: <boolean>

                    True if the window is centered in windowed mode, false
                    otherwise.

                `display`: <number>

                    The index of the display the window is currently in, if
                    multiple monitors are available.

                `minwidth`: <number>

                    The minimum width of the window, if it's resizable.

                `minheight`: <number>

                    The minimum height of the window, if it's resizable.

                `highdpi`: <boolean>

                    True if high-dpi mode should be used on Retina displays in
                    OS X and iOS. Does nothing on non-Retina displays. Added in
                    0.9.1.

                `refreshrate`: <number>

                    The refresh rate of the screen's current display mode, in
                    Hz. May be 0 if the value can't be determined.

                `x`: <number>

                    The x-coordinate of the window's position in its current
                    display.

                `y`: <number>

                    The y-coordinate of the window's position in its current
                    display.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-love.window.getPixelScale*
|love.window.getPixelScale|

Gets the DPI scale factor associated with the window.

The pixel density inside the window might be greater (or smaller) than the
"size" of the window. For example on a retina screen in Mac OS X with the
highdpi window flag enabled, the window may take up the same physical size as
an 800x600 window, but the area inside the window uses 1600x1200 pixels.
love.window.getPixelScale() would return 2.0 in that case.

The love.window.fromPixels and love.window.toPixels functions can also be used
to convert between units.

The highdpi window flag must be enabled to use the full pixel density of a
Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows
and Linux, and on Android it is effectively always enabled.

Synopses:

    1.  `scale` = |love.window.getPixelScale|()

Variants:

    1.  `scale` = |love.window.getPixelScale|()

        See function description

        returns:

            `scale`: <number>

                The pixel scale factor associated with the window.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-love.window.getPosition*
|love.window.getPosition|

Gets the position of the window on the screen.

The window position is in the coordinate space of the display it is currently
in.

Synopses:

    1.  `x`, `y`, `display` = |love.window.getPosition|()

Variants:

    1.  `x`, `y`, `display` = |love.window.getPosition|()

        See function description

        returns:

            `x`: <number>

                The x-coordinate of the window's position.

            `y`: <number>

                The y-coordinate of the window's position.

            `display`: <number>

                The index of the display that the window is in.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.window.getTitle*
|love.window.getTitle|

Gets the window title.

Synopses:

    1.  `title` = |love.window.getTitle|()

Variants:

    1.  `title` = |love.window.getTitle|()

        See function description

        returns:

            `title`: <string>

                The current window title.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.window.hasFocus*
|love.window.hasFocus|

Checks if the game window has keyboard focus.

Synopses:

    1.  `focus` = |love.window.hasFocus|()

Variants:

    1.  `focus` = |love.window.hasFocus|()

        See function description

        returns:

            `focus`: <boolean>

                True if the window has the focus or false if not.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-love.window.hasMouseFocus*
|love.window.hasMouseFocus|

Checks if the game window has mouse focus.

Synopses:

    1.  `focus` = |love.window.hasMouseFocus|()

Variants:

    1.  `focus` = |love.window.hasMouseFocus|()

        See function description

        returns:

            `focus`: <boolean>

                True if the window has mouse focus or false if not.

        arguments:

            None

-------------------------------------------------------------------------------
                                       *love-love.window.isDisplaySleepEnabled*
|love.window.isDisplaySleepEnabled|

Gets whether the display is allowed to sleep while the program is running.

Display sleep is disabled by default. Some types of input (e.g. joystick button
presses) might not prevent the display from sleeping, if display sleep is
allowed.

Synopses:

    1.  `enabled` = |love.window.isDisplaySleepEnabled|()

Variants:

    1.  `enabled` = |love.window.isDisplaySleepEnabled|()

        See function description

        returns:

            `enabled`: <boolean>

                True if system display sleep is enabled / allowed, false
                otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-love.window.isMaximized*
|love.window.isMaximized|

Gets whether the Window is currently maximized.

The window can be maximized if it is not fullscreen and is resizable, and
either the user has pressed the window's Maximize button or
love.window.maximize has been called.

Synopses:

    1.  `maximized` = |love.window.isMaximized|()

Variants:

    1.  `maximized` = |love.window.isMaximized|()

        See function description

        returns:

            `maximized`: <boolean>

                True if the window is currently maximized in windowed mode,
                false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-love.window.isOpen*
|love.window.isOpen|

Checks if the window is open.

Synopses:

    1.  `open` = |love.window.isOpen|()

Variants:

    1.  `open` = |love.window.isOpen|()

        See function description

        returns:

            `open`: <boolean>

                True if the window is open, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-love.window.isVisible*
|love.window.isVisible|

Checks if the game window is visible.

The window is considered visible if it's not minimized and the program isn't
hidden.

Synopses:

    1.  `visible` = |love.window.isVisible|()

Variants:

    1.  `visible` = |love.window.isVisible|()

        See function description

        returns:

            `visible`: <boolean>

                True if the window is visible or false if not.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.window.maximize*
|love.window.maximize|

Makes the window as large as possible.

This function has no effect if the window isn't resizable, since it essentially
programmatically presses the window's "maximize" button.

Synopses:

    1.  |love.window.maximize|()

Variants:

    1.  |love.window.maximize|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.window.minimize*
|love.window.minimize|

Minimizes the window to the system's task bar / dock.

Synopses:

    1.  |love.window.minimize|()

Variants:

    1.  |love.window.minimize|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-love.window.requestAttention*
|love.window.requestAttention|

Causes the window to request the attention of the user if it is not in the
foreground.

In Windows the taskbar icon will flash, and in OS X the dock icon will bounce.

Synopses:

    1.  |love.window.requestAttention|( `continuous` )

Variants:

    1.  |love.window.requestAttention|( `continuous` )

        See function description

        returns:

            None

        arguments:

            `continuous`: <boolean>

                Whether to continuously request attention until the window
                becomes active, or to do it only once.

-------------------------------------------------------------------------------
                                      *love-love.window.setDisplaySleepEnabled*
|love.window.setDisplaySleepEnabled|

Sets whether the display is allowed to sleep while the program is running.

Display sleep is disabled by default. Some types of input (e.g. joystick button
presses) might not prevent the display from sleeping, if display sleep is
allowed.

Synopses:

    1.  |love.window.setDisplaySleepEnabled|( `enable` )

Variants:

    1.  |love.window.setDisplaySleepEnabled|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: <boolean>

                True to enable system display sleep, false to disable it.

-------------------------------------------------------------------------------
                                               *love-love.window.setFullscreen*
|love.window.setFullscreen|

Enters or exits fullscreen. The display to use when entering fullscreen is
chosen based on which display the window is currently in, if multiple monitors
are connected.

If fullscreen mode is entered and the window size doesn't match one of the
monitor's display modes (in normal fullscreen mode) or the window size doesn't
match the desktop size (in 'desktop' fullscreen mode), the window will be
resized appropriately. The window will revert back to its original size again
when fullscreen mode is exited using this function.

Synopses:

    1.  `success` = |love.window.setFullscreen|( `fullscreen` )
    2.  `success` = |love.window.setFullscreen|( `fullscreen`, `fstype`
        )

Variants:

    1.  `success` = |love.window.setFullscreen|( `fullscreen` )

        See function description

        returns:

            `success`: <boolean>

                True if successful, false otherwise.

        arguments:

            `fullscreen`: <boolean>

                Whether to enter or exit fullscreen mode.
    2.  `success` = |love.window.setFullscreen|( `fullscreen`, `fstype`
        )

        See function description

        returns:

            `success`: <boolean>

                True if successful, false otherwise.

        arguments:

            `fullscreen`: <boolean>

                Whether to enter or exit fullscreen mode.

            `fstype`: <FullscreenType>

                The type of fullscreen mode to use.

-------------------------------------------------------------------------------
                                                     *love-love.window.setIcon*
|love.window.setIcon|

Sets the window icon until the game is quit. Not all operating systems support
very large icon images.

Synopses:

    1.  `success` = |love.window.setIcon|( `imagedata` )

Variants:

    1.  `success` = |love.window.setIcon|( `imagedata` )

        See function description

        returns:

            `success`: <boolean>

                Whether the icon has been set successfully.

        arguments:

            `imagedata`: <ImageData>

                The window icon image.

-------------------------------------------------------------------------------
                                                     *love-love.window.setMode*
|love.window.setMode|

Sets the display mode and properties of the window.

If width or height is 0, setMode will use the width and height of the desktop.

Changing the display mode may have side effects: for example, canvases will be
cleared and values sent to shaders with Shader:send will be erased. Make sure
to save the contents of canvases beforehand or re-draw to them afterward if you
need to.

Synopses:

    1.  `success` = |love.window.setMode|( `width`, `height`, `flags` )

Variants:

    1.  `success` = |love.window.setMode|( `width`, `height`, `flags` )

        See function description

        returns:

            `success`: <boolean>

                True if successful, false otherwise.

        arguments:

            `width`: <number>

                Display width.

            `height`: <number>

                Display height.

            `flags`: <table>

                The flags table with the options:

                `fullscreen`: <boolean>

                    Fullscreen (true), or windowed (false).

                `fullscreentype`: <FullscreenType>

                    The type of fullscreen to use. This defaults to "normal" in
                    0.9.2 and older.

                `vsync`: <boolean>

                    True if LÖVE should wait for vsync, false otherwise.

                `msaa`: <number>

                    The number of antialiasing samples.

                `resizable`: <boolean>

                    True if the window should be resizable in windowed mode,
                    false otherwise.

                `borderless`: <boolean>

                    True if the window should be borderless in windowed mode,
                    false otherwise.

                `centered`: <boolean>

                    True if the window should be centered in windowed mode,
                    false otherwise.

                `display`: <number>

                    The index of the display to show the window in, if multiple
                    monitors are available.

                `minwidth`: <number>

                    The minimum width of the window, if it's resizable. Cannot
                    be less than 1.

                `minheight`: <number>

                    The minimum height of the window, if it's resizable. Cannot
                    be less than 1.

                `highdpi`: <boolean>

                    True if high-dpi mode should be used on Retina displays in
                    OS X. Does nothing on non-Retina displays.

                `x`: <number>

                    The x-coordinate of the window's position in the specified
                    display.

                `y`: <number>

                    The y-coordinate of the window's position in the specified
                    display.

-------------------------------------------------------------------------------
                                                 *love-love.window.setPosition*
|love.window.setPosition|

Sets the position of the window on the screen.

The window position is in the coordinate space of the specified display.

Synopses:

    1.  |love.window.setPosition|( `x`, `y`, `display` )

Variants:

    1.  |love.window.setPosition|( `x`, `y`, `display` )

        See function description

        returns:

            None

        arguments:

            `x`: <number>

                The x-coordinate of the window's position.

            `y`: <number>

                The y-coordinate of the window's position.

            `display`: <number>

                The index of the display that the new window position is
                relative to.

-------------------------------------------------------------------------------
                                                    *love-love.window.setTitle*
|love.window.setTitle|

Sets the window title.

Synopses:

    1.  |love.window.setTitle|( `title` )

Variants:

    1.  |love.window.setTitle|( `title` )

        See function description

        returns:

            None

        arguments:

            `title`: <string>

                The new window title.

-------------------------------------------------------------------------------
                                              *love-love.window.showMessageBox*
|love.window.showMessageBox|

Displays a message box dialog above the love window. The message box contains a
title, optional text, and buttons.

Synopses:

    1.  `success` = |love.window.showMessageBox|( `title`, `message`,
        `type`, `attachtowindow` )
    2.  `pressedbutton` = |love.window.showMessageBox|( `title`,
        `message`, `buttonlist`, `type`, `attachtowindow` )

Variants:

    1.  `success` = |love.window.showMessageBox|( `title`, `message`,
        `type`, `attachtowindow` )

        See function description

        returns:

            `success`: <boolean>

                Whether the message box was successfully displayed.

        arguments:

            `title`: <string>

                The title of the message box.

            `message`: <string>

                The text inside the message box.

            `type`: <MessageBoxType>

                The type of the message box.

            `attachtowindow`: <boolean>

                Whether the message box should be attached to the love window
                or free-floating.
    2.  `pressedbutton` = |love.window.showMessageBox|( `title`,
        `message`, `buttonlist`, `type`, `attachtowindow` )

        See function description

        returns:

            `pressedbutton`: <number>

                The index of the button pressed by the user. May be 0 if the
                message box dialog was closed without pressing a button.

        arguments:

            `title`: <string>

                The title of the message box.

            `message`: <string>

                The text inside the message box.

            `buttonlist`: <table>

                A table containing a list of button names to show. The table
                can also contain the fields enterbutton and escapebutton, which
                should be the index of the default button to use when the user
                presses 'enter' or 'escape', respectively.

            `type`: <MessageBoxType>

                The type of the message box.

            `attachtowindow`: <boolean>

                Whether the message box should be attached to the love window
                or free-floating.

-------------------------------------------------------------------------------
                                                    *love-love.window.toPixels*
|love.window.toPixels|

Converts a number from density-independent units to pixels.

The pixel density inside the window might be greater (or smaller) than the
"size" of the window. For example on a retina screen in Mac OS X with the
highdpi window flag enabled, the window may take up the same physical size as
an 800x600 window, but the area inside the window uses 1600x1200 pixels.
love.window.toPixels(800) would return 1600 in that case.

This is used to convert coordinates from the size users are expecting them to
display at onscreen to pixels. love.window.fromPixels does the opposite. The
highdpi window flag must be enabled to use the full pixel density of a Retina
screen on Mac OS X and iOS. The flag currently does nothing on Windows and
Linux, and on Android it is effectively always enabled.

Most LÖVE functions return values and expect arguments in terms of pixels
rather than density-independent units.

Synopses:

    1.  `pixelvalue` = |love.window.toPixels|( `value` )
    2.  `px`, `py` = |love.window.toPixels|( `x`, `y` )

Variants:

    1.  `pixelvalue` = |love.window.toPixels|( `value` )

        See function description

        returns:

            `pixelvalue`: <number>

                The converted number, in pixels.

        arguments:

            `value`: <number>

                A number in density-independent units to convert to pixels.
    2.  `px`, `py` = |love.window.toPixels|( `x`, `y` )

        See function description

        returns:

            `px`: <number>

                The converted x-axis value of the coordinate, in pixels.

            `py`: <number>

                The converted y-axis value of the coordinate, in pixels.

        arguments:

            `x`: <number>

                The x-axis value of a coordinate in density-independent units
                to convert to pixels.

            `y`: <number>

                The y-axis value of a coordinate in density-independent units
                to convert to pixels.
-------------------------------------------------------------------------------
                                                       *love-love.window-types*
The types of |love.window|:

    None

 vim:nospell:ft=help:
