*love.txt* *love2d*                 Documentation for the LOVE game framework.

                        _       o__o __      __ ______ ~
                       | |     / __ \\ \    / //  ____\~
                       | |    | |  | |\ \  / / | |__   ~
                       | |    | |  | | \ \/ /  |  __|  ~
                       | |____| |__| |  \  /   | |____ ~
                       \______|\____/    \/    \______/~

                   The complete solution for Vim with LOVE.
                   Includes highlighting and documentation.

For LOVE (http://love2d.org) version 11.3.

Generated from

    https://github.com/love2d-community/love-api

using

    https://github.com/davisdude/vim-love-docs

Made by Davis Claiborne under the MIT license. See LICENSE.md for more info.

===============================================================================
                                                                    *love-love*
|love|

The LÖVE framework

    |callbacks|                           |love-love-callbacks|
    |enums|                               |love-love-enums|
    |functions|                           |love-love-functions|
    |types|                               |love-love-types|

-------------------------------------------------------------------------------
                                                          *love-love-callbacks*
The callbacks of |love|:

    |conf|                                |love-love.conf|
    |directorydropped|                    |love-love.directorydropped|
    |displayrotated|                      |love-love.displayrotated|
    |draw|                                |love-love.draw|
    |errorhandler|                        |love-love.errorhandler|
    |filedropped|                         |love-love.filedropped|
    |focus|                               |love-love.focus|
    |gamepadaxis|                         |love-love.gamepadaxis|
    |gamepadpressed|                      |love-love.gamepadpressed|
    |gamepadreleased|                     |love-love.gamepadreleased|
    |joystickadded|                       |love-love.joystickadded|
    |joystickaxis|                        |love-love.joystickaxis|
    |joystickhat|                         |love-love.joystickhat|
    |joystickpressed|                     |love-love.joystickpressed|
    |joystickreleased|                    |love-love.joystickreleased|
    |joystickremoved|                     |love-love.joystickremoved|
    |keypressed|                          |love-love.keypressed|
    |keyreleased|                         |love-love.keyreleased|
    |load|                                |love-love.load|
    |lowmemory|                           |love-love.lowmemory|
    |mousefocus|                          |love-love.mousefocus|
    |mousemoved|                          |love-love.mousemoved|
    |mousepressed|                        |love-love.mousepressed|
    |mousereleased|                       |love-love.mousereleased|
    |quit|                                |love-love.quit|
    |resize|                              |love-love.resize|
    |run|                                 |love-love.run|
    |textedited|                          |love-love.textedited|
    |textinput|                           |love-love.textinput|
    |threaderror|                         |love-love.threaderror|
    |touchmoved|                          |love-love.touchmoved|
    |touchpressed|                        |love-love.touchpressed|
    |touchreleased|                       |love-love.touchreleased|
    |update|                              |love-love.update|
    |visible|                             |love-love.visible|
    |wheelmoved|                          |love-love.wheelmoved|

-------------------------------------------------------------------------------
                                                               *love-love.conf*
|love.conf|

If a file called conf.lua is present in your game folder (or .love file), it is
run before the LÖVE modules are loaded. You can use this file to overwrite the
love.conf function, which is later called by the LÖVE 'boot' script. Using the
love.conf function, you can set some configuration options, and change things
like the default size of the window, which modules are loaded, and other stuff.

Synopses:

    1.  |love.conf|( `t` )

Variants:

    1.  |love.conf|( `t` )

        See function description

        returns:

            None

        arguments:

            `t`: |lrv-table|

                The love.conf function takes one argument: a table filled with
                all the default values which you can overwrite to your liking.
                If you want to change the default window size, for instance,
                do:

                function love.conf(t)
                    t.window.width = 1024
                    t.window.height = 768
                end

                If you don't need the physics module or joystick module, do the
                following.

                function love.conf(t)
                    t.modules.joystick = false
                    t.modules.physics = false
                end

                Setting unused modules to false is encouraged when you release
                your game. It reduces startup time slightly (especially if the
                joystick module is disabled) and reduces memory usage
                (slightly).

                Note that you can't disable love.filesystem; it's mandatory.
                The same goes for the love module itself. love.graphics needs
                love.window to be enabled.

                `identity`: |lrv-string|

                    This flag determines the name of the save directory for
                    your game. Note that you can only specify the name, not the
                    location where it will be created:
                    t.identity = "gabe_HL3" -- Correct

                    t.identity = "c:/Users/gabe/HL3" -- Incorrect
                    Alternatively love.filesystem.setIdentity can be used to
                    set the save directory outside of the config file.

                `appendidentity`: |lrv-boolean|

                    This flag determines if game directory should be searched
                    first then save directory (true) or otherwise (false)

                `version`: |lrv-string|

                    t.version should be a string, representing the version of
                    LÖVE for which your game was made. It should be formatted
                    as "X.Y.Z" where X is the major release number, Y the
                    minor, and Z the patch level. It allows LÖVE to display a
                    warning if it isn't compatible. Its default is the version
                    of LÖVE running.

                `console`: |lrv-boolean|

                    Determines whether a console should be opened alongside the
                    game window (Windows only) or not. Note: On OSX you can get
                    console output by running LÖVE through the terminal.

                `accelerometerjoystick`: |lrv-boolean|

                    Sets whether the device accelerometer on iOS and Android
                    should be exposed as a 3-axis Joystick. Disabling the
                    accelerometer when it's not used may reduce CPU usage.

                `externalstorage`: |lrv-boolean|

                    Sets whether files are saved in external storage (true) or
                    internal storage (false) on Android.

                `gammacorrect`: |lrv-boolean|

                    Determines whether gamma-correct rendering is enabled, when
                    the system supports it.

                `audio`: |lrv-table|

                    Audio options.

                    `mic`: |lrv-boolean|

                        Request microphone permission from the user. When user
                        allows it, love.audio.getRecordingDevices will lists
                        recording devices available. Otherwise,
                        love.audio.getRecordingDevices returns empty table and
                        a message is shown to inform user when called.

                    `mixwithsystem`: |lrv-boolean|

                        Sets whether background audio / music from other apps
                        should play while LÖVE is open. See
                        love.system.hasBackgroundMusic for more details.

                `window`: |lrv-table|

                    It is possible to defer window creation until
                    love.window.setMode is first called in your code. To do so,
                    set t.window = nil in love.conf (or t.screen = nil in older
                    versions.) If this is done, LÖVE may crash if any function
                    from love.graphics is called before the first
                    love.window.setMode in your code.

                    The t.window table was named t.screen in versions prior to
                    0.9.0. The t.screen table doesn't exist in love.conf in
                    0.9.0, and the t.window table doesn't exist in love.conf in
                    0.8.0. This means love.conf will fail to execute (therefore
                    it will fall back to default values) if care is not taken
                    to use the correct table for the LÖVE version being used.

                    `title`: |lrv-string|

                        Sets the title of the window the game is in.
                        Alternatively love.window.setTitle can be used to
                        change the window title outside of the config file.

                    `icon`: |lrv-string|

                        A filepath to an image to use as the window's icon. Not
                        all operating systems support very large icon images.
                        The icon can also be changed with love.window.setIcon.

                    `width`: |lrv-number|

                        Sets the window's dimensions. If these flags are set to
                        0 LÖVE automatically uses the user's desktop
                        dimensions.

                    `height`: |lrv-number|

                        Sets the window's dimensions. If these flags are set to
                        0 LÖVE automatically uses the user's desktop
                        dimensions.

                    `borderless`: |lrv-boolean|

                        Removes all border visuals from the window. Note that
                        the effects may wary between operating systems.

                    `resizable`: |lrv-boolean|

                        If set to true this allows the user to resize the
                        game's window.

                    `minwidth`: |lrv-number|

                        Sets the minimum width and height for the game's window
                        if it can be resized by the user. If you set lower
                        values to window.width and window.height LÖVE will
                        always favor the minimum dimensions set via
                        window.minwidth and window.minheight.

                    `minheight`: |lrv-number|

                        Sets the minimum width and height for the game's window
                        if it can be resized by the user. If you set lower
                        values to window.width and window.height LÖVE will
                        always favor the minimum dimensions set via
                        window.minwidth and window.minheight.

                    `fullscreen`: |lrv-boolean|

                        Whether to run the game in fullscreen (true) or
                        windowed (false) mode. The fullscreen can also be
                        toggled via love.window.setFullscreen or
                        love.window.setMode.

                    `fullscreentype`: |lrv-string|

                        Specifies the type of fullscreen mode to use (normal or
                        desktop). Generally the desktop is recommended, as it
                        is less restrictive than normal mode on some operating
                        systems.

                    `usedpiscale`: |lrv-boolean|

                        Sets whetever to enable or disable automatic DPI
                        scaling.

                    `vsync`: |lrv-number|

                        Enables or deactivates vertical synchronization. Vsync
                        tries to keep the game at a steady framerate and can
                        prevent issues like screen tearing. It is recommended
                        to keep vsync activated if you don't know about the
                        possible implications of turning it off. Before LÖVE
                        11.0, this value was boolean (true or false). Since
                        LÖVE 11.0, this value is number (1 to enable vsync, 0
                        to disable vsync, -1 to use adaptive vsync when
                        supported).

                        Note that in iOS, vertical synchronization is always
                        enabled and cannot be changed.

                    `depth`: |lrv-number|

                        The number of bits per sample in the depth buffer
                        (16/24/32, default nil)

                    `stencil`: |lrv-number|

                        Then number of bits per sample in the depth buffer
                        (generally 8, default nil)

                    `msaa`: |lrv-number|

                        The number of samples to use with multi-sampled
                        antialiasing.

                    `display`: |lrv-number|

                        The index of the display to show the window in, if
                        multiple monitors are available.

                    `highdpi`: |lrv-boolean|

                        See love.window.getPixelScale, love.window.toPixels,
                        and love.window.fromPixels. It is recommended to keep
                        this option disabled if you can't test your game on a
                        Mac or iOS system with a Retina display, because code
                        will need tweaking to make sure things look correct.

                    `x`: |lrv-number|

                        Determines the position of the window on the user's
                        screen. Alternatively love.window.setPosition can be
                        used to change the position on the fly.

                    `y`: |lrv-number|

                        Determines the position of the window on the user's
                        screen. Alternatively love.window.setPosition can be
                        used to change the position on the fly.

                `modules`: |lrv-table|

                    Module options.

                    `audio`: |lrv-boolean|

                        Enable the audio module.

                    `event`: |lrv-boolean|

                        Enable the event module.

                    `graphics`: |lrv-boolean|

                        Enable the graphics module.

                    `image`: |lrv-boolean|

                        Enable the image module.

                    `joystick`: |lrv-boolean|

                        Enable the joystick module.

                    `keyboard`: |lrv-boolean|

                        Enable the keyboard module.

                    `math`: |lrv-boolean|

                        Enable the math module.

                    `mouse`: |lrv-boolean|

                        Enable the mouse module.

                    `physics`: |lrv-boolean|

                        Enable the physics module.

                    `sound`: |lrv-boolean|

                        Enable the sound module.

                    `system`: |lrv-boolean|

                        Enable the system module.

                    `timer`: |lrv-boolean|

                        Enable the timer module.

                    `touch`: |lrv-boolean|

                        Enable the touch module.

                    `video`: |lrv-boolean|

                        Enable the video module.

                    `window`: |lrv-boolean|

                        Enable the window module.

                    `thread`: |lrv-boolean|

                        Enable the thread module.

-------------------------------------------------------------------------------
                                                   *love-love.directorydropped*
|love.directorydropped|

Callback function triggered when a directory is dragged and dropped onto the
window.

Synopses:

    1.  |love.directorydropped|( `path` )

Variants:

    1.  |love.directorydropped|( `path` )

        Paths passed into this callback are able to be used with love.filesystem.mount, which is the only way to get read access via love.filesystem to the dropped directory. love.filesystem.mount does not generally accept other full platform-dependent directory paths that haven't been dragged and dropped onto the window.

        returns:

            None

        arguments:

            `path`: |lrv-string|

                The full platform-dependent path to the directory. It can be
                used as an argument to love.filesystem.mount, in order to gain
                read access to the directory with love.filesystem.

-------------------------------------------------------------------------------
                                                     *love-love.displayrotated*
|love.displayrotated|

Called when the device display orientation changed, for example, user rotated
their phone 180 degrees.

Synopses:

    1.  |love.displayrotated|( `index`, `orientation` )

Variants:

    1.  |love.displayrotated|( `index`, `orientation` )

        See function description

        returns:

            None

        arguments:

            `index`: |lrv-number|

                The index of the display that changed orientation.

            `orientation`: <DisplayOrientation>

                The new orientation.

-------------------------------------------------------------------------------
                                                               *love-love.draw*
|love.draw|

Callback function used to draw on the screen every frame.

Synopses:

    1.  |love.draw|()

Variants:

    1.  |love.draw|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-love.errorhandler*
|love.errorhandler|

The error handler, used to display error messages.

Synopses:

    1.  |love.errorhandler|( `msg` )

Variants:

    1.  |love.errorhandler|( `msg` )

        See function description

        returns:

            None

        arguments:

            `msg`: |lrv-string|

                The error message.

-------------------------------------------------------------------------------
                                                        *love-love.filedropped*
|love.filedropped|

Callback function triggered when a file is dragged and dropped onto the window.

Synopses:

    1.  |love.filedropped|( `file` )

Variants:

    1.  |love.filedropped|( `file` )

        

        returns:

            None

        arguments:

            `file`: <DroppedFile>

                The unopened File object representing the file that was
                dropped.

-------------------------------------------------------------------------------
                                                              *love-love.focus*
|love.focus|

Callback function triggered when window receives or loses focus.

Synopses:

    1.  |love.focus|( `focus` )

Variants:

    1.  |love.focus|( `focus` )

        See function description

        returns:

            None

        arguments:

            `focus`: |lrv-boolean|

                True if the window gains focus, false if it loses focus.

-------------------------------------------------------------------------------
                                                        *love-love.gamepadaxis*
|love.gamepadaxis|

Called when a Joystick's virtual gamepad axis is moved.

Synopses:

    1.  |love.gamepadaxis|( `joystick`, `axis`, `value` )

Variants:

    1.  |love.gamepadaxis|( `joystick`, `axis`, `value` )

        See function description

        returns:

            None

        arguments:

            `joystick`: |love-Joystick|

                The joystick object.

            `axis`: |love-GamepadAxis|

                The virtual gamepad axis.

            `value`: |lrv-number|

                The new axis value.

-------------------------------------------------------------------------------
                                                     *love-love.gamepadpressed*
|love.gamepadpressed|

Called when a Joystick's virtual gamepad button is pressed.

Synopses:

    1.  |love.gamepadpressed|( `joystick`, `button` )

Variants:

    1.  |love.gamepadpressed|( `joystick`, `button` )

        See function description

        returns:

            None

        arguments:

            `joystick`: |love-Joystick|

                The joystick object.

            `button`: |love-GamepadButton|

                The virtual gamepad button.

-------------------------------------------------------------------------------
                                                    *love-love.gamepadreleased*
|love.gamepadreleased|

Called when a Joystick's virtual gamepad button is released.

Synopses:

    1.  |love.gamepadreleased|( `joystick`, `button` )

Variants:

    1.  |love.gamepadreleased|( `joystick`, `button` )

        See function description

        returns:

            None

        arguments:

            `joystick`: |love-Joystick|

                The joystick object.

            `button`: |love-GamepadButton|

                The virtual gamepad button.

-------------------------------------------------------------------------------
                                                      *love-love.joystickadded*
|love.joystickadded|

Called when a Joystick is connected.

Synopses:

    1.  |love.joystickadded|( `joystick` )

Variants:

    1.  |love.joystickadded|( `joystick` )

        This callback is also triggered after love.load for every Joystick which was already connected when the game started up.

        returns:

            None

        arguments:

            `joystick`: |love-Joystick|

                The newly connected Joystick object.

-------------------------------------------------------------------------------
                                                       *love-love.joystickaxis*
|love.joystickaxis|

Called when a joystick axis moves.

Synopses:

    1.  |love.joystickaxis|( `joystick`, `axis`, `value` )

Variants:

    1.  |love.joystickaxis|( `joystick`, `axis`, `value` )

        See function description

        returns:

            None

        arguments:

            `joystick`: |love-Joystick|

                The joystick object.

            `axis`: |lrv-number|

                The axis number.

            `value`: |lrv-number|

                The new axis value.

-------------------------------------------------------------------------------
                                                        *love-love.joystickhat*
|love.joystickhat|

Called when a joystick hat direction changes.

Synopses:

    1.  |love.joystickhat|( `joystick`, `hat`, `direction` )

Variants:

    1.  |love.joystickhat|( `joystick`, `hat`, `direction` )

        See function description

        returns:

            None

        arguments:

            `joystick`: |love-Joystick|

                The joystick object.

            `hat`: |lrv-number|

                The hat number.

            `direction`: |love-JoystickHat|

                The new hat direction.

-------------------------------------------------------------------------------
                                                    *love-love.joystickpressed*
|love.joystickpressed|

Called when a joystick button is pressed.

Synopses:

    1.  |love.joystickpressed|( `joystick`, `button` )

Variants:

    1.  |love.joystickpressed|( `joystick`, `button` )

        See function description

        returns:

            None

        arguments:

            `joystick`: |love-Joystick|

                The joystick object.

            `button`: |lrv-number|

                The button number.

-------------------------------------------------------------------------------
                                                   *love-love.joystickreleased*
|love.joystickreleased|

Called when a joystick button is released.

Synopses:

    1.  |love.joystickreleased|( `joystick`, `button` )

Variants:

    1.  |love.joystickreleased|( `joystick`, `button` )

        See function description

        returns:

            None

        arguments:

            `joystick`: |love-Joystick|

                The joystick object.

            `button`: |lrv-number|

                The button number.

-------------------------------------------------------------------------------
                                                    *love-love.joystickremoved*
|love.joystickremoved|

Called when a Joystick is disconnected.

Synopses:

    1.  |love.joystickremoved|( `joystick` )

Variants:

    1.  |love.joystickremoved|( `joystick` )

        See function description

        returns:

            None

        arguments:

            `joystick`: |love-Joystick|

                The now-disconnected Joystick object.

-------------------------------------------------------------------------------
                                                         *love-love.keypressed*
|love.keypressed|

Callback function triggered when a key is pressed.

Synopses:

    1.  |love.keypressed|( `key`, `scancode`, `isrepeat` )
    2.  |love.keypressed|( `key`, `isrepeat` )

Variants:

    1.  |love.keypressed|( `key`, `scancode`, `isrepeat` )

        Scancodes are keyboard layout-independent, so the scancode 'w' will be generated if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.

Key repeat needs to be enabled with love.keyboard.setKeyRepeat for repeat keypress events to be received. This does not affect love.textinput.

        returns:

            None

        arguments:

            `key`: |love-KeyConstant|

                Character of the pressed key.

            `scancode`: |love-Scancode|

                The scancode representing the pressed key.

            `isrepeat`: |lrv-boolean|

                Whether this keypress event is a repeat. The delay between key
                repeats depends on the user's system settings.
    2.  |love.keypressed|( `key`, `isrepeat` )

        Key repeat needs to be enabled with love.keyboard.setKeyRepeat for repeat keypress events to be received.

        returns:

            None

        arguments:

            `key`: |love-KeyConstant|

                Character of the key pressed.

            `isrepeat`: |lrv-boolean|

                Whether this keypress event is a repeat. The delay between key
                repeats depends on the user's system settings.

-------------------------------------------------------------------------------
                                                        *love-love.keyreleased*
|love.keyreleased|

Callback function triggered when a keyboard key is released.

Synopses:

    1.  |love.keyreleased|( `key`, `scancode` )

Variants:

    1.  |love.keyreleased|( `key`, `scancode` )

        Scancodes are keyboard layout-independent, so the scancode 'w' will be used if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.

        returns:

            None

        arguments:

            `key`: |love-KeyConstant|

                Character of the released key.

            `scancode`: |love-Scancode|

                The scancode representing the released key.

-------------------------------------------------------------------------------
                                                               *love-love.load*
|love.load|

This function is called exactly once at the beginning of the game.

Synopses:

    1.  |love.load|( `arg`, `unfilteredArg` )

Variants:

    1.  |love.load|( `arg`, `unfilteredArg` )

        In LÖVE 11.0, the passed arguments excludes the game name and the fused command-line flag (if exist) when runs from non-fused LÖVE executable. Previous version pass the argument as-is without any filtering.

        returns:

            None

        arguments:

            `arg`: |lrv-table|

                Command-line arguments given to the game.

            `unfilteredArg`: |lrv-table|

                Unfiltered command-line arguments given to the executable (see
                #Notes).

-------------------------------------------------------------------------------
                                                          *love-love.lowmemory*
|love.lowmemory|

Callback function triggered when the system is running out of memory on mobile
devices.

Mobile operating systems may forcefully kill the game if it uses too much
memory, so any non-critical resource should be removed if possible (by setting
all variables referencing the resources to '''nil'''), when this event is
triggered. Sounds and images in particular tend to use the most memory.

Synopses:

    1.  |love.lowmemory|()

Variants:

    1.  |love.lowmemory|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-love.mousefocus*
|love.mousefocus|

Callback function triggered when window receives or loses mouse focus.

Synopses:

    1.  |love.mousefocus|( `focus` )

Variants:

    1.  |love.mousefocus|( `focus` )

        See function description

        returns:

            None

        arguments:

            `focus`: |lrv-boolean|

                Whether the window has mouse focus or not.

-------------------------------------------------------------------------------
                                                         *love-love.mousemoved*
|love.mousemoved|

Callback function triggered when the mouse is moved.

Synopses:

    1.  |love.mousemoved|( `x`, `y`, `dx`, `dy`, `istouch` )

Variants:

    1.  |love.mousemoved|( `x`, `y`, `dx`, `dy`, `istouch` )

        If Relative Mode is enabled for the mouse, the '''dx''' and '''dy''' arguments of this callback will update but '''x''' and '''y''' are not guaranteed to.

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The mouse position on the x-axis.

            `y`: |lrv-number|

                The mouse position on the y-axis.

            `dx`: |lrv-number|

                The amount moved along the x-axis since the last time
                love.mousemoved was called.

            `dy`: |lrv-number|

                The amount moved along the y-axis since the last time
                love.mousemoved was called.

            `istouch`: |lrv-boolean|

                True if the mouse button press originated from a touchscreen
                touch-press.

-------------------------------------------------------------------------------
                                                       *love-love.mousepressed*
|love.mousepressed|

Callback function triggered when a mouse button is pressed.

Synopses:

    1.  |love.mousepressed|( `x`, `y`, `button`, `istouch`, `presses` )

Variants:

    1.  |love.mousepressed|( `x`, `y`, `button`, `istouch`, `presses` )

        Use love.wheelmoved to detect mouse wheel motion. It will not register as a button press in version 0.10.0 and newer.

        returns:

            None

        arguments:

            `x`: |lrv-number|

                Mouse x position, in pixels.

            `y`: |lrv-number|

                Mouse y position, in pixels.

            `button`: |lrv-number|

                The button index that was pressed. 1 is the primary mouse
                button, 2 is the secondary mouse button and 3 is the middle
                button. Further buttons are mouse dependent.

            `istouch`: |lrv-boolean|

                True if the mouse button press originated from a touchscreen
                touch-press.

            `presses`: |lrv-number|

                The number of presses in a short time frame and small area,
                used to simulate double, triple clicks

-------------------------------------------------------------------------------
                                                      *love-love.mousereleased*
|love.mousereleased|

Callback function triggered when a mouse button is released.

Synopses:

    1.  |love.mousereleased|( `x`, `y`, `button`, `istouch`, `presses`
        )

Variants:

    1.  |love.mousereleased|( `x`, `y`, `button`, `istouch`, `presses`
        )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                Mouse x position, in pixels.

            `y`: |lrv-number|

                Mouse y position, in pixels.

            `button`: |lrv-number|

                The button index that was released. 1 is the primary mouse
                button, 2 is the secondary mouse button and 3 is the middle
                button. Further buttons are mouse dependent.

            `istouch`: |lrv-boolean|

                True if the mouse button release originated from a touchscreen
                touch-release.

            `presses`: |lrv-number|

                The number of presses in a short time frame and small area,
                used to simulate double, triple clicks

-------------------------------------------------------------------------------
                                                               *love-love.quit*
|love.quit|

Callback function triggered when the game is closed.

Synopses:

    1.  `r` = |love.quit|()

Variants:

    1.  `r` = |love.quit|()

        See function description

        returns:

            `r`: |lrv-boolean|

                Abort quitting. If true, do not close the game.

        arguments:

            None

-------------------------------------------------------------------------------
                                                             *love-love.resize*
|love.resize|

Called when the window is resized, for example if the user resizes the window,
or if love.window.setMode is called with an unsupported width or height in
fullscreen and the window chooses the closest appropriate size.

Synopses:

    1.  |love.resize|( `w`, `h` )

Variants:

    1.  |love.resize|( `w`, `h` )

        Calls to love.window.setMode will '''only''' trigger this event if the width or height of the window after the call doesn't match the requested width and height. This can happen if a fullscreen mode is requested which doesn't match any supported mode, or if the fullscreen type is 'desktop' and the requested width or height don't match the desktop resolution.

Since 11.0, this function returns width and height in DPI-scaled units rather than pixels.

        returns:

            None

        arguments:

            `w`: |lrv-number|

                The new width.

            `h`: |lrv-number|

                The new height.

-------------------------------------------------------------------------------
                                                                *love-love.run*
|love.run|

The main function, containing the main loop. A sensible default is used when
left out.

Synopses:

    1.  `mainLoop` = |love.run|()

Variants:

    1.  `mainLoop` = |love.run|()

        See function description

        returns:

            `mainLoop`: |lrv-function|

                Function which handlers one frame, including events and
                rendering when called.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-love.textedited*
|love.textedited|

Called when the candidate text for an IME (Input Method Editor) has changed.

The candidate text is not the final text that the user will eventually choose.
Use love.textinput for that.

Synopses:

    1.  |love.textedited|( `text`, `start`, `length` )

Variants:

    1.  |love.textedited|( `text`, `start`, `length` )

        

        returns:

            None

        arguments:

            `text`: |lrv-string|

                The UTF-8 encoded unicode candidate text.

            `start`: |lrv-number|

                The start cursor of the selected candidate text.

            `length`: |lrv-number|

                The length of the selected candidate text. May be 0.

-------------------------------------------------------------------------------
                                                          *love-love.textinput*
|love.textinput|

Called when text has been entered by the user. For example if shift-2 is
pressed on an American keyboard layout, the text '@' will be generated.

Synopses:

    1.  |love.textinput|( `text` )

Variants:

    1.  |love.textinput|( `text` )

        Although Lua strings can store UTF-8 encoded unicode text just fine, many functions in Lua's string library will not treat the text as you might expect. For example, #text (and string.len(text)) will give the number of ''bytes'' in the string, rather than the number of unicode characters. The Lua wiki and a presentation by one of Lua's creators give more in-depth explanations, with some tips.

The utf8 library can be used to operate on UTF-8 encoded unicode text (such as the text argument given in this function.)

On Android and iOS, textinput is disabled by default; call love.keyboard.setTextInput to enable it.

        returns:

            None

        arguments:

            `text`: |lrv-string|

                The UTF-8 encoded unicode text.

-------------------------------------------------------------------------------
                                                        *love-love.threaderror*
|love.threaderror|

Callback function triggered when a Thread encounters an error.

Synopses:

    1.  |love.threaderror|( `thread`, `errorstr` )

Variants:

    1.  |love.threaderror|( `thread`, `errorstr` )

        See function description

        returns:

            None

        arguments:

            `thread`: |love-Thread|

                The thread which produced the error.

            `errorstr`: |lrv-string|

                The error message.

-------------------------------------------------------------------------------
                                                         *love-love.touchmoved*
|love.touchmoved|

Callback function triggered when a touch press moves inside the touch screen.

Synopses:

    1.  |love.touchmoved|( `id`, `x`, `y`, `dx`, `dy`, `pressure` )

Variants:

    1.  |love.touchmoved|( `id`, `x`, `y`, `dx`, `dy`, `pressure` )

        The identifier is only guaranteed to be unique for the specific touch press until love.touchreleased is called with that identifier, at which point it may be reused for new touch presses.

The unofficial Android and iOS ports of LÖVE 0.9.2 reported touch positions as normalized values in the range of 1, whereas this API reports positions in pixels.

        returns:

            None

        arguments:

            `id`: |lrv-lightuserdata|

                The identifier for the touch press.

            `x`: |lrv-number|

                The x-axis position of the touch inside the window, in pixels.

            `y`: |lrv-number|

                The y-axis position of the touch inside the window, in pixels.

            `dx`: |lrv-number|

                The x-axis movement of the touch inside the window, in pixels.

            `dy`: |lrv-number|

                The y-axis movement of the touch inside the window, in pixels.

            `pressure`: |lrv-number|

                The amount of pressure being applied. Most touch screens aren't
                pressure sensitive, in which case the pressure will be 1.

-------------------------------------------------------------------------------
                                                       *love-love.touchpressed*
|love.touchpressed|

Callback function triggered when the touch screen is touched.

Synopses:

    1.  |love.touchpressed|( `id`, `x`, `y`, `dx`, `dy`, `pressure` )

Variants:

    1.  |love.touchpressed|( `id`, `x`, `y`, `dx`, `dy`, `pressure` )

        The identifier is only guaranteed to be unique for the specific touch press until love.touchreleased is called with that identifier, at which point it may be reused for new touch presses.

The unofficial Android and iOS ports of LÖVE 0.9.2 reported touch positions as normalized values in the range of 1, whereas this API reports positions in pixels.

        returns:

            None

        arguments:

            `id`: |lrv-lightuserdata|

                The identifier for the touch press.

            `x`: |lrv-number|

                The x-axis position of the touch press inside the window, in
                pixels.

            `y`: |lrv-number|

                The y-axis position of the touch press inside the window, in
                pixels.

            `dx`: |lrv-number|

                The x-axis movement of the touch press inside the window, in
                pixels. This should always be zero.

            `dy`: |lrv-number|

                The y-axis movement of the touch press inside the window, in
                pixels. This should always be zero.

            `pressure`: |lrv-number|

                The amount of pressure being applied. Most touch screens aren't
                pressure sensitive, in which case the pressure will be 1.

-------------------------------------------------------------------------------
                                                      *love-love.touchreleased*
|love.touchreleased|

Callback function triggered when the touch screen stops being touched.

Synopses:

    1.  |love.touchreleased|( `id`, `x`, `y`, `dx`, `dy`, `pressure` )

Variants:

    1.  |love.touchreleased|( `id`, `x`, `y`, `dx`, `dy`, `pressure` )

        The identifier is only guaranteed to be unique for the specific touch press until love.touchreleased is called with that identifier, at which point it may be reused for new touch presses.

The unofficial Android and iOS ports of LÖVE 0.9.2 reported touch positions as normalized values in the range of 1, whereas this API reports positions in pixels.

        returns:

            None

        arguments:

            `id`: |lrv-lightuserdata|

                The identifier for the touch press.

            `x`: |lrv-number|

                The x-axis position of the touch inside the window, in pixels.

            `y`: |lrv-number|

                The y-axis position of the touch inside the window, in pixels.

            `dx`: |lrv-number|

                The x-axis movement of the touch inside the window, in pixels.

            `dy`: |lrv-number|

                The y-axis movement of the touch inside the window, in pixels.

            `pressure`: |lrv-number|

                The amount of pressure being applied. Most touch screens aren't
                pressure sensitive, in which case the pressure will be 1.

-------------------------------------------------------------------------------
                                                             *love-love.update*
|love.update|

Callback function used to update the state of the game every frame.

Synopses:

    1.  |love.update|( `dt` )

Variants:

    1.  |love.update|( `dt` )

        See function description

        returns:

            None

        arguments:

            `dt`: |lrv-number|

                Time since the last update in seconds.

-------------------------------------------------------------------------------
                                                            *love-love.visible*
|love.visible|

Callback function triggered when window is minimized/hidden or unminimized by
the user.

Synopses:

    1.  |love.visible|( `visible` )

Variants:

    1.  |love.visible|( `visible` )

        See function description

        returns:

            None

        arguments:

            `visible`: |lrv-boolean|

                True if the window is visible, false if it isn't.

-------------------------------------------------------------------------------
                                                         *love-love.wheelmoved*
|love.wheelmoved|

Callback function triggered when the mouse wheel is moved.

Synopses:

    1.  |love.wheelmoved|( `x`, `y` )

Variants:

    1.  |love.wheelmoved|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                Amount of horizontal mouse wheel movement. Positive values
                indicate movement to the right.

            `y`: |lrv-number|

                Amount of vertical mouse wheel movement. Positive values
                indicate upward movement.
-------------------------------------------------------------------------------
                                                              *love-love-enums*
The enums of |love|:

    None

-------------------------------------------------------------------------------
                                                          *love-love-functions*
The functions of |love|:

    |getVersion|                          |love-love.getVersion|
    |hasDeprecationOutput|                |love-love.hasDeprecationOutput|
    |setDeprecationOutput|                |love-love.setDeprecationOutput|

-------------------------------------------------------------------------------
                                                         *love-love.getVersion*
|love.getVersion|

Gets the current running version of LÖVE.

Synopses:

    1.  `major`, `minor`, `revision`, `codename` = |love.getVersion|()

Variants:

    1.  `major`, `minor`, `revision`, `codename` = |love.getVersion|()

        For LÖVE versions below 0.9.1, the following variables can be used instead (and still work in 0.9.2 and newer):

love._version_major

love._version_minor

love._version_revision

        returns:

            `major`: |lrv-number|

                The major version of LÖVE, i.e. 0 for version 0.9.1.

            `minor`: |lrv-number|

                The minor version of LÖVE, i.e. 9 for version 0.9.1.

            `revision`: |lrv-number|

                The revision version of LÖVE, i.e. 1 for version 0.9.1.

            `codename`: |lrv-string|

                The codename of the current version, i.e. 'Baby Inspector' for
                version 0.9.1.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-love.hasDeprecationOutput*
|love.hasDeprecationOutput|

Gets whether LÖVE displays warnings when using deprecated functionality. It is
disabled by default in fused mode, and enabled by default otherwise.

When deprecation output is enabled, the first use of a formally deprecated
LÖVE API will show a message at the bottom of the screen for a short time, and
print the message to the console.

Synopses:

    1.  `enabled` = |love.hasDeprecationOutput|()

Variants:

    1.  `enabled` = |love.hasDeprecationOutput|()

        See function description

        returns:

            `enabled`: |lrv-boolean|

                Whether deprecation output is enabled.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-love.setDeprecationOutput*
|love.setDeprecationOutput|

Sets whether LÖVE displays warnings when using deprecated functionality. It is
disabled by default in fused mode, and enabled by default otherwise.

When deprecation output is enabled, the first use of a formally deprecated
LÖVE API will show a message at the bottom of the screen for a short time, and
print the message to the console.

Synopses:

    1.  |love.setDeprecationOutput|( `enable` )

Variants:

    1.  |love.setDeprecationOutput|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: |lrv-boolean|

                Whether to enable or disable deprecation output.
-------------------------------------------------------------------------------
                                                              *love-love-types*
The types of |love|:

    |ByteData|                            |love-ByteData|
    |Data|                                |love-Data|
    |Drawable|                            |love-Drawable|
    |Object|                              |love-Object|

-------------------------------------------------------------------------------
                                                                *love-ByteData*
|ByteData|

Data object containing arbitrary bytes in an contiguous memory.

There are currently no LÖVE functions provided for manipulating the contents
of a ByteData, but Data:getPointer can be used with LuaJIT's FFI to access and
write to the contents directly.

                                                   *love-ByteData-constructors*
    constructors:

        None

                                                     *love-ByteData-supertypes*
    supertypes:

        |Object|                          |love-Object|
        |Data|                            |love-Data|

                                                       *love-ByteData-subtypes*
    subtypes:

        None

                                                      *love-ByteData-functions*
    functions:

        None

-------------------------------------------------------------------------------
                                                                    *love-Data*
|Data|

The superclass of all data.

                                                       *love-Data-constructors*
    constructors:

        None

                                                         *love-Data-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                           *love-Data-subtypes*
    subtypes:

        None

                                                          *love-Data-functions*
    functions:

        None

-------------------------------------------------------------------------------
                                                                *love-Drawable*
|Drawable|

Superclass for all things that can be drawn on screen. This is an abstract type
that can't be created directly.

                                                   *love-Drawable-constructors*
    constructors:

        None

                                                     *love-Drawable-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                       *love-Drawable-subtypes*
    subtypes:

        None

                                                      *love-Drawable-functions*
    functions:

        None

-------------------------------------------------------------------------------
                                                                  *love-Object*
|Object|

The superclass of all LÖVE types.

                                                     *love-Object-constructors*
    constructors:

        None

                                                       *love-Object-supertypes*
    supertypes:

        None

                                                         *love-Object-subtypes*
    subtypes:

        None

                                                        *love-Object-functions*
    functions:

        None

===============================================================================
                                                              *love-love.audio*
|love.audio|

Provides an interface to create noise with the user's speakers.

    |callbacks|                           |love-love.audio-callbacks|
    |enums|                               |love-love.audio-enums|
    |functions|                           |love-love.audio-functions|
    |types|                               |love-love.audio-types|

-------------------------------------------------------------------------------
                                                    *love-love.audio-callbacks*
The callbacks of |love.audio|:

    None

-------------------------------------------------------------------------------
                                                        *love-love.audio-enums*
The enums of |love.audio|:

    |DistanceModel|                       |love-DistanceModel|
    |EffectType|                          |love-EffectType|
    |EffectWaveform|                      |love-EffectWaveform|
    |FilterType|                          |love-FilterType|
    |SourceType|                          |love-SourceType|
    |TimeUnit|                            |love-TimeUnit|

-------------------------------------------------------------------------------
                                                           *love-DistanceModel*
|DistanceModel|

The different distance models.

Extended information can be found in the chapter "3.4. Attenuation By Distance"
of the OpenAL 1.1 specification.

    constants:

        `none`: |lrv-string|

            Sources do not get attenuated.

        `inverse`: |lrv-string|

            Inverse distance attenuation.

        `inverseclamped`: |lrv-string|

            Inverse distance attenuation. Gain is clamped. In version 0.9.2 and
            older this is named '''inverse clamped'''.

        `linear`: |lrv-string|

            Linear attenuation.

        `linearclamped`: |lrv-string|

            Linear attenuation. Gain is clamped. In version 0.9.2 and older
            this is named '''linear clamped'''.

        `exponent`: |lrv-string|

            Exponential attenuation.

        `exponentclamped`: |lrv-string|

            Exponential attenuation. Gain is clamped. In version 0.9.2 and
            older this is named '''exponent clamped'''.

-------------------------------------------------------------------------------
                                                              *love-EffectType*
|EffectType|

The different types of effects supported by love.audio.setEffect.

    constants:

        `chorus`: |lrv-string|

            Plays multiple copies of the sound with slight pitch and time
            variation. Used to make sounds sound "fuller" or "thicker".

        `compressor`: |lrv-string|

            Decreases the dynamic range of the sound, making the loud and quiet
            parts closer in volume, producing a more uniform amplitude
            throughout time.

        `distortion`: |lrv-string|

            Alters the sound by amplifying it until it clips, shearing off
            parts of the signal, leading to a compressed and distorted sound.

        `echo`: |lrv-string|

            Decaying feedback based effect, on the order of seconds. Also known
            as delay; causes the sound to repeat at regular intervals at a
            decreasing volume.

        `equalizer`: |lrv-string|

            Adjust the frequency components of the sound using a 4-band
            (low-shelf, two band-pass and a high-shelf) equalizer.

        `flanger`: |lrv-string|

            Plays two copies of the sound; while varying the phase, or
            equivalently delaying one of them, by amounts on the order of
            milliseconds, resulting in phasing sounds.

        `reverb`: |lrv-string|

            Decaying feedback based effect, on the order of milliseconds. Used
            to simulate the reflection off of the surroundings.

        `ringmodulator`: |lrv-string|

            An implementation of amplitude modulation; multiplies the source
            signal with a simple waveform, to produce either volume changes, or
            inharmonic overtones.

-------------------------------------------------------------------------------
                                                          *love-EffectWaveform*
|EffectWaveform|

The different types of waveforms that can be used with the '''ringmodulator'''
EffectType.

    constants:

        `sawtooth`: |lrv-string|

            A sawtooth wave, also known as a ramp wave. Named for its linear
            rise, and (near-)instantaneous fall along time.

        `sine`: |lrv-string|

            A sine wave. Follows a trigonometric sine function.

        `square`: |lrv-string|

            A square wave. Switches between high and low states
            (near-)instantaneously.

        `triangle`: |lrv-string|

            A triangle wave. Follows a linear rise and fall that repeats
            periodically.

-------------------------------------------------------------------------------
                                                              *love-FilterType*
|FilterType|

Types of filters for Sources.

    constants:

        `lowpass`: |lrv-string|

            Low-pass filter. High frequency sounds are attenuated.

        `highpass`: |lrv-string|

            High-pass filter. Low frequency sounds are attenuated.

        `bandpass`: |lrv-string|

            Band-pass filter. Both high and low frequency sounds are attenuated
            based on the given parameters.

-------------------------------------------------------------------------------
                                                              *love-SourceType*
|SourceType|

Types of audio sources.

A good rule of thumb is to use stream for music files and static for all short
sound effects. Basically, you want to avoid loading large files into memory at
once.

    constants:

        `static`: |lrv-string|

            The whole audio is decoded.

        `stream`: |lrv-string|

            The audio is decoded in chunks when needed.

        `queue`: |lrv-string|

            The audio must be manually queued by the user.

-------------------------------------------------------------------------------
                                                                *love-TimeUnit*
|TimeUnit|

Units that represent time.

    constants:

        `seconds`: |lrv-string|

            Regular seconds.

        `samples`: |lrv-string|

            Audio samples.

-------------------------------------------------------------------------------
                                                    *love-love.audio-functions*
The functions of |love.audio|:

    |getActiveEffects|                    |love-love.audio.getActiveEffects|
    |getActiveSourceCount|                |love-love.audio.getActiveSourceCou-|
    |getDistanceModel|                    |love-love.audio.getDistanceModel|
    |getDopplerScale|                     |love-love.audio.getDopplerScale|
    |getEffect|                           |love-love.audio.getEffect|
    |getMaxSceneEffects|                  |love-love.audio.getMaxSceneEffects|
    |getMaxSourceEffects|                 |love-love.audio.getMaxSourceEffects|
    |getOrientation|                      |love-love.audio.getOrientation|
    |getPosition|                         |love-love.audio.getPosition|
    |getRecordingDevices|                 |love-love.audio.getRecordingDevices|
    |getSourceCount|                      |love-love.audio.getSourceCount|
    |getVelocity|                         |love-love.audio.getVelocity|
    |getVolume|                           |love-love.audio.getVolume|
    |isEffectsSupported|                  |love-love.audio.isEffectsSupported|
    |newQueueableSource|                  |love-love.audio.newQueueableSource|
    |newSource|                           |love-love.audio.newSource|
    |pause|                               |love-love.audio.pause|
    |play|                                |love-love.audio.play|
    |setDistanceModel|                    |love-love.audio.setDistanceModel|
    |setDopplerScale|                     |love-love.audio.setDopplerScale|
    |setEffect|                           |love-love.audio.setEffect|
    |setMixWithSystem|                    |love-love.audio.setMixWithSystem|
    |setOrientation|                      |love-love.audio.setOrientation|
    |setPosition|                         |love-love.audio.setPosition|
    |setVelocity|                         |love-love.audio.setVelocity|
    |setVolume|                           |love-love.audio.setVolume|
    |stop|                                |love-love.audio.stop|

-------------------------------------------------------------------------------
                                             *love-love.audio.getActiveEffects*
|love.audio.getActiveEffects|

Gets a list of the names of the currently enabled effects.

Synopses:

    1.  `effects` = |love.audio.getActiveEffects|()

Variants:

    1.  `effects` = |love.audio.getActiveEffects|()

        See function description

        returns:

            `effects`: |lrv-table|

                The list of the names of the currently enabled effects.

        arguments:

            None

-------------------------------------------------------------------------------
                                         *love-love.audio.getActiveSourceCount*
|love.audio.getActiveSourceCount|

Gets the current number of simultaneously playing sources.

Synopses:

    1.  `count` = |love.audio.getActiveSourceCount|()

Variants:

    1.  `count` = |love.audio.getActiveSourceCount|()

        See function description

        returns:

            `count`: |lrv-number|

                The current number of simultaneously playing sources.

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-love.audio.getDistanceModel*
|love.audio.getDistanceModel|

Returns the distance attenuation model.

Synopses:

    1.  `model` = |love.audio.getDistanceModel|()

Variants:

    1.  `model` = |love.audio.getDistanceModel|()

        See function description

        returns:

            `model`: |love-DistanceModel|

                The current distance model. The default is 'inverseclamped'.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.audio.getDopplerScale*
|love.audio.getDopplerScale|

Gets the current global scale factor for velocity-based doppler effects.

Synopses:

    1.  `scale` = |love.audio.getDopplerScale|()

Variants:

    1.  `scale` = |love.audio.getDopplerScale|()

        See function description

        returns:

            `scale`: |lrv-number|

                The current doppler scale factor.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.audio.getEffect*
|love.audio.getEffect|

Gets the settings associated with an effect.

Synopses:

    1.  `settings` = |love.audio.getEffect|( `name` )

Variants:

    1.  `settings` = |love.audio.getEffect|( `name` )

        See function description

        returns:

            `settings`: |lrv-table|

                The settings associated with the effect.

        arguments:

            `name`: |lrv-string|

                The name of the effect.

-------------------------------------------------------------------------------
                                           *love-love.audio.getMaxSceneEffects*
|love.audio.getMaxSceneEffects|

Gets the maximum number of active effects supported by the system.

Synopses:

    1.  `maximum` = |love.audio.getMaxSceneEffects|()

Variants:

    1.  `maximum` = |love.audio.getMaxSceneEffects|()

        See function description

        returns:

            `maximum`: |lrv-number|

                The maximum number of active effects.

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-love.audio.getMaxSourceEffects*
|love.audio.getMaxSourceEffects|

Gets the maximum number of active Effects in a single Source object, that the
system can support.

Synopses:

    1.  `maximum` = |love.audio.getMaxSourceEffects|()

Variants:

    1.  `maximum` = |love.audio.getMaxSourceEffects|()

        This function return 0 for system that doesn't support audio effects.

        returns:

            `maximum`: |lrv-number|

                The maximum number of active Effects per Source.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-love.audio.getOrientation*
|love.audio.getOrientation|

Returns the orientation of the listener.

Synopses:

    1.  `fx, fy, fz`, `ux, uy, uz` = |love.audio.getOrientation|()

Variants:

    1.  `fx, fy, fz`, `ux, uy, uz` = |love.audio.getOrientation|()

        See function description

        returns:

            `fx, fy, fz`: |lrv-number|

                Forward vector of the listener orientation.

            `ux, uy, uz`: |lrv-number|

                Up vector of the listener orientation.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-love.audio.getPosition*
|love.audio.getPosition|

Returns the position of the listener. Please note that positional audio only
works for mono (i.e. non-stereo) sources.

Synopses:

    1.  `x`, `y`, `z` = |love.audio.getPosition|()

Variants:

    1.  `x`, `y`, `z` = |love.audio.getPosition|()

        See function description

        returns:

            `x`: |lrv-number|

                The X position of the listener.

            `y`: |lrv-number|

                The Y position of the listener.

            `z`: |lrv-number|

                The Z position of the listener.

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-love.audio.getRecordingDevices*
|love.audio.getRecordingDevices|

Gets a list of RecordingDevices on the system.

The first device in the list is the user's default recording device. The list
may be empty if there are no microphones connected to the system.

Audio recording is currently not supported on iOS.

Synopses:

    1.  `devices` = |love.audio.getRecordingDevices|()

Variants:

    1.  `devices` = |love.audio.getRecordingDevices|()

        Audio recording for Android is supported since 11.3. However, it's not supported when APK from Play Store is used.

        returns:

            `devices`: |lrv-table|

                The list of connected recording devices.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-love.audio.getSourceCount*
|love.audio.getSourceCount|

Gets the current number of simultaneously playing sources.

Synopses:

    1.  `numSources` = |love.audio.getSourceCount|()

Variants:

    1.  `numSources` = |love.audio.getSourceCount|()

        See function description

        returns:

            `numSources`: |lrv-number|

                The current number of simultaneously playing sources.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-love.audio.getVelocity*
|love.audio.getVelocity|

Returns the velocity of the listener.

Synopses:

    1.  `x`, `y`, `z` = |love.audio.getVelocity|()

Variants:

    1.  `x`, `y`, `z` = |love.audio.getVelocity|()

        See function description

        returns:

            `x`: |lrv-number|

                The X velocity of the listener.

            `y`: |lrv-number|

                The Y velocity of the listener.

            `z`: |lrv-number|

                The Z velocity of the listener.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.audio.getVolume*
|love.audio.getVolume|

Returns the master volume.

Synopses:

    1.  `volume` = |love.audio.getVolume|()

Variants:

    1.  `volume` = |love.audio.getVolume|()

        See function description

        returns:

            `volume`: |lrv-number|

                The current master volume

        arguments:

            None

-------------------------------------------------------------------------------
                                           *love-love.audio.isEffectsSupported*
|love.audio.isEffectsSupported|

Gets whether audio effects are supported in the system.

Synopses:

    1.  `supported` = |love.audio.isEffectsSupported|()

Variants:

    1.  `supported` = |love.audio.isEffectsSupported|()

        Older Linux distributions that ship with older OpenAL library may not support audio effects. Furthermore, iOS doesn't

support audio effects at all.

        returns:

            `supported`: |lrv-boolean|

                True if effects are supported, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                           *love-love.audio.newQueueableSource*
|love.audio.newQueueableSource|

Creates a new Source usable for real-time generated sound playback with
Source:queue.

Synopses:

    1.  `source` = |love.audio.newQueueableSource|( `samplerate`,
        `bitdepth`, `channels`, `buffercount` )

Variants:

    1.  `source` = |love.audio.newQueueableSource|( `samplerate`,
        `bitdepth`, `channels`, `buffercount` )

        The sample rate, bit depth, and channel count of any SoundData used with Source:queue must match the parameters given to this constructor.

        returns:

            `source`: |love-Source|

                The new Source usable with Source:queue.

        arguments:

            `samplerate`: |lrv-number|

                Number of samples per second when playing.

            `bitdepth`: |lrv-number|

                Bits per sample (8 or 16).

            `channels`: |lrv-number|

                1 for mono or 2 for stereo.

            `buffercount`: |lrv-number|

                The number of buffers that can be queued up at any given time
                with Source:queue. Cannot be greater than 64. A sensible
                default (~8) is chosen if no value is specified.

-------------------------------------------------------------------------------
                                                    *love-love.audio.newSource*
|love.audio.newSource|

Creates a new Source from a filepath, File, Decoder or SoundData.

Sources created from SoundData are always static.

Synopses:

    1.  `source` = |love.audio.newSource|( `filename`, `type` )
    2.  `source` = |love.audio.newSource|( `file`, `type` )
    3.  `source` = |love.audio.newSource|( `decoder`, `type` )
    4.  `source` = |love.audio.newSource|( `data`, `type` )
    5.  `source` = |love.audio.newSource|( `data` )

Variants:

    1.  `source` = |love.audio.newSource|( `filename`, `type` )

        See function description

        returns:

            `source`: |love-Source|

                A new Source that can play the specified audio.

        arguments:

            `filename`: |lrv-string|

                The filepath to the audio file.

            `type`: |love-SourceType|

                Streaming or static source.
    2.  `source` = |love.audio.newSource|( `file`, `type` )

        See function description

        returns:

            `source`: |love-Source|

                A new Source that can play the specified audio.

        arguments:

            `file`: |love-File|

                A File pointing to an audio file.

            `type`: |love-SourceType|

                Streaming or static source.
    3.  `source` = |love.audio.newSource|( `decoder`, `type` )

        See function description

        returns:

            `source`: |love-Source|

                A new Source that can play the specified audio.

        arguments:

            `decoder`: |love-Decoder|

                The Decoder to create a Source from.

            `type`: |love-SourceType|

                Streaming or static source.
    4.  `source` = |love.audio.newSource|( `data`, `type` )

        See function description

        returns:

            `source`: |love-Source|

                A new Source that can play the specified audio.

        arguments:

            `data`: |love-FileData|

                The FileData to create a Source from.

            `type`: |love-SourceType|

                Streaming or static source.
    5.  `source` = |love.audio.newSource|( `data` )

        See function description

        returns:

            `source`: |love-Source|

                A new Source that can play the specified audio. The SourceType
                of the returned audio is 'static'.

        arguments:

            `data`: |love-SoundData|

                The SoundData to create a Source from.

-------------------------------------------------------------------------------
                                                        *love-love.audio.pause*
|love.audio.pause|

Pauses specific or all currently played Sources.

Synopses:

    1.  `Sources` = |love.audio.pause|()
    2.  |love.audio.pause|( `source`, `...` )
    3.  |love.audio.pause|( `sources` )

Variants:

    1.  `Sources` = |love.audio.pause|()

        Pauses all currently active Sources and returns them.

        returns:

            `Sources`: |lrv-table|

                A table containing a list of Sources that were paused by this
                call.

        arguments:

            None
    2.  |love.audio.pause|( `source`, `...` )

        Pauses the given Sources.

        returns:

            None

        arguments:

            `source`: |love-Source|

                The first Source to pause.

            `...`: |love-Source|

                Additional Sources to pause.
    3.  |love.audio.pause|( `sources` )

        Pauses the given Sources.

        returns:

            None

        arguments:

            `sources`: |lrv-table|

                A table containing a list of Sources to pause.

-------------------------------------------------------------------------------
                                                         *love-love.audio.play*
|love.audio.play|

Plays the specified Source.

Synopses:

    1.  |love.audio.play|( `source` )
    2.  |love.audio.play|( `sources` )
    3.  |love.audio.play|( `source1`, `source2`, `...` )

Variants:

    1.  |love.audio.play|( `source` )

        See function description

        returns:

            None

        arguments:

            `source`: |love-Source|

                The Source to play.
    2.  |love.audio.play|( `sources` )

        Starts playing multiple Sources simultaneously.

        returns:

            None

        arguments:

            `sources`: |lrv-table|

                Table containing a list of Sources to play.
    3.  |love.audio.play|( `source1`, `source2`, `...` )

        Starts playing multiple Sources simultaneously.

        returns:

            None

        arguments:

            `source1`: |love-Source|

                The first Source to play.

            `source2`: |love-Source|

                The second Source to play.

            `...`: |love-Source|

                Additional Sources to play.

-------------------------------------------------------------------------------
                                             *love-love.audio.setDistanceModel*
|love.audio.setDistanceModel|

Sets the distance attenuation model.

Synopses:

    1.  |love.audio.setDistanceModel|( `model` )

Variants:

    1.  |love.audio.setDistanceModel|( `model` )

        See function description

        returns:

            None

        arguments:

            `model`: |love-DistanceModel|

                The new distance model.

-------------------------------------------------------------------------------
                                              *love-love.audio.setDopplerScale*
|love.audio.setDopplerScale|

Sets a global scale factor for velocity-based doppler effects. The default
scale value is 1.

Synopses:

    1.  |love.audio.setDopplerScale|( `scale` )

Variants:

    1.  |love.audio.setDopplerScale|( `scale` )

        See function description

        returns:

            None

        arguments:

            `scale`: |lrv-number|

                The new doppler scale factor. The scale must be greater than 0.

-------------------------------------------------------------------------------
                                                    *love-love.audio.setEffect*
|love.audio.setEffect|

Defines an effect that can be applied to a Source.

Not all system supports audio effects. Use love.audio.isEffectsSupported to
check.

Synopses:

    1.  `success` = |love.audio.setEffect|( `name`, `settings` )
    2.  `success` = |love.audio.setEffect|( `name`, `enabled` )

Variants:

    1.  `success` = |love.audio.setEffect|( `name`, `settings` )

        See function description

        returns:

            `success`: |lrv-boolean|

                Whether the effect was successfully created.

        arguments:

            `name`: |lrv-string|

                The name of the effect.

            `settings`: |lrv-table|

                The settings to use for this effect, with the following fields:

                `type`: |love-EffectType|

                    The type of effect to use.

                `volume`: |lrv-number|

                    The volume of the effect.

                `...`: |lrv-number|

                    Effect-specific settings. See EffectType for available
                    effects and their corresponding settings.
    2.  `success` = |love.audio.setEffect|( `name`, `enabled` )

        See function description

        returns:

            `success`: |lrv-boolean|

                Whether the effect was successfully disabled.

        arguments:

            `name`: |lrv-string|

                The name of the effect.

            `enabled`: |lrv-boolean|

                If false and the given effect name was previously set, disables
                the effect.

-------------------------------------------------------------------------------
                                             *love-love.audio.setMixWithSystem*
|love.audio.setMixWithSystem|

Sets whether the system should mix the audio with the system's audio.

Synopses:

    1.  `success` = |love.audio.setMixWithSystem|( `mix` )

Variants:

    1.  `success` = |love.audio.setMixWithSystem|( `mix` )

        See function description

        returns:

            `success`: |lrv-boolean|

                True if the change succeeded, false otherwise.

        arguments:

            `mix`: |lrv-boolean|

                True to enable mixing, false to disable it.

-------------------------------------------------------------------------------
                                               *love-love.audio.setOrientation*
|love.audio.setOrientation|

Sets the orientation of the listener.

Synopses:

    1.  |love.audio.setOrientation|( `fx, fy, fz`, `ux, uy, uz` )

Variants:

    1.  |love.audio.setOrientation|( `fx, fy, fz`, `ux, uy, uz` )

        See function description

        returns:

            None

        arguments:

            `fx, fy, fz`: |lrv-number|

                Forward vector of the listener orientation.

            `ux, uy, uz`: |lrv-number|

                Up vector of the listener orientation.

-------------------------------------------------------------------------------
                                                  *love-love.audio.setPosition*
|love.audio.setPosition|

Sets the position of the listener, which determines how sounds play.

Synopses:

    1.  |love.audio.setPosition|( `x`, `y`, `z` )

Variants:

    1.  |love.audio.setPosition|( `x`, `y`, `z` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The x position of the listener.

            `y`: |lrv-number|

                The y position of the listener.

            `z`: |lrv-number|

                The z position of the listener.

-------------------------------------------------------------------------------
                                                  *love-love.audio.setVelocity*
|love.audio.setVelocity|

Sets the velocity of the listener.

Synopses:

    1.  |love.audio.setVelocity|( `x`, `y`, `z` )

Variants:

    1.  |love.audio.setVelocity|( `x`, `y`, `z` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The X velocity of the listener.

            `y`: |lrv-number|

                The Y velocity of the listener.

            `z`: |lrv-number|

                The Z velocity of the listener.

-------------------------------------------------------------------------------
                                                    *love-love.audio.setVolume*
|love.audio.setVolume|

Sets the master volume.

Synopses:

    1.  |love.audio.setVolume|( `volume` )

Variants:

    1.  |love.audio.setVolume|( `volume` )

        See function description

        returns:

            None

        arguments:

            `volume`: |lrv-number|

                1.0 is max and 0.0 is off.

-------------------------------------------------------------------------------
                                                         *love-love.audio.stop*
|love.audio.stop|

Stops currently played sources.

Synopses:

    1.  |love.audio.stop|()
    2.  |love.audio.stop|( `source` )
    3.  |love.audio.stop|( `source1`, `source2`, `...` )
    4.  |love.audio.stop|( `sources` )

Variants:

    1.  |love.audio.stop|()

        This function will stop all currently active sources.

        returns:

            None

        arguments:

            None
    2.  |love.audio.stop|( `source` )

        This function will only stop the specified source.

        returns:

            None

        arguments:

            `source`: |love-Source|

                The source on which to stop the playback.
    3.  |love.audio.stop|( `source1`, `source2`, `...` )

        Simultaneously stops all given Sources.

        returns:

            None

        arguments:

            `source1`: |love-Source|

                The first Source to stop.

            `source2`: |love-Source|

                The second Source to stop.

            `...`: |love-Source|

                Additional Sources to stop.
    4.  |love.audio.stop|( `sources` )

        Simultaneously stops all given Sources.

        returns:

            None

        arguments:

            `sources`: |lrv-table|

                A table containing a list of Sources to stop.
-------------------------------------------------------------------------------
                                                        *love-love.audio-types*
The types of |love.audio|:

    |RecordingDevice|                     |love-RecordingDevice|
    |Source|                              |love-Source|

-------------------------------------------------------------------------------
                                                         *love-RecordingDevice*
|RecordingDevice|

Represents an audio input device capable of recording sounds.

                                            *love-RecordingDevice-constructors*
    constructors:

        None

                                              *love-RecordingDevice-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                *love-RecordingDevice-subtypes*
    subtypes:

        None

                                               *love-RecordingDevice-functions*
    functions:

        |getBitDepth|                     |love-RecordingDevice:getBitDepth|
        |getBitDepth|                     |love-RecordingDevice:getBitDepth|
        |getChannelCount|                 |love-RecordingDevice:getChannelCou-|
        |getData|                         |love-RecordingDevice:getData|
        |getName|                         |love-RecordingDevice:getName|
        |getSampleCount|                  |love-RecordingDevice:getSampleCount|
        |getSampleRate|                   |love-RecordingDevice:getSampleRate|
        |isRecording|                     |love-RecordingDevice:isRecording|
        |start|                           |love-RecordingDevice:start|
        |stop|                            |love-RecordingDevice:stop|

-------------------------------------------------------------------------------
                                             *love-RecordingDevice:getBitDepth*
|RecordingDevice:getBitDepth|

Gets the number of bits per sample in the data currently being recorded.

Synopses:

    1.  `bits` = |RecordingDevice:getBitDepth|()

Variants:

    1.  `bits` = |RecordingDevice:getBitDepth|()

        See function description

        returns:

            `bits`: |lrv-number|

                The number of bits per sample in the data that's currently
                being recorded.

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-RecordingDevice:getBitDepth*
|RecordingDevice:getBitDepth|

Gets the number of bits per sample in the data currently being recorded.

Synopses:

    1.  `bits` = |RecordingDevice:getBitDepth|()

Variants:

    1.  `bits` = |RecordingDevice:getBitDepth|()

        See function description

        returns:

            `bits`: |lrv-number|

                The number of bits per sample in the data that's currently
                being recorded.

        arguments:

            None

-------------------------------------------------------------------------------
                                         *love-RecordingDevice:getChannelCount*
|RecordingDevice:getChannelCount|

Gets the number of channels currently being recorded (mono or stereo).

Synopses:

    1.  `channels` = |RecordingDevice:getChannelCount|()

Variants:

    1.  `channels` = |RecordingDevice:getChannelCount|()

        See function description

        returns:

            `channels`: |lrv-number|

                The number of channels being recorded (1 for mono, 2 for
                stereo).

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-RecordingDevice:getData*
|RecordingDevice:getData|

Gets all recorded audio SoundData stored in the device's internal ring buffer.

The internal ring buffer is cleared when this function is called, so calling it
again will only get audio recorded after the previous call. If the device's
internal ring buffer completely fills up before getData is called, the oldest
data that doesn't fit into the buffer will be lost.

Synopses:

    1.  `data` = |RecordingDevice:getData|()

Variants:

    1.  `data` = |RecordingDevice:getData|()

        See function description

        returns:

            `data`: |love-SoundData|

                The recorded audio data, or nil if the device isn't recording.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-RecordingDevice:getName*
|RecordingDevice:getName|

Gets the name of the recording device.

Synopses:

    1.  `name` = |RecordingDevice:getName|()

Variants:

    1.  `name` = |RecordingDevice:getName|()

        See function description

        returns:

            `name`: |lrv-string|

                The name of the device.

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-RecordingDevice:getSampleCount*
|RecordingDevice:getSampleCount|

Gets the number of currently recorded samples.

Synopses:

    1.  `samples` = |RecordingDevice:getSampleCount|()

Variants:

    1.  `samples` = |RecordingDevice:getSampleCount|()

        See function description

        returns:

            `samples`: |lrv-number|

                The number of samples that have been recorded so far.

        arguments:

            None

-------------------------------------------------------------------------------
                                           *love-RecordingDevice:getSampleRate*
|RecordingDevice:getSampleRate|

Gets the number of samples per second currently being recorded.

Synopses:

    1.  `rate` = |RecordingDevice:getSampleRate|()

Variants:

    1.  `rate` = |RecordingDevice:getSampleRate|()

        See function description

        returns:

            `rate`: |lrv-number|

                The number of samples being recorded per second (sample rate).

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-RecordingDevice:isRecording*
|RecordingDevice:isRecording|

Gets whether the device is currently recording.

Synopses:

    1.  `recording` = |RecordingDevice:isRecording|()

Variants:

    1.  `recording` = |RecordingDevice:isRecording|()

        See function description

        returns:

            `recording`: |lrv-boolean|

                True if the recording, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-RecordingDevice:start*
|RecordingDevice:start|

Begins recording audio using this device.

Synopses:

    1.  `success` = |RecordingDevice:start|( `samplecount`,
        `samplerate`, `bitdepth`, `channels` )

Variants:

    1.  `success` = |RecordingDevice:start|( `samplecount`,
        `samplerate`, `bitdepth`, `channels` )

        A ring buffer is used internally to store recorded data before RecordingDevice:getData or RecordingDevice:stop are called – the former clears the buffer. If the buffer completely fills up before getData or stop are called, the oldest data that doesn't fit into the buffer will be lost.

        returns:

            `success`: |lrv-boolean|

                True if the device successfully began recording using the
                specified parameters, false if not.

        arguments:

            `samplecount`: |lrv-number|

                The maximum number of samples to store in an internal ring
                buffer when recording. RecordingDevice:getData clears the
                internal buffer when called.

            `samplerate`: |lrv-number|

                The number of samples per second to store when recording.

            `bitdepth`: |lrv-number|

                The number of bits per sample.

            `channels`: |lrv-number|

                Whether to record in mono or stereo. Most microphones don't
                support more than 1 channel.

-------------------------------------------------------------------------------
                                                    *love-RecordingDevice:stop*
|RecordingDevice:stop|

Stops recording audio from this device. Any sound data currently in the
device's buffer will be returned.

Synopses:

    1.  `data` = |RecordingDevice:stop|()

Variants:

    1.  `data` = |RecordingDevice:stop|()

        See function description

        returns:

            `data`: |love-SoundData|

                The sound data currently in the device's buffer, or nil if the
                device wasn't recording.

        arguments:

            None

-------------------------------------------------------------------------------
                                                                  *love-Source*
|Source|

A Source represents audio you can play back.

You can do interesting things with Sources, like set the volume, pitch, and its
position relative to the listener. Please note that positional audio only works
for mono (i.e. non-stereo) sources.

The Source controls (play/pause/stop) act according to the following state
table.

                                                     *love-Source-constructors*
    constructors:

        None

                                                       *love-Source-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                         *love-Source-subtypes*
    subtypes:

        None

                                                        *love-Source-functions*
    functions:

        |clone|                           |love-Source:clone|
        |getActiveEffects|                |love-Source:getActiveEffects|
        |getAirAbsorption|                |love-Source:getAirAbsorption|
        |getAttenuationDistances|         |love-Source:getAttenuationDistances|
        |getChannelCount|                 |love-Source:getChannelCount|
        |getCone|                         |love-Source:getCone|
        |getDirection|                    |love-Source:getDirection|
        |getDuration|                     |love-Source:getDuration|
        |getEffect|                       |love-Source:getEffect|
        |getFilter|                       |love-Source:getFilter|
        |getFreeBufferCount|              |love-Source:getFreeBufferCount|
        |getPitch|                        |love-Source:getPitch|
        |getPosition|                     |love-Source:getPosition|
        |getRolloff|                      |love-Source:getRolloff|
        |getType|                         |love-Source:getType|
        |getVelocity|                     |love-Source:getVelocity|
        |getVolume|                       |love-Source:getVolume|
        |getVolumeLimits|                 |love-Source:getVolumeLimits|
        |isLooping|                       |love-Source:isLooping|
        |isPlaying|                       |love-Source:isPlaying|
        |isRelative|                      |love-Source:isRelative|
        |pause|                           |love-Source:pause|
        |play|                            |love-Source:play|
        |queue|                           |love-Source:queue|
        |seek|                            |love-Source:seek|
        |setAirAbsorption|                |love-Source:setAirAbsorption|
        |setAttenuationDistances|         |love-Source:setAttenuationDistances|
        |setCone|                         |love-Source:setCone|
        |setDirection|                    |love-Source:setDirection|
        |setEffect|                       |love-Source:setEffect|
        |setFilter|                       |love-Source:setFilter|
        |setLooping|                      |love-Source:setLooping|
        |setPitch|                        |love-Source:setPitch|
        |setPosition|                     |love-Source:setPosition|
        |setRelative|                     |love-Source:setRelative|
        |setRolloff|                      |love-Source:setRolloff|
        |setVelocity|                     |love-Source:setVelocity|
        |setVolume|                       |love-Source:setVolume|
        |setVolumeLimits|                 |love-Source:setVolumeLimits|
        |stop|                            |love-Source:stop|
        |tell|                            |love-Source:tell|

-------------------------------------------------------------------------------
                                                            *love-Source:clone*
|Source:clone|

Creates an identical copy of the Source in the stopped state.

Static Sources will use significantly less memory and take much less time to be
created if Source:clone is used to create them instead of love.audio.newSource,
so this method should be preferred when making multiple Sources which play the
same sound.

Synopses:

    1.  `source` = |Source:clone|()

Variants:

    1.  `source` = |Source:clone|()

        Cloned Sources inherit all the set-able state of the original Source, but they are initialized stopped.

        returns:

            `source`: |love-Source|

                The new identical copy of this Source.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-Source:getActiveEffects*
|Source:getActiveEffects|

Gets a list of the Source's active effect names.

Synopses:

    1.  `effects` = |Source:getActiveEffects|()

Variants:

    1.  `effects` = |Source:getActiveEffects|()

        See function description

        returns:

            `effects`: |lrv-table|

                A list of the source's active effect names.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-Source:getAirAbsorption*
|Source:getAirAbsorption|

Gets the amount of air absorption applied to the Source.

By default the value is set to 0 which means that air absorption effects are
disabled. A value of 1 will apply high frequency attenuation to the Source at a
rate of 0.05 dB per meter.

Synopses:

    1.  `amount` = |Source:getAirAbsorption|()

Variants:

    1.  `amount` = |Source:getAirAbsorption|()

        Audio air absorption functionality is not supported on iOS.

        returns:

            `amount`: |lrv-number|

                The amount of air absorption applied to the Source.

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-Source:getAttenuationDistances*
|Source:getAttenuationDistances|

Gets the reference and maximum attenuation distances of the Source. The values,
combined with the current DistanceModel, affect how the Source's volume
attenuates based on distance from the listener.

Synopses:

    1.  `ref`, `max` = |Source:getAttenuationDistances|()

Variants:

    1.  `ref`, `max` = |Source:getAttenuationDistances|()

        See function description

        returns:

            `ref`: |lrv-number|

                The current reference attenuation distance. If the current
                DistanceModel is clamped, this is the minimum distance before
                the Source is no longer attenuated.

            `max`: |lrv-number|

                The current maximum attenuation distance.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Source:getChannelCount*
|Source:getChannelCount|

Gets the number of channels in the Source. Only 1-channel (mono) Sources can
use directional and positional effects.

Synopses:

    1.  `channels` = |Source:getChannelCount|()

Variants:

    1.  `channels` = |Source:getChannelCount|()

        See function description

        returns:

            `channels`: |lrv-number|

                1 for mono, 2 for stereo.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Source:getCone*
|Source:getCone|

Gets the Source's directional volume cones. Together with Source:setDirection,
the cone angles allow for the Source's volume to vary depending on its
direction.

Synopses:

    1.  `innerAngle`, `outerAngle`, `outerVolume` = |Source:getCone|()

Variants:

    1.  `innerAngle`, `outerAngle`, `outerVolume` = |Source:getCone|()

        See function description

        returns:

            `innerAngle`: |lrv-number|

                The inner angle from the Source's direction, in radians. The
                Source will play at normal volume if the listener is inside the
                cone defined by this angle.

            `outerAngle`: |lrv-number|

                The outer angle from the Source's direction, in radians. The
                Source will play at a volume between the normal and outer
                volumes, if the listener is in between the cones defined by the
                inner and outer angles.

            `outerVolume`: |lrv-number|

                The Source's volume when the listener is outside both the inner
                and outer cone angles.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Source:getDirection*
|Source:getDirection|

Gets the direction of the Source.

Synopses:

    1.  `x`, `y`, `z` = |Source:getDirection|()

Variants:

    1.  `x`, `y`, `z` = |Source:getDirection|()

        See function description

        returns:

            `x`: |lrv-number|

                The X part of the direction vector.

            `y`: |lrv-number|

                The Y part of the direction vector.

            `z`: |lrv-number|

                The Z part of the direction vector.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Source:getDuration*
|Source:getDuration|

Gets the duration of the Source. For streaming Sources it may not always be
sample-accurate, and may return -1 if the duration cannot be determined at all.

Synopses:

    1.  `duration` = |Source:getDuration|( `unit` )

Variants:

    1.  `duration` = |Source:getDuration|( `unit` )

        See function description

        returns:

            `duration`: |lrv-number|

                The duration of the Source, or -1 if it cannot be determined.

        arguments:

            `unit`: |love-TimeUnit|

                The time unit for the return value.

-------------------------------------------------------------------------------
                                                        *love-Source:getEffect*
|Source:getEffect|

Gets the filter settings associated to a specific effect.

This function returns nil if the effect was applied with no filter settings
associated to it.

Synopses:

    1.  `filtersettings` = |Source:getEffect|( `name`, `filtersettings`
        )

Variants:

    1.  `filtersettings` = |Source:getEffect|( `name`, `filtersettings`
        )

        See function description

        returns:

            `filtersettings`: |lrv-table|

                The settings for the filter associated to this effect, or nil
                if the effect is not present in this Source or has no filter
                associated. The table has the following fields:

                `volume`: |lrv-number|

                    The overall volume of the audio.

                `highgain`: |lrv-number|

                    Volume of high-frequency audio. Only applies to low-pass
                    and band-pass filters.

                `lowgain`: |lrv-number|

                    Volume of low-frequency audio. Only applies to high-pass
                    and band-pass filters.

        arguments:

            `name`: |lrv-string|

                The name of the effect.

            `filtersettings`: |lrv-table|

                An optional empty table that will be filled with the filter
                settings.

-------------------------------------------------------------------------------
                                                        *love-Source:getFilter*
|Source:getFilter|

Gets the filter settings currently applied to the Source.

Synopses:

    1.  `settings` = |Source:getFilter|()

Variants:

    1.  `settings` = |Source:getFilter|()

        See function description

        returns:

            `settings`: |lrv-table|

                The filter settings to use for this Source, or nil if the
                Source has no active filter. The table has the following
                fields:

                `type`: |love-FilterType|

                    The type of filter to use.

                `volume`: |lrv-number|

                    The overall volume of the audio.

                `highgain`: |lrv-number|

                    Volume of high-frequency audio. Only applies to low-pass
                    and band-pass filters.

                `lowgain`: |lrv-number|

                    Volume of low-frequency audio. Only applies to high-pass
                    and band-pass filters.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-Source:getFreeBufferCount*
|Source:getFreeBufferCount|

Gets the number of free buffer slots in a queueable Source. If the queueable
Source is playing, this value will increase up to the amount the Source was
created with. If the queueable Source is stopped, it will process all of its
internal buffers first, in which case this function will always return the
amount it was created with.

Synopses:

    1.  `buffers` = |Source:getFreeBufferCount|()

Variants:

    1.  `buffers` = |Source:getFreeBufferCount|()

        See function description

        returns:

            `buffers`: |lrv-number|

                How many more SoundData objects can be queued up.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Source:getPitch*
|Source:getPitch|

Gets the current pitch of the Source.

Synopses:

    1.  `pitch` = |Source:getPitch|()

Variants:

    1.  `pitch` = |Source:getPitch|()

        See function description

        returns:

            `pitch`: |lrv-number|

                The pitch, where 1.0 is normal.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Source:getPosition*
|Source:getPosition|

Gets the position of the Source.

Synopses:

    1.  `x`, `y`, `z` = |Source:getPosition|()

Variants:

    1.  `x`, `y`, `z` = |Source:getPosition|()

        See function description

        returns:

            `x`: |lrv-number|

                The X position of the Source.

            `y`: |lrv-number|

                The Y position of the Source.

            `z`: |lrv-number|

                The Z position of the Source.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Source:getRolloff*
|Source:getRolloff|

Returns the rolloff factor of the source.

Synopses:

    1.  `rolloff` = |Source:getRolloff|()

Variants:

    1.  `rolloff` = |Source:getRolloff|()

        See function description

        returns:

            `rolloff`: |lrv-number|

                The rolloff factor.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Source:getType*
|Source:getType|

Gets the type of the Source.

Synopses:

    1.  `sourcetype` = |Source:getType|()

Variants:

    1.  `sourcetype` = |Source:getType|()

        See function description

        returns:

            `sourcetype`: |love-SourceType|

                The type of the source.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Source:getVelocity*
|Source:getVelocity|

Gets the velocity of the Source.

Synopses:

    1.  `x`, `y`, `z` = |Source:getVelocity|()

Variants:

    1.  `x`, `y`, `z` = |Source:getVelocity|()

        See function description

        returns:

            `x`: |lrv-number|

                The X part of the velocity vector.

            `y`: |lrv-number|

                The Y part of the velocity vector.

            `z`: |lrv-number|

                The Z part of the velocity vector.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Source:getVolume*
|Source:getVolume|

Gets the current volume of the Source.

Synopses:

    1.  `volume` = |Source:getVolume|()

Variants:

    1.  `volume` = |Source:getVolume|()

        See function description

        returns:

            `volume`: |lrv-number|

                The volume of the Source, where 1.0 is normal volume.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Source:getVolumeLimits*
|Source:getVolumeLimits|

Returns the volume limits of the source.

Synopses:

    1.  `min`, `max` = |Source:getVolumeLimits|()

Variants:

    1.  `min`, `max` = |Source:getVolumeLimits|()

        See function description

        returns:

            `min`: |lrv-number|

                The minimum volume.

            `max`: |lrv-number|

                The maximum volume.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Source:isLooping*
|Source:isLooping|

Returns whether the Source will loop.

Synopses:

    1.  `loop` = |Source:isLooping|()

Variants:

    1.  `loop` = |Source:isLooping|()

        See function description

        returns:

            `loop`: |lrv-boolean|

                True if the Source will loop, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Source:isPlaying*
|Source:isPlaying|

Returns whether the Source is playing.

Synopses:

    1.  `playing` = |Source:isPlaying|()

Variants:

    1.  `playing` = |Source:isPlaying|()

        See function description

        returns:

            `playing`: |lrv-boolean|

                True if the Source is playing, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Source:isRelative*
|Source:isRelative|

Gets whether the Source's position, velocity, direction, and cone angles are
relative to the listener.

Synopses:

    1.  `relative` = |Source:isRelative|()

Variants:

    1.  `relative` = |Source:isRelative|()

        See function description

        returns:

            `relative`: |lrv-boolean|

                True if the position, velocity, direction and cone angles are
                relative to the listener, false if they're absolute.

        arguments:

            None

-------------------------------------------------------------------------------
                                                            *love-Source:pause*
|Source:pause|

Pauses the Source.

Synopses:

    1.  |Source:pause|()

Variants:

    1.  |Source:pause|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                             *love-Source:play*
|Source:play|

Starts playing the Source.

Synopses:

    1.  `success` = |Source:play|()

Variants:

    1.  `success` = |Source:play|()

        See function description

        returns:

            `success`: |lrv-boolean|

                Whether the Source was able to successfully start playing.

        arguments:

            None

-------------------------------------------------------------------------------
                                                            *love-Source:queue*
|Source:queue|

Queues SoundData for playback in a queueable Source.

This method requires the Source to be created via
love.audio.newQueueableSource.

Synopses:

    1.  `success` = |Source:queue|( `sounddata` )

Variants:

    1.  `success` = |Source:queue|( `sounddata` )

        See function description

        returns:

            `success`: |lrv-boolean|

                True if the data was successfully queued for playback, false if
                there were no available buffers to use for queueing.

        arguments:

            `sounddata`: |love-SoundData|

                The data to queue. The SoundData's sample rate, bit depth, and
                channel count must match the Source's.

-------------------------------------------------------------------------------
                                                             *love-Source:seek*
|Source:seek|

Sets the currently playing position of the Source.

Synopses:

    1.  |Source:seek|( `offset`, `unit` )

Variants:

    1.  |Source:seek|( `offset`, `unit` )

        See function description

        returns:

            None

        arguments:

            `offset`: |lrv-number|

                The position to seek to.

            `unit`: |love-TimeUnit|

                The unit of the position value.

-------------------------------------------------------------------------------
                                                 *love-Source:setAirAbsorption*
|Source:setAirAbsorption|

Sets the amount of air absorption applied to the Source.

By default the value is set to 0 which means that air absorption effects are
disabled. A value of 1 will apply high frequency attenuation to the Source at a
rate of 0.05 dB per meter.

Air absorption can simulate sound transmission through foggy air, dry air,
smoky atmosphere, etc. It can be used to simulate different atmospheric
conditions within different locations in an area.

Synopses:

    1.  |Source:setAirAbsorption|( `amount` )

Variants:

    1.  |Source:setAirAbsorption|( `amount` )

        Audio air absorption functionality is not supported on iOS.

        returns:

            None

        arguments:

            `amount`: |lrv-number|

                The amount of air absorption applied to the Source. Must be
                between 0 and 10.

-------------------------------------------------------------------------------
                                          *love-Source:setAttenuationDistances*
|Source:setAttenuationDistances|

Sets the reference and maximum attenuation distances of the Source. The
parameters, combined with the current DistanceModel, affect how the Source's
volume attenuates based on distance.

Distance attenuation is only applicable to Sources based on mono (rather than
stereo) audio.

Synopses:

    1.  |Source:setAttenuationDistances|( `ref`, `max` )

Variants:

    1.  |Source:setAttenuationDistances|( `ref`, `max` )

        See function description

        returns:

            None

        arguments:

            `ref`: |lrv-number|

                The new reference attenuation distance. If the current
                DistanceModel is clamped, this is the minimum attenuation
                distance.

            `max`: |lrv-number|

                The new maximum attenuation distance.

-------------------------------------------------------------------------------
                                                          *love-Source:setCone*
|Source:setCone|

Sets the Source's directional volume cones. Together with Source:setDirection,
the cone angles allow for the Source's volume to vary depending on its
direction.

Synopses:

    1.  |Source:setCone|( `innerAngle`, `outerAngle`, `outerVolume` )

Variants:

    1.  |Source:setCone|( `innerAngle`, `outerAngle`, `outerVolume` )

        See function description

        returns:

            None

        arguments:

            `innerAngle`: |lrv-number|

                The inner angle from the Source's direction, in radians. The
                Source will play at normal volume if the listener is inside the
                cone defined by this angle.

            `outerAngle`: |lrv-number|

                The outer angle from the Source's direction, in radians. The
                Source will play at a volume between the normal and outer
                volumes, if the listener is in between the cones defined by the
                inner and outer angles.

            `outerVolume`: |lrv-number|

                The Source's volume when the listener is outside both the inner
                and outer cone angles.

-------------------------------------------------------------------------------
                                                     *love-Source:setDirection*
|Source:setDirection|

Sets the direction vector of the Source. A zero vector makes the source
non-directional.

Synopses:

    1.  |Source:setDirection|( `x`, `y`, `z` )

Variants:

    1.  |Source:setDirection|( `x`, `y`, `z` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The X part of the direction vector.

            `y`: |lrv-number|

                The Y part of the direction vector.

            `z`: |lrv-number|

                The Z part of the direction vector.

-------------------------------------------------------------------------------
                                                        *love-Source:setEffect*
|Source:setEffect|

Applies an audio effect to the Source.

The effect must have been previously defined using love.audio.setEffect.

Synopses:

    1.  `success` = |Source:setEffect|( `name`, `enable` )
    2.  `success` = |Source:setEffect|( `name`, `filtersettings` )

Variants:

    1.  `success` = |Source:setEffect|( `name`, `enable` )

        Applies the given previously defined effect to this Source.

        returns:

            `success`: |lrv-boolean|

                Whether the effect was successfully applied to this Source.

        arguments:

            `name`: |lrv-string|

                The name of the effect previously set up with
                love.audio.setEffect.

            `enable`: |lrv-boolean|

                If false and the given effect name was previously enabled on
                this Source, disables the effect.
    2.  `success` = |Source:setEffect|( `name`, `filtersettings` )

        Applies the given previously defined effect to this Source, and applies a filter to the Source which affects the sound fed into the effect.

Audio effect functionality is not supported on iOS.

        returns:

            `success`: |lrv-boolean|

                Whether the effect and filter were successfully applied to this
                Source.

        arguments:

            `name`: |lrv-string|

                The name of the effect previously set up with
                love.audio.setEffect.

            `filtersettings`: |lrv-table|

                The filter settings to apply prior to the effect, with the
                following fields:

                `type`: |love-FilterType|

                    The type of filter to use.

                `volume`: |lrv-number|

                    The overall volume of the audio. Must be between 0 and 1.

                `highgain`: |lrv-number|

                    Volume of high-frequency audio. Only applies to low-pass
                    and band-pass filters. Must be between 0 and 1.

                `lowgain`: |lrv-number|

                    Volume of low-frequency audio. Only applies to high-pass
                    and band-pass filters. Must be between 0 and 1.

-------------------------------------------------------------------------------
                                                        *love-Source:setFilter*
|Source:setFilter|

Sets a low-pass, high-pass, or band-pass filter to apply when playing the
Source.

Synopses:

    1.  `success` = |Source:setFilter|( `settings` )
    2.  |Source:setFilter|()

Variants:

    1.  `success` = |Source:setFilter|( `settings` )

        See function description

        returns:

            `success`: |lrv-boolean|

                Whether the filter was successfully applied to the Source.

        arguments:

            `settings`: |lrv-table|

                The filter settings to use for this Source, with the following
                fields:

                `type`: |love-FilterType|

                    The type of filter to use.

                `volume`: |lrv-number|

                    The overall volume of the audio. Must be between 0 and 1.

                `highgain`: |lrv-number|

                    Volume of high-frequency audio. Only applies to low-pass
                    and band-pass filters. Must be between 0 and 1.

                `lowgain`: |lrv-number|

                    Volume of low-frequency audio. Only applies to high-pass
                    and band-pass filters. Must be between 0 and 1.
    2.  |Source:setFilter|()

        Disables filtering on this Source.



        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Source:setLooping*
|Source:setLooping|

Sets whether the Source should loop.

Synopses:

    1.  |Source:setLooping|( `loop` )

Variants:

    1.  |Source:setLooping|( `loop` )

        See function description

        returns:

            None

        arguments:

            `loop`: |lrv-boolean|

                True if the source should loop, false otherwise.

-------------------------------------------------------------------------------
                                                         *love-Source:setPitch*
|Source:setPitch|

Sets the pitch of the Source.

Synopses:

    1.  |Source:setPitch|( `pitch` )

Variants:

    1.  |Source:setPitch|( `pitch` )

        See function description

        returns:

            None

        arguments:

            `pitch`: |lrv-number|

                Calculated with regard to 1 being the base pitch. Each
                reduction by 50 percent equals a pitch shift of -12 semitones
                (one octave reduction). Each doubling equals a pitch shift of
                12 semitones (one octave increase). Zero is not a legal value.

-------------------------------------------------------------------------------
                                                      *love-Source:setPosition*
|Source:setPosition|

Sets the position of the Source. Please note that this only works for mono
(i.e. non-stereo) sound files!

Synopses:

    1.  |Source:setPosition|( `x`, `y`, `z` )

Variants:

    1.  |Source:setPosition|( `x`, `y`, `z` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The X position of the Source.

            `y`: |lrv-number|

                The Y position of the Source.

            `z`: |lrv-number|

                The Z position of the Source.

-------------------------------------------------------------------------------
                                                      *love-Source:setRelative*
|Source:setRelative|

Sets whether the Source's position, velocity, direction, and cone angles are
relative to the listener, or absolute.

By default, all sources are absolute and therefore relative to the origin of
love's coordinate system 0, 0. Only absolute sources are affected by the
position of the listener. Please note that positional audio only works for mono
(i.e. non-stereo) sources.

Synopses:

    1.  |Source:setRelative|( `enable` )

Variants:

    1.  |Source:setRelative|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: |lrv-boolean|

                True to make the position, velocity, direction and cone angles
                relative to the listener, false to make them absolute.

-------------------------------------------------------------------------------
                                                       *love-Source:setRolloff*
|Source:setRolloff|

Sets the rolloff factor which affects the strength of the used distance
attenuation.

Extended information and detailed formulas can be found in the chapter '3.4.
Attenuation By Distance' of OpenAL 1.1 specification.

Synopses:

    1.  |Source:setRolloff|( `rolloff` )

Variants:

    1.  |Source:setRolloff|( `rolloff` )

        See function description

        returns:

            None

        arguments:

            `rolloff`: |lrv-number|

                The new rolloff factor.

-------------------------------------------------------------------------------
                                                      *love-Source:setVelocity*
|Source:setVelocity|

Sets the velocity of the Source.

This does '''not''' change the position of the Source, but lets the application
know how it has to calculate the doppler effect.

Synopses:

    1.  |Source:setVelocity|( `x`, `y`, `z` )

Variants:

    1.  |Source:setVelocity|( `x`, `y`, `z` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The X part of the velocity vector.

            `y`: |lrv-number|

                The Y part of the velocity vector.

            `z`: |lrv-number|

                The Z part of the velocity vector.

-------------------------------------------------------------------------------
                                                        *love-Source:setVolume*
|Source:setVolume|

Sets the current volume of the Source.

Synopses:

    1.  |Source:setVolume|( `volume` )

Variants:

    1.  |Source:setVolume|( `volume` )

        See function description

        returns:

            None

        arguments:

            `volume`: |lrv-number|

                The volume for a Source, where 1.0 is normal volume. Volume
                cannot be raised above 1.0.

-------------------------------------------------------------------------------
                                                  *love-Source:setVolumeLimits*
|Source:setVolumeLimits|

Sets the volume limits of the source. The limits have to be numbers from 0 to
1.

Synopses:

    1.  |Source:setVolumeLimits|( `min`, `max` )

Variants:

    1.  |Source:setVolumeLimits|( `min`, `max` )

        See function description

        returns:

            None

        arguments:

            `min`: |lrv-number|

                The minimum volume.

            `max`: |lrv-number|

                The maximum volume.

-------------------------------------------------------------------------------
                                                             *love-Source:stop*
|Source:stop|

Stops a Source.

Synopses:

    1.  |Source:stop|()

Variants:

    1.  |Source:stop|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                             *love-Source:tell*
|Source:tell|

Gets the currently playing position of the Source.

Synopses:

    1.  `position` = |Source:tell|( `unit` )

Variants:

    1.  `position` = |Source:tell|( `unit` )

        See function description

        returns:

            `position`: |lrv-number|

                The currently playing position of the Source.

        arguments:

            `unit`: |love-TimeUnit|

                The type of unit for the return value.

===============================================================================
                                                               *love-love.data*
|love.data|

Provides functionality for creating and transforming data.

    |callbacks|                           |love-love.data-callbacks|
    |enums|                               |love-love.data-enums|
    |functions|                           |love-love.data-functions|
    |types|                               |love-love.data-types|

-------------------------------------------------------------------------------
                                                     *love-love.data-callbacks*
The callbacks of |love.data|:

    None

-------------------------------------------------------------------------------
                                                         *love-love.data-enums*
The enums of |love.data|:

    |ContainerType|                       |love-ContainerType|
    |EncodeFormat|                        |love-EncodeFormat|
    |HashFunction|                        |love-HashFunction|

-------------------------------------------------------------------------------
                                                           *love-ContainerType*
|ContainerType|

Return type of various data-returning functions.

    constants:

        `data`: |lrv-string|

            Return type is ByteData.

        `string`: |lrv-string|

            Return type is string.

-------------------------------------------------------------------------------
                                                            *love-EncodeFormat*
|EncodeFormat|

Encoding format used to encode or decode data.

    constants:

        `base64`: |lrv-string|

            Encode/decode data as base64 binary-to-text encoding.

        `hex`: |lrv-string|

            Encode/decode data as hexadecimal string.

-------------------------------------------------------------------------------
                                                            *love-HashFunction*
|HashFunction|

Hash algorithm of love.data.hash.

    constants:

        `md5`: |lrv-string|

            MD5 hash algorithm (16 bytes).

        `sha1`: |lrv-string|

            SHA1 hash algorithm (20 bytes).

        `sha224`: |lrv-string|

            SHA2 hash algorithm with message digest size of 224 bits (28
            bytes).

        `sha256`: |lrv-string|

            SHA2 hash algorithm with message digest size of 256 bits (32
            bytes).

        `sha384`: |lrv-string|

            SHA2 hash algorithm with message digest size of 384 bits (48
            bytes).

        `sha512`: |lrv-string|

            SHA2 hash algorithm with message digest size of 512 bits (64
            bytes).

-------------------------------------------------------------------------------
                                                     *love-love.data-functions*
The functions of |love.data|:

    |compress|                            |love-love.data.compress|
    |decode|                              |love-love.data.decode|
    |decompress|                          |love-love.data.decompress|
    |encode|                              |love-love.data.encode|
    |getPackedSize|                       |love-love.data.getPackedSize|
    |hash|                                |love-love.data.hash|
    |newByteData|                         |love-love.data.newByteData|
    |newDataView|                         |love-love.data.newDataView|
    |pack|                                |love-love.data.pack|
    |unpack|                              |love-love.data.unpack|

-------------------------------------------------------------------------------
                                                      *love-love.data.compress*
|love.data.compress|

Compresses a string or data using a specific compression algorithm.

Synopses:

    1.  `compressedData` = |love.data.compress|( `container`, `format`,
        `rawstring`, `level` )
    2.  `compressedData` = |love.data.compress|( `container`, `format`,
        `data`, `level` )

Variants:

    1.  `compressedData` = |love.data.compress|( `container`, `format`,
        `rawstring`, `level` )

        See function description

        returns:

            `compressedData`: <value>

                CompressedData/string which contains the compressed version of
                rawstring.

        arguments:

            `container`: |love-ContainerType|

                What type to return the compressed data as.

            `format`: |love-CompressedDataFormat|

                The format to use when compressing the string.

            `rawstring`: |lrv-string|

                The raw (un-compressed) string to compress.

            `level`: |lrv-number|

                The level of compression to use, between 0 and 9. -1 indicates
                the default level. The meaning of this argument depends on the
                compression format being used.
    2.  `compressedData` = |love.data.compress|( `container`, `format`,
        `data`, `level` )

        See function description

        returns:

            `compressedData`: <value>

                CompressedData/string which contains the compressed version of
                data.

        arguments:

            `container`: |love-ContainerType|

                What type to return the compressed data as.

            `format`: |love-CompressedDataFormat|

                The format to use when compressing the data.

            `data`: |love-Data|

                A Data object containing the raw (un-compressed) data to
                compress.

            `level`: |lrv-number|

                The level of compression to use, between 0 and 9. -1 indicates
                the default level. The meaning of this argument depends on the
                compression format being used.

-------------------------------------------------------------------------------
                                                        *love-love.data.decode*
|love.data.decode|

Decode Data or a string from any of the EncodeFormats to Data or string.

Synopses:

    1.  `decoded` = |love.data.decode|( `container`, `format`,
        `sourceString` )
    2.  `decoded` = |love.data.decode|( `container`, `format`,
        `sourceData` )

Variants:

    1.  `decoded` = |love.data.decode|( `container`, `format`,
        `sourceString` )

        See function description

        returns:

            `decoded`: <value>

                ByteData/string which contains the decoded version of source.

        arguments:

            `container`: |love-ContainerType|

                What type to return the decoded data as.

            `format`: |love-EncodeFormat|

                The format of the input data.

            `sourceString`: |lrv-string|

                The raw (encoded) data to decode.
    2.  `decoded` = |love.data.decode|( `container`, `format`,
        `sourceData` )

        See function description

        returns:

            `decoded`: <value>

                ByteData/string which contains the decoded version of source.

        arguments:

            `container`: |love-ContainerType|

                What type to return the decoded data as.

            `format`: |love-EncodeFormat|

                The format of the input data.

            `sourceData`: |love-Data|

                The raw (encoded) data to decode.

-------------------------------------------------------------------------------
                                                    *love-love.data.decompress*
|love.data.decompress|

Decompresses a CompressedData or previously compressed string or Data object.

Synopses:

    1.  `decompressedData` = |love.data.decompress|( `container`,
        `compressedData` )
    2.  `decompressedData` = |love.data.decompress|( `container`,
        `format`, `compressedString` )
    3.  `decompressedData` = |love.data.decompress|( `container`,
        `format`, `data` )

Variants:

    1.  `decompressedData` = |love.data.decompress|( `container`,
        `compressedData` )

        See function description

        returns:

            `decompressedData`: <value>

                Data/string containing the raw decompressed data.

        arguments:

            `container`: |love-ContainerType|

                What type to return the decompressed data as.

            `compressedData`: |love-CompressedData|

                The compressed data to decompress.
    2.  `decompressedData` = |love.data.decompress|( `container`,
        `format`, `compressedString` )

        See function description

        returns:

            `decompressedData`: <value>

                Data/string containing the raw decompressed data.

        arguments:

            `container`: |love-ContainerType|

                What type to return the decompressed data as.

            `format`: |love-CompressedDataFormat|

                The format that was used to compress the given string.

            `compressedString`: |lrv-string|

                A string containing data previously compressed with
                love.data.compress.
    3.  `decompressedData` = |love.data.decompress|( `container`,
        `format`, `data` )

        See function description

        returns:

            `decompressedData`: <value>

                Data/string containing the raw decompressed data.

        arguments:

            `container`: |love-ContainerType|

                What type to return the decompressed data as.

            `format`: |love-CompressedDataFormat|

                The format that was used to compress the given data.

            `data`: |love-Data|

                A Data object containing data previously compressed with
                love.data.compress.

-------------------------------------------------------------------------------
                                                        *love-love.data.encode*
|love.data.encode|

Encode Data or a string to a Data or string in one of the EncodeFormats.

Synopses:

    1.  `encoded` = |love.data.encode|( `container`, `format`,
        `sourceString`, `linelength` )
    2.  `encoded` = |love.data.encode|( `container`, `format`,
        `sourceData`, `linelength` )

Variants:

    1.  `encoded` = |love.data.encode|( `container`, `format`,
        `sourceString`, `linelength` )

        See function description

        returns:

            `encoded`: <value>

                ByteData/string which contains the encoded version of source.

        arguments:

            `container`: |love-ContainerType|

                What type to return the encoded data as.

            `format`: |love-EncodeFormat|

                The format of the output data.

            `sourceString`: |lrv-string|

                The raw data to encode.

            `linelength`: |lrv-number|

                The maximum line length of the output. Only supported for
                base64, ignored if 0.
    2.  `encoded` = |love.data.encode|( `container`, `format`,
        `sourceData`, `linelength` )

        See function description

        returns:

            `encoded`: <value>

                ByteData/string which contains the encoded version of source.

        arguments:

            `container`: |love-ContainerType|

                What type to return the encoded data as.

            `format`: |love-EncodeFormat|

                The format of the output data.

            `sourceData`: |love-Data|

                The raw data to encode.

            `linelength`: |lrv-number|

                The maximum line length of the output. Only supported for
                base64, ignored if 0.

-------------------------------------------------------------------------------
                                                 *love-love.data.getPackedSize*
|love.data.getPackedSize|

Gets the size in bytes that a given format used with love.data.pack will use.

This function behaves the same as Lua 5.3's string.packsize.

Synopses:

    1.  `size` = |love.data.getPackedSize|( `format` )

Variants:

    1.  `size` = |love.data.getPackedSize|( `format` )

        The format string cannot have the variable-length options 's' or 'z'.

        returns:

            `size`: |lrv-number|

                The size in bytes that the packed data will use.

        arguments:

            `format`: |lrv-string|

                A string determining how the values are packed. Follows the
                rules of Lua 5.3's string.pack format strings.

-------------------------------------------------------------------------------
                                                          *love-love.data.hash*
|love.data.hash|

Compute the message digest of a string using a specified hash algorithm.

Synopses:

    1.  `rawdigest` = |love.data.hash|( `hashFunction`, `string` )
    2.  `rawdigest` = |love.data.hash|( `hashFunction`, `data` )

Variants:

    1.  `rawdigest` = |love.data.hash|( `hashFunction`, `string` )

        See function description

        returns:

            `rawdigest`: |lrv-string|

                Raw message digest string.

        arguments:

            `hashFunction`: |love-HashFunction|

                Hash algorithm to use.

            `string`: |lrv-string|

                String to hash.
    2.  `rawdigest` = |love.data.hash|( `hashFunction`, `data` )

        To return the hex string representation of the hash, use love.data.encode

hexDigestString = love.data.encode('string', 'hex', love.data.hash(algo, data))

        returns:

            `rawdigest`: |lrv-string|

                Raw message digest string.

        arguments:

            `hashFunction`: |love-HashFunction|

                Hash algorithm to use.

            `data`: |love-Data|

                Data to hash.

-------------------------------------------------------------------------------
                                                   *love-love.data.newByteData*
|love.data.newByteData|

Creates a new Data object containing arbitrary bytes.

Data:getPointer along with LuaJIT's FFI can be used to manipulate the contents
of the ByteData object after it has been created.

Synopses:

    1.  `bytedata` = |love.data.newByteData|( `datastring` )
    2.  `bytedata` = |love.data.newByteData|( `Data`, `offset`, `size`
        )
    3.  `bytedata` = |love.data.newByteData|( `size` )

Variants:

    1.  `bytedata` = |love.data.newByteData|( `datastring` )

        Creates a new ByteData by copying the contents of the specified string.

        returns:

            `bytedata`: |love-ByteData|

                The new Data object.

        arguments:

            `datastring`: |lrv-string|

                The byte string to copy.
    2.  `bytedata` = |love.data.newByteData|( `Data`, `offset`, `size`
        )

        Creates a new ByteData by copying from an existing Data object.

        returns:

            `bytedata`: |love-ByteData|

                The new Data object.

        arguments:

            `Data`: |love-Data|

                The existing Data object to copy.

            `offset`: |lrv-number|

                The offset of the subsection to copy, in bytes.

            `size`: |lrv-number|

                The size in bytes of the new Data object.
    3.  `bytedata` = |love.data.newByteData|( `size` )

        Creates a new empty ByteData with the specific size.

        returns:

            `bytedata`: |love-ByteData|

                The new Data object.

        arguments:

            `size`: |lrv-number|

                The size in bytes of the new Data object.

-------------------------------------------------------------------------------
                                                   *love-love.data.newDataView*
|love.data.newDataView|

Creates a new Data referencing a subsection of an existing Data object.

Synopses:

    1.  `view` = |love.data.newDataView|( `data`, `offset`, `size` )

Variants:

    1.  `view` = |love.data.newDataView|( `data`, `offset`, `size` )

        Data:getString and Data:getPointer will return the original Data object's contents, with the view's offset and size applied.

        returns:

            `view`: |love-Data|

                The new Data view.

        arguments:

            `data`: |love-Data|

                The Data object to reference.

            `offset`: |lrv-number|

                The offset of the subsection to reference, in bytes.

            `size`: |lrv-number|

                The size in bytes of the subsection to reference.

-------------------------------------------------------------------------------
                                                          *love-love.data.pack*
|love.data.pack|

Packs (serializes) simple Lua values.

This function behaves the same as Lua 5.3's string.pack.

Synopses:

    1.  `data` = |love.data.pack|( `container`, `format`, `v1`, `...` )

Variants:

    1.  `data` = |love.data.pack|( `container`, `format`, `v1`, `...` )

        Packing integers with values greater than 2^52 is not supported, as Lua 5.1 cannot represent those values in its number type. 

        returns:

            `data`: <value>

                Data/string which contains the serialized data.

        arguments:

            `container`: |love-ContainerType|

                What type to return the encoded data as.

            `format`: |lrv-string|

                A string determining how the values are packed. Follows the
                rules of Lua 5.3's string.pack format strings.

            `v1`: <value>

                The first value (number, boolean, or string) to serialize.

            `...`: <value>

                Additional values to serialize.

-------------------------------------------------------------------------------
                                                        *love-love.data.unpack*
|love.data.unpack|

Unpacks (deserializes) a byte-string or Data into simple Lua values.

This function behaves the same as Lua 5.3's string.unpack.

Synopses:

    1.  `v1`, `...`, `index` = |love.data.unpack|( `format`,
        `datastring`, `pos` )
    2.  `v1`, `...`, `index` = |love.data.unpack|( `format`, `data`,
        `pos` )

Variants:

    1.  `v1`, `...`, `index` = |love.data.unpack|( `format`,
        `datastring`, `pos` )

        See function description

        returns:

            `v1`: <value>

                The first value (number, boolean, or string) that was unpacked.

            `...`: <value>

                Additional unpacked values.

            `index`: |lrv-number|

                The index of the first unread byte in the data string.

        arguments:

            `format`: |lrv-string|

                A string determining how the values were packed. Follows the
                rules of Lua 5.3's string.pack format strings.

            `datastring`: |lrv-string|

                A string containing the packed (serialized) data.

            `pos`: |lrv-number|

                Where to start reading in the string. Negative values can be
                used to read relative from the end of the string.
    2.  `v1`, `...`, `index` = |love.data.unpack|( `format`, `data`,
        `pos` )

        Unpacking integers with values greater than 2^52 is not supported, as Lua 5.1 cannot represent those values in its number type. 

        returns:

            `v1`: <value>

                The first value (number, boolean, or string) that was unpacked.

            `...`: <value>

                Additional unpacked values.

            `index`: |lrv-number|

                The 1-based index of the first unread byte in the Data.

        arguments:

            `format`: |lrv-string|

                A string determining how the values were packed. Follows the
                rules of Lua 5.3's string.pack format strings.

            `data`: |love-Data|

                A Data object containing the packed (serialized) data.

            `pos`: |lrv-number|

                1-based index indicating where to start reading in the Data.
                Negative values can be used to read relative from the end of
                the Data object.
-------------------------------------------------------------------------------
                                                         *love-love.data-types*
The types of |love.data|:

    None

===============================================================================
                                                              *love-love.event*
|love.event|

Manages events, like keypresses.

    |callbacks|                           |love-love.event-callbacks|
    |enums|                               |love-love.event-enums|
    |functions|                           |love-love.event-functions|
    |types|                               |love-love.event-types|

-------------------------------------------------------------------------------
                                                    *love-love.event-callbacks*
The callbacks of |love.event|:

    None

-------------------------------------------------------------------------------
                                                        *love-love.event-enums*
The enums of |love.event|:

    |Event|                               |love-Event|

-------------------------------------------------------------------------------
                                                                   *love-Event*
|Event|

Arguments to love.event.push() and the like.

Since 0.8.0, event names are no longer abbreviated.

    constants:

        `focus`: |lrv-string|

            Window focus gained or lost

        `joystickpressed`: |lrv-string|

            Joystick pressed

        `joystickreleased`: |lrv-string|

            Joystick released

        `keypressed`: |lrv-string|

            Key pressed

        `keyreleased`: |lrv-string|

            Key released

        `mousepressed`: |lrv-string|

            Mouse pressed

        `mousereleased`: |lrv-string|

            Mouse released

        `quit`: |lrv-string|

            Quit

        `resize`: |lrv-string|

            Window size changed by the user

        `visible`: |lrv-string|

            Window is minimized or un-minimized by the user

        `mousefocus`: |lrv-string|

            Window mouse focus gained or lost

        `threaderror`: |lrv-string|

            A Lua error has occurred in a thread

        `joystickadded`: |lrv-string|

            Joystick connected

        `joystickremoved`: |lrv-string|

            Joystick disconnected

        `joystickaxis`: |lrv-string|

            Joystick axis motion

        `joystickhat`: |lrv-string|

            Joystick hat pressed

        `gamepadpressed`: |lrv-string|

            Joystick's virtual gamepad button pressed

        `gamepadreleased`: |lrv-string|

            Joystick's virtual gamepad button released

        `gamepadaxis`: |lrv-string|

            Joystick's virtual gamepad axis moved

        `textinput`: |lrv-string|

            User entered text

        `mousemoved`: |lrv-string|

            Mouse position changed

        `lowmemory`: |lrv-string|

            Running out of memory on mobile devices system

        `textedited`: |lrv-string|

            Candidate text for an IME changed

        `wheelmoved`: |lrv-string|

            Mouse wheel moved

        `touchpressed`: |lrv-string|

            Touch screen touched

        `touchreleased`: |lrv-string|

            Touch screen stop touching

        `touchmoved`: |lrv-string|

            Touch press moved inside touch screen

        `directorydropped`: |lrv-string|

            Directory is dragged and dropped onto the window

        `filedropped`: |lrv-string|

            File is dragged and dropped onto the window.

        `jp`: |lrv-string|

            Joystick pressed

        `jr`: |lrv-string|

            Joystick released

        `kp`: |lrv-string|

            Key pressed

        `kr`: |lrv-string|

            Key released

        `mp`: |lrv-string|

            Mouse pressed

        `mr`: |lrv-string|

            Mouse released

        `q`: |lrv-string|

            Quit

        `f`: |lrv-string|

            Window focus gained or lost

-------------------------------------------------------------------------------
                                                    *love-love.event-functions*
The functions of |love.event|:

    |clear|                               |love-love.event.clear|
    |poll|                                |love-love.event.poll|
    |pump|                                |love-love.event.pump|
    |push|                                |love-love.event.push|
    |quit|                                |love-love.event.quit|
    |wait|                                |love-love.event.wait|

-------------------------------------------------------------------------------
                                                        *love-love.event.clear*
|love.event.clear|

Clears the event queue.

Synopses:

    1.  |love.event.clear|()

Variants:

    1.  |love.event.clear|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-love.event.poll*
|love.event.poll|

Returns an iterator for messages in the event queue.

Synopses:

    1.  `i` = |love.event.poll|()

Variants:

    1.  `i` = |love.event.poll|()

        See function description

        returns:

            `i`: |lrv-function|

                Iterator function usable in a for loop.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-love.event.pump*
|love.event.pump|

Pump events into the event queue.

This is a low-level function, and is usually not called by the user, but by
love.run.

Note that this does need to be called for any OS to think you're still running,

and if you want to handle OS-generated events at all (think callbacks).

Synopses:

    1.  |love.event.pump|()

Variants:

    1.  |love.event.pump|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-love.event.push*
|love.event.push|

Adds an event to the event queue.

From 0.10.0 onwards, you may pass an arbitrary amount of arguments with this
function, though the default callbacks don't ever use more than six.

Synopses:

    1.  |love.event.push|( `n`, `a`, `b`, `c`, `d`, `e`, `f`, `...` )

Variants:

    1.  |love.event.push|( `n`, `a`, `b`, `c`, `d`, `e`, `f`, `...` )

        See function description

        returns:

            None

        arguments:

            `n`: |love-Event|

                The name of the event.

            `a`: <Variant>

                First event argument.

            `b`: <Variant>

                Second event argument.

            `c`: <Variant>

                Third event argument.

            `d`: <Variant>

                Fourth event argument.

            `e`: <Variant>

                Fifth event argument.

            `f`: <Variant>

                Sixth event argument.

            `...`: <Variant>

                Further event arguments may follow.

-------------------------------------------------------------------------------
                                                         *love-love.event.quit*
|love.event.quit|

Adds the quit event to the queue.

The quit event is a signal for the event handler to close LÖVE. It's possible
to abort the exit process with the love.quit callback.

Synopses:

    1.  |love.event.quit|( `exitstatus` )
    2.  |love.event.quit|( `'restart'` )

Variants:

    1.  |love.event.quit|( `exitstatus` )

        See function description

        returns:

            None

        arguments:

            `exitstatus`: |lrv-number|

                The program exit status to use when closing the application.
    2.  |love.event.quit|( `'restart'` )

        Restarts the game without relaunching the executable. This cleanly shuts down the main Lua state instance and creates a brand new one.

        returns:

            None

        arguments:

            `'restart'`: |lrv-string|

                Tells the default love.run to exit and restart the game without
                relaunching the executable.

-------------------------------------------------------------------------------
                                                         *love-love.event.wait*
|love.event.wait|

Like love.event.poll(), but blocks until there is an event in the queue.

Synopses:

    1.  `n`, `a`, `b`, `c`, `d`, `e`, `f`, `...` = |love.event.wait|()

Variants:

    1.  `n`, `a`, `b`, `c`, `d`, `e`, `f`, `...` = |love.event.wait|()

        See function description

        returns:

            `n`: |love-Event|

                The name of event.

            `a`: <Variant>

                First event argument.

            `b`: <Variant>

                Second event argument.

            `c`: <Variant>

                Third event argument.

            `d`: <Variant>

                Fourth event argument.

            `e`: <Variant>

                Fifth event argument.

            `f`: <Variant>

                Sixth event argument.

            `...`: <Variant>

                Further event arguments may follow.

        arguments:

            None
-------------------------------------------------------------------------------
                                                        *love-love.event-types*
The types of |love.event|:

    None

===============================================================================
                                                         *love-love.filesystem*
|love.filesystem|

Provides an interface to the user's filesystem.

    |callbacks|                           |love-love.filesystem-callbacks|
    |enums|                               |love-love.filesystem-enums|
    |functions|                           |love-love.filesystem-functions|
    |types|                               |love-love.filesystem-types|

-------------------------------------------------------------------------------
                                               *love-love.filesystem-callbacks*
The callbacks of |love.filesystem|:

    None

-------------------------------------------------------------------------------
                                                   *love-love.filesystem-enums*
The enums of |love.filesystem|:

    |BufferMode|                          |love-BufferMode|
    |FileDecoder|                         |love-FileDecoder|
    |FileMode|                            |love-FileMode|
    |FileType|                            |love-FileType|

-------------------------------------------------------------------------------
                                                              *love-BufferMode*
|BufferMode|

Buffer modes for File objects.

    constants:

        `none`: |lrv-string|

            No buffering. The result of write and append operations appears
            immediately.

        `line`: |lrv-string|

            Line buffering. Write and append operations are buffered until a
            newline is output or the buffer size limit is reached.

        `full`: |lrv-string|

            Full buffering. Write and append operations are always buffered
            until the buffer size limit is reached.

-------------------------------------------------------------------------------
                                                             *love-FileDecoder*
|FileDecoder|

How to decode a given FileData.

    constants:

        `file`: |lrv-string|

            The data is unencoded.

        `base64`: |lrv-string|

            The data is base64-encoded.

-------------------------------------------------------------------------------
                                                                *love-FileMode*
|FileMode|

The different modes you can open a File in.

    constants:

        `r`: |lrv-string|

            Open a file for read.

        `w`: |lrv-string|

            Open a file for write.

        `a`: |lrv-string|

            Open a file for append.

        `c`: |lrv-string|

            Do not open a file (represents a closed file.)

-------------------------------------------------------------------------------
                                                                *love-FileType*
|FileType|

The type of a file.

    constants:

        `file`: |lrv-string|

            Regular file.

        `directory`: |lrv-string|

            Directory.

        `symlink`: |lrv-string|

            Symbolic link.

        `other`: |lrv-string|

            Something completely different like a device.

-------------------------------------------------------------------------------
                                               *love-love.filesystem-functions*
The functions of |love.filesystem|:

    |append|                              |love-love.filesystem.append|
    |areSymlinksEnabled|                  |love-love.filesystem.areSymlinksEn-|
    |createDirectory|                     |love-love.filesystem.createDirecto-|
    |getAppdataDirectory|                 |love-love.filesystem.getAppdataDir-|
    |getCRequirePath|                     |love-love.filesystem.getCRequirePa-|
    |getDirectoryItems|                   |love-love.filesystem.getDirectoryI-|
    |getIdentity|                         |love-love.filesystem.getIdentity|
    |getInfo|                             |love-love.filesystem.getInfo|
    |getRealDirectory|                    |love-love.filesystem.getRealDirect-|
    |getRequirePath|                      |love-love.filesystem.getRequirePath|
    |getSaveDirectory|                    |love-love.filesystem.getSaveDirect-|
    |getSource|                           |love-love.filesystem.getSource|
    |getSourceBaseDirectory|              |love-love.filesystem.getSourceBase-|
    |getUserDirectory|                    |love-love.filesystem.getUserDirect-|
    |getWorkingDirectory|                 |love-love.filesystem.getWorkingDir-|
    |init|                                |love-love.filesystem.init|
    |isFused|                             |love-love.filesystem.isFused|
    |lines|                               |love-love.filesystem.lines|
    |load|                                |love-love.filesystem.load|
    |mount|                               |love-love.filesystem.mount|
    |newFile|                             |love-love.filesystem.newFile|
    |newFileData|                         |love-love.filesystem.newFileData|
    |read|                                |love-love.filesystem.read|
    |remove|                              |love-love.filesystem.remove|
    |setCRequirePath|                     |love-love.filesystem.setCRequirePa-|
    |setIdentity|                         |love-love.filesystem.setIdentity|
    |setRequirePath|                      |love-love.filesystem.setRequirePath|
    |setSource|                           |love-love.filesystem.setSource|
    |setSymlinksEnabled|                  |love-love.filesystem.setSymlinksEn-|
    |unmount|                             |love-love.filesystem.unmount|
    |write|                               |love-love.filesystem.write|

-------------------------------------------------------------------------------
                                                  *love-love.filesystem.append*
|love.filesystem.append|

Append data to an existing file.

Synopses:

    1.  `success`, `errormsg` = |love.filesystem.append|( `name`,
        `data`, `size` )
    2.  `success`, `errormsg` = |love.filesystem.append|( `name`,
        `data`, `size` )

Variants:

    1.  `success`, `errormsg` = |love.filesystem.append|( `name`,
        `data`, `size` )

        See function description

        returns:

            `success`: |lrv-boolean|

                True if the operation was successful, or nil if there was an
                error.

            `errormsg`: |lrv-string|

                The error message on failure.

        arguments:

            `name`: |lrv-string|

                The name (and path) of the file.

            `data`: |lrv-string|

                The string data to append to the file.

            `size`: |lrv-number|

                How many bytes to write.
    2.  `success`, `errormsg` = |love.filesystem.append|( `name`,
        `data`, `size` )

        See function description

        returns:

            `success`: |lrv-boolean|

                True if the operation was successful, or nil if there was an
                error.

            `errormsg`: |lrv-string|

                The error message on failure.

        arguments:

            `name`: |lrv-string|

                The name (and path) of the file.

            `data`: |love-Data|

                The Data object to append to the file.

            `size`: |lrv-number|

                How many bytes to write.

-------------------------------------------------------------------------------
                                      *love-love.filesystem.areSymlinksEnabled*
|love.filesystem.areSymlinksEnabled|

Gets whether love.filesystem follows symbolic links.

Synopses:

    1.  `enable` = |love.filesystem.areSymlinksEnabled|()

Variants:

    1.  `enable` = |love.filesystem.areSymlinksEnabled|()

        See function description

        returns:

            `enable`: |lrv-boolean|

                Whether love.filesystem follows symbolic links.

        arguments:

            None

-------------------------------------------------------------------------------
                                         *love-love.filesystem.createDirectory*
|love.filesystem.createDirectory|

Recursively creates a directory.

When called with 'a/b' it creates both 'a' and 'a/b', if they don't exist
already.

Synopses:

    1.  `success` = |love.filesystem.createDirectory|( `name` )

Variants:

    1.  `success` = |love.filesystem.createDirectory|( `name` )

        See function description

        returns:

            `success`: |lrv-boolean|

                True if the directory was created, false if not.

        arguments:

            `name`: |lrv-string|

                The directory to create.

-------------------------------------------------------------------------------
                                     *love-love.filesystem.getAppdataDirectory*
|love.filesystem.getAppdataDirectory|

Returns the application data directory (could be the same as getUserDirectory)

Synopses:

    1.  `path` = |love.filesystem.getAppdataDirectory|()

Variants:

    1.  `path` = |love.filesystem.getAppdataDirectory|()

        See function description

        returns:

            `path`: |lrv-string|

                The path of the application data directory

        arguments:

            None

-------------------------------------------------------------------------------
                                         *love-love.filesystem.getCRequirePath*
|love.filesystem.getCRequirePath|

Gets the filesystem paths that will be searched for c libraries when require is
called.

The paths string returned by this function is a sequence of path templates
separated by semicolons. The argument passed to ''require'' will be inserted in
place of any question mark ('?') character in each template (after the dot
characters in the argument passed to ''require'' are replaced by directory
separators.) Additionally, any occurrence of a double question mark ('??') will
be replaced by the name passed to require and the default library extension for
the platform.

The paths are relative to the game's source and save directories, as well as
any paths mounted with love.filesystem.mount.

Synopses:

    1.  `paths` = |love.filesystem.getCRequirePath|()

Variants:

    1.  `paths` = |love.filesystem.getCRequirePath|()

        The default paths string is '??', which makes require('cool') try to load cool.dll, or cool.so depending on the platform.

        returns:

            `paths`: |lrv-string|

                The paths that the ''require'' function will check for c
                libraries in love's filesystem.

        arguments:

            None

-------------------------------------------------------------------------------
                                       *love-love.filesystem.getDirectoryItems*
|love.filesystem.getDirectoryItems|

Returns a table with the names of files and subdirectories in the specified
path. The table is not sorted in any way; the order is undefined.

If the path passed to the function exists in the game and the save directory,
it will list the files and directories from both places.

Synopses:

    1.  `files` = |love.filesystem.getDirectoryItems|( `dir` )
    2.  `files` = |love.filesystem.getDirectoryItems|( `dir`,
        `callback` )

Variants:

    1.  `files` = |love.filesystem.getDirectoryItems|( `dir` )

        See function description

        returns:

            `files`: |lrv-table|

                A sequence with the names of all files and subdirectories as
                strings.

        arguments:

            `dir`: |lrv-string|

                The directory.
    2.  `files` = |love.filesystem.getDirectoryItems|( `dir`,
        `callback` )

        See function description

        returns:

            `files`: |lrv-table|

                A sequence with the names of all files and subdirectories as
                strings.

        arguments:

            `dir`: |lrv-string|

                The directory.

            `callback`: |lrv-function|

                A function which is called for each file and folder in the
                directory. The filename is passed to the function as an
                argument.

-------------------------------------------------------------------------------
                                             *love-love.filesystem.getIdentity*
|love.filesystem.getIdentity|

Gets the write directory name for your game.

Note that this only returns the name of the folder to store your files in, not
the full path.

Synopses:

    1.  `name` = |love.filesystem.getIdentity|()

Variants:

    1.  `name` = |love.filesystem.getIdentity|()

        See function description

        returns:

            `name`: |lrv-string|

                The identity that is used as write directory.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-love.filesystem.getInfo*
|love.filesystem.getInfo|

Gets information about the specified file or directory.

Synopses:

    1.  `info` = |love.filesystem.getInfo|( `path`, `filtertype` )
    2.  `info` = |love.filesystem.getInfo|( `path`, `info` )
    3.  `info` = |love.filesystem.getInfo|( `path`, `filtertype`,
        `info` )

Variants:

    1.  `info` = |love.filesystem.getInfo|( `path`, `filtertype` )

        See function description

        returns:

            `info`: |lrv-table|

                A table containing information about the specified path, or nil
                if nothing exists at the path. The table contains the following
                fields:

                `type`: |love-FileType|

                    The type of the object at the path (file, directory,
                    symlink, etc.)

                `size`: |lrv-number|

                    The size in bytes of the file, or nil if it can't be
                    determined.

                `modtime`: |lrv-number|

                    The file's last modification time in seconds since the unix
                    epoch, or nil if it can't be determined.

        arguments:

            `path`: |lrv-string|

                The file or directory path to check.

            `filtertype`: |love-FileType|

                If supplied, this parameter causes getInfo to only return the
                info table if the item at the given path matches the specified
                file type.
    2.  `info` = |love.filesystem.getInfo|( `path`, `info` )

        This variant accepts an existing table to fill in, instead of creating a new one.

        returns:

            `info`: |lrv-table|

                The table given as an argument, or nil if nothing exists at the
                path. The table will be filled in with the following fields:

                `type`: |love-FileType|

                    The type of the object at the path (file, directory,
                    symlink, etc.)

                `size`: |lrv-number|

                    The size in bytes of the file, or nil if it can't be
                    determined.

                `modtime`: |lrv-number|

                    The file's last modification time in seconds since the unix
                    epoch, or nil if it can't be determined.

        arguments:

            `path`: |lrv-string|

                The file or directory path to check.

            `info`: |lrv-table|

                A table which will be filled in with info about the specified
                path.
    3.  `info` = |love.filesystem.getInfo|( `path`, `filtertype`,
        `info` )

        This variant only returns info if the item at the given path is the same file type as specified in the filtertype argument, and accepts an existing table to fill in, instead of creating a new one.

        returns:

            `info`: |lrv-table|

                The table given as an argument, or nil if nothing exists at the
                path. The table will be filled in with the following fields:

                `type`: |love-FileType|

                    The type of the object at the path (file, directory,
                    symlink, etc.)

                `size`: |lrv-number|

                    The size in bytes of the file, or nil if it can't be
                    determined.

                `modtime`: |lrv-number|

                    The file's last modification time in seconds since the unix
                    epoch, or nil if it can't be determined.

        arguments:

            `path`: |lrv-string|

                The file or directory path to check.

            `filtertype`: |love-FileType|

                Causes getInfo to only return the info table if the item at the
                given path matches the specified file type.

            `info`: |lrv-table|

                A table which will be filled in with info about the specified
                path.

-------------------------------------------------------------------------------
                                        *love-love.filesystem.getRealDirectory*
|love.filesystem.getRealDirectory|

Gets the platform-specific absolute path of the directory containing a
filepath.

This can be used to determine whether a file is inside the save directory or
the game's source .love.

Synopses:

    1.  `realdir` = |love.filesystem.getRealDirectory|( `filepath` )

Variants:

    1.  `realdir` = |love.filesystem.getRealDirectory|( `filepath` )

        This function returns the directory containing the given ''file path'', rather than file. For example, if the file screenshot1.png exists in a directory called screenshots in the game's save directory, love.filesystem.getRealDirectory('screenshots/screenshot1.png') will return the same value as love.filesystem.getSaveDirectory.

        returns:

            `realdir`: |lrv-string|

                The platform-specific full path of the directory containing the
                filepath.

        arguments:

            `filepath`: |lrv-string|

                The filepath to get the directory of.

-------------------------------------------------------------------------------
                                          *love-love.filesystem.getRequirePath*
|love.filesystem.getRequirePath|

Gets the filesystem paths that will be searched when require is called.

The paths string returned by this function is a sequence of path templates
separated by semicolons. The argument passed to ''require'' will be inserted in
place of any question mark ('?') character in each template (after the dot
characters in the argument passed to ''require'' are replaced by directory
separators.)

The paths are relative to the game's source and save directories, as well as
any paths mounted with love.filesystem.mount.

Synopses:

    1.  `paths` = |love.filesystem.getRequirePath|()

Variants:

    1.  `paths` = |love.filesystem.getRequirePath|()

        The default paths string is '?.lua;?/init.lua', which makes require('cool') try to load cool.lua and then try cool/init.lua if cool.lua doesn't exist.

        returns:

            `paths`: |lrv-string|

                The paths that the ''require'' function will check in love's
                filesystem.

        arguments:

            None

-------------------------------------------------------------------------------
                                        *love-love.filesystem.getSaveDirectory*
|love.filesystem.getSaveDirectory|

Gets the full path to the designated save directory.

This can be useful if you want to use the standard io library (or something
else) to

read or write in the save directory.

Synopses:

    1.  `dir` = |love.filesystem.getSaveDirectory|()

Variants:

    1.  `dir` = |love.filesystem.getSaveDirectory|()

        See function description

        returns:

            `dir`: |lrv-string|

                The absolute path to the save directory.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-love.filesystem.getSource*
|love.filesystem.getSource|

Returns the full path to the the .love file or directory. If the game is fused
to the LÖVE executable, then the executable is returned.

Synopses:

    1.  `path` = |love.filesystem.getSource|()

Variants:

    1.  `path` = |love.filesystem.getSource|()

        See function description

        returns:

            `path`: |lrv-string|

                The full platform-dependent path of the .love file or
                directory.

        arguments:

            None

-------------------------------------------------------------------------------
                                  *love-love.filesystem.getSourceBaseDirectory*
|love.filesystem.getSourceBaseDirectory|

Returns the full path to the directory containing the .love file. If the game
is fused to the LÖVE executable, then the directory containing the executable
is returned.

If love.filesystem.isFused is true, the path returned by this function can be
passed to love.filesystem.mount, which will make the directory containing the
main game (e.g. C:\Program Files\coolgame\) readable by love.filesystem.

Synopses:

    1.  `path` = |love.filesystem.getSourceBaseDirectory|()

Variants:

    1.  `path` = |love.filesystem.getSourceBaseDirectory|()

        See function description

        returns:

            `path`: |lrv-string|

                The full platform-dependent path of the directory containing
                the .love file.

        arguments:

            None

-------------------------------------------------------------------------------
                                        *love-love.filesystem.getUserDirectory*
|love.filesystem.getUserDirectory|

Returns the path of the user's directory

Synopses:

    1.  `path` = |love.filesystem.getUserDirectory|()

Variants:

    1.  `path` = |love.filesystem.getUserDirectory|()

        See function description

        returns:

            `path`: |lrv-string|

                The path of the user's directory

        arguments:

            None

-------------------------------------------------------------------------------
                                     *love-love.filesystem.getWorkingDirectory*
|love.filesystem.getWorkingDirectory|

Gets the current working directory.

Synopses:

    1.  `cwd` = |love.filesystem.getWorkingDirectory|()

Variants:

    1.  `cwd` = |love.filesystem.getWorkingDirectory|()

        See function description

        returns:

            `cwd`: |lrv-string|

                The current working directory.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.filesystem.init*
|love.filesystem.init|

Initializes love.filesystem, will be called internally, so should not be used
explicitly.

Synopses:

    1.  |love.filesystem.init|( `appname` )

Variants:

    1.  |love.filesystem.init|( `appname` )

        See function description

        returns:

            None

        arguments:

            `appname`: |lrv-string|

                The name of the application binary, typically love.

-------------------------------------------------------------------------------
                                                 *love-love.filesystem.isFused*
|love.filesystem.isFused|

Gets whether the game is in fused mode or not.

If a game is in fused mode, its save directory will be directly in the Appdata
directory instead of Appdata/LOVE/. The game will also be able to load C Lua
dynamic libraries which are located in the save directory.

A game is in fused mode if the source .love has been fused to the executable
(see Game Distribution), or if '--fused' has been given as a command-line
argument when starting the game.

Synopses:

    1.  `fused` = |love.filesystem.isFused|()

Variants:

    1.  `fused` = |love.filesystem.isFused|()

        See function description

        returns:

            `fused`: |lrv-boolean|

                True if the game is in fused mode, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-love.filesystem.lines*
|love.filesystem.lines|

Iterate over the lines in a file.

Synopses:

    1.  `iterator` = |love.filesystem.lines|( `name` )

Variants:

    1.  `iterator` = |love.filesystem.lines|( `name` )

        See function description

        returns:

            `iterator`: |lrv-function|

                A function that iterates over all the lines in the file

        arguments:

            `name`: |lrv-string|

                The name (and path) of the file

-------------------------------------------------------------------------------
                                                    *love-love.filesystem.load*
|love.filesystem.load|

Loads a Lua file (but does not run it).

Synopses:

    1.  `chunk`, `errormsg` = |love.filesystem.load|( `name` )

Variants:

    1.  `chunk`, `errormsg` = |love.filesystem.load|( `name` )

        See function description

        returns:

            `chunk`: |lrv-function|

                The loaded chunk.

            `errormsg`: |lrv-string|

                The error message if file could not be opened.

        arguments:

            `name`: |lrv-string|

                The name (and path) of the file.

-------------------------------------------------------------------------------
                                                   *love-love.filesystem.mount*
|love.filesystem.mount|

Mounts a zip file or folder in the game's save directory for reading.

It is also possible to mount love.filesystem.getSourceBaseDirectory if the game
is in fused mode.

Synopses:

    1.  `success` = |love.filesystem.mount|( `archive`, `mountpoint`,
        `appendToPath` )
    2.  `success` = |love.filesystem.mount|( `filedata`, `mountpoint`,
        `appendToPath` )
    3.  `success` = |love.filesystem.mount|( `data`, `archivename`,
        `mountpoint`, `appendToPath` )

Variants:

    1.  `success` = |love.filesystem.mount|( `archive`, `mountpoint`,
        `appendToPath` )

        See function description

        returns:

            `success`: |lrv-boolean|

                True if the archive was successfully mounted, false otherwise.

        arguments:

            `archive`: |lrv-string|

                The folder or zip file in the game's save directory to mount.

            `mountpoint`: |lrv-string|

                The new path the archive will be mounted to.

            `appendToPath`: |lrv-boolean|

                Whether the archive will be searched when reading a filepath
                before or after already-mounted archives. This includes the
                game's source and save directories.
    2.  `success` = |love.filesystem.mount|( `filedata`, `mountpoint`,
        `appendToPath` )

        Mounts the contents of the given FileData in memory. The FileData's data must contain a zipped directory structure.

        returns:

            `success`: |lrv-boolean|

                True if the archive was successfully mounted, false otherwise.

        arguments:

            `filedata`: |love-FileData|

                The FileData object in memory to mount.

            `mountpoint`: |lrv-string|

                The new path the archive will be mounted to.

            `appendToPath`: |lrv-boolean|

                Whether the archive will be searched when reading a filepath
                before or after already-mounted archives. This includes the
                game's source and save directories.
    3.  `success` = |love.filesystem.mount|( `data`, `archivename`,
        `mountpoint`, `appendToPath` )

        Mounts the contents of the given Data object in memory. The data must contain a zipped directory structure.

        returns:

            `success`: |lrv-boolean|

                True if the archive was successfully mounted, false otherwise.

        arguments:

            `data`: |love-Data|

                The Data object in memory to mount.

            `archivename`: |lrv-string|

                The name to associate the mounted data with, for use with
                love.filesystem.unmount. Must be unique compared to other
                mounted data.

            `mountpoint`: |lrv-string|

                The new path the archive will be mounted to.

            `appendToPath`: |lrv-boolean|

                Whether the archive will be searched when reading a filepath
                before or after already-mounted archives. This includes the
                game's source and save directories.

-------------------------------------------------------------------------------
                                                 *love-love.filesystem.newFile*
|love.filesystem.newFile|

Creates a new File object.

It needs to be opened before it can be accessed.

Synopses:

    1.  `file` = |love.filesystem.newFile|( `filename` )
    2.  `file`, `errorstr` = |love.filesystem.newFile|( `filename`,
        `mode` )

Variants:

    1.  `file` = |love.filesystem.newFile|( `filename` )

        Please note that this function will not return any error message (e.g. if you use an invalid filename) because it just creates the File Object. You can still check if the file is valid by using File:open which returns a boolean and an error message if something goes wrong while opening the file.

        returns:

            `file`: |love-File|

                The new File object.

        arguments:

            `filename`: |lrv-string|

                The filename of the file.
    2.  `file`, `errorstr` = |love.filesystem.newFile|( `filename`,
        `mode` )

        Creates a File object and opens it for reading, writing, or appending.

        returns:

            `file`: |love-File|

                The new File object, or nil if an error occurred.

            `errorstr`: |lrv-string|

                The error string if an error occurred.

        arguments:

            `filename`: |lrv-string|

                The filename of the file.

            `mode`: |love-FileMode|

                The mode to open the file in.

-------------------------------------------------------------------------------
                                             *love-love.filesystem.newFileData*
|love.filesystem.newFileData|

Creates a new FileData object.

Synopses:

    1.  `data` = |love.filesystem.newFileData|( `contents`, `name` )
    2.  `data`, `err` = |love.filesystem.newFileData|( `filepath` )

Variants:

    1.  `data` = |love.filesystem.newFileData|( `contents`, `name` )

        See function description

        returns:

            `data`: |love-FileData|

                Your new FileData.

        arguments:

            `contents`: |lrv-string|

                The contents of the file.

            `name`: |lrv-string|

                The name of the file.
    2.  `data`, `err` = |love.filesystem.newFileData|( `filepath` )

        Creates a new FileData from a file on the storage device.

        returns:

            `data`: |love-FileData|

                The new FileData, or nil if an error occurred.

            `err`: |lrv-string|

                The error string, if an error occurred.

        arguments:

            `filepath`: |lrv-string|

                Path to the file.

-------------------------------------------------------------------------------
                                                    *love-love.filesystem.read*
|love.filesystem.read|

Read the contents of a file.

Synopses:

    1.  `contents`, `size`, `contents`, `error` =
        |love.filesystem.read|( `name`, `size` )
    2.  `contents`, `size`, `contents`, `error` =
        |love.filesystem.read|( `container`, `name`, `size` )

Variants:

    1.  `contents`, `size`, `contents`, `error` =
        |love.filesystem.read|( `name`, `size` )

        See function description

        returns:

            `contents`: |lrv-string|

                The file contents.

            `size`: |lrv-number|

                How many bytes have been read.

            `contents`: |lrv-nil|

                returns nil as content.

            `error`: |lrv-string|

                returns an error message.

        arguments:

            `name`: |lrv-string|

                The name (and path) of the file.

            `size`: |lrv-number|

                How many bytes to read.
    2.  `contents`, `size`, `contents`, `error` =
        |love.filesystem.read|( `container`, `name`, `size` )

        Reads the contents of a file into either a string or a FileData object.

        returns:

            `contents`: <value>

                FileData or string containing the file contents.

            `size`: |lrv-number|

                How many bytes have been read.

            `contents`: |lrv-nil|

                returns nil as content.

            `error`: |lrv-string|

                returns an error message.

        arguments:

            `container`: |love-ContainerType|

                What type to return the file's contents as.

            `name`: |lrv-string|

                The name (and path) of the file

            `size`: |lrv-number|

                How many bytes to read

-------------------------------------------------------------------------------
                                                  *love-love.filesystem.remove*
|love.filesystem.remove|

Removes a file or empty directory.

Synopses:

    1.  `success` = |love.filesystem.remove|( `name` )

Variants:

    1.  `success` = |love.filesystem.remove|( `name` )

        The directory must be empty before removal or else it will fail. Simply remove all files and folders in the directory beforehand.

If the file exists in the .love but not in the save directory, it returns false as well.

An opened File prevents removal of the underlying file. Simply close the File to remove it.

        returns:

            `success`: |lrv-boolean|

                True if the file/directory was removed, false otherwise.

        arguments:

            `name`: |lrv-string|

                The file or directory to remove.

-------------------------------------------------------------------------------
                                         *love-love.filesystem.setCRequirePath*
|love.filesystem.setCRequirePath|

Sets the filesystem paths that will be searched for c libraries when require is
called.

The paths string returned by this function is a sequence of path templates
separated by semicolons. The argument passed to ''require'' will be inserted in
place of any question mark ('?') character in each template (after the dot
characters in the argument passed to ''require'' are replaced by directory
separators.) Additionally, any occurrence of a double question mark ('??') will
be replaced by the name passed to require and the default library extension for
the platform.

The paths are relative to the game's source and save directories, as well as
any paths mounted with love.filesystem.mount.

Synopses:

    1.  |love.filesystem.setCRequirePath|( `paths` )

Variants:

    1.  |love.filesystem.setCRequirePath|( `paths` )

        The default paths string is '??', which makes require('cool') try to load cool.dll, or cool.so depending on the platform.

        returns:

            None

        arguments:

            `paths`: |lrv-string|

                The paths that the ''require'' function will check in love's
                filesystem.

-------------------------------------------------------------------------------
                                             *love-love.filesystem.setIdentity*
|love.filesystem.setIdentity|

Sets the write directory for your game.

Note that you can only set the name of the folder to store your files in, not
the location.

Synopses:

    1.  |love.filesystem.setIdentity|( `name` )
    2.  |love.filesystem.setIdentity|( `name` )

Variants:

    1.  |love.filesystem.setIdentity|( `name` )

        See function description

        returns:

            None

        arguments:

            `name`: |lrv-string|

                The new identity that will be used as write directory.
    2.  |love.filesystem.setIdentity|( `name` )

        See function description

        returns:

            None

        arguments:

            `name`: |lrv-string|

                The new identity that will be used as write directory.

-------------------------------------------------------------------------------
                                          *love-love.filesystem.setRequirePath*
|love.filesystem.setRequirePath|

Sets the filesystem paths that will be searched when require is called.

The paths string given to this function is a sequence of path templates
separated by semicolons. The argument passed to ''require'' will be inserted in
place of any question mark ('?') character in each template (after the dot
characters in the argument passed to ''require'' are replaced by directory
separators.)

The paths are relative to the game's source and save directories, as well as
any paths mounted with love.filesystem.mount.

Synopses:

    1.  |love.filesystem.setRequirePath|( `paths` )

Variants:

    1.  |love.filesystem.setRequirePath|( `paths` )

        The default paths string is '?.lua;?/init.lua', which makes require('cool') try to load cool.lua and then try cool/init.lua if cool.lua doesn't exist.

        returns:

            None

        arguments:

            `paths`: |lrv-string|

                The paths that the ''require'' function will check in love's
                filesystem.

-------------------------------------------------------------------------------
                                               *love-love.filesystem.setSource*
|love.filesystem.setSource|

Sets the source of the game, where the code is present. This function can only
be called once, and is normally automatically done by LÖVE.

Synopses:

    1.  |love.filesystem.setSource|( `path` )

Variants:

    1.  |love.filesystem.setSource|( `path` )

        See function description

        returns:

            None

        arguments:

            `path`: |lrv-string|

                Absolute path to the game's source folder.

-------------------------------------------------------------------------------
                                      *love-love.filesystem.setSymlinksEnabled*
|love.filesystem.setSymlinksEnabled|

Sets whether love.filesystem follows symbolic links. It is enabled by default
in version 0.10.0 and newer, and disabled by default in 0.9.2.

Synopses:

    1.  |love.filesystem.setSymlinksEnabled|( `enable` )

Variants:

    1.  |love.filesystem.setSymlinksEnabled|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: |lrv-boolean|

                Whether love.filesystem should follow symbolic links.

-------------------------------------------------------------------------------
                                                 *love-love.filesystem.unmount*
|love.filesystem.unmount|

Unmounts a zip file or folder previously mounted for reading with
love.filesystem.mount.

Synopses:

    1.  `success` = |love.filesystem.unmount|( `archive` )

Variants:

    1.  `success` = |love.filesystem.unmount|( `archive` )

        See function description

        returns:

            `success`: |lrv-boolean|

                True if the archive was successfully unmounted, false
                otherwise.

        arguments:

            `archive`: |lrv-string|

                The folder or zip file in the game's save directory which is
                currently mounted.

-------------------------------------------------------------------------------
                                                   *love-love.filesystem.write*
|love.filesystem.write|

Write data to a file in the save directory. If the file existed already, it
will be completely replaced by the new contents.

Synopses:

    1.  `success`, `message` = |love.filesystem.write|( `name`, `data`,
        `size` )
    2.  `success`, `message` = |love.filesystem.write|( `name`, `data`,
        `size` )

Variants:

    1.  `success`, `message` = |love.filesystem.write|( `name`, `data`,
        `size` )

        See function description

        returns:

            `success`: |lrv-boolean|

                If the operation was successful.

            `message`: |lrv-string|

                Error message if operation was unsuccessful.

        arguments:

            `name`: |lrv-string|

                The name (and path) of the file.

            `data`: |lrv-string|

                The string data to write to the file.

            `size`: |lrv-number|

                How many bytes to write.
    2.  `success`, `message` = |love.filesystem.write|( `name`, `data`,
        `size` )

        If you are getting the error message 'Could not set write directory', try setting the save directory. This is done either with love.filesystem.setIdentity or by setting the identity field in love.conf.

'''Writing to multiple lines''': In Windows, some text editors (e.g. Notepad) only treat CRLF ('\r\n') as a new line.

        returns:

            `success`: |lrv-boolean|

                If the operation was successful.

            `message`: |lrv-string|

                Error message if operation was unsuccessful.

        arguments:

            `name`: |lrv-string|

                The name (and path) of the file.

            `data`: |love-Data|

                The Data object to write to the file.

            `size`: |lrv-number|

                How many bytes to write.
-------------------------------------------------------------------------------
                                                   *love-love.filesystem-types*
The types of |love.filesystem|:

    |File|                                |love-File|
    |FileData|                            |love-FileData|

-------------------------------------------------------------------------------
                                                                    *love-File*
|File|

Represents a file on the filesystem. A function that takes a file path can also
take a File.

                                                       *love-File-constructors*
    constructors:

        None

                                                         *love-File-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                           *love-File-subtypes*
    subtypes:

        None

                                                          *love-File-functions*
    functions:

        |close|                           |love-File:close|
        |flush|                           |love-File:flush|
        |getBuffer|                       |love-File:getBuffer|
        |getFilename|                     |love-File:getFilename|
        |getMode|                         |love-File:getMode|
        |getSize|                         |love-File:getSize|
        |isEOF|                           |love-File:isEOF|
        |isOpen|                          |love-File:isOpen|
        |lines|                           |love-File:lines|
        |open|                            |love-File:open|
        |read|                            |love-File:read|
        |seek|                            |love-File:seek|
        |setBuffer|                       |love-File:setBuffer|
        |tell|                            |love-File:tell|
        |write|                           |love-File:write|

-------------------------------------------------------------------------------
                                                              *love-File:close*
|File:close|

Closes a File.

Synopses:

    1.  `success` = |File:close|()

Variants:

    1.  `success` = |File:close|()

        See function description

        returns:

            `success`: |lrv-boolean|

                Whether closing was successful.

        arguments:

            None

-------------------------------------------------------------------------------
                                                              *love-File:flush*
|File:flush|

Flushes any buffered written data in the file to the disk.

Synopses:

    1.  `success`, `err` = |File:flush|()

Variants:

    1.  `success`, `err` = |File:flush|()

        See function description

        returns:

            `success`: |lrv-boolean|

                Whether the file successfully flushed any buffered data to the
                disk.

            `err`: |lrv-string|

                The error string, if an error occurred and the file could not
                be flushed.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-File:getBuffer*
|File:getBuffer|

Gets the buffer mode of a file.

Synopses:

    1.  `mode`, `size` = |File:getBuffer|()

Variants:

    1.  `mode`, `size` = |File:getBuffer|()

        See function description

        returns:

            `mode`: |love-BufferMode|

                The current buffer mode of the file.

            `size`: |lrv-number|

                The maximum size in bytes of the file's buffer.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-File:getFilename*
|File:getFilename|

Gets the filename that the File object was created with. If the file object
originated from the love.filedropped callback, the filename will be the full
platform-dependent file path.

Synopses:

    1.  `filename` = |File:getFilename|()

Variants:

    1.  `filename` = |File:getFilename|()

        See function description

        returns:

            `filename`: |lrv-string|

                The filename of the File.

        arguments:

            None

-------------------------------------------------------------------------------
                                                            *love-File:getMode*
|File:getMode|

Gets the FileMode the file has been opened with.

Synopses:

    1.  `mode` = |File:getMode|()

Variants:

    1.  `mode` = |File:getMode|()

        See function description

        returns:

            `mode`: |love-FileMode|

                The mode this file has been opened with.

        arguments:

            None

-------------------------------------------------------------------------------
                                                            *love-File:getSize*
|File:getSize|

Returns the file size.

Synopses:

    1.  `size` = |File:getSize|()

Variants:

    1.  `size` = |File:getSize|()

        See function description

        returns:

            `size`: |lrv-number|

                The file size in bytes.

        arguments:

            None

-------------------------------------------------------------------------------
                                                              *love-File:isEOF*
|File:isEOF|

Gets whether end-of-file has been reached.

Synopses:

    1.  `eof` = |File:isEOF|()

Variants:

    1.  `eof` = |File:isEOF|()

        See function description

        returns:

            `eof`: |lrv-boolean|

                Whether EOF has been reached.

        arguments:

            None

-------------------------------------------------------------------------------
                                                             *love-File:isOpen*
|File:isOpen|

Gets whether the file is open.

Synopses:

    1.  `open` = |File:isOpen|()

Variants:

    1.  `open` = |File:isOpen|()

        See function description

        returns:

            `open`: |lrv-boolean|

                True if the file is currently open, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                              *love-File:lines*
|File:lines|

Iterate over all the lines in a file.

Synopses:

    1.  `iterator` = |File:lines|()

Variants:

    1.  `iterator` = |File:lines|()

        See function description

        returns:

            `iterator`: |lrv-function|

                The iterator (can be used in for loops).

        arguments:

            None

-------------------------------------------------------------------------------
                                                               *love-File:open*
|File:open|

Open the file for write, read or append.

Synopses:

    1.  `ok`, `err` = |File:open|( `mode` )

Variants:

    1.  `ok`, `err` = |File:open|( `mode` )

        If you are getting the error message 'Could not set write directory', try setting the save directory. This is done either with love.filesystem.setIdentity or by setting the identity field in love.conf (only available with love 0.7 or higher).

        returns:

            `ok`: |lrv-boolean|

                True on success, false otherwise.

            `err`: |lrv-string|

                The error string if an error occurred.

        arguments:

            `mode`: |love-FileMode|

                The mode to open the file in.

-------------------------------------------------------------------------------
                                                               *love-File:read*
|File:read|

Read a number of bytes from a file.

Synopses:

    1.  `contents`, `size` = |File:read|( `bytes` )
    2.  `contents`, `size` = |File:read|( `container`, `bytes` )

Variants:

    1.  `contents`, `size` = |File:read|( `bytes` )

        See function description

        returns:

            `contents`: |lrv-string|

                The contents of the read bytes.

            `size`: |lrv-number|

                How many bytes have been read.

        arguments:

            `bytes`: |lrv-number|

                The number of bytes to read.
    2.  `contents`, `size` = |File:read|( `container`, `bytes` )

        Reads the contents of a file into either a string or a FileData object.

        returns:

            `contents`: <value>

                FileData or string containing the read bytes.

            `size`: |lrv-number|

                How many bytes have been read.

        arguments:

            `container`: |love-ContainerType|

                What type to return the file's contents as.

            `bytes`: |lrv-number|

                The number of bytes to read.

-------------------------------------------------------------------------------
                                                               *love-File:seek*
|File:seek|

Seek to a position in a file

Synopses:

    1.  `success` = |File:seek|( `pos` )

Variants:

    1.  `success` = |File:seek|( `pos` )

        See function description

        returns:

            `success`: |lrv-boolean|

                Whether the operation was successful

        arguments:

            `pos`: |lrv-number|

                The position to seek to

-------------------------------------------------------------------------------
                                                          *love-File:setBuffer*
|File:setBuffer|

Sets the buffer mode for a file opened for writing or appending. Files with
buffering enabled will not write data to the disk until the buffer size limit
is reached, depending on the buffer mode.

File:flush will force any buffered data to be written to the disk.

Synopses:

    1.  `success`, `errorstr` = |File:setBuffer|( `mode`, `size` )

Variants:

    1.  `success`, `errorstr` = |File:setBuffer|( `mode`, `size` )

        See function description

        returns:

            `success`: |lrv-boolean|

                Whether the buffer mode was successfully set.

            `errorstr`: |lrv-string|

                The error string, if the buffer mode could not be set and an
                error occurred.

        arguments:

            `mode`: |love-BufferMode|

                The buffer mode to use.

            `size`: |lrv-number|

                The maximum size in bytes of the file's buffer.

-------------------------------------------------------------------------------
                                                               *love-File:tell*
|File:tell|

Returns the position in the file.

Synopses:

    1.  `pos` = |File:tell|()

Variants:

    1.  `pos` = |File:tell|()

        See function description

        returns:

            `pos`: |lrv-number|

                The current position.

        arguments:

            None

-------------------------------------------------------------------------------
                                                              *love-File:write*
|File:write|

Write data to a file.

Synopses:

    1.  `success`, `err` = |File:write|( `data`, `size` )
    2.  `success`, `errorstr` = |File:write|( `data`, `size` )

Variants:

    1.  `success`, `err` = |File:write|( `data`, `size` )

        See function description

        returns:

            `success`: |lrv-boolean|

                Whether the operation was successful.

            `err`: |lrv-string|

                The error string if an error occurred.

        arguments:

            `data`: |lrv-string|

                The string data to write.

            `size`: |lrv-number|

                How many bytes to write.
    2.  `success`, `errorstr` = |File:write|( `data`, `size` )

        '''Writing to multiple lines''': In Windows, some text editors (e.g. Notepad before Windows 10 1809) only treat CRLF ('\r\n') as a new line.

--example

f = love.filesystem.newFile('note.txt')

f:open('w')

for i = 1, 10 do

    f:write('This is line '..i..'!\r\n')

end

f:close()

        returns:

            `success`: |lrv-boolean|

                Whether the operation was successful.

            `errorstr`: |lrv-string|

                The error string if an error occurred.

        arguments:

            `data`: |love-Data|

                The Data object to write.

            `size`: |lrv-number|

                How many bytes to write.

-------------------------------------------------------------------------------
                                                                *love-FileData*
|FileData|

Data representing the contents of a file.

                                                   *love-FileData-constructors*
    constructors:

        None

                                                     *love-FileData-supertypes*
    supertypes:

        |Data|                            |love-Data|
        |Object|                          |love-Object|

                                                       *love-FileData-subtypes*
    subtypes:

        None

                                                      *love-FileData-functions*
    functions:

        |getExtension|                    |love-FileData:getExtension|
        |getFilename|                     |love-FileData:getFilename|

-------------------------------------------------------------------------------
                                                   *love-FileData:getExtension*
|FileData:getExtension|

Gets the extension of the FileData.

Synopses:

    1.  `ext` = |FileData:getExtension|()

Variants:

    1.  `ext` = |FileData:getExtension|()

        See function description

        returns:

            `ext`: |lrv-string|

                The extension of the file the FileData represents.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-FileData:getFilename*
|FileData:getFilename|

Gets the filename of the FileData.

Synopses:

    1.  `name` = |FileData:getFilename|()

Variants:

    1.  `name` = |FileData:getFilename|()

        See function description

        returns:

            `name`: |lrv-string|

                The name of the file the FileData represents.

        arguments:

            None

===============================================================================
                                                           *love-love.graphics*
|love.graphics|

The primary responsibility for the love.graphics module is the drawing of
lines, shapes, text, Images and other Drawable objects onto the screen. Its
secondary responsibilities include loading external files (including Images and
Fonts) into memory, creating specialized objects (such as ParticleSystems or
Canvases) and managing screen geometry.

LÖVE's coordinate system is rooted in the upper-left corner of the screen,
which is at location (0, 0). The x axis is horizontal: larger values are
further to the right. The y axis is vertical: larger values are further towards
the bottom.

In many cases, you draw images or shapes in terms of their upper-left corner.

Many of the functions are used to manipulate the graphics coordinate system,
which is essentially the way coordinates are mapped to the display. You can
change the position, scale, and even rotation in this way.

    |callbacks|                           |love-love.graphics-callbacks|
    |enums|                               |love-love.graphics-enums|
    |functions|                           |love-love.graphics-functions|
    |types|                               |love-love.graphics-types|

-------------------------------------------------------------------------------
                                                 *love-love.graphics-callbacks*
The callbacks of |love.graphics|:

    None

-------------------------------------------------------------------------------
                                                     *love-love.graphics-enums*
The enums of |love.graphics|:

    |AlignMode|                           |love-AlignMode|
    |ArcType|                             |love-ArcType|
    |AreaSpreadDistribution|              |love-AreaSpreadDistribution|
    |BlendAlphaMode|                      |love-BlendAlphaMode|
    |BlendMode|                           |love-BlendMode|
    |CanvasMipmapMode|                    |love-CanvasMipmapMode|
    |CompareMode|                         |love-CompareMode|
    |CullMode|                            |love-CullMode|
    |DrawMode|                            |love-DrawMode|
    |FilterMode|                          |love-FilterMode|
    |GraphicsFeature|                     |love-GraphicsFeature|
    |GraphicsLimit|                       |love-GraphicsLimit|
    |LineJoin|                            |love-LineJoin|
    |LineStyle|                           |love-LineStyle|
    |MeshDrawMode|                        |love-MeshDrawMode|
    |ParticleInsertMode|                  |love-ParticleInsertMode|
    |SpriteBatchUsage|                    |love-SpriteBatchUsage|
    |StackType|                           |love-StackType|
    |StencilAction|                       |love-StencilAction|
    |TextureType|                         |love-TextureType|
    |WrapMode|                            |love-WrapMode|

-------------------------------------------------------------------------------
                                                               *love-AlignMode*
|AlignMode|

Text alignment.

    constants:

        `center`: |lrv-string|

            Align text center.

        `left`: |lrv-string|

            Align text left.

        `right`: |lrv-string|

            Align text right.

        `justify`: |lrv-string|

            Align text both left and right.

-------------------------------------------------------------------------------
                                                                 *love-ArcType*
|ArcType|

Different types of arcs that can be drawn.

    constants:

        `pie`: |lrv-string|

            The arc is drawn like a slice of pie, with the arc circle connected
            to the center at its end-points.

        `open`: |lrv-string|

            The arc circle's two end-points are unconnected when the arc is
            drawn as a line. Behaves like the "closed" arc type when the arc is
            drawn in filled mode.

        `closed`: |lrv-string|

            The arc circle's two end-points are connected to each other.

-------------------------------------------------------------------------------
                                                  *love-AreaSpreadDistribution*
|AreaSpreadDistribution|

Types of particle area spread distribution.

    constants:

        `uniform`: |lrv-string|

            Uniform distribution.

        `normal`: |lrv-string|

            Normal (gaussian) distribution.

        `ellipse`: |lrv-string|

            Uniform distribution in an ellipse.

        `borderellipse`: |lrv-string|

            Distribution in an ellipse with particles spawning at the edges of
            the ellipse.

        `borderrectangle`: |lrv-string|

            Distribution in a rectangle with particles spawning at the edges of
            the rectangle.

        `none`: |lrv-string|

            No distribution - area spread is disabled.

-------------------------------------------------------------------------------
                                                          *love-BlendAlphaMode*
|BlendAlphaMode|

Different ways alpha affects color blending. See BlendMode and the BlendMode
Formulas for additional notes.

    constants:

        `alphamultiply`: |lrv-string|

            The RGB values of what's drawn are multiplied by the alpha values
            of those colors during blending. This is the default alpha mode.

        `premultiplied`: |lrv-string|

            The RGB values of what's drawn are '''not''' multiplied by the
            alpha values of those colors during blending. For most blend modes
            to work correctly with this alpha mode, the colors of a drawn
            object need to have had their RGB values multiplied by their alpha
            values at some point previously ("premultiplied alpha").

-------------------------------------------------------------------------------
                                                               *love-BlendMode*
|BlendMode|

Different ways to do color blending. See BlendAlphaMode and the BlendMode
Formulas for additional notes.

    constants:

        `alpha`: |lrv-string|

            Alpha blending (normal). The alpha of what's drawn determines its
            opacity.

        `replace`: |lrv-string|

            The colors of what's drawn completely replace what was on the
            screen, with no additional blending. The BlendAlphaMode specified
            in love.graphics.setBlendMode still affects what happens.

        `screen`: |lrv-string|

            'Screen' blending.

        `add`: |lrv-string|

            The pixel colors of what's drawn are added to the pixel colors
            already on the screen. The alpha of the screen is not modified.

        `subtract`: |lrv-string|

            The pixel colors of what's drawn are subtracted from the pixel
            colors already on the screen. The alpha of the screen is not
            modified.

        `multiply`: |lrv-string|

            The pixel colors of what's drawn are multiplied with the pixel
            colors already on the screen (darkening them). The alpha of drawn
            objects is multiplied with the alpha of the screen rather than
            determining how much the colors on the screen are affected, even
            when the "alphamultiply" BlendAlphaMode is used.

        `lighten`: |lrv-string|

            The pixel colors of what's drawn are compared to the existing pixel
            colors, and the larger of the two values for each color component
            is used. Only works when the "premultiplied" BlendAlphaMode is used
            in love.graphics.setBlendMode.

        `darken`: |lrv-string|

            The pixel colors of what's drawn are compared to the existing pixel
            colors, and the smaller of the two values for each color component
            is used. Only works when the "premultiplied" BlendAlphaMode is used
            in love.graphics.setBlendMode.

        `additive`: |lrv-string|

            Additive blend mode.

        `subtractive`: |lrv-string|

            Subtractive blend mode.

        `multiplicative`: |lrv-string|

            Multiply blend mode.

        `premultiplied`: |lrv-string|

            Premultiplied alpha blend mode.

-------------------------------------------------------------------------------
                                                        *love-CanvasMipmapMode*
|CanvasMipmapMode|



    constants:

        `none`: |lrv-string|

            Do not enable mipmap.

        `auto`: |lrv-string|

            Automatically generate mipmap.

        `manual`: |lrv-string|

            Let user manually generate mipmap.

-------------------------------------------------------------------------------
                                                             *love-CompareMode*
|CompareMode|

Different types of per-pixel stencil test and depth test comparisons. The
pixels of an object will be drawn if the comparison succeeds, for each pixel
that the object touches.

;equal:

* stencil tests: the stencil value of the pixel must be equal to the supplied
value.

* depth tests: the depth value of the drawn object at that pixel must be equal
to the existing depth value of that pixel.

;notequal:

* stencil tests: the stencil value of the pixel must '''not''' be equal to the
supplied value.

* depth tests: the depth value of the drawn object at that pixel must '''not'''
be equal to the existing depth value of that pixel.

;less:

* stencil tests: the stencil value of the pixel must be less than the supplied
value.

* depth tests: the depth value of the drawn object at that pixel must be less
than the existing depth value of that pixel.

;lequal:

* stencil tests: the stencil value of the pixel must be less than or equal to
the supplied value.

* depth tests: the depth value of the drawn object at that pixel must be less
than or equal to the existing depth value of that pixel.

;gequal:

* stencil tests: the stencil value of the pixel must be greater than or equal
to the supplied value.

* depth tests: the depth value of the drawn object at that pixel must be
greater than or equal to the existing depth value of that pixel.

;greater:

* stencil tests: the stencil value of the pixel must be greater than the
supplied value.

* depth tests: the depth value of the drawn object at that pixel must be
greater than the existing depth value of that pixel.

    constants:

        `never`: |lrv-string|

            Objects will never be drawn.

        `always`: |lrv-string|

            Objects will always be drawn. Effectively disables the depth or
            stencil test.

-------------------------------------------------------------------------------
                                                                *love-CullMode*
|CullMode|

How Mesh geometry is culled when rendering.

    constants:

        `back`: |lrv-string|

            Back-facing triangles in Meshes are culled (not rendered). The
            vertex order of a triangle determines whether it is back- or
            front-facing.

        `front`: |lrv-string|

            Front-facing triangles in Meshes are culled.

        `none`: |lrv-string|

            Both back- and front-facing triangles in Meshes are rendered.

-------------------------------------------------------------------------------
                                                                *love-DrawMode*
|DrawMode|

Controls whether shapes are drawn as an outline, or filled.

    constants:

        `fill`: |lrv-string|

            Draw filled shape.

        `line`: |lrv-string|

            Draw outlined shape.

-------------------------------------------------------------------------------
                                                              *love-FilterMode*
|FilterMode|

How the image is filtered when scaling.

    constants:

        `linear`: |lrv-string|

            Scale image with linear interpolation.

        `nearest`: |lrv-string|

            Scale image with nearest neighbor interpolation.

-------------------------------------------------------------------------------
                                                         *love-GraphicsFeature*
|GraphicsFeature|

Graphics features that can be checked for with love.graphics.getSupported.

    constants:

        `clampzero`: |lrv-string|

            Whether the "clampzero" WrapMode is supported.

        `lighten`: |lrv-string|

            Whether the "lighten" and "darken" BlendModes are supported.

        `multicanvasformats`: |lrv-string|

            Whether multiple formats can be used in the same
            love.graphics.setCanvas call.

        `glsl3`: |lrv-string|

            Whether GLSL 3 Shaders can be used.

        `instancing`: |lrv-string|

            Whether mesh instancing is supported.

        `fullnpot`: |lrv-string|

            Whether textures with non-power-of-two dimensions can use
            mipmapping and the 'repeat' WrapMode.

        `pixelshaderhighp`: |lrv-string|

            Whether pixel shaders can use "highp" 32 bit floating point numbers
            (as opposed to just 16 bit or lower precision).

        `shaderderivatives`: |lrv-string|

            Whether shaders can use the dFdx, dFdy, and fwidth functions for
            computing derivatives.

        `canvas`: |lrv-string|

            Support for Canvas.

        `npot`: |lrv-string|

            Support for textures with non-power-of-two sizes. See PO2 Syndrome.

        `subtractive`: |lrv-string|

            Support for the subtractive blend mode.

        `shader`: |lrv-string|

            Support for Shaders.

        `hdrcanvas`: |lrv-string|

            Support for HDR Canvases. Use love.graphics.getCanvasFormats
            instead.

        `multicanvas`: |lrv-string|

            Support for simultaneous rendering to at least 4 canvases at once,
            with love.graphics.setCanvas. Use love.graphics.getSystemLimits
            instead.

        `mipmap`: |lrv-string|

            Support for Mipmaps.

        `dxt`: |lrv-string|

            Support for DXT compressed images (see CompressedFormat.) Use
            love.graphics.getCompressedImageFormats instead.

        `bc5`: |lrv-string|

            Support for BC4 and BC5 compressed images. Use
            love.graphics.getCompressedImageFormats instead.

        `srgb`: |lrv-string|

            Support for gamma-correct rendering with the srgb window flag in
            Canvases and Images.

        `pixeleffect`: |lrv-string|

            Support for PixelEffects.

-------------------------------------------------------------------------------
                                                           *love-GraphicsLimit*
|GraphicsLimit|

Types of system-dependent graphics limits checked for using
love.graphics.getSystemLimits.

    constants:

        `pointsize`: |lrv-string|

            The maximum size of points.

        `texturesize`: |lrv-string|

            The maximum width or height of Images and Canvases.

        `multicanvas`: |lrv-string|

            The maximum number of simultaneously active canvases (via
            love.graphics.setCanvas.)

        `canvasmsaa`: |lrv-string|

            The maximum number of antialiasing samples for a Canvas.

        `texturelayers`: |lrv-string|

            The maximum number of layers in an Array texture.

        `volumetexturesize`: |lrv-string|

            The maximum width, height, or depth of a Volume texture.

        `cubetexturesize`: |lrv-string|

            The maximum width or height of a Cubemap texture.

        `anisotropy`: |lrv-string|

            The maximum amount of anisotropic filtering.
            Texture:setMipmapFilter internally clamps the given anisotropy
            value to the system's limit.

        `canvasfsaa`: |lrv-string|

            The maximum number of antialiasing samples for a Canvas.

-------------------------------------------------------------------------------
                                                                *love-LineJoin*
|LineJoin|

Line join style.

    constants:

        `miter`: |lrv-string|

            The ends of the line segments beveled in an angle so that they join
            seamlessly.

        `none`: |lrv-string|

            No cap applied to the ends of the line segments.

        `bevel`: |lrv-string|

            Flattens the point where line segments join together.

-------------------------------------------------------------------------------
                                                               *love-LineStyle*
|LineStyle|

The styles in which lines are drawn.

    constants:

        `rough`: |lrv-string|

            Draw rough lines.

        `smooth`: |lrv-string|

            Draw smooth lines.

-------------------------------------------------------------------------------
                                                            *love-MeshDrawMode*
|MeshDrawMode|

How a Mesh's vertices are used when drawing.

    constants:

        `fan`: |lrv-string|

            The vertices create a "fan" shape with the first vertex acting as
            the hub point. Can be easily used to draw simple convex polygons.

        `strip`: |lrv-string|

            The vertices create a series of connected triangles using vertices
            1, 2, 3, then 3, 2, 4 (note the order), then 3, 4, 5, and so on.

        `triangles`: |lrv-string|

            The vertices create unconnected triangles.

        `points`: |lrv-string|

            The vertices are drawn as unconnected points (see
            love.graphics.setPointSize.)

-------------------------------------------------------------------------------
                                                      *love-ParticleInsertMode*
|ParticleInsertMode|

How newly created particles are added to the ParticleSystem.

    constants:

        `top`: |lrv-string|

            Particles are inserted at the top of the ParticleSystem's list of
            particles.

        `bottom`: |lrv-string|

            Particles are inserted at the bottom of the ParticleSystem's list
            of particles.

        `random`: |lrv-string|

            Particles are inserted at random positions in the ParticleSystem's
            list of particles.

-------------------------------------------------------------------------------
                                                        *love-SpriteBatchUsage*
|SpriteBatchUsage|

Usage hints for SpriteBatches and Meshes to optimize data storage and access.

    constants:

        `dynamic`: |lrv-string|

            The object's data will change occasionally during its lifetime.

        `static`: |lrv-string|

            The object will not be modified after initial sprites or vertices
            are added.

        `stream`: |lrv-string|

            The object data will always change between draws.

-------------------------------------------------------------------------------
                                                               *love-StackType*
|StackType|

Graphics state stack types used with love.graphics.push.

    constants:

        `transform`: |lrv-string|

            The transformation stack (love.graphics.translate,
            love.graphics.rotate, etc.)

        `all`: |lrv-string|

            All love.graphics state, including transform state.

-------------------------------------------------------------------------------
                                                           *love-StencilAction*
|StencilAction|

How a stencil function modifies the stencil values of pixels it touches.

    constants:

        `replace`: |lrv-string|

            The stencil value of a pixel will be replaced by the value
            specified in love.graphics.stencil, if any object touches the
            pixel.

        `increment`: |lrv-string|

            The stencil value of a pixel will be incremented by 1 for each
            object that touches the pixel. If the stencil value reaches 255 it
            will stay at 255.

        `decrement`: |lrv-string|

            The stencil value of a pixel will be decremented by 1 for each
            object that touches the pixel. If the stencil value reaches 0 it
            will stay at 0.

        `incrementwrap`: |lrv-string|

            The stencil value of a pixel will be incremented by 1 for each
            object that touches the pixel. If a stencil value of 255 is
            incremented it will be set to 0.

        `decrementwrap`: |lrv-string|

            The stencil value of a pixel will be decremented by 1 for each
            object that touches the pixel. If the stencil value of 0 is
            decremented it will be set to 255.

        `invert`: |lrv-string|

            The stencil value of a pixel will be bitwise-inverted for each
            object that touches the pixel. If a stencil value of 0 is inverted
            it will become 255.

-------------------------------------------------------------------------------
                                                             *love-TextureType*
|TextureType|

Types of textures (2D, cubemap, etc.)

    constants:

        `2d`: |lrv-string|

            Regular 2D texture with width and height.

        `array`: |lrv-string|

            Several same-size 2D textures organized into a single object.
            Similar to a texture atlas / sprite sheet, but avoids sprite
            bleeding and other issues.

        `cube`: |lrv-string|

            Cubemap texture with 6 faces. Requires a custom shader (and
            Shader:send) to use. Sampling from a cube texture in a shader takes
            a 3D direction vector instead of a texture coordinate.

        `volume`: |lrv-string|

            3D texture with width, height, and depth. Requires a custom shader
            to use. Volume textures can have texture filtering applied along
            the 3rd axis.

-------------------------------------------------------------------------------
                                                                *love-WrapMode*
|WrapMode|

How the image wraps inside a Quad with a larger quad size than image size. This
also affects how Meshes with texture coordinates which are outside the range of
1 are drawn, and the color returned by the Texel Shader function when using it
to sample from texture coordinates outside of the range of 1.

    constants:

        `clamp`: |lrv-string|

            Clamp the texture. Appears only once. The area outside the
            texture's normal range is colored based on the edge pixels of the
            texture.

        `repeat`: |lrv-string|

            Repeat the texture. Fills the whole available extent.

        `mirroredrepeat`: |lrv-string|

            Repeat the texture, flipping it each time it repeats. May produce
            better visual results than the repeat mode when the texture doesn't
            seamlessly tile.

        `clampzero`: |lrv-string|

            Clamp the texture. Fills the area outside the texture's normal
            range with transparent black (or opaque black for textures with no
            alpha channel.)

-------------------------------------------------------------------------------
                                                 *love-love.graphics-functions*
The functions of |love.graphics|:

    |applyTransform|                      |love-love.graphics.applyTransform|
    |arc|                                 |love-love.graphics.arc|
    |captureScreenshot|                   |love-love.graphics.captureScreensh-|
    |circle|                              |love-love.graphics.circle|
    |clear|                               |love-love.graphics.clear|
    |discard|                             |love-love.graphics.discard|
    |draw|                                |love-love.graphics.draw|
    |drawInstanced|                       |love-love.graphics.drawInstanced|
    |drawLayer|                           |love-love.graphics.drawLayer|
    |ellipse|                             |love-love.graphics.ellipse|
    |flushBatch|                          |love-love.graphics.flushBatch|
    |getBackgroundColor|                  |love-love.graphics.getBackgroundCo-|
    |getBlendMode|                        |love-love.graphics.getBlendMode|
    |getCanvas|                           |love-love.graphics.getCanvas|
    |getCanvasFormats|                    |love-love.graphics.getCanvasFormats|
    |getColor|                            |love-love.graphics.getColor|
    |getColorMask|                        |love-love.graphics.getColorMask|
    |getDPIScale|                         |love-love.graphics.getDPIScale|
    |getDefaultFilter|                    |love-love.graphics.getDefaultFilter|
    |getDepthMode|                        |love-love.graphics.getDepthMode|
    |getDimensions|                       |love-love.graphics.getDimensions|
    |getFont|                             |love-love.graphics.getFont|
    |getFrontFaceWinding|                 |love-love.graphics.getFrontFaceWin-|
    |getHeight|                           |love-love.graphics.getHeight|
    |getImageFormats|                     |love-love.graphics.getImageFormats|
    |getLineJoin|                         |love-love.graphics.getLineJoin|
    |getLineStyle|                        |love-love.graphics.getLineStyle|
    |getLineWidth|                        |love-love.graphics.getLineWidth|
    |getMeshCullMode|                     |love-love.graphics.getMeshCullMode|
    |getPixelHeight|                      |love-love.graphics.getPixelHeight|
    |getPixelWidth|                       |love-love.graphics.getPixelWidth|
    |getPointSize|                        |love-love.graphics.getPointSize|
    |getRendererInfo|                     |love-love.graphics.getRendererInfo|
    |getScissor|                          |love-love.graphics.getScissor|
    |getShader|                           |love-love.graphics.getShader|
    |getStackDepth|                       |love-love.graphics.getStackDepth|
    |getStats|                            |love-love.graphics.getStats|
    |getStencilTest|                      |love-love.graphics.getStencilTest|
    |getSupported|                        |love-love.graphics.getSupported|
    |getSystemLimits|                     |love-love.graphics.getSystemLimits|
    |getTextureTypes|                     |love-love.graphics.getTextureTypes|
    |getWidth|                            |love-love.graphics.getWidth|
    |intersectScissor|                    |love-love.graphics.intersectScissor|
    |inverseTransformPoint|               |love-love.graphics.inverseTransfor-|
    |isActive|                            |love-love.graphics.isActive|
    |isGammaCorrect|                      |love-love.graphics.isGammaCorrect|
    |isWireframe|                         |love-love.graphics.isWireframe|
    |line|                                |love-love.graphics.line|
    |newArrayImage|                       |love-love.graphics.newArrayImage|
    |newCanvas|                           |love-love.graphics.newCanvas|
    |newCubeImage|                        |love-love.graphics.newCubeImage|
    |newFont|                             |love-love.graphics.newFont|
    |newImage|                            |love-love.graphics.newImage|
    |newImageFont|                        |love-love.graphics.newImageFont|
    |newMesh|                             |love-love.graphics.newMesh|
    |newParticleSystem|                   |love-love.graphics.newParticleSyst-|
    |newQuad|                             |love-love.graphics.newQuad|
    |newShader|                           |love-love.graphics.newShader|
    |newSpriteBatch|                      |love-love.graphics.newSpriteBatch|
    |newText|                             |love-love.graphics.newText|
    |newVideo|                            |love-love.graphics.newVideo|
    |newVolumeImage|                      |love-love.graphics.newVolumeImage|
    |origin|                              |love-love.graphics.origin|
    |points|                              |love-love.graphics.points|
    |polygon|                             |love-love.graphics.polygon|
    |pop|                                 |love-love.graphics.pop|
    |present|                             |love-love.graphics.present|
    |print|                               |love-love.graphics.print|
    |printf|                              |love-love.graphics.printf|
    |push|                                |love-love.graphics.push|
    |rectangle|                           |love-love.graphics.rectangle|
    |replaceTransform|                    |love-love.graphics.replaceTransform|
    |reset|                               |love-love.graphics.reset|
    |rotate|                              |love-love.graphics.rotate|
    |scale|                               |love-love.graphics.scale|
    |setBackgroundColor|                  |love-love.graphics.setBackgroundCo-|
    |setBlendMode|                        |love-love.graphics.setBlendMode|
    |setCanvas|                           |love-love.graphics.setCanvas|
    |setColor|                            |love-love.graphics.setColor|
    |setColorMask|                        |love-love.graphics.setColorMask|
    |setDefaultFilter|                    |love-love.graphics.setDefaultFilter|
    |setDepthMode|                        |love-love.graphics.setDepthMode|
    |setFont|                             |love-love.graphics.setFont|
    |setFrontFaceWinding|                 |love-love.graphics.setFrontFaceWin-|
    |setLineJoin|                         |love-love.graphics.setLineJoin|
    |setLineStyle|                        |love-love.graphics.setLineStyle|
    |setLineWidth|                        |love-love.graphics.setLineWidth|
    |setMeshCullMode|                     |love-love.graphics.setMeshCullMode|
    |setNewFont|                          |love-love.graphics.setNewFont|
    |setPointSize|                        |love-love.graphics.setPointSize|
    |setScissor|                          |love-love.graphics.setScissor|
    |setShader|                           |love-love.graphics.setShader|
    |setStencilTest|                      |love-love.graphics.setStencilTest|
    |setWireframe|                        |love-love.graphics.setWireframe|
    |shear|                               |love-love.graphics.shear|
    |stencil|                             |love-love.graphics.stencil|
    |transformPoint|                      |love-love.graphics.transformPoint|
    |translate|                           |love-love.graphics.translate|
    |validateShader|                      |love-love.graphics.validateShader|

-------------------------------------------------------------------------------
                                            *love-love.graphics.applyTransform*
|love.graphics.applyTransform|

Applies the given Transform object to the current coordinate transformation.

This effectively multiplies the existing coordinate transformation's matrix
with the Transform object's internal matrix to produce the new coordinate
transformation.

Synopses:

    1.  |love.graphics.applyTransform|( `transform` )

Variants:

    1.  |love.graphics.applyTransform|( `transform` )

        See function description

        returns:

            None

        arguments:

            `transform`: |love-Transform|

                The Transform object to apply to the current graphics
                coordinate transform.

-------------------------------------------------------------------------------
                                                       *love-love.graphics.arc*
|love.graphics.arc|

Draws a filled or unfilled arc at position (x, y). The arc is drawn from angle1
to angle2 in radians. The segments parameter determines how many segments are
used to draw the arc. The more segments, the smoother the edge.

Synopses:

    1.  |love.graphics.arc|( `drawmode`, `x`, `y`, `radius`, `angle1`,
        `angle2`, `segments` )
    2.  |love.graphics.arc|( `drawmode`, `arctype`, `x`, `y`, `radius`,
        `angle1`, `angle2`, `segments` )

Variants:

    1.  |love.graphics.arc|( `drawmode`, `x`, `y`, `radius`, `angle1`,
        `angle2`, `segments` )

        Draws an arc using the 'pie' ArcType.

        returns:

            None

        arguments:

            `drawmode`: |love-DrawMode|

                How to draw the arc.

            `x`: |lrv-number|

                The position of the center along x-axis.

            `y`: |lrv-number|

                The position of the center along y-axis.

            `radius`: |lrv-number|

                Radius of the arc.

            `angle1`: |lrv-number|

                The angle at which the arc begins.

            `angle2`: |lrv-number|

                The angle at which the arc terminates.

            `segments`: |lrv-number|

                The number of segments used for drawing the arc.
    2.  |love.graphics.arc|( `drawmode`, `arctype`, `x`, `y`, `radius`,
        `angle1`, `angle2`, `segments` )

        

        returns:

            None

        arguments:

            `drawmode`: |love-DrawMode|

                How to draw the arc.

            `arctype`: |love-ArcType|

                The type of arc to draw.

            `x`: |lrv-number|

                The position of the center along x-axis.

            `y`: |lrv-number|

                The position of the center along y-axis.

            `radius`: |lrv-number|

                Radius of the arc.

            `angle1`: |lrv-number|

                The angle at which the arc begins.

            `angle2`: |lrv-number|

                The angle at which the arc terminates.

            `segments`: |lrv-number|

                The number of segments used for drawing the arc.

-------------------------------------------------------------------------------
                                         *love-love.graphics.captureScreenshot*
|love.graphics.captureScreenshot|

Creates a screenshot once the current frame is done (after love.draw has
finished).

Since this function enqueues a screenshot capture rather than executing it
immediately, it can be called from an input callback or love.update and it will
still capture all of what's drawn to the screen in that frame.

Synopses:

    1.  |love.graphics.captureScreenshot|( `filename` )
    2.  |love.graphics.captureScreenshot|( `callback` )
    3.  |love.graphics.captureScreenshot|( `channel` )

Variants:

    1.  |love.graphics.captureScreenshot|( `filename` )

        Capture a screenshot and save it to a file at the end of the current frame.

        returns:

            None

        arguments:

            `filename`: |lrv-string|

                The filename to save the screenshot to. The encoded image type
                is determined based on the extension of the filename, and must
                be one of the ImageFormats.
    2.  |love.graphics.captureScreenshot|( `callback` )

        Capture a screenshot and call a callback with the generated ImageData at the end of the current frame.

        returns:

            None

        arguments:

            `callback`: |lrv-function|

                Function which gets called once the screenshot has been
                captured. An ImageData is passed into the function as its only
                argument.
    3.  |love.graphics.captureScreenshot|( `channel` )

        Capture a screenshot and push the generated ImageData to a Channel at the end of the current frame.

        returns:

            None

        arguments:

            `channel`: |love-Channel|

                The Channel to push the generated ImageData to.

-------------------------------------------------------------------------------
                                                    *love-love.graphics.circle*
|love.graphics.circle|

Draws a circle.

Synopses:

    1.  |love.graphics.circle|( `mode`, `x`, `y`, `radius` )
    2.  |love.graphics.circle|( `mode`, `x`, `y`, `radius`, `segments`
        )

Variants:

    1.  |love.graphics.circle|( `mode`, `x`, `y`, `radius` )

        See function description

        returns:

            None

        arguments:

            `mode`: |love-DrawMode|

                How to draw the circle.

            `x`: |lrv-number|

                The position of the center along x-axis.

            `y`: |lrv-number|

                The position of the center along y-axis.

            `radius`: |lrv-number|

                The radius of the circle.
    2.  |love.graphics.circle|( `mode`, `x`, `y`, `radius`, `segments`
        )

        See function description

        returns:

            None

        arguments:

            `mode`: |love-DrawMode|

                How to draw the circle.

            `x`: |lrv-number|

                The position of the center along x-axis.

            `y`: |lrv-number|

                The position of the center along y-axis.

            `radius`: |lrv-number|

                The radius of the circle.

            `segments`: |lrv-number|

                The number of segments used for drawing the circle. Note: The
                default variable for the segments parameter varies between
                different versions of LÖVE.

-------------------------------------------------------------------------------
                                                     *love-love.graphics.clear*
|love.graphics.clear|

Clears the screen or active Canvas to the specified color.

This function is called automatically before love.draw in the default love.run
function. See the example in love.run for a typical use of this function.

Note that the scissor area bounds the cleared region.

In versions prior to 11.0, color component values were within the range of 0 to
255 instead of 0 to 1.

In versions prior to background color instead.

Synopses:

    1.  |love.graphics.clear|()
    2.  |love.graphics.clear|( `r`, `g`, `b`, `a`, `clearstencil`,
        `cleardepth` )
    3.  |love.graphics.clear|( `color`, `...`, `clearstencil`,
        `cleardepth` )
    4.  |love.graphics.clear|( `clearcolor`, `clearstencil`,
        `cleardepth` )

Variants:

    1.  |love.graphics.clear|()

        Clears the screen to the background color in 0.9.2 and earlier, or to transparent black (0, 0, 0, 0) in LÖVE 0.10.0 and newer.

        returns:

            None

        arguments:

            None
    2.  |love.graphics.clear|( `r`, `g`, `b`, `a`, `clearstencil`,
        `cleardepth` )

        Clears the screen or active Canvas to the specified color.

        returns:

            None

        arguments:

            `r`: |lrv-number|

                The red channel of the color to clear the screen to.

            `g`: |lrv-number|

                The green channel of the color to clear the screen to.

            `b`: |lrv-number|

                The blue channel of the color to clear the screen to.

            `a`: |lrv-number|

                The alpha channel of the color to clear the screen to.

            `clearstencil`: |lrv-boolean|

                Whether to clear the active stencil buffer, if present. It can
                also be an integer between 0 and 255 to clear the stencil
                buffer to a specific value.

            `cleardepth`: |lrv-boolean|

                Whether to clear the active depth buffer, if present. It can
                also be a number between 0 and 1 to clear the depth buffer to a
                specific value.
    3.  |love.graphics.clear|( `color`, `...`, `clearstencil`,
        `cleardepth` )

        Clears multiple active Canvases to different colors, if multiple Canvases are active at once via love.graphics.setCanvas.

A color must be specified for each active Canvas, when this function variant is used.

        returns:

            None

        arguments:

            `color`: |lrv-table|

                A table in the form of {r, g, b, a} containing the color to
                clear the first active Canvas to.

            `...`: |lrv-table|

                Additional tables for each active Canvas.

            `clearstencil`: |lrv-boolean|

                Whether to clear the active stencil buffer, if present. It can
                also be an integer between 0 and 255 to clear the stencil
                buffer to a specific value.

            `cleardepth`: |lrv-boolean|

                Whether to clear the active depth buffer, if present. It can
                also be a number between 0 and 1 to clear the depth buffer to a
                specific value.
    4.  |love.graphics.clear|( `clearcolor`, `clearstencil`,
        `cleardepth` )

        Clears the stencil or depth buffers without having to clear the color canvas as well.

        returns:

            None

        arguments:

            `clearcolor`: |lrv-boolean|

                Whether to clear the active color canvas to transparent black
                (0, 0, 0, 0). Typically this should be set to false with this
                variant of the function.

            `clearstencil`: |lrv-boolean|

                Whether to clear the active stencil buffer, if present. It can
                also be an integer between 0 and 255 to clear the stencil
                buffer to a specific value.

            `cleardepth`: |lrv-boolean|

                Whether to clear the active depth buffer, if present. It can
                also be a number between 0 and 1 to clear the depth buffer to a
                specific value.

-------------------------------------------------------------------------------
                                                   *love-love.graphics.discard*
|love.graphics.discard|

Discards (trashes) the contents of the screen or active Canvas. This is a
performance optimization function with niche use cases.

If the active Canvas has just been changed and the 'replace' BlendMode is about
to be used to draw something which covers the entire screen, calling
love.graphics.discard rather than calling love.graphics.clear or doing nothing
may improve performance on mobile devices.

On some desktop systems this function may do nothing.

Synopses:

    1.  |love.graphics.discard|( `discardcolor`, `discardstencil` )
    2.  |love.graphics.discard|( `discardcolors`, `discardstencil` )

Variants:

    1.  |love.graphics.discard|( `discardcolor`, `discardstencil` )

        See function description

        returns:

            None

        arguments:

            `discardcolor`: |lrv-boolean|

                Whether to discard the texture(s) of the active Canvas(es) (the
                contents of the screen if no Canvas is active.)

            `discardstencil`: |lrv-boolean|

                Whether to discard the contents of the stencil buffer of the
                screen / active Canvas.
    2.  |love.graphics.discard|( `discardcolors`, `discardstencil` )

        See function description

        returns:

            None

        arguments:

            `discardcolors`: |lrv-table|

                An array containing boolean values indicating whether to
                discard the texture of each active Canvas, when multiple
                simultaneous Canvases are active.

            `discardstencil`: |lrv-boolean|

                Whether to discard the contents of the stencil buffer of the
                screen / active Canvas.

-------------------------------------------------------------------------------
                                                      *love-love.graphics.draw*
|love.graphics.draw|

Draws a Drawable object (an Image, Canvas, SpriteBatch, ParticleSystem, Mesh,
Text object, or Video) on the screen with optional rotation, scaling and
shearing.

Objects are drawn relative to their local coordinate system. The origin is by
default located at the top left corner of Image and Canvas. All scaling,
shearing, and rotation arguments transform the object relative to that point.
Also, the position of the origin can be specified on the screen coordinate
system.

It's possible to rotate an object about its center by offsetting the origin to
the center. Angles must be given in radians for rotation. One can also use a
negative scaling factor to flip about its centerline.

Note that the offsets are applied before rotation, scaling, or shearing;
scaling and shearing are applied before rotation.

The right and bottom edges of the object are shifted at an angle defined by the
shearing factors.

When using the default shader anything drawn with this function will be tinted
according to the currently selected color.  Set it to pure white to preserve
the object's original colors.

Synopses:

    1.  |love.graphics.draw|( `drawable`, `x`, `y`, `r`, `sx`, `sy`,
        `ox`, `oy`, `kx`, `ky` )
    2.  |love.graphics.draw|( `texture`, `quad`, `x`, `y`, `r`, `sx`,
        `sy`, `ox`, `oy`, `kx`, `ky` )
    3.  |love.graphics.draw|( `drawable`, `transform` )
    4.  |love.graphics.draw|( `texture`, `quad`, `transform` )

Variants:

    1.  |love.graphics.draw|( `drawable`, `x`, `y`, `r`, `sx`, `sy`,
        `ox`, `oy`, `kx`, `ky` )

        See function description

        returns:

            None

        arguments:

            `drawable`: |love-Drawable|

                A drawable object.

            `x`: |lrv-number|

                The position to draw the object (x-axis).

            `y`: |lrv-number|

                The position to draw the object (y-axis).

            `r`: |lrv-number|

                Orientation (radians).

            `sx`: |lrv-number|

                Scale factor (x-axis).

            `sy`: |lrv-number|

                Scale factor (y-axis).

            `ox`: |lrv-number|

                Origin offset (x-axis).

            `oy`: |lrv-number|

                Origin offset (y-axis).

            `kx`: |lrv-number|

                Shearing factor (x-axis).

            `ky`: |lrv-number|

                Shearing factor (y-axis).
    2.  |love.graphics.draw|( `texture`, `quad`, `x`, `y`, `r`, `sx`,
        `sy`, `ox`, `oy`, `kx`, `ky` )

        See function description

        returns:

            None

        arguments:

            `texture`: |love-Texture|

                A Texture (Image or Canvas) to texture the Quad with.

            `quad`: |love-Quad|

                The Quad to draw on screen.

            `x`: |lrv-number|

                The position to draw the object (x-axis).

            `y`: |lrv-number|

                The position to draw the object (y-axis).

            `r`: |lrv-number|

                Orientation (radians).

            `sx`: |lrv-number|

                Scale factor (x-axis).

            `sy`: |lrv-number|

                Scale factor (y-axis).

            `ox`: |lrv-number|

                Origin offset (x-axis).

            `oy`: |lrv-number|

                Origin offset (y-axis).

            `kx`: |lrv-number|

                Shearing factor (x-axis).

            `ky`: |lrv-number|

                Shearing factor (y-axis).
    3.  |love.graphics.draw|( `drawable`, `transform` )

        See function description

        returns:

            None

        arguments:

            `drawable`: |love-Drawable|

                A drawable object.

            `transform`: |love-Transform|

                Transformation object.
    4.  |love.graphics.draw|( `texture`, `quad`, `transform` )

        See function description

        returns:

            None

        arguments:

            `texture`: |love-Texture|

                A Texture (Image or Canvas) to texture the Quad with.

            `quad`: |love-Quad|

                The Quad to draw on screen.

            `transform`: |love-Transform|

                Transformation object.

-------------------------------------------------------------------------------
                                             *love-love.graphics.drawInstanced*
|love.graphics.drawInstanced|

Draws many instances of a Mesh with a single draw call, using hardware geometry
instancing.

Each instance can have unique properties (positions, colors, etc.) but will not
by default unless a custom per-instance vertex attributes or the
love_InstanceID GLSL 3 vertex shader variable is used, otherwise they will all
render at the same position on top of each other.

Instancing is not supported by some older GPUs that are only capable of using
OpenGL ES 2 or OpenGL 2. Use love.graphics.getSupported to check.

Synopses:

    1.  |love.graphics.drawInstanced|( `mesh`, `instancecount`, `x`,
        `y`, `r`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )
    2.  |love.graphics.drawInstanced|( `mesh`, `instancecount`,
        `transform` )

Variants:

    1.  |love.graphics.drawInstanced|( `mesh`, `instancecount`, `x`,
        `y`, `r`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

        See function description

        returns:

            None

        arguments:

            `mesh`: |love-Mesh|

                The mesh to render.

            `instancecount`: |lrv-number|

                The number of instances to render.

            `x`: |lrv-number|

                The position to draw the instances (x-axis).

            `y`: |lrv-number|

                The position to draw the instances (y-axis).

            `r`: |lrv-number|

                Orientation (radians).

            `sx`: |lrv-number|

                Scale factor (x-axis).

            `sy`: |lrv-number|

                Scale factor (y-axis).

            `ox`: |lrv-number|

                Origin offset (x-axis).

            `oy`: |lrv-number|

                Origin offset (y-axis).

            `kx`: |lrv-number|

                Shearing factor (x-axis).

            `ky`: |lrv-number|

                Shearing factor (y-axis).
    2.  |love.graphics.drawInstanced|( `mesh`, `instancecount`,
        `transform` )

        See function description

        returns:

            None

        arguments:

            `mesh`: |love-Mesh|

                The mesh to render.

            `instancecount`: |lrv-number|

                The number of instances to render.

            `transform`: |love-Transform|

                A transform object.

-------------------------------------------------------------------------------
                                                 *love-love.graphics.drawLayer*
|love.graphics.drawLayer|

Draws a layer of an Array Texture.

Synopses:

    1.  |love.graphics.drawLayer|( `texture`, `layerindex`, `x`, `y`,
        `r`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )
    2.  |love.graphics.drawLayer|( `texture`, `layerindex`, `quad`,
        `x`, `y`, `r`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )
    3.  |love.graphics.drawLayer|( `texture`, `layerindex`, `transform`
        )
    4.  |love.graphics.drawLayer|( `texture`, `layerindex`, `quad`,
        `transform` )

Variants:

    1.  |love.graphics.drawLayer|( `texture`, `layerindex`, `x`, `y`,
        `r`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

        Draws a layer of an Array Texture.

        returns:

            None

        arguments:

            `texture`: |love-Texture|

                The Array Texture to draw.

            `layerindex`: |lrv-number|

                The index of the layer to use when drawing.

            `x`: |lrv-number|

                The position to draw the texture (x-axis).

            `y`: |lrv-number|

                The position to draw the texture (y-axis).

            `r`: |lrv-number|

                Orientation (radians).

            `sx`: |lrv-number|

                Scale factor (x-axis).

            `sy`: |lrv-number|

                Scale factor (y-axis).

            `ox`: |lrv-number|

                Origin offset (x-axis).

            `oy`: |lrv-number|

                Origin offset (y-axis).

            `kx`: |lrv-number|

                Shearing factor (x-axis).

            `ky`: |lrv-number|

                Shearing factor (y-axis).
    2.  |love.graphics.drawLayer|( `texture`, `layerindex`, `quad`,
        `x`, `y`, `r`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

        Draws a layer of an Array Texture using the specified Quad.

The specified layer index overrides any layer index set on the Quad via Quad:setLayer.

        returns:

            None

        arguments:

            `texture`: |love-Texture|

                The Array Texture to draw.

            `layerindex`: |lrv-number|

                The index of the layer to use when drawing.

            `quad`: |love-Quad|

                The subsection of the texture's layer to use when drawing.

            `x`: |lrv-number|

                The position to draw the texture (x-axis).

            `y`: |lrv-number|

                The position to draw the texture (y-axis).

            `r`: |lrv-number|

                Orientation (radians).

            `sx`: |lrv-number|

                Scale factor (x-axis).

            `sy`: |lrv-number|

                Scale factor (y-axis).

            `ox`: |lrv-number|

                Origin offset (x-axis).

            `oy`: |lrv-number|

                Origin offset (y-axis).

            `kx`: |lrv-number|

                Shearing factor (x-axis).

            `ky`: |lrv-number|

                Shearing factor (y-axis).
    3.  |love.graphics.drawLayer|( `texture`, `layerindex`, `transform`
        )

        Draws a layer of an Array Texture using the specified Transform.

        returns:

            None

        arguments:

            `texture`: |love-Texture|

                The Array Texture to draw.

            `layerindex`: |lrv-number|

                The index of the layer to use when drawing.

            `transform`: |love-Transform|

                A transform object.
    4.  |love.graphics.drawLayer|( `texture`, `layerindex`, `quad`,
        `transform` )

        Draws a layer of an Array Texture using the specified Quad and Transform.

In order to use an Array Texture or other non-2D texture types as the main texture in a custom void effect() variant must be used in the pixel shader, and MainTex must be declared as an ArrayImage or sampler2DArray like so: uniform ArrayImage MainTex;.

        returns:

            None

        arguments:

            `texture`: |love-Texture|

                The Array Texture to draw.

            `layerindex`: |lrv-number|

                The index of the layer to use when drawing.

            `quad`: |love-Quad|

                The subsection of the texture's layer to use when drawing.

            `transform`: |love-Transform|

                A transform object.

-------------------------------------------------------------------------------
                                                   *love-love.graphics.ellipse*
|love.graphics.ellipse|

Draws an ellipse.

Synopses:

    1.  |love.graphics.ellipse|( `mode`, `x`, `y`, `radiusx`, `radiusy`
        )
    2.  |love.graphics.ellipse|( `mode`, `x`, `y`, `radiusx`,
        `radiusy`, `segments` )

Variants:

    1.  |love.graphics.ellipse|( `mode`, `x`, `y`, `radiusx`, `radiusy`
        )

        See function description

        returns:

            None

        arguments:

            `mode`: |love-DrawMode|

                How to draw the ellipse.

            `x`: |lrv-number|

                The position of the center along x-axis.

            `y`: |lrv-number|

                The position of the center along y-axis.

            `radiusx`: |lrv-number|

                The radius of the ellipse along the x-axis (half the ellipse's
                width).

            `radiusy`: |lrv-number|

                The radius of the ellipse along the y-axis (half the ellipse's
                height).
    2.  |love.graphics.ellipse|( `mode`, `x`, `y`, `radiusx`,
        `radiusy`, `segments` )

        See function description

        returns:

            None

        arguments:

            `mode`: |love-DrawMode|

                How to draw the ellipse.

            `x`: |lrv-number|

                The position of the center along x-axis.

            `y`: |lrv-number|

                The position of the center along y-axis.

            `radiusx`: |lrv-number|

                The radius of the ellipse along the x-axis (half the ellipse's
                width).

            `radiusy`: |lrv-number|

                The radius of the ellipse along the y-axis (half the ellipse's
                height).

            `segments`: |lrv-number|

                The number of segments used for drawing the ellipse.

-------------------------------------------------------------------------------
                                                *love-love.graphics.flushBatch*
|love.graphics.flushBatch|

Immediately renders any pending automatically batched draws.

LÖVE will call this function internally as needed when most state is changed,
so it is not necessary to manually call it.

The current batch will be automatically flushed by color), as well as
Shader:send and methods on Textures which change their state. Using a different
Image in consecutive love.graphics.draw calls will also flush the current
batch.

SpriteBatches, ParticleSystems, Meshes, and Text objects do their own batching
and do not affect automatic batching of other draws, aside from flushing the
current batch when they're drawn.

Synopses:

    1.  |love.graphics.flushBatch|()

Variants:

    1.  |love.graphics.flushBatch|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                        *love-love.graphics.getBackgroundColor*
|love.graphics.getBackgroundColor|

Gets the current background color.

In versions prior to 11.0, color component values were within the range of 0 to
255 instead of 0 to 1.

Synopses:

    1.  `r`, `g`, `b`, `a` = |love.graphics.getBackgroundColor|()

Variants:

    1.  `r`, `g`, `b`, `a` = |love.graphics.getBackgroundColor|()

        See function description

        returns:

            `r`: |lrv-number|

                The red component (0-1).

            `g`: |lrv-number|

                The green component (0-1).

            `b`: |lrv-number|

                The blue component (0-1).

            `a`: |lrv-number|

                The alpha component (0-1).

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.graphics.getBlendMode*
|love.graphics.getBlendMode|

Gets the blending mode.

Synopses:

    1.  `mode`, `alphamode` = |love.graphics.getBlendMode|()

Variants:

    1.  `mode`, `alphamode` = |love.graphics.getBlendMode|()

        See function description

        returns:

            `mode`: |love-BlendMode|

                The current blend mode.

            `alphamode`: |love-BlendAlphaMode|

                The current blend alpha mode – it determines how the alpha of
                drawn objects affects blending.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-love.graphics.getCanvas*
|love.graphics.getCanvas|

Gets the current target Canvas.

Synopses:

    1.  `canvas` = |love.graphics.getCanvas|()

Variants:

    1.  `canvas` = |love.graphics.getCanvas|()

        See function description

        returns:

            `canvas`: |love-Canvas|

                The Canvas set by setCanvas. Returns nil if drawing to the real
                screen.

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-love.graphics.getCanvasFormats*
|love.graphics.getCanvasFormats|

Gets the available Canvas formats, and whether each is supported.

Synopses:

    1.  `formats` = |love.graphics.getCanvasFormats|()
    2.  `formats` = |love.graphics.getCanvasFormats|( `readable` )

Variants:

    1.  `formats` = |love.graphics.getCanvasFormats|()

        See function description

        returns:

            `formats`: |lrv-table|

                A table containing CanvasFormats as keys, and a boolean
                indicating whether the format is supported as values. Not all
                systems support all formats.

        arguments:

            None
    2.  `formats` = |love.graphics.getCanvasFormats|( `readable` )

        See function description

        returns:

            `formats`: |lrv-table|

                A table containing CanvasFormats as keys, and a boolean
                indicating whether the format is supported as values (taking
                into account the readable parameter). Not all systems support
                all formats.

        arguments:

            `readable`: |lrv-boolean|

                If true, the returned formats will only be indicated as
                supported if readable flag set to true for that format, and
                vice versa if the parameter is false.

-------------------------------------------------------------------------------
                                                  *love-love.graphics.getColor*
|love.graphics.getColor|

Gets the current color.

In versions prior to 11.0, color component values were within the range of 0 to
255 instead of 0 to 1.

Synopses:

    1.  `r`, `g`, `b`, `a` = |love.graphics.getColor|()

Variants:

    1.  `r`, `g`, `b`, `a` = |love.graphics.getColor|()

        See function description

        returns:

            `r`: |lrv-number|

                The red component (0-1).

            `g`: |lrv-number|

                The green component (0-1).

            `b`: |lrv-number|

                The blue component (0-1).

            `a`: |lrv-number|

                The alpha component (0-1).

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.graphics.getColorMask*
|love.graphics.getColorMask|

Gets the active color components used when drawing. Normally all 4 components
are active unless love.graphics.setColorMask has been used.

The color mask determines whether individual components of the colors of drawn
objects will affect the color of the screen. They affect love.graphics.clear
and Canvas:clear as well.

Synopses:

    1.  `r`, `g`, `b`, `a` = |love.graphics.getColorMask|()

Variants:

    1.  `r`, `g`, `b`, `a` = |love.graphics.getColorMask|()

        See function description

        returns:

            `r`: |lrv-boolean|

                Whether the red color component is active when rendering.

            `g`: |lrv-boolean|

                Whether the green color component is active when rendering.

            `b`: |lrv-boolean|

                Whether the blue color component is active when rendering.

            `a`: |lrv-boolean|

                Whether the alpha color component is active when rendering.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-love.graphics.getDPIScale*
|love.graphics.getDPIScale|

Gets the DPI scale factor of the window.

The DPI scale factor represents relative pixel density. The pixel density
inside the window might be greater (or smaller) than the 'size' of the window.
For example on a retina screen in Mac OS X with the highdpi window flag
enabled, the window may take up the same physical size as an 800x600 window,
but the area inside the window uses 1600x1200 pixels.
love.graphics.getDPIScale() would return 2 in that case.

The love.window.fromPixels and love.window.toPixels functions can also be used
to convert between units.

The highdpi window flag must be enabled to use the full pixel density of a
Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows
and Linux, and on Android it is effectively always enabled.

Synopses:

    1.  `scale` = |love.graphics.getDPIScale|()

Variants:

    1.  `scale` = |love.graphics.getDPIScale|()

        The units of love.graphics.getWidth, love.graphics.getHeight, love.mouse.getPosition, mouse events, love.touch.getPosition, and touch events are always in DPI-scaled units rather than pixels. In LÖVE 0.10 and older they were in pixels.

        returns:

            `scale`: |lrv-number|

                The pixel scale factor associated with the window.

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-love.graphics.getDefaultFilter*
|love.graphics.getDefaultFilter|

Returns the default scaling filters used with Images, Canvases, and Fonts.

Synopses:

    1.  `min`, `mag`, `anisotropy` = |love.graphics.getDefaultFilter|()

Variants:

    1.  `min`, `mag`, `anisotropy` = |love.graphics.getDefaultFilter|()

        See function description

        returns:

            `min`: |love-FilterMode|

                Filter mode used when scaling the image down.

            `mag`: |love-FilterMode|

                Filter mode used when scaling the image up.

            `anisotropy`: |lrv-number|

                Maximum amount of Anisotropic Filtering used.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.graphics.getDepthMode*
|love.graphics.getDepthMode|

Gets the current depth test mode and whether writing to the depth buffer is
enabled.

This is low-level functionality designed for use with custom vertex shaders and
Meshes with custom vertex attributes. No higher level APIs are provided to set
the depth of 2D graphics such as shapes, lines, and Images.

Synopses:

    1.  `comparemode`, `write` = |love.graphics.getDepthMode|()

Variants:

    1.  `comparemode`, `write` = |love.graphics.getDepthMode|()

        See function description

        returns:

            `comparemode`: |love-CompareMode|

                Depth comparison mode used for depth testing.

            `write`: |lrv-boolean|

                Whether to write update / write values to the depth buffer when
                rendering.

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-love.graphics.getDimensions*
|love.graphics.getDimensions|

Gets the width and height in pixels of the window.

Synopses:

    1.  `width`, `height` = |love.graphics.getDimensions|()

Variants:

    1.  `width`, `height` = |love.graphics.getDimensions|()

        See function description

        returns:

            `width`: |lrv-number|

                The width of the window.

            `height`: |lrv-number|

                The height of the window.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-love.graphics.getFont*
|love.graphics.getFont|

Gets the current Font object.

Synopses:

    1.  `font` = |love.graphics.getFont|()

Variants:

    1.  `font` = |love.graphics.getFont|()

        See function description

        returns:

            `font`: |love-Font|

                The current Font. Automatically creates and sets the default
                font, if none is set yet.

        arguments:

            None

-------------------------------------------------------------------------------
                                       *love-love.graphics.getFrontFaceWinding*
|love.graphics.getFrontFaceWinding|

Gets whether triangles with clockwise- or counterclockwise-ordered vertices are
considered front-facing.

This is designed for use in combination with Mesh face culling. Other
love.graphics shapes, lines, and sprites are not guaranteed to have a specific
winding order to their internal vertices.

Synopses:

    1.  `winding` = |love.graphics.getFrontFaceWinding|()

Variants:

    1.  `winding` = |love.graphics.getFrontFaceWinding|()

        See function description

        returns:

            `winding`: <VertexWinding>

                The winding mode being used. The default winding is
                counterclockwise ('ccw').

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-love.graphics.getHeight*
|love.graphics.getHeight|

Gets the height in pixels of the window.

Synopses:

    1.  `height` = |love.graphics.getHeight|()

Variants:

    1.  `height` = |love.graphics.getHeight|()

        See function description

        returns:

            `height`: |lrv-number|

                The height of the window.

        arguments:

            None

-------------------------------------------------------------------------------
                                           *love-love.graphics.getImageFormats*
|love.graphics.getImageFormats|

Gets the raw and compressed pixel formats usable for Images, and whether each
is supported.

Synopses:

    1.  `formats` = |love.graphics.getImageFormats|()

Variants:

    1.  `formats` = |love.graphics.getImageFormats|()

        See function description

        returns:

            `formats`: |lrv-table|

                A table containing PixelFormats as keys, and a boolean
                indicating whether the format is supported as values. Not all
                systems support all formats.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-love.graphics.getLineJoin*
|love.graphics.getLineJoin|

Gets the line join style.

Synopses:

    1.  `join` = |love.graphics.getLineJoin|()

Variants:

    1.  `join` = |love.graphics.getLineJoin|()

        See function description

        returns:

            `join`: |love-LineJoin|

                The LineJoin style.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.graphics.getLineStyle*
|love.graphics.getLineStyle|

Gets the line style.

Synopses:

    1.  `style` = |love.graphics.getLineStyle|()

Variants:

    1.  `style` = |love.graphics.getLineStyle|()

        See function description

        returns:

            `style`: |love-LineStyle|

                The current line style.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.graphics.getLineWidth*
|love.graphics.getLineWidth|

Gets the current line width.

Synopses:

    1.  `width` = |love.graphics.getLineWidth|()

Variants:

    1.  `width` = |love.graphics.getLineWidth|()

        This function does not work in 0.8.0, but has been fixed in version 0.9.0. Use the following snippet to circumvent this in 0.8.0;

love.graphics._getLineWidth = love.graphics.getLineWidth

love.graphics._setLineWidth = love.graphics.setLineWidth

function love.graphics.getLineWidth() return love.graphics.varlinewidth or 1 end

function love.graphics.setLineWidth(w) love.graphics.varlinewidth = w; return love.graphics._setLineWidth(w) end

        returns:

            `width`: |lrv-number|

                The current line width.

        arguments:

            None

-------------------------------------------------------------------------------
                                           *love-love.graphics.getMeshCullMode*
|love.graphics.getMeshCullMode|

Gets whether back-facing triangles in a Mesh are culled.

Mesh face culling is designed for use with low level custom
hardware-accelerated 3D rendering via custom vertex attributes on Meshes,
custom vertex shaders, and depth testing with a depth buffer.

Synopses:

    1.  `mode` = |love.graphics.getMeshCullMode|()

Variants:

    1.  `mode` = |love.graphics.getMeshCullMode|()

        See function description

        returns:

            `mode`: |love-CullMode|

                The Mesh face culling mode in use (whether to render
                everything, cull back-facing triangles, or cull front-facing
                triangles).

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-love.graphics.getPixelHeight*
|love.graphics.getPixelHeight|

Gets the height in pixels of the window.

The graphics coordinate system and DPI scale factor, rather than raw pixels.
Use getHeight for calculations related to drawing to the screen and using the
coordinate system (calculating the center of the screen, for example), and
getPixelHeight only when dealing specifically with underlying pixels
(pixel-related calculations in a pixel Shader, for example).

Synopses:

    1.  `pixelheight` = |love.graphics.getPixelHeight|()

Variants:

    1.  `pixelheight` = |love.graphics.getPixelHeight|()

        See function description

        returns:

            `pixelheight`: |lrv-number|

                The height of the window in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-love.graphics.getPixelWidth*
|love.graphics.getPixelWidth|

Gets the width in pixels of the window.

The graphics coordinate system and DPI scale factor, rather than raw pixels.
Use getWidth for calculations related to drawing to the screen and using the
coordinate system (calculating the center of the screen, for example), and
getPixelWidth only when dealing specifically with underlying pixels
(pixel-related calculations in a pixel Shader, for example).

Synopses:

    1.  `pixelwidth` = |love.graphics.getPixelWidth|()

Variants:

    1.  `pixelwidth` = |love.graphics.getPixelWidth|()

        See function description

        returns:

            `pixelwidth`: |lrv-number|

                The width of the window in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.graphics.getPointSize*
|love.graphics.getPointSize|

Gets the point size.

Synopses:

    1.  `size` = |love.graphics.getPointSize|()

Variants:

    1.  `size` = |love.graphics.getPointSize|()

        See function description

        returns:

            `size`: |lrv-number|

                The current point size.

        arguments:

            None

-------------------------------------------------------------------------------
                                           *love-love.graphics.getRendererInfo*
|love.graphics.getRendererInfo|

Gets information about the system's video card and drivers.

Synopses:

    1.  `name`, `version`, `vendor`, `device` =
        |love.graphics.getRendererInfo|()

Variants:

    1.  `name`, `version`, `vendor`, `device` =
        |love.graphics.getRendererInfo|()

        See function description

        returns:

            `name`: |lrv-string|

                The name of the renderer, e.g. 'OpenGL' or 'OpenGL ES'.

            `version`: |lrv-string|

                The version of the renderer with some extra driver-dependent
                version info, e.g. '2.1 INTEL-8.10.44'.

            `vendor`: |lrv-string|

                The name of the graphics card vendor, e.g. 'Intel Inc'.

            `device`: |lrv-string|

                The name of the graphics card, e.g. 'Intel HD Graphics 3000
                OpenGL Engine'.

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-love.graphics.getScissor*
|love.graphics.getScissor|

Gets the current scissor box.

Synopses:

    1.  `x`, `y`, `width`, `height` = |love.graphics.getScissor|()

Variants:

    1.  `x`, `y`, `width`, `height` = |love.graphics.getScissor|()

        See function description

        returns:

            `x`: |lrv-number|

                The x-component of the top-left point of the box.

            `y`: |lrv-number|

                The y-component of the top-left point of the box.

            `width`: |lrv-number|

                The width of the box.

            `height`: |lrv-number|

                The height of the box.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-love.graphics.getShader*
|love.graphics.getShader|

Gets the current Shader. Returns nil if none is set.

Synopses:

    1.  `shader` = |love.graphics.getShader|()

Variants:

    1.  `shader` = |love.graphics.getShader|()

        See function description

        returns:

            `shader`: |love-Shader|

                The currently active Shader, or nil if none is set.

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-love.graphics.getStackDepth*
|love.graphics.getStackDepth|

Gets the current depth of the transform / state stack (the number of pushes
without corresponding pops).

Synopses:

    1.  `depth` = |love.graphics.getStackDepth|()

Variants:

    1.  `depth` = |love.graphics.getStackDepth|()

        See function description

        returns:

            `depth`: |lrv-number|

                The current depth of the transform and state love.graphics
                stack.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-love.graphics.getStats*
|love.graphics.getStats|

Gets performance-related rendering statistics.

Synopses:

    1.  `stats` = |love.graphics.getStats|()
    2.  `stats` = |love.graphics.getStats|( `stats` )

Variants:

    1.  `stats` = |love.graphics.getStats|()

        See function description

        returns:

            `stats`: |lrv-table|

                A table with the following fields:

                `drawcalls`: |lrv-number|

                    The number of draw calls made so far during the current
                    frame.

                `canvasswitches`: |lrv-number|

                    The number of times the active Canvas has been switched so
                    far during the current frame.

                `texturememory`: |lrv-number|

                    The estimated total size in bytes of video memory used by
                    all loaded Images, Canvases, and Fonts.

                `images`: |lrv-number|

                    The number of Image objects currently loaded.

                `canvases`: |lrv-number|

                    The number of Canvas objects currently loaded.

                `fonts`: |lrv-number|

                    The number of Font objects currently loaded.

                `shaderswitches`: |lrv-number|

                    The number of times the active Shader has been changed so
                    far during the current frame.

                `drawcallsbatched`: |lrv-number|

                    The number of draw calls that were saved by LÖVE's
                    automatic batching, since the start of the frame.

        arguments:

            None
    2.  `stats` = |love.graphics.getStats|( `stats` )

        This variant accepts an existing table to fill in, instead of creating a new one.

        returns:

            `stats`: |lrv-table|

                The table that was passed in above, now containing the
                following fields:

                `drawcalls`: |lrv-number|

                    The number of draw calls made so far during the current
                    frame.

                `canvasswitches`: |lrv-number|

                    The number of times the active Canvas has been switched so
                    far during the current frame.

                `texturememory`: |lrv-number|

                    The estimated total size in bytes of video memory used by
                    all loaded Images, Canvases, and Fonts.

                `images`: |lrv-number|

                    The number of Image objects currently loaded.

                `canvases`: |lrv-number|

                    The number of Canvas objects currently loaded.

                `fonts`: |lrv-number|

                    The number of Font objects currently loaded.

                `shaderswitches`: |lrv-number|

                    The number of times the active Shader has been changed so
                    far during the current frame.

                `drawcallsbatched`: |lrv-number|

                    The number of draw calls that were saved by LÖVE's
                    automatic batching, since the start of the frame.

        arguments:

            `stats`: |lrv-table|

                A table which will be filled in with the stat fields below.

-------------------------------------------------------------------------------
                                            *love-love.graphics.getStencilTest*
|love.graphics.getStencilTest|

Gets the current stencil test configuration.

When stencil testing is enabled, the geometry of everything that is drawn
afterward will be clipped / stencilled out based on a comparison between the
arguments of this function and the stencil value of each pixel that the
geometry touches. The stencil values of pixels are affected via
love.graphics.stencil.

Each Canvas has its own per-pixel stencil values.

Synopses:

    1.  `comparemode`, `comparevalue` =
        |love.graphics.getStencilTest|()

Variants:

    1.  `comparemode`, `comparevalue` =
        |love.graphics.getStencilTest|()

        See function description

        returns:

            `comparemode`: |love-CompareMode|

                The type of comparison that is made for each pixel. Will be
                'always' if stencil testing is disabled.

            `comparevalue`: |lrv-number|

                The value used when comparing with the stencil value of each
                pixel.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.graphics.getSupported*
|love.graphics.getSupported|

Gets the optional graphics features and whether they're supported on the
system.

Some older or low-end systems don't always support all graphics features.

Synopses:

    1.  `features` = |love.graphics.getSupported|()

Variants:

    1.  `features` = |love.graphics.getSupported|()

        See function description

        returns:

            `features`: |lrv-table|

                A table containing GraphicsFeature keys, and boolean values
                indicating whether each feature is supported.

        arguments:

            None

-------------------------------------------------------------------------------
                                           *love-love.graphics.getSystemLimits*
|love.graphics.getSystemLimits|

Gets the system-dependent maximum values for love.graphics features.

Synopses:

    1.  `limits` = |love.graphics.getSystemLimits|()

Variants:

    1.  `limits` = |love.graphics.getSystemLimits|()

        See function description

        returns:

            `limits`: |lrv-table|

                A table containing GraphicsLimit keys, and number values.

        arguments:

            None

-------------------------------------------------------------------------------
                                           *love-love.graphics.getTextureTypes*
|love.graphics.getTextureTypes|

Gets the available texture types, and whether each is supported.

Synopses:

    1.  `texturetypes` = |love.graphics.getTextureTypes|()

Variants:

    1.  `texturetypes` = |love.graphics.getTextureTypes|()

        See function description

        returns:

            `texturetypes`: |lrv-table|

                A table containing TextureTypes as keys, and a boolean
                indicating whether the type is supported as values. Not all
                systems support all types.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-love.graphics.getWidth*
|love.graphics.getWidth|

Gets the width in pixels of the window.

Synopses:

    1.  `width` = |love.graphics.getWidth|()

Variants:

    1.  `width` = |love.graphics.getWidth|()

        See function description

        returns:

            `width`: |lrv-number|

                The width of the window.

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-love.graphics.intersectScissor*
|love.graphics.intersectScissor|

Sets the scissor to the rectangle created by the intersection of the specified
rectangle with the existing scissor.  If no scissor is active yet, it behaves
like love.graphics.setScissor.

The scissor limits the drawing area to a specified rectangle. This affects all
graphics calls, including love.graphics.clear.

The dimensions of the scissor is unaffected by graphical transformations
(translate, scale, ...).

Synopses:

    1.  |love.graphics.intersectScissor|( `x`, `y`, `width`, `height` )

Variants:

    1.  |love.graphics.intersectScissor|( `x`, `y`, `width`, `height` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The x-coordinate of the upper left corner of the rectangle to
                intersect with the existing scissor rectangle.

            `y`: |lrv-number|

                The y-coordinate of the upper left corner of the rectangle to
                intersect with the existing scissor rectangle.

            `width`: |lrv-number|

                The width of the rectangle to intersect with the existing
                scissor rectangle.

            `height`: |lrv-number|

                The height of the rectangle to intersect with the existing
                scissor rectangle.

-------------------------------------------------------------------------------
                                     *love-love.graphics.inverseTransformPoint*
|love.graphics.inverseTransformPoint|

Converts the given 2D position from screen-space into global coordinates.

This effectively applies the reverse of the current graphics transformations to
the given position. A similar Transform:inverseTransformPoint method exists for
Transform objects.

Synopses:

    1.  `globalX`, `globalY` = |love.graphics.inverseTransformPoint|(
        `screenX`, `screenY` )

Variants:

    1.  `globalX`, `globalY` = |love.graphics.inverseTransformPoint|(
        `screenX`, `screenY` )

        See function description

        returns:

            `globalX`: |lrv-number|

                The x component of the position in global coordinates.

            `globalY`: |lrv-number|

                The y component of the position in global coordinates.

        arguments:

            `screenX`: |lrv-number|

                The x component of the screen-space position.

            `screenY`: |lrv-number|

                The y component of the screen-space position.

-------------------------------------------------------------------------------
                                                  *love-love.graphics.isActive*
|love.graphics.isActive|

Gets whether the graphics module is able to be used. If it is not active,
love.graphics function and method calls will not work correctly and may cause
the program to crash.
The graphics module is inactive if a window is not open, or if the app is in
the background on iOS. Typically the app's execution will be automatically
paused by the system, in the latter case.

Synopses:

    1.  `active` = |love.graphics.isActive|()

Variants:

    1.  `active` = |love.graphics.isActive|()

        See function description

        returns:

            `active`: |lrv-boolean|

                Whether the graphics module is active and able to be used.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-love.graphics.isGammaCorrect*
|love.graphics.isGammaCorrect|

Gets whether gamma-correct rendering is supported and enabled. It can be
enabled by setting t.gammacorrect = true in love.conf.

Not all devices support gamma-correct rendering, in which case it will be
automatically disabled and this function will return false. It is supported on
desktop systems which have graphics cards that are capable of using OpenGL 3 /
DirectX 10, and iOS devices that can use OpenGL ES 3.

Synopses:

    1.  `gammacorrect` = |love.graphics.isGammaCorrect|()

Variants:

    1.  `gammacorrect` = |love.graphics.isGammaCorrect|()

        When gamma-correct rendering is enabled, many functions and objects perform automatic color conversion between sRGB and linear RGB in order for blending and shader math to be mathematically correct (which they aren't if it's not enabled.)

* The colors passed into converted from sRGB to linear RGB.

* The colors set in text with per-character colors, points with per-point colors, standard custom Meshes which use the 'VertexColor' attribute name will automatically be converted from sRGB to linear RGB when those objects are drawn.

* creating the Image.

* Everything drawn to the screen will be blended in linear RGB and then the result will be converted to sRGB for display.

* Canvases which use the 'normal' or 'srgb' CanvasFormat will have their content blended in linear RGB and the result will be stored in the canvas in sRGB, when drawing to them. When the Canvas itself is drawn, its pixel colors will be converted from sRGB to linear RGB in the same manner as Images. Keeping the canvas pixel data stored as sRGB allows for better precision (less banding) for darker colors compared to 'rgba8'.

Because most conversions are automatically handled, your own code doesn't need to worry about sRGB and linear RGB color conversions when gamma-correct rendering is enabled, except in a couple cases:

* If a Mesh with custom vertex attributes is used and one of the attributes is meant to be used as a color in a Shader, and the attribute isn't named 'VertexColor'.

* If  a Shader is used which has uniform / extern variables or other variables that are meant to be used as colors, and Shader:sendColor isn't used.

In both cases, love.math.gammaToLinear can be used to convert color values to linear RGB in Lua code, or the gammaCorrectColor (or unGammaCorrectColor if necessary) shader functions can be used inside shader code. Those shader functions ''only'' do conversions if gamma-correct rendering is actually enabled. The LOVE_GAMMA_CORRECT shader preprocessor define will be set if so.

Read more about gamma-correct rendering here, here, and here.

        returns:

            `gammacorrect`: |lrv-boolean|

                True if gamma-correct rendering is supported and was enabled in
                love.conf, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-love.graphics.isWireframe*
|love.graphics.isWireframe|

Gets whether wireframe mode is used when drawing.

Synopses:

    1.  `wireframe` = |love.graphics.isWireframe|()

Variants:

    1.  `wireframe` = |love.graphics.isWireframe|()

        See function description

        returns:

            `wireframe`: |lrv-boolean|

                True if wireframe lines are used when drawing, false if it's
                not.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-love.graphics.line*
|love.graphics.line|

Draws lines between points.

Synopses:

    1.  |love.graphics.line|( `x1`, `y1`, `x2`, `y2`, `...` )
    2.  |love.graphics.line|( `points` )

Variants:

    1.  |love.graphics.line|( `x1`, `y1`, `x2`, `y2`, `...` )

        See function description

        returns:

            None

        arguments:

            `x1`: |lrv-number|

                The position of first point on the x-axis.

            `y1`: |lrv-number|

                The position of first point on the y-axis.

            `x2`: |lrv-number|

                The position of second point on the x-axis.

            `y2`: |lrv-number|

                The position of second point on the y-axis.

            `...`: |lrv-number|

                You can continue passing point positions to draw a polyline.
    2.  |love.graphics.line|( `points` )

        See function description

        returns:

            None

        arguments:

            `points`: |lrv-table|

                A table of point positions, as described above.

-------------------------------------------------------------------------------
                                             *love-love.graphics.newArrayImage*
|love.graphics.newArrayImage|

Creates a new array Image.

An array image / array texture is a single object which contains multiple
'layers' or 'slices' of 2D sub-images. It can be thought of similarly to a
texture atlas or sprite sheet, but it doesn't suffer from the same tile / quad
bleeding artifacts that texture atlases do – although every sub-image must
have the same dimensions.

A specific layer of an array image can be drawn with love.graphics.drawLayer /
SpriteBatch:addLayer, or with the Quad variant of love.graphics.draw and
Quad:setLayer, or via a custom Shader.

To use an array image in a Shader, it must be declared as a ArrayImage or
sampler2DArray type (instead of Image or sampler2D). The Texel(ArrayImage
image, vec3 texturecoord) shader function must be used to get pixel colors from
a slice of the array image. The vec3 argument contains the texture coordinate
in the first two components, and the 0-based slice index in the third
component.

Synopses:

    1.  `image` = |love.graphics.newArrayImage|( `slices`, `settings` )

Variants:

    1.  `image` = |love.graphics.newArrayImage|( `slices`, `settings` )

        Creates an array Image given a different image file for each slice of the resulting array image object.

Illustration of how an array image works: [http://codeflow.org/entries/2010/dec/09/minecraft-like-rendering-experiments-in-opengl-4/illustrations/textures.jpg]

A DPI scale of 2 (double the normal pixel density) will result in the image taking up the same space on-screen as an image with half its pixel dimensions that has a DPI scale of 1. This allows for easily swapping out image assets that take the same space on-screen but have different pixel densities, which makes supporting high-dpi / retina resolution require less code logic.

In order to use an Array Texture or other non-2D texture types as the main texture in a custom void effect() variant must be used in the pixel shader, and MainTex must be declared as an ArrayImage or sampler2DArray like so: uniform ArrayImage MainTex;.

        returns:

            `image`: |love-Image|

                An Array Image object.

        arguments:

            `slices`: |lrv-table|

                A table containing filepaths to images (or File, FileData,
                ImageData, or CompressedImageData objects), in an array. Each
                sub-image must have the same dimensions. A table of tables can
                also be given, where each sub-table contains all mipmap levels
                for the slice index of that sub-table.

            `settings`: |lrv-table|

                Optional table of settings to configure the array image,
                containing the following fields:

                `mipmaps`: |lrv-boolean|

                    True to make the image use mipmaps, false to disable them.
                    Mipmaps will be automatically generated if the image isn't
                    a compressed texture format.

                `linear`: |lrv-boolean|

                    True to treat the image's pixels as linear instead of sRGB,
                    when gamma correct rendering is enabled. Most images are
                    authored as sRGB.

                `dpiscale`: |lrv-number|

                    The DPI scale to use when drawing the array image and
                    calling getWidth/getHeight.

-------------------------------------------------------------------------------
                                                 *love-love.graphics.newCanvas*
|love.graphics.newCanvas|

Creates a new Canvas object for offscreen rendering.

Synopses:

    1.  `canvas` = |love.graphics.newCanvas|()
    2.  `canvas` = |love.graphics.newCanvas|( `width`, `height` )
    3.  `canvas` = |love.graphics.newCanvas|( `width`, `height`,
        `settings` )
    4.  `canvas` = |love.graphics.newCanvas|( `width`, `height`,
        `layers`, `settings` )
    5.  `canvas` = |love.graphics.newCanvas|( `width`, `height`,
        `format` )
    6.  `canvas` = |love.graphics.newCanvas|( `width`, `height`,
        `format`, `msaa` )

Variants:

    1.  `canvas` = |love.graphics.newCanvas|()

        See function description

        returns:

            `canvas`: |love-Canvas|

                A new Canvas with dimensions equal to the window's size in
                pixels.

        arguments:

            None
    2.  `canvas` = |love.graphics.newCanvas|( `width`, `height` )

        See function description

        returns:

            `canvas`: |love-Canvas|

                A new Canvas with specified width and height.

        arguments:

            `width`: |lrv-number|

                The desired width of the Canvas.

            `height`: |lrv-number|

                The desired height of the Canvas.
    3.  `canvas` = |love.graphics.newCanvas|( `width`, `height`,
        `settings` )

        Creates a 2D or cubemap Canvas using the given settings.

Some Canvas formats have higher system requirements than the default format. Use love.graphics.getCanvasFormats to check for support.

        returns:

            `canvas`: |love-Canvas|

                A new Canvas with specified width and height.

        arguments:

            `width`: |lrv-number|

                The desired width of the Canvas.

            `height`: |lrv-number|

                The desired height of the Canvas.

            `settings`: |lrv-table|

                A table containing the given fields:

                `type`: |love-TextureType|

                    The type of Canvas to create.

                `format`: <PixelFormat>

                    The format of the Canvas.

                `readable`: |lrv-boolean|

                    Whether the Canvas is readable (drawable and accessible in
                    a Shader). True by default for regular formats, false by
                    default for depth/stencil formats.

                `msaa`: |lrv-number|

                    The desired number of multisample antialiasing (MSAA)
                    samples used when drawing to the Canvas.

                `dpiscale`: |lrv-number|

                    The DPI scale factor of the Canvas, used when drawing to
                    the Canvas as well as when drawing the Canvas to the
                    screen.

                `mipmaps`: |love-CanvasMipmapMode|

                    Whether the Canvas has mipmaps, and whether to
                    automatically regenerate them if so.
    4.  `canvas` = |love.graphics.newCanvas|( `width`, `height`,
        `layers`, `settings` )

        Creates a volume or array texture-type Canvas.

        returns:

            `canvas`: |love-Canvas|

                A new Canvas with specified width and height.

        arguments:

            `width`: |lrv-number|

                The desired width of the Canvas.

            `height`: |lrv-number|

                The desired height of the Canvas.

            `layers`: |lrv-number|

                The number of array layers (if the Canvas is an Array Texture),
                or the volume depth (if the Canvas is a Volume Texture).

            `settings`: |lrv-table|

                A table containing the given fields:

                `type`: |love-TextureType|

                    The type of Canvas to create.

                `format`: <PixelFormat>

                    The format of the Canvas.

                `readable`: |lrv-boolean|

                    Whether the Canvas is readable (drawable and accessible in
                    a Shader). True by default for regular formats, false by
                    default for depth/stencil formats.

                `msaa`: |lrv-number|

                    The desired number of multisample antialiasing (MSAA)
                    samples used when drawing to the Canvas.

                `dpiscale`: |lrv-number|

                    The DPI scale factor of the Canvas, used when drawing to
                    the Canvas as well as when drawing the Canvas to the
                    screen.

                `mipmaps`: |love-CanvasMipmapMode|

                    Whether the Canvas has mipmaps, and whether to
                    automatically regenerate them if so.
    5.  `canvas` = |love.graphics.newCanvas|( `width`, `height`,
        `format` )

        Some Canvas formats have higher system requirements than the default format. Use love.graphics.getCanvasFormats to check for support.

        returns:

            `canvas`: |love-Canvas|

                A new Canvas with specified width and height.

        arguments:

            `width`: |lrv-number|

                The desired width of the Canvas.

            `height`: |lrv-number|

                The desired height of the Canvas.

            `format`: <CanvasFormat>

                The desired texture format of the Canvas.
    6.  `canvas` = |love.graphics.newCanvas|( `width`, `height`,
        `format`, `msaa` )

        Some Canvas formats have higher system requirements than the default format. Use love.graphics.getCanvasFormats to check for support.

The supported maximum number of MSAA samples varies depending on the system. Use love.graphics.getSystemLimits to check.

If the number of MSAA samples specified is greater than the maximum supported by the system, the Canvas will still be created but only using the maximum supported amount (this includes 0.)

        returns:

            `canvas`: |love-Canvas|

                A new Canvas with specified width and height.

        arguments:

            `width`: |lrv-number|

                The desired width of the Canvas.

            `height`: |lrv-number|

                The desired height of the Canvas.

            `format`: <CanvasFormat>

                The desired texture format of the Canvas.

            `msaa`: |lrv-number|

                The desired number of multisample antialiasing (MSAA) samples
                used when drawing to the Canvas.

-------------------------------------------------------------------------------
                                              *love-love.graphics.newCubeImage*
|love.graphics.newCubeImage|

Creates a new cubemap Image.

Cubemap images have 6 faces (sides) which represent a cube. They can't be
rendered directly, they can only be used in Shader code (and sent to the shader
via Shader:send).

To use a cubemap image in a Shader, it must be declared as a CubeImage or
samplerCube type (instead of Image or sampler2D). The Texel(CubeImage image,
vec3 direction) shader function must be used to get pixel colors from the
cubemap. The vec3 argument is a normalized direction from the center of the
cube, rather than explicit texture coordinates.

Each face in a cubemap image must have square dimensions.

For variants of this function which accept a single image containing multiple
cubemap faces, they must be laid out in one of the following forms in the
image:

   +y

+z +x -z

   -y

   -x

or:

   +y

-x +z +x -z

   -y

or:

+x

-x

+y

-y

+z

-z

or:

+x -x +y -y +z -z

Synopses:

    1.  `image` = |love.graphics.newCubeImage|( `filename`, `settings`
        )
    2.  `image` = |love.graphics.newCubeImage|( `faces`, `settings` )

Variants:

    1.  `image` = |love.graphics.newCubeImage|( `filename`, `settings`
        )

        Creates a cubemap Image given a single image file containing multiple cube faces.

        returns:

            `image`: |love-Image|

                An cubemap Image object.

        arguments:

            `filename`: |lrv-string|

                The filepath to a cubemap image file (or a File, FileData, or
                ImageData).

            `settings`: |lrv-table|

                Optional table of settings to configure the cubemap image,
                containing the following fields:

                `mipmaps`: |lrv-boolean|

                    True to make the image use mipmaps, false to disable them.
                    Mipmaps will be automatically generated if the image isn't
                    a compressed texture format.

                `linear`: |lrv-boolean|

                    True to treat the image's pixels as linear instead of sRGB,
                    when gamma correct rendering is enabled. Most images are
                    authored as sRGB.
    2.  `image` = |love.graphics.newCubeImage|( `faces`, `settings` )

        Creates a cubemap Image given a different image file for each cube face.

        returns:

            `image`: |love-Image|

                An cubemap Image object.

        arguments:

            `faces`: |lrv-table|

                A table containing 6 filepaths to images (or File, FileData,
                ImageData, or CompressedImageData objects), in an array. Each
                face image must have the same dimensions. A table of tables can
                also be given, where each sub-table contains all mipmap levels
                for the cube face index of that sub-table.

            `settings`: |lrv-table|

                Optional table of settings to configure the cubemap image,
                containing the following fields:

                `mipmaps`: |lrv-boolean|

                    True to make the image use mipmaps, false to disable them.
                    Mipmaps will be automatically generated if the image isn't
                    a compressed texture format.

                `linear`: |lrv-boolean|

                    True to treat the image's pixels as linear instead of sRGB,
                    when gamma correct rendering is enabled. Most images are
                    authored as sRGB.

-------------------------------------------------------------------------------
                                                   *love-love.graphics.newFont*
|love.graphics.newFont|

Creates a new Font from a TrueType Font or BMFont file. Created fonts are not
cached, in that calling this function with the same arguments will always
create a new Font object.

All variants which accept a filename can also accept a Data object instead.

Synopses:

    1.  `font` = |love.graphics.newFont|( `filename` )
    2.  `font` = |love.graphics.newFont|( `filename`, `size`, `hinting`
        )
    3.  `font` = |love.graphics.newFont|( `filename`, `imagefilename` )
    4.  `font` = |love.graphics.newFont|( `size`, `hinting` )

Variants:

    1.  `font` = |love.graphics.newFont|( `filename` )

        Create a new BMFont or TrueType font.

If the file is a TrueType font, it will be size 12. Use the variant below to create a TrueType font with a custom size.

        returns:

            `font`: |love-Font|

                A Font object which can be used to draw text on screen.

        arguments:

            `filename`: |lrv-string|

                The filepath to the BMFont or TrueType font file.
    2.  `font` = |love.graphics.newFont|( `filename`, `size`, `hinting`
        )

        Create a new TrueType font.

        returns:

            `font`: |love-Font|

                A Font object which can be used to draw text on screen.

        arguments:

            `filename`: |lrv-string|

                The filepath to the TrueType font file.

            `size`: |lrv-number|

                The size of the font in pixels.

            `hinting`: <HintingMode>

                True Type hinting mode.
    3.  `font` = |love.graphics.newFont|( `filename`, `imagefilename` )

        Create a new BMFont.

        returns:

            `font`: |love-Font|

                A Font object which can be used to draw text on screen.

        arguments:

            `filename`: |lrv-string|

                The filepath to the BMFont file.

            `imagefilename`: |lrv-string|

                The filepath to the BMFont's image file. If this argument is
                omitted, the path specified inside the BMFont file will be
                used.
    4.  `font` = |love.graphics.newFont|( `size`, `hinting` )

        Create a new instance of the default font (Vera Sans) with a custom size.

        returns:

            `font`: |love-Font|

                A Font object which can be used to draw text on screen.

        arguments:

            `size`: |lrv-number|

                The size of the font in pixels.

            `hinting`: <HintingMode>

                True Type hinting mode.

-------------------------------------------------------------------------------
                                                  *love-love.graphics.newImage*
|love.graphics.newImage|

Creates a new Image from a filepath, FileData, an ImageData, or a
CompressedImageData, and optionally generates or specifies mipmaps for the
image.

Synopses:

    1.  `image` = |love.graphics.newImage|( `filename` )
    2.  `image` = |love.graphics.newImage|( `imageData` )
    3.  `image` = |love.graphics.newImage|( `compressedImageData` )
    4.  `image` = |love.graphics.newImage|( `filename`, `flags` )
    5.  `image` = |love.graphics.newImage|( `filename`, `format` )

Variants:

    1.  `image` = |love.graphics.newImage|( `filename` )

        See function description

        returns:

            `image`: |love-Image|

                An Image object which can be drawn on screen.

        arguments:

            `filename`: |lrv-string|

                The filepath to the image file.
    2.  `image` = |love.graphics.newImage|( `imageData` )

        See function description

        returns:

            `image`: |love-Image|

                An Image object which can be drawn on screen.

        arguments:

            `imageData`: |love-ImageData|

                An ImageData object. The Image will use this ImageData to
                reload itself when love.window.setMode is called.
    3.  `image` = |love.graphics.newImage|( `compressedImageData` )

        See function description

        returns:

            `image`: |love-Image|

                An Image object which can be drawn on screen.

        arguments:

            `compressedImageData`: |love-CompressedImageData|

                A CompressedImageData object. The Image will use this
                CompressedImageData to reload itself when love.window.setMode
                is called.
    4.  `image` = |love.graphics.newImage|( `filename`, `flags` )

        See function description

        returns:

            `image`: |love-Image|

                A new Image object which can be drawn on screen.

        arguments:

            `filename`: |lrv-string|

                The filepath to the image file (or a FileData or ImageData or
                CompressedImageData object).

            `flags`: |lrv-table|

                A table containing the following fields:

                `linear`: |lrv-boolean|

                    True if the image's pixels should be interpreted as being
                    linear RGB rather than sRGB-encoded, if gamma-correct
                    rendering is enabled. Has no effect otherwise.

                `mipmaps`: <boolean or table>

                    If true, mipmaps for the image will be automatically
                    generated (or taken from the images's file if possible, if
                    the image originated from a CompressedImageData). If this
                    value is a table, it should contain a list of other
                    filenames of images of the same format that have
                    progressively half-sized dimensions, all the way down to
                    1x1. Those images will be used as this Image's mipmap
                    levels.
    5.  `image` = |love.graphics.newImage|( `filename`, `format` )

        See function description

        returns:

            `image`: |love-Image|

                An Image object which can be drawn on screen.

        arguments:

            `filename`: |lrv-string|

                The filepath to the image file (or a FileData or ImageData or
                CompressedImageData object.)

            `format`: <TextureFormat>

                The format to interpret the image's data as.

-------------------------------------------------------------------------------
                                              *love-love.graphics.newImageFont*
|love.graphics.newImageFont|

Creates a new specifically formatted image.

In versions prior to 0.9.0, LÖVE expects ISO 8859-1 encoding for the glyphs
string.

Synopses:

    1.  `font` = |love.graphics.newImageFont|( `filename`, `glyphs` )
    2.  `font` = |love.graphics.newImageFont|( `imageData`, `glyphs` )
    3.  `font` = |love.graphics.newImageFont|( `filename`, `glyphs`,
        `extraspacing` )

Variants:

    1.  `font` = |love.graphics.newImageFont|( `filename`, `glyphs` )

        See function description

        returns:

            `font`: |love-Font|

                A Font object which can be used to draw text on screen.

        arguments:

            `filename`: |lrv-string|

                The filepath to the image file.

            `glyphs`: |lrv-string|

                A string of the characters in the image in order from left to
                right.
    2.  `font` = |love.graphics.newImageFont|( `imageData`, `glyphs` )

        See function description

        returns:

            `font`: |love-Font|

                A Font object which can be used to draw text on screen.

        arguments:

            `imageData`: |love-ImageData|

                The ImageData object to create the font from.

            `glyphs`: |lrv-string|

                A string of the characters in the image in order from left to
                right.
    3.  `font` = |love.graphics.newImageFont|( `filename`, `glyphs`,
        `extraspacing` )

        Instead of using this function, consider using a BMFont generator such as bmfont, littera, or bmGlyph with love.graphics.newFont. Because slime said it was better.

        returns:

            `font`: |love-Font|

                A Font object which can be used to draw text on screen.

        arguments:

            `filename`: |lrv-string|

                The filepath to the image file.

            `glyphs`: |lrv-string|

                A string of the characters in the image in order from left to
                right.

            `extraspacing`: |lrv-number|

                Additional spacing (positive or negative) to apply to each
                glyph in the Font.

-------------------------------------------------------------------------------
                                                   *love-love.graphics.newMesh*
|love.graphics.newMesh|

Creates a new Mesh.

Use Mesh:setTexture if the Mesh should be textured with an Image or Canvas when
it's drawn.

In versions prior to 11.0, color and byte component values were within the
range of 0 to 255 instead of 0 to 1.

Synopses:

    1.  `mesh` = |love.graphics.newMesh|( `vertices`, `mode`, `usage` )
    2.  `mesh` = |love.graphics.newMesh|( `vertexcount`, `mode`,
        `usage` )
    3.  `mesh` = |love.graphics.newMesh|( `vertexformat`, `vertices`,
        `mode`, `usage` )
    4.  `mesh` = |love.graphics.newMesh|( `vertexformat`,
        `vertexcount`, `mode`, `usage` )
    5.  `mesh` = |love.graphics.newMesh|( `vertexcount`, `texture`,
        `mode` )

Variants:

    1.  `mesh` = |love.graphics.newMesh|( `vertices`, `mode`, `usage` )

        Creates a standard Mesh with the specified vertices.

        returns:

            `mesh`: |love-Mesh|

                The new mesh.

        arguments:

            `vertices`: |lrv-table|

                The table filled with vertex information tables for each vertex
                as follows:

                `1`: |lrv-number|

                    The position of the vertex on the x-axis.

                `2`: |lrv-number|

                    The position of the vertex on the y-axis.

                `3`: |lrv-number|

                    The u texture coordinate of the vertex. Texture coordinates
                    are normally in the range of 1, but can be greater or less
                    (see WrapMode.)

                `4`: |lrv-number|

                    The v texture coordinate of the vertex. Texture coordinates
                    are normally in the range of 1, but can be greater or less
                    (see WrapMode.)

                `5`: |lrv-number|

                    The red component of the vertex color.

                `6`: |lrv-number|

                    The green component of the vertex color.

                `7`: |lrv-number|

                    The blue component of the vertex color.

                `8`: |lrv-number|

                    The alpha component of the vertex color.

            `mode`: |love-MeshDrawMode|

                How the vertices are used when drawing. The default mode 'fan'
                is sufficient for simple convex polygons.

            `usage`: |love-SpriteBatchUsage|

                The expected usage of the Mesh. The specified usage mode
                affects the Mesh's memory usage and performance.
    2.  `mesh` = |love.graphics.newMesh|( `vertexcount`, `mode`,
        `usage` )

        Creates a standard Mesh with the specified number of vertices.

Mesh:setVertices or Mesh:setVertex and Mesh:setDrawRange can be used to specify vertex information once the Mesh is created.

        returns:

            `mesh`: |love-Mesh|

                The new mesh.

        arguments:

            `vertexcount`: |lrv-number|

                The total number of vertices the Mesh will use. Each vertex is
                initialized to {0,0, 0,0, 1,1,1,1}.

            `mode`: |love-MeshDrawMode|

                How the vertices are used when drawing. The default mode 'fan'
                is sufficient for simple convex polygons.

            `usage`: |love-SpriteBatchUsage|

                The expected usage of the Mesh. The specified usage mode
                affects the Mesh's memory usage and performance.
    3.  `mesh` = |love.graphics.newMesh|( `vertexformat`, `vertices`,
        `mode`, `usage` )

        Creates a Mesh with custom vertex attributes and the specified vertex data.

The values in each vertex table are in the same order as the vertex attributes in the specified vertex format. If no value is supplied for a specific vertex attribute component, it will be set to a default value of 0 if its data type is 'float', or 1 if its data type is 'byte'.

If the data type of an attribute is 'float', components can be in the range 1 to 4, if the data type is 'byte' it must be 4.

If a custom vertex attribute uses the name 'VertexPosition', 'VertexTexCoord', or 'VertexColor', then the vertex data for that vertex attribute will be used for the standard vertex positions, texture coordinates, or vertex colors respectively, when drawing the Mesh. Otherwise a Vertex Shader is required in order to make use of the vertex attribute when the Mesh is drawn.

A Mesh '''must''' have a 'VertexPosition' attribute in order to be drawn, but it can be attached from a different Mesh via Mesh:attachAttribute.

To use a custom named vertex attribute in a Vertex Shader, it must be declared as an attribute variable of the same name. Variables can be sent from Vertex Shader code to Pixel Shader code by making a varying variable. For example:

''Vertex Shader code''

attribute vec2 CoolVertexAttribute;

varying vec2 CoolVariable;

vec4 position(mat4 transform_projection, vec4 vertex_position)

{

    CoolVariable = CoolVertexAttribute;

    return transform_projection * vertex_position;

}

''Pixel Shader code''

varying vec2 CoolVariable;

vec4 effect(vec4 color, Image tex, vec2 texcoord, vec2 pixcoord)

{

    vec4 texcolor = Texel(tex, texcoord + CoolVariable);

    return texcolor * color;

}

        returns:

            `mesh`: |love-Mesh|

                The new mesh.

        arguments:

            `vertexformat`: |lrv-table|

                A table in the form of {attribute, ...}. Each attribute is a
                table which specifies a custom vertex attribute used for each
                vertex.

                `attribute`: |lrv-table|

                    A table containing the attribute's name, it's data type,
                    and the number of components in the attribute, in the form
                    of {name, datatype, components}.

                `...`: |lrv-table|

                    Additional vertex attribute format tables.

            `vertices`: |lrv-table|

                The table filled with vertex information tables for each
                vertex, in the form of {vertex, ...} where each vertex is a
                table in the form of {attributecomponent, ...}.

                `attributecomponent`: |lrv-number|

                    The first component of the first vertex attribute in the
                    vertex.

                `...`: |lrv-number|

                    Additional components of all vertex attributes in the
                    vertex.

            `mode`: |love-MeshDrawMode|

                How the vertices are used when drawing. The default mode 'fan'
                is sufficient for simple convex polygons.

            `usage`: |love-SpriteBatchUsage|

                The expected usage of the Mesh. The specified usage mode
                affects the Mesh's memory usage and performance.
    4.  `mesh` = |love.graphics.newMesh|( `vertexformat`,
        `vertexcount`, `mode`, `usage` )

        Creates a Mesh with custom vertex attributes and the specified number of vertices.

Each vertex attribute component is initialized to 0 if its data type is 'float', or 1 if its data type is 'byte'. Vertex Shader is required in order to make use of the vertex attribute when the Mesh is drawn.

A Mesh '''must''' have a 'VertexPosition' attribute in order to be drawn, but it can be attached from a different Mesh via Mesh:attachAttribute.

        returns:

            `mesh`: |love-Mesh|

                The new mesh.

        arguments:

            `vertexformat`: |lrv-table|

                A table in the form of {attribute, ...}. Each attribute is a
                table which specifies a custom vertex attribute used for each
                vertex.

                `attribute`: |lrv-table|

                    A table containing the attribute's name, it's data type,
                    and the number of components in the attribute, in the form
                    of {name, datatype, components}.

                `...`: |lrv-table|

                    Additional vertex attribute format tables.

            `vertexcount`: |lrv-number|

                The total number of vertices the Mesh will use.

            `mode`: |love-MeshDrawMode|

                How the vertices are used when drawing. The default mode 'fan'
                is sufficient for simple convex polygons.

            `usage`: |love-SpriteBatchUsage|

                The expected usage of the Mesh. The specified usage mode
                affects the Mesh's memory usage and performance.
    5.  `mesh` = |love.graphics.newMesh|( `vertexcount`, `texture`,
        `mode` )

        Mesh:setVertices or Mesh:setVertex and Mesh:setDrawRange can be used to specify vertex information once the Mesh is created.

        returns:

            `mesh`: |love-Mesh|

                The new mesh.

        arguments:

            `vertexcount`: |lrv-number|

                The total number of vertices the Mesh will use. Each vertex is
                initialized to {0,0, 0,0, 255,255,255,255}.

            `texture`: |love-Texture|

                The Image or Canvas to use when drawing the Mesh. May be nil to
                use no texture.

            `mode`: |love-MeshDrawMode|

                How the vertices are used when drawing. The default mode 'fan'
                is sufficient for simple convex polygons.

-------------------------------------------------------------------------------
                                         *love-love.graphics.newParticleSystem*
|love.graphics.newParticleSystem|

Creates a new ParticleSystem.

Synopses:

    1.  `system` = |love.graphics.newParticleSystem|( `image`, `buffer`
        )
    2.  `system` = |love.graphics.newParticleSystem|( `texture`,
        `buffer` )

Variants:

    1.  `system` = |love.graphics.newParticleSystem|( `image`, `buffer`
        )

        See function description

        returns:

            `system`: |love-ParticleSystem|

                A new ParticleSystem.

        arguments:

            `image`: |love-Image|

                The image to use.

            `buffer`: |lrv-number|

                The max number of particles at the same time.
    2.  `system` = |love.graphics.newParticleSystem|( `texture`,
        `buffer` )

        See function description

        returns:

            `system`: |love-ParticleSystem|

                A new ParticleSystem.

        arguments:

            `texture`: |love-Texture|

                The texture (Image or Canvas) to use.

            `buffer`: |lrv-number|

                The max number of particles at the same time.

-------------------------------------------------------------------------------
                                                   *love-love.graphics.newQuad*
|love.graphics.newQuad|

Creates a new Quad.

The purpose of a Quad is to use a fraction of an image to draw objects, as
opposed to drawing entire image. It is most useful for sprite sheets and
atlases: in a sprite atlas, multiple sprites reside in same image, quad is used
to draw a specific sprite from that image; in animated sprites with all frames
residing in the same image, quad is used to draw specific frame from the
animation.

Synopses:

    1.  `quad` = |love.graphics.newQuad|( `x`, `y`, `width`, `height`,
        `sw`, `sh` )

Variants:

    1.  `quad` = |love.graphics.newQuad|( `x`, `y`, `width`, `height`,
        `sw`, `sh` )

        See function description

        returns:

            `quad`: |love-Quad|

                The new Quad.

        arguments:

            `x`: |lrv-number|

                The top-left position in the Image along the x-axis.

            `y`: |lrv-number|

                The top-left position in the Image along the y-axis.

            `width`: |lrv-number|

                The width of the Quad in the Image. (Must be greater than 0.)

            `height`: |lrv-number|

                The height of the Quad in the Image. (Must be greater than 0.)

            `sw`: |lrv-number|

                The reference width, the width of the Image. (Must be greater
                than 0.)

            `sh`: |lrv-number|

                The reference height, the height of the Image. (Must be greater
                than 0.)

-------------------------------------------------------------------------------
                                                 *love-love.graphics.newShader*
|love.graphics.newShader|

Creates a new Shader object for hardware-accelerated vertex and pixel effects.
A Shader contains either vertex shader code, pixel shader code, or both.

Shaders are small programs which are run on the graphics card when drawing.
Vertex shaders are run once for each vertex (for example, an image has 4
vertices - one at each corner. A Mesh might have many more.) Pixel shaders are
run once for each pixel on the screen which the drawn object touches. Pixel
shader code is executed after all the object's vertices have been processed by
the vertex shader.

Synopses:

    1.  `shader` = |love.graphics.newShader|( `code` )
    2.  `output_pos` = |love.graphics.newShader|(
        `transform_projection`, `vertex_position` )

Variants:

    1.  `shader` = |love.graphics.newShader|( `code` )

        See function description

        returns:

            `shader`: |love-Shader|

                A Shader object for use in drawing operations.

        arguments:

            `code`: |lrv-string|

                The pixel shader or vertex shader code, or a filename pointing
                to a file with the code.
    2.  `output_pos` = |love.graphics.newShader|(
        `transform_projection`, `vertex_position` )

        Vertex shader code is run for every vertex drawn to the screen (for example, love.graphics.rectangle will produce 4 vertices) and is used to transform the vertex positions from their original coordinates into screen-space, as well as to send information such as per-vertex color and texture coordinate values to the pixel shader.

Pixel shader code is run for every pixel on the screen that a drawn object touches, and is used to produce the color that will be blended onto the screen at that pixel, often by reading from an image. Pixel shaders are sometimes called fragment shaders.

The varying keyword can be used to set a value in the vertex shader and have it interpolated in between vertices and passed down to the pixel shader.

Vertex and Pixel shader code can be combined into one file or string if you wrap the vertex-specific code in #ifdef VERTEX .. #endif and the pixel-specific code in #ifdef PIXEL .. #endif.

== Built-in variables ==

LÖVE provides several built-in variables for both pixel and vertex shaders. The full list can be found here: Shader Variables.

        returns:

            `output_pos`: <vec4>

                The final transformed position of the current vertex.

        arguments:

            `transform_projection`: <mat4>

                The transformation matrix affected by love.graphics.translate
                and friends combined with the orthographic projection matrix.

            `vertex_position`: <vec4>

                The raw un-transformed position of the current vertex.

-------------------------------------------------------------------------------
                                            *love-love.graphics.newSpriteBatch*
|love.graphics.newSpriteBatch|

Creates a new SpriteBatch object.

Synopses:

    1.  `spriteBatch` = |love.graphics.newSpriteBatch|( `image`,
        `maxsprites` )
    2.  `spriteBatch` = |love.graphics.newSpriteBatch|( `image`,
        `maxsprites`, `usage` )
    3.  `spriteBatch` = |love.graphics.newSpriteBatch|( `texture`,
        `maxsprites`, `usage` )

Variants:

    1.  `spriteBatch` = |love.graphics.newSpriteBatch|( `image`,
        `maxsprites` )

        See function description

        returns:

            `spriteBatch`: |love-SpriteBatch|

                The new SpriteBatch.

        arguments:

            `image`: |love-Image|

                The Image to use for the sprites.

            `maxsprites`: |lrv-number|

                The maximum number of sprites that the SpriteBatch can contain
                at any given time. Since version 11.0, additional sprites added
                past this number will automatically grow the spritebatch.
    2.  `spriteBatch` = |love.graphics.newSpriteBatch|( `image`,
        `maxsprites`, `usage` )

        See function description

        returns:

            `spriteBatch`: |love-SpriteBatch|

                The new SpriteBatch.

        arguments:

            `image`: |love-Image|

                The Image to use for the sprites.

            `maxsprites`: |lrv-number|

                The maximum number of sprites that the SpriteBatch can contain
                at any given time. Since version 11.0, additional sprites added
                past this number will automatically grow the spritebatch.

            `usage`: |love-SpriteBatchUsage|

                The expected usage of the SpriteBatch. The specified usage mode
                affects the SpriteBatch's memory usage and performance.
    3.  `spriteBatch` = |love.graphics.newSpriteBatch|( `texture`,
        `maxsprites`, `usage` )

        See function description

        returns:

            `spriteBatch`: |love-SpriteBatch|

                The new SpriteBatch.

        arguments:

            `texture`: |love-Texture|

                The Image or Canvas to use for the sprites.

            `maxsprites`: |lrv-number|

                The maximum number of sprites that the SpriteBatch can contain
                at any given time. Since version 11.0, additional sprites added
                past this number will automatically grow the spritebatch.

            `usage`: |love-SpriteBatchUsage|

                The expected usage of the SpriteBatch. The specified usage mode
                affects the SpriteBatch's memory usage and performance.

-------------------------------------------------------------------------------
                                                   *love-love.graphics.newText*
|love.graphics.newText|

Creates a new drawable Text object.

Synopses:

    1.  `text` = |love.graphics.newText|( `font`, `textstring` )

Variants:

    1.  `text` = |love.graphics.newText|( `font`, `textstring` )

        See function description

        returns:

            `text`: |love-Text|

                The new drawable Text object.

        arguments:

            `font`: |love-Font|

                The font to use for the text.

            `textstring`: |lrv-string|

                The initial string of text that the new Text object will
                contain. May be nil.

-------------------------------------------------------------------------------
                                                  *love-love.graphics.newVideo*
|love.graphics.newVideo|

Creates a new drawable Video. Currently only Ogg Theora video files are
supported.

Synopses:

    1.  `video` = |love.graphics.newVideo|( `filename` )
    2.  `video` = |love.graphics.newVideo|( `videostream` )
    3.  `video` = |love.graphics.newVideo|( `filename`, `settings` )
    4.  `video` = |love.graphics.newVideo|( `filename`, `loadaudio` )
    5.  `video` = |love.graphics.newVideo|( `videostream`, `loadaudio`
        )

Variants:

    1.  `video` = |love.graphics.newVideo|( `filename` )

        See function description

        returns:

            `video`: |love-Video|

                A new Video.

        arguments:

            `filename`: |lrv-string|

                The file path to the Ogg Theora video file.
    2.  `video` = |love.graphics.newVideo|( `videostream` )

        See function description

        returns:

            `video`: |love-Video|

                A new Video.

        arguments:

            `videostream`: |love-VideoStream|

                A video stream object.
    3.  `video` = |love.graphics.newVideo|( `filename`, `settings` )

        See function description

        returns:

            `video`: |love-Video|

                A new Video.

        arguments:

            `filename`: |lrv-string|

                The file path to the Ogg Theora video file (or VideoStream).

            `settings`: |lrv-table|

                A table containing the following fields:

                `audio`: |lrv-boolean|

                    Whether to try to load the video's audio into an audio
                    Source. If not explicitly set to true or false, it will try
                    without causing an error if the video has no audio.

                `dpiscale`: |lrv-number|

                    The DPI scale factor of the video.
    4.  `video` = |love.graphics.newVideo|( `filename`, `loadaudio` )

        See function description

        returns:

            `video`: |love-Video|

                A new Video.

        arguments:

            `filename`: |lrv-string|

                The file path to the Ogg Theora video file.

            `loadaudio`: |lrv-boolean|

                Whether to try to load the video's audio into an audio Source.
                If not explicitly set to true or false, it will try without
                causing an error if the video has no audio.
    5.  `video` = |love.graphics.newVideo|( `videostream`, `loadaudio`
        )

        See function description

        returns:

            `video`: |love-Video|

                A new Video.

        arguments:

            `videostream`: |love-VideoStream|

                A video stream object.

            `loadaudio`: |lrv-boolean|

                Whether to try to load the video's audio into an audio Source.
                If not explicitly set to true or false, it will try without
                causing an error if the video has no audio.

-------------------------------------------------------------------------------
                                            *love-love.graphics.newVolumeImage*
|love.graphics.newVolumeImage|

Creates a new volume (3D) Image.

Volume images are 3D textures with width, height, and depth. They can't be
rendered directly, they can only be used in Shader code (and sent to the shader
via Shader:send).

To use a volume image in a Shader, it must be declared as a VolumeImage or
sampler3D type (instead of Image or sampler2D). The Texel(VolumeImage image,
vec3 texcoords) shader function must be used to get pixel colors from the
volume image. The vec3 argument is a normalized texture coordinate with the z
component representing the depth to sample at (ranging from 1).

Volume images are typically used as lookup tables in shaders for color grading,
for example, because sampling using a texture coordinate that is partway in
between two pixels can interpolate across all 3 dimensions in the volume image,
resulting in a smooth gradient even when a small-sized volume image is used as
the lookup table.

Array images are a much better choice than volume images for storing multiple
different sprites in a single array image for directly drawing them.

Synopses:

    1.  `image` = |love.graphics.newVolumeImage|( `layers`, `settings`
        )

Variants:

    1.  `image` = |love.graphics.newVolumeImage|( `layers`, `settings`
        )

        Creates a volume Image given multiple image files with matching dimensions.

Volume images are not supported on some older mobile devices. Use love.graphics.getTextureTypes to check at runtime.

        returns:

            `image`: |love-Image|

                A volume Image object.

        arguments:

            `layers`: |lrv-table|

                A table containing filepaths to images (or File, FileData,
                ImageData, or CompressedImageData objects), in an array. A
                table of tables can also be given, where each sub-table
                represents a single mipmap level and contains all layers for
                that mipmap.

            `settings`: |lrv-table|

                Optional table of settings to configure the volume image,
                containing the following fields:

                `mipmaps`: |lrv-boolean|

                    True to make the image use mipmaps, false to disable them.
                    Mipmaps will be automatically generated if the image isn't
                    a compressed texture format.

                `linear`: |lrv-boolean|

                    True to treat the image's pixels as linear instead of sRGB,
                    when gamma correct rendering is enabled. Most images are
                    authored as sRGB.

-------------------------------------------------------------------------------
                                                    *love-love.graphics.origin*
|love.graphics.origin|

Resets the current coordinate transformation.

This function is always used to reverse any previous calls to
love.graphics.rotate, love.graphics.scale, love.graphics.shear or
love.graphics.translate. It returns the current transformation state to its
defaults.

Synopses:

    1.  |love.graphics.origin|()

Variants:

    1.  |love.graphics.origin|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.graphics.points*
|love.graphics.points|

Draws one or more points.

Synopses:

    1.  |love.graphics.points|( `x`, `y`, `...` )
    2.  |love.graphics.points|( `points` )
    3.  |love.graphics.points|( `points` )

Variants:

    1.  |love.graphics.points|( `x`, `y`, `...` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The position of the first point on the x-axis.

            `y`: |lrv-number|

                The position of the first point on the y-axis.

            `...`: |lrv-number|

                The x and y coordinates of additional points.
    2.  |love.graphics.points|( `points` )

        See function description

        returns:

            None

        arguments:

            `points`: |lrv-table|

                A table containing multiple point positions, in the form of {x,
                y, ...}.

                `x`: |lrv-number|

                    The position of the first point on the x-axis.

                `y`: |lrv-number|

                    The position of the first point on the y-axis.

                `...`: |lrv-number|

                    The x and y coordinates of additional points.
    3.  |love.graphics.points|( `points` )

        Draws one or more individually colored points.

In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.

The pixel grid is actually offset to the center of each pixel. So to get clean pixels drawn use 0.5 + integer increments.

Points are not affected by size is always in pixels.

        returns:

            None

        arguments:

            `points`: |lrv-table|

                A table containing multiple individually colored points, in the
                form of {point, ...}.

                `point`: |lrv-table|

                    A table containing the position and color of the first
                    point, in the form of {x, y, r, g, b, a}. The color
                    components are optional.

                `...`: |lrv-table|

                    Additional tables containing the position and color of more
                    points, in the form of {x, y, r, g, b, a}. The color
                    components are optional.

-------------------------------------------------------------------------------
                                                   *love-love.graphics.polygon*
|love.graphics.polygon|

Draw a polygon.

Following the mode argument, this function can accept multiple numeric
arguments or a single table of numeric arguments. In either case the arguments
are interpreted as alternating x and y coordinates of the polygon's vertices.

Synopses:

    1.  |love.graphics.polygon|( `mode`, `...` )
    2.  |love.graphics.polygon|( `mode`, `vertices` )

Variants:

    1.  |love.graphics.polygon|( `mode`, `...` )

        See function description

        returns:

            None

        arguments:

            `mode`: |love-DrawMode|

                How to draw the polygon.

            `...`: |lrv-number|

                The vertices of the polygon.
    2.  |love.graphics.polygon|( `mode`, `vertices` )

        See function description

        returns:

            None

        arguments:

            `mode`: |love-DrawMode|

                How to draw the polygon.

            `vertices`: |lrv-table|

                The vertices of the polygon as a table.

-------------------------------------------------------------------------------
                                                       *love-love.graphics.pop*
|love.graphics.pop|

Pops the current coordinate transformation from the transformation stack.

This function is always used to reverse a previous push operation. It returns
the current transformation state to what it was before the last preceding push.

Synopses:

    1.  |love.graphics.pop|()

Variants:

    1.  |love.graphics.pop|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-love.graphics.present*
|love.graphics.present|

Displays the results of drawing operations on the screen.

This function is used when writing your own love.run function. It presents all
the results of your drawing operations on the screen. See the example in
love.run for a typical use of this function.

Synopses:

    1.  |love.graphics.present|()

Variants:

    1.  |love.graphics.present|()

        * If love.window.setMode has vsync equal to true, this function can't run more frequently than the refresh rate (e.g. 60 Hz), and will halt the program until ready if necessary.

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-love.graphics.print*
|love.graphics.print|

Draws text on screen. If no Font is set, one will be created and set (once) if
needed.

As of LOVE 0.7.1, when using translation and scaling functions while drawing
text, this function assumes the scale occurs first.  If you don't script with
this in mind, the text won't be in the right position, or possibly even on
screen.

love.graphics.print and love.graphics.printf both support UTF-8 encoding.
You'll also need a proper Font for special characters.

In versions prior to 11.0, color and byte component values were within the
range of 0 to 255 instead of 0 to 1.

Synopses:

    1.  |love.graphics.print|( `text`, `x`, `y`, `r`, `sx`, `sy`, `ox`,
        `oy`, `kx`, `ky` )
    2.  |love.graphics.print|( `coloredtext`, `x`, `y`, `angle`, `sx`,
        `sy`, `ox`, `oy`, `kx`, `ky` )
    3.  |love.graphics.print|( `text`, `transform` )
    4.  |love.graphics.print|( `coloredtext`, `transform` )
    5.  |love.graphics.print|( `text`, `font`, `transform` )
    6.  |love.graphics.print|( `coloredtext`, `font`, `transform` )

Variants:

    1.  |love.graphics.print|( `text`, `x`, `y`, `r`, `sx`, `sy`, `ox`,
        `oy`, `kx`, `ky` )

        See function description

        returns:

            None

        arguments:

            `text`: |lrv-string|

                The text to draw.

            `x`: |lrv-number|

                The position to draw the object (x-axis).

            `y`: |lrv-number|

                The position to draw the object (y-axis).

            `r`: |lrv-number|

                Orientation (radians).

            `sx`: |lrv-number|

                Scale factor (x-axis).

            `sy`: |lrv-number|

                Scale factor (y-axis).

            `ox`: |lrv-number|

                Origin offset (x-axis).

            `oy`: |lrv-number|

                Origin offset (y-axis).

            `kx`: |lrv-number|

                Shearing factor (x-axis).

            `ky`: |lrv-number|

                Shearing factor (y-axis).
    2.  |love.graphics.print|( `coloredtext`, `x`, `y`, `angle`, `sx`,
        `sy`, `ox`, `oy`, `kx`, `ky` )

        The color set by love.graphics.setColor will be combined (multiplied) with the colors of the text.

        returns:

            None

        arguments:

            `coloredtext`: |lrv-table|

                A table containing colors and strings to add to the object, in
                the form of {color1, string1, color2, string2, ...}.

                `color1`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string1`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `color2`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string2`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `...`: <tables and strings>

                    Additional colors and strings.

            `x`: |lrv-number|

                The position of the text on the x-axis.

            `y`: |lrv-number|

                The position of the text on the y-axis.

            `angle`: |lrv-number|

                The orientation of the text in radians.

            `sx`: |lrv-number|

                Scale factor on the x-axis.

            `sy`: |lrv-number|

                Scale factor on the y-axis.

            `ox`: |lrv-number|

                Origin offset on the x-axis.

            `oy`: |lrv-number|

                Origin offset on the y-axis.

            `kx`: |lrv-number|

                Shearing / skew factor on the x-axis.

            `ky`: |lrv-number|

                Shearing / skew factor on the y-axis.
    3.  |love.graphics.print|( `text`, `transform` )

        See function description

        returns:

            None

        arguments:

            `text`: |lrv-string|

                The text to draw.

            `transform`: |love-Transform|

                Transformation object.
    4.  |love.graphics.print|( `coloredtext`, `transform` )

        The color set by love.graphics.setColor will be combined (multiplied) with the colors of the text.

        returns:

            None

        arguments:

            `coloredtext`: |lrv-table|

                A table containing colors and strings to add to the object, in
                the form of {color1, string1, color2, string2, ...}.

                `color1`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string1`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `color2`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string2`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `...`: <tables and strings>

                    Additional colors and strings.

            `transform`: |love-Transform|

                Transformation object.
    5.  |love.graphics.print|( `text`, `font`, `transform` )

        See function description

        returns:

            None

        arguments:

            `text`: |lrv-string|

                The text to draw.

            `font`: |love-Font|

                The Font object to use.

            `transform`: |love-Transform|

                Transformation object.
    6.  |love.graphics.print|( `coloredtext`, `font`, `transform` )

        

        returns:

            None

        arguments:

            `coloredtext`: |lrv-table|

                A table containing colors and strings to add to the object, in
                the form of {color1, string1, color2, string2, ...}.

                `color1`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string1`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `color2`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string2`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `...`: <tables and strings>

                    Additional colors and strings.

            `font`: |love-Font|

                The Font object to use.

            `transform`: |love-Transform|

                Transformation object.

-------------------------------------------------------------------------------
                                                    *love-love.graphics.printf*
|love.graphics.printf|

Draws formatted text, with word wrap and alignment.

See additional notes in love.graphics.print.

The word wrap limit is applied before any scaling, rotation, and other
coordinate transformations. Therefore the amount of text per line stays
constant given the same wrap limit, even if the scale arguments change.

In version 0.9.2 and earlier, wrapping was implemented by breaking up words by
spaces and putting them back together to make sure things fit nicely within the
limit provided. However, due to the way this is done, extra spaces between
words would end up missing when printed on the screen, and some lines could
overflow past the provided wrap limit. In version 0.10.0 and newer this is no
longer the case.

In versions prior to 11.0, color and byte component values were within the
range of 0 to 255 instead of 0 to 1.

Synopses:

    1.  |love.graphics.printf|( `text`, `x`, `y`, `limit`, `align`,
        `r`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )
    2.  |love.graphics.printf|( `text`, `font`, `x`, `y`, `limit`,
        `align`, `r`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )
    3.  |love.graphics.printf|( `text`, `transform`, `limit`, `align` )
    4.  |love.graphics.printf|( `text`, `font`, `transform`, `limit`,
        `align` )
    5.  |love.graphics.printf|( `coloredtext`, `x`, `y`, `limit`,
        `align`, `angle`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )
    6.  |love.graphics.printf|( `coloredtext`, `font`, `x`, `y`,
        `limit`, `align`, `angle`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )
    7.  |love.graphics.printf|( `coloredtext`, `transform`, `limit`,
        `align` )
    8.  |love.graphics.printf|( `coloredtext`, `font`, `transform`,
        `limit`, `align` )

Variants:

    1.  |love.graphics.printf|( `text`, `x`, `y`, `limit`, `align`,
        `r`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

        See function description

        returns:

            None

        arguments:

            `text`: |lrv-string|

                A text string.

            `x`: |lrv-number|

                The position on the x-axis.

            `y`: |lrv-number|

                The position on the y-axis.

            `limit`: |lrv-number|

                Wrap the line after this many horizontal pixels.

            `align`: |love-AlignMode|

                The alignment.

            `r`: |lrv-number|

                Orientation (radians).

            `sx`: |lrv-number|

                Scale factor (x-axis).

            `sy`: |lrv-number|

                Scale factor (y-axis).

            `ox`: |lrv-number|

                Origin offset (x-axis).

            `oy`: |lrv-number|

                Origin offset (y-axis).

            `kx`: |lrv-number|

                Shearing factor (x-axis).

            `ky`: |lrv-number|

                Shearing factor (y-axis).
    2.  |love.graphics.printf|( `text`, `font`, `x`, `y`, `limit`,
        `align`, `r`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

        See function description

        returns:

            None

        arguments:

            `text`: |lrv-string|

                A text string.

            `font`: |love-Font|

                The Font object to use.

            `x`: |lrv-number|

                The position on the x-axis.

            `y`: |lrv-number|

                The position on the y-axis.

            `limit`: |lrv-number|

                Wrap the line after this many horizontal pixels.

            `align`: |love-AlignMode|

                The alignment.

            `r`: |lrv-number|

                Orientation (radians).

            `sx`: |lrv-number|

                Scale factor (x-axis).

            `sy`: |lrv-number|

                Scale factor (y-axis).

            `ox`: |lrv-number|

                Origin offset (x-axis).

            `oy`: |lrv-number|

                Origin offset (y-axis).

            `kx`: |lrv-number|

                Shearing factor (x-axis).

            `ky`: |lrv-number|

                Shearing factor (y-axis).
    3.  |love.graphics.printf|( `text`, `transform`, `limit`, `align` )

        See function description

        returns:

            None

        arguments:

            `text`: |lrv-string|

                A text string.

            `transform`: |love-Transform|

                Transformation object.

            `limit`: |lrv-number|

                Wrap the line after this many horizontal pixels.

            `align`: |love-AlignMode|

                The alignment.
    4.  |love.graphics.printf|( `text`, `font`, `transform`, `limit`,
        `align` )

        See function description

        returns:

            None

        arguments:

            `text`: |lrv-string|

                A text string.

            `font`: |love-Font|

                The Font object to use.

            `transform`: |love-Transform|

                Transformation object.

            `limit`: |lrv-number|

                Wrap the line after this many horizontal pixels.

            `align`: |love-AlignMode|

                The alignment.
    5.  |love.graphics.printf|( `coloredtext`, `x`, `y`, `limit`,
        `align`, `angle`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

        The color set by love.graphics.setColor will be combined (multiplied) with the colors of the text.

        returns:

            None

        arguments:

            `coloredtext`: |lrv-table|

                A table containing colors and strings to add to the object, in
                the form of {color1, string1, color2, string2, ...}.

                `color1`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string1`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `color2`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string2`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `...`: <tables and strings>

                    Additional colors and strings.

            `x`: |lrv-number|

                The position of the text (x-axis).

            `y`: |lrv-number|

                The position of the text (y-axis).

            `limit`: |lrv-number|

                The maximum width in pixels of the text before it gets
                automatically wrapped to a new line.

            `align`: |love-AlignMode|

                The alignment of the text.

            `angle`: |lrv-number|

                Orientation (radians).

            `sx`: |lrv-number|

                Scale factor (x-axis).

            `sy`: |lrv-number|

                Scale factor (y-axis).

            `ox`: |lrv-number|

                Origin offset (x-axis).

            `oy`: |lrv-number|

                Origin offset (y-axis).

            `kx`: |lrv-number|

                Shearing / skew factor (x-axis).

            `ky`: |lrv-number|

                Shearing / skew factor (y-axis).
    6.  |love.graphics.printf|( `coloredtext`, `font`, `x`, `y`,
        `limit`, `align`, `angle`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

        The color set by love.graphics.setColor will be combined (multiplied) with the colors of the text.

        returns:

            None

        arguments:

            `coloredtext`: |lrv-table|

                A table containing colors and strings to add to the object, in
                the form of {color1, string1, color2, string2, ...}.

                `color1`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string1`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `color2`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string2`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `...`: <tables and strings>

                    Additional colors and strings.

            `font`: |love-Font|

                The Font object to use.

            `x`: |lrv-number|

                The position on the x-axis.

            `y`: |lrv-number|

                The position on the y-axis.

            `limit`: |lrv-number|

                Wrap the line after this many horizontal pixels.

            `align`: |love-AlignMode|

                The alignment.

            `angle`: |lrv-number|

                Orientation (radians).

            `sx`: |lrv-number|

                Scale factor (x-axis).

            `sy`: |lrv-number|

                Scale factor (y-axis).

            `ox`: |lrv-number|

                Origin offset (x-axis).

            `oy`: |lrv-number|

                Origin offset (y-axis).

            `kx`: |lrv-number|

                Shearing factor (x-axis).

            `ky`: |lrv-number|

                Shearing factor (y-axis).
    7.  |love.graphics.printf|( `coloredtext`, `transform`, `limit`,
        `align` )

        The color set by love.graphics.setColor will be combined (multiplied) with the colors of the text.

        returns:

            None

        arguments:

            `coloredtext`: |lrv-table|

                A table containing colors and strings to add to the object, in
                the form of {color1, string1, color2, string2, ...}.

                `color1`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string1`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `color2`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string2`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `...`: <tables and strings>

                    Additional colors and strings.

            `transform`: |love-Transform|

                Transformation object.

            `limit`: |lrv-number|

                Wrap the line after this many horizontal pixels.

            `align`: |love-AlignMode|

                The alignment.
    8.  |love.graphics.printf|( `coloredtext`, `font`, `transform`,
        `limit`, `align` )

        

        returns:

            None

        arguments:

            `coloredtext`: |lrv-table|

                A table containing colors and strings to add to the object, in
                the form of {color1, string1, color2, string2, ...}.

                `color1`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string1`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `color2`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string2`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `...`: <tables and strings>

                    Additional colors and strings.

            `font`: |love-Font|

                The Font object to use.

            `transform`: |love-Transform|

                Transformation object.

            `limit`: |lrv-number|

                Wrap the line after this many horizontal pixels.

            `align`: |love-AlignMode|

                The alignment.

-------------------------------------------------------------------------------
                                                      *love-love.graphics.push*
|love.graphics.push|

Copies and pushes the current coordinate transformation to the transformation
stack.

This function is always used to prepare for a corresponding pop operation
later. It stores the current coordinate transformation state into the
transformation stack and keeps it active. Later changes to the transformation
can be undone by using the pop operation, which returns the coordinate
transform to the state it was in before calling push.

Synopses:

    1.  |love.graphics.push|()
    2.  |love.graphics.push|( `stack` )

Variants:

    1.  |love.graphics.push|()

        Pushes the current transformation to the transformation stack.

        returns:

            None

        arguments:

            None
    2.  |love.graphics.push|( `stack` )

        Pushes a specific type of state to the stack.

        returns:

            None

        arguments:

            `stack`: |love-StackType|

                The type of stack to push (e.g. just transformation state, or
                all love.graphics state).

-------------------------------------------------------------------------------
                                                 *love-love.graphics.rectangle*
|love.graphics.rectangle|

Draws a rectangle.

Synopses:

    1.  |love.graphics.rectangle|( `mode`, `x`, `y`, `width`, `height`
        )
    2.  |love.graphics.rectangle|( `mode`, `x`, `y`, `width`, `height`,
        `rx`, `ry`, `segments` )

Variants:

    1.  |love.graphics.rectangle|( `mode`, `x`, `y`, `width`, `height`
        )

        See function description

        returns:

            None

        arguments:

            `mode`: |love-DrawMode|

                How to draw the rectangle.

            `x`: |lrv-number|

                The position of top-left corner along the x-axis.

            `y`: |lrv-number|

                The position of top-left corner along the y-axis.

            `width`: |lrv-number|

                Width of the rectangle.

            `height`: |lrv-number|

                Height of the rectangle.
    2.  |love.graphics.rectangle|( `mode`, `x`, `y`, `width`, `height`,
        `rx`, `ry`, `segments` )

        Draws a rectangle with rounded corners.

        returns:

            None

        arguments:

            `mode`: |love-DrawMode|

                How to draw the rectangle.

            `x`: |lrv-number|

                The position of top-left corner along the x-axis.

            `y`: |lrv-number|

                The position of top-left corner along the y-axis.

            `width`: |lrv-number|

                Width of the rectangle.

            `height`: |lrv-number|

                Height of the rectangle.

            `rx`: |lrv-number|

                The x-axis radius of each round corner. Cannot be greater than
                half the rectangle's width.

            `ry`: |lrv-number|

                The y-axis radius of each round corner. Cannot be greater than
                half the rectangle's height.

            `segments`: |lrv-number|

                The number of segments used for drawing the round corners. A
                default amount will be chosen if no number is given.

-------------------------------------------------------------------------------
                                          *love-love.graphics.replaceTransform*
|love.graphics.replaceTransform|

Replaces the current coordinate transformation with the given Transform object.

Synopses:

    1.  |love.graphics.replaceTransform|( `transform` )

Variants:

    1.  |love.graphics.replaceTransform|( `transform` )

        See function description

        returns:

            None

        arguments:

            `transform`: |love-Transform|

                The Transform object to replace the current graphics coordinate
                transform with.

-------------------------------------------------------------------------------
                                                     *love-love.graphics.reset*
|love.graphics.reset|

Resets the current graphics settings.

Calling reset makes the current drawing color white, the current background
color black, disables any active color component masks, disables wireframe mode
and resets the current graphics transformation to the origin. It also sets both
the point and line drawing modes to smooth and their sizes to 1.0.

Synopses:

    1.  |love.graphics.reset|()

Variants:

    1.  |love.graphics.reset|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.graphics.rotate*
|love.graphics.rotate|

Rotates the coordinate system in two dimensions.

Calling this function affects all future drawing operations by rotating the
coordinate system around the origin by the given amount of radians. This change
lasts until love.draw() exits.

Synopses:

    1.  |love.graphics.rotate|( `angle` )

Variants:

    1.  |love.graphics.rotate|( `angle` )

        See function description

        returns:

            None

        arguments:

            `angle`: |lrv-number|

                The amount to rotate the coordinate system in radians.

-------------------------------------------------------------------------------
                                                     *love-love.graphics.scale*
|love.graphics.scale|

Scales the coordinate system in two dimensions.

By default the coordinate system in LÖVE corresponds to the display pixels in
horizontal and vertical directions one-to-one, and the x-axis increases towards
the right while the y-axis increases downwards. Scaling the coordinate system
changes this relation.

After scaling by sx and sy, all coordinates are treated as if they were
multiplied by sx and sy. Every result of a drawing operation is also
correspondingly scaled, so scaling by (2, 2) for example would mean making
everything twice as large in both x- and y-directions. Scaling by a negative
value flips the coordinate system in the corresponding direction, which also
means everything will be drawn flipped or upside down, or both. Scaling by zero
is not a useful operation.

Scale and translate are not commutative operations, therefore, calling them in
different orders will change the outcome.

Scaling lasts until love.draw() exits.

Synopses:

    1.  |love.graphics.scale|( `sx`, `sy` )

Variants:

    1.  |love.graphics.scale|( `sx`, `sy` )

        See function description

        returns:

            None

        arguments:

            `sx`: |lrv-number|

                The scaling in the direction of the x-axis.

            `sy`: |lrv-number|

                The scaling in the direction of the y-axis. If omitted, it
                defaults to same as parameter sx.

-------------------------------------------------------------------------------
                                        *love-love.graphics.setBackgroundColor*
|love.graphics.setBackgroundColor|

Sets the background color.

Synopses:

    1.  |love.graphics.setBackgroundColor|( `red`, `green`, `blue`,
        `alpha` )
    2.  |love.graphics.setBackgroundColor|()
    3.  |love.graphics.setBackgroundColor|()

Variants:

    1.  |love.graphics.setBackgroundColor|( `red`, `green`, `blue`,
        `alpha` )

        See function description

        returns:

            None

        arguments:

            `red`: |lrv-number|

                The red component (0-1).

            `green`: |lrv-number|

                The green component (0-1).

            `blue`: |lrv-number|

                The blue component (0-1).

            `alpha`: |lrv-number|

                The alpha component (0-1).
    2.  |love.graphics.setBackgroundColor|()

        See function description

        returns:

            None

        arguments:

            None
    3.  |love.graphics.setBackgroundColor|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.graphics.setBlendMode*
|love.graphics.setBlendMode|

Sets the blending mode.

Synopses:

    1.  |love.graphics.setBlendMode|( `mode` )
    2.  |love.graphics.setBlendMode|( `mode`, `alphamode` )

Variants:

    1.  |love.graphics.setBlendMode|( `mode` )

        See function description

        returns:

            None

        arguments:

            `mode`: |love-BlendMode|

                The blend mode to use.
    2.  |love.graphics.setBlendMode|( `mode`, `alphamode` )

        The default 'alphamultiply' alpha mode should normally be preferred except when drawing content with pre-multiplied alpha. If content is drawn to a Canvas using the 'alphamultiply' mode, the Canvas texture will have pre-multiplied alpha afterwards, so the 'premultiplied' alpha mode should generally be used when drawing a Canvas to the screen.

        returns:

            None

        arguments:

            `mode`: |love-BlendMode|

                The blend mode to use.

            `alphamode`: |love-BlendAlphaMode|

                What to do with the alpha of drawn objects when blending.

-------------------------------------------------------------------------------
                                                 *love-love.graphics.setCanvas*
|love.graphics.setCanvas|

Captures drawing operations to a Canvas.

Synopses:

    1.  |love.graphics.setCanvas|( `canvas`, `mipmap` )
    2.  |love.graphics.setCanvas|()
    3.  |love.graphics.setCanvas|( `canvas1`, `canvas2`, `...` )
    4.  |love.graphics.setCanvas|( `canvas`, `slice`, `mipmap` )
    5.  |love.graphics.setCanvas|( `setup` )

Variants:

    1.  |love.graphics.setCanvas|( `canvas`, `mipmap` )

        Sets the render target to a specified stencil or depth testing with an active Canvas, the stencil buffer or depth buffer must be explicitly enabled in setCanvas via the variants below.

Note that no canvas should be active when ''love.graphics.present'' is called. ''love.graphics.present'' is called at the end of love.draw in the default love.run, hence if you activate a canvas using this function, you normally need to deactivate it at some point before ''love.draw'' finishes.

        returns:

            None

        arguments:

            `canvas`: |love-Canvas|

                The new target.

            `mipmap`: |lrv-number|

                The mipmap level to render to, for Canvases with mipmaps.
    2.  |love.graphics.setCanvas|()

        Resets the render target to the screen, i.e. re-enables drawing to the screen.

        returns:

            None

        arguments:

            None
    3.  |love.graphics.setCanvas|( `canvas1`, `canvas2`, `...` )

        Sets the render target to multiple simultaneous 2D Canvases. All drawing operations until the next ''love.graphics.setCanvas'' call will be redirected to the specified canvases and not shown on the screen.

Normally all drawing operations will draw only to the first canvas passed to the function, but that can be changed if a pixel shader is used with the void effect function instead of the regular vec4 effect.

All canvas arguments must have the same widths and heights and the same texture type. Not all computers which support Canvases will support multiple render targets. If love.graphics.isSupported('multicanvas') returns true, at least 4 simultaneously active canvases are supported.

        returns:

            None

        arguments:

            `canvas1`: |love-Canvas|

                The first render target.

            `canvas2`: |love-Canvas|

                The second render target.

            `...`: |love-Canvas|

                More canvases.
    4.  |love.graphics.setCanvas|( `canvas`, `slice`, `mipmap` )

        Sets the render target to the specified layer/slice and mipmap level of the given non-2D Canvas. All drawing operations until the next ''love.graphics.setCanvas'' call will be redirected to the Canvas and not shown on the screen.

        returns:

            None

        arguments:

            `canvas`: |love-Canvas|

                The new render target.

            `slice`: |lrv-number|

                For cubemaps this is the cube face index to render to (between
                1 and 6). For Array textures this is the array layer. For
                volume textures this is the depth slice. 2D canvases should use
                a value of 1.

            `mipmap`: |lrv-number|

                The mipmap level to render to, for Canvases with mipmaps.
    5.  |love.graphics.setCanvas|( `setup` )

        Sets the active render target(s) and active stencil and depth buffers based on the specified setup information. All drawing operations until the next ''love.graphics.setCanvas'' call will be redirected to the specified Canvases and not shown on the screen.

The RenderTargetSetup parameters can either be a Canvas|[1]|The Canvas to use for this active render target.}}

{{param|number|mipmap (1)|The mipmap level to render to, for Canvases with [[Texture:getMipmapCount|mipmaps.}}

{{param|number|layer (1)|Only used for Volume and Array-type Canvases. For Array textures this is the array layer to render to. For volume textures this is the depth slice.}}

{{param|number|face (1)|Only used for Cubemap-type Canvases. The cube face index to render to (between 1 and 6)}}

        returns:

            None

        arguments:

            `setup`: |lrv-table|

                A table specifying the active Canvas(es), their mipmap levels
                and active layers if applicable, and whether to use a stencil
                and/or depth buffer.

                `1`: <RenderTargetSetup>

                    The Canvas to render to.

                `2`: <RenderTargetSetup>

                    An additional Canvas to render to, if multiple simultaneous
                    render targets are wanted.

                `...`: <RenderTargetSetup>

                    Additional Canvases to render to, if multiple simultaneous
                    render targets are wanted.

                `stencil`: |lrv-boolean|

                    Whether an internally managed stencil buffer should be
                    used, if the depthstencil field isn't set.

                `depth`: |lrv-boolean|

                    Whether an internally managed depth buffer should be used,
                    if the depthstencil field isn't set.

                `depthstencil`: <RenderTargetSetup>

                    An optional custom depth/stencil formatted Canvas to use
                    for the depth and/or stencil buffer.

-------------------------------------------------------------------------------
                                                  *love-love.graphics.setColor*
|love.graphics.setColor|

Sets the color used for drawing.

In versions prior to 11.0, color component values were within the range of 0 to
255 instead of 0 to 1.

Synopses:

    1.  |love.graphics.setColor|( `red`, `green`, `blue`, `alpha` )
    2.  |love.graphics.setColor|( `rgba` )

Variants:

    1.  |love.graphics.setColor|( `red`, `green`, `blue`, `alpha` )

        See function description

        returns:

            None

        arguments:

            `red`: |lrv-number|

                The amount of red.

            `green`: |lrv-number|

                The amount of green.

            `blue`: |lrv-number|

                The amount of blue.

            `alpha`: |lrv-number|

                The amount of alpha.  The alpha value will be applied to all
                subsequent draw operations, even the drawing of an image.
    2.  |love.graphics.setColor|( `rgba` )

        See function description

        returns:

            None

        arguments:

            `rgba`: |lrv-table|

                A numerical indexed table with the red, green, blue and alpha
                values as numbers. The alpha is optional and defaults to 1 if
                it is left out.

-------------------------------------------------------------------------------
                                              *love-love.graphics.setColorMask*
|love.graphics.setColorMask|

Sets the color mask. Enables or disables specific color components when
rendering and clearing the screen. For example, if '''red''' is set to
'''false''', no further changes will be made to the red component of any
pixels.

Synopses:

    1.  |love.graphics.setColorMask|( `red`, `green`, `blue`, `alpha` )
    2.  |love.graphics.setColorMask|()

Variants:

    1.  |love.graphics.setColorMask|( `red`, `green`, `blue`, `alpha` )

        Enables color masking for the specified color components.

        returns:

            None

        arguments:

            `red`: |lrv-boolean|

                Render red component.

            `green`: |lrv-boolean|

                Render green component.

            `blue`: |lrv-boolean|

                Render blue component.

            `alpha`: |lrv-boolean|

                Render alpha component.
    2.  |love.graphics.setColorMask|()

        Disables color masking.

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-love.graphics.setDefaultFilter*
|love.graphics.setDefaultFilter|

Sets the default scaling filters used with Images, Canvases, and Fonts.

Synopses:

    1.  |love.graphics.setDefaultFilter|( `min`, `mag`, `anisotropy` )

Variants:

    1.  |love.graphics.setDefaultFilter|( `min`, `mag`, `anisotropy` )

        This function does not apply retroactively to loaded images.

        returns:

            None

        arguments:

            `min`: |love-FilterMode|

                Filter mode used when scaling the image down.

            `mag`: |love-FilterMode|

                Filter mode used when scaling the image up.

            `anisotropy`: |lrv-number|

                Maximum amount of Anisotropic Filtering used.

-------------------------------------------------------------------------------
                                              *love-love.graphics.setDepthMode*
|love.graphics.setDepthMode|

Configures depth testing and writing to the depth buffer.

This is low-level functionality designed for use with custom vertex shaders and
Meshes with custom vertex attributes. No higher level APIs are provided to set
the depth of 2D graphics such as shapes, lines, and Images.

Synopses:

    1.  |love.graphics.setDepthMode|( `comparemode`, `write` )
    2.  |love.graphics.setDepthMode|()

Variants:

    1.  |love.graphics.setDepthMode|( `comparemode`, `write` )

        See function description

        returns:

            None

        arguments:

            `comparemode`: |love-CompareMode|

                Depth comparison mode used for depth testing.

            `write`: |lrv-boolean|

                Whether to write update / write values to the depth buffer when
                rendering.
    2.  |love.graphics.setDepthMode|()

        Disables depth testing and depth writes.

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-love.graphics.setFont*
|love.graphics.setFont|

Set an already-loaded Font as the current font or create and load a new one
from the file and size.

It's recommended that Font objects are created with love.graphics.newFont in
the loading stage and then passed to this function in the drawing stage.

Synopses:

    1.  |love.graphics.setFont|( `font` )

Variants:

    1.  |love.graphics.setFont|( `font` )

        See function description

        returns:

            None

        arguments:

            `font`: |love-Font|

                The Font object to use.

-------------------------------------------------------------------------------
                                       *love-love.graphics.setFrontFaceWinding*
|love.graphics.setFrontFaceWinding|

Sets whether triangles with clockwise- or counterclockwise-ordered vertices are
considered front-facing.

This is designed for use in combination with Mesh face culling. Other
love.graphics shapes, lines, and sprites are not guaranteed to have a specific
winding order to their internal vertices.

Synopses:

    1.  |love.graphics.setFrontFaceWinding|( `winding` )

Variants:

    1.  |love.graphics.setFrontFaceWinding|( `winding` )

        See function description

        returns:

            None

        arguments:

            `winding`: <VertexWinding>

                The winding mode to use. The default winding is
                counterclockwise ('ccw').

-------------------------------------------------------------------------------
                                               *love-love.graphics.setLineJoin*
|love.graphics.setLineJoin|

Sets the line join style. See LineJoin for the possible options.

Synopses:

    1.  |love.graphics.setLineJoin|( `join` )

Variants:

    1.  |love.graphics.setLineJoin|( `join` )

        See function description

        returns:

            None

        arguments:

            `join`: |love-LineJoin|

                The LineJoin to use.

-------------------------------------------------------------------------------
                                              *love-love.graphics.setLineStyle*
|love.graphics.setLineStyle|

Sets the line style.

Synopses:

    1.  |love.graphics.setLineStyle|( `style` )

Variants:

    1.  |love.graphics.setLineStyle|( `style` )

        See function description

        returns:

            None

        arguments:

            `style`: |love-LineStyle|

                The LineStyle to use. Line styles include smooth and rough.

-------------------------------------------------------------------------------
                                              *love-love.graphics.setLineWidth*
|love.graphics.setLineWidth|

Sets the line width.

Synopses:

    1.  |love.graphics.setLineWidth|( `width` )

Variants:

    1.  |love.graphics.setLineWidth|( `width` )

        See function description

        returns:

            None

        arguments:

            `width`: |lrv-number|

                The width of the line.

-------------------------------------------------------------------------------
                                           *love-love.graphics.setMeshCullMode*
|love.graphics.setMeshCullMode|

Sets whether back-facing triangles in a Mesh are culled.

This is designed for use with low level custom hardware-accelerated 3D
rendering via custom vertex attributes on Meshes, custom vertex shaders, and
depth testing with a depth buffer.

By default, both front- and back-facing triangles in Meshes are rendered.

Synopses:

    1.  |love.graphics.setMeshCullMode|( `mode` )

Variants:

    1.  |love.graphics.setMeshCullMode|( `mode` )

        See function description

        returns:

            None

        arguments:

            `mode`: |love-CullMode|

                The Mesh face culling mode to use (whether to render
                everything, cull back-facing triangles, or cull front-facing
                triangles).

-------------------------------------------------------------------------------
                                                *love-love.graphics.setNewFont*
|love.graphics.setNewFont|

Creates and sets a new Font.

Synopses:

    1.  `font` = |love.graphics.setNewFont|( `size` )
    2.  `font` = |love.graphics.setNewFont|( `filename`, `size` )
    3.  `font` = |love.graphics.setNewFont|( `file`, `size` )
    4.  `font` = |love.graphics.setNewFont|( `data`, `size` )
    5.  `font` = |love.graphics.setNewFont|( `rasterizer` )

Variants:

    1.  `font` = |love.graphics.setNewFont|( `size` )

        See function description

        returns:

            `font`: |love-Font|

                The new font.

        arguments:

            `size`: |lrv-number|

                The size of the font.
    2.  `font` = |love.graphics.setNewFont|( `filename`, `size` )

        See function description

        returns:

            `font`: |love-Font|

                The new font.

        arguments:

            `filename`: |lrv-string|

                The path and name of the file with the font.

            `size`: |lrv-number|

                The size of the font.
    3.  `font` = |love.graphics.setNewFont|( `file`, `size` )

        See function description

        returns:

            `font`: |love-Font|

                The new font.

        arguments:

            `file`: |love-File|

                A File with the font.

            `size`: |lrv-number|

                The size of the font.
    4.  `font` = |love.graphics.setNewFont|( `data`, `size` )

        See function description

        returns:

            `font`: |love-Font|

                The new font.

        arguments:

            `data`: |love-Data|

                A Data with the font.

            `size`: |lrv-number|

                The size of the font.
    5.  `font` = |love.graphics.setNewFont|( `rasterizer` )

        See function description

        returns:

            `font`: |love-Font|

                The new font.

        arguments:

            `rasterizer`: <Rasterizer>

                A rasterizer.

-------------------------------------------------------------------------------
                                              *love-love.graphics.setPointSize*
|love.graphics.setPointSize|

Sets the point size.

Synopses:

    1.  |love.graphics.setPointSize|( `size` )

Variants:

    1.  |love.graphics.setPointSize|( `size` )

        See function description

        returns:

            None

        arguments:

            `size`: |lrv-number|

                The new point size.

-------------------------------------------------------------------------------
                                                *love-love.graphics.setScissor*
|love.graphics.setScissor|

Sets or disables scissor.

The scissor limits the drawing area to a specified rectangle. This affects all
graphics calls, including love.graphics.clear.

The dimensions of the scissor is unaffected by graphical transformations
(translate, scale, ...).

Synopses:

    1.  |love.graphics.setScissor|( `x`, `y`, `width`, `height` )
    2.  |love.graphics.setScissor|()

Variants:

    1.  |love.graphics.setScissor|( `x`, `y`, `width`, `height` )

        Limits the drawing area to a specified rectangle. 

        returns:

            None

        arguments:

            `x`: |lrv-number|

                x coordinate of upper left corner.

            `y`: |lrv-number|

                y coordinate of upper left corner.

            `width`: |lrv-number|

                width of clipping rectangle.

            `height`: |lrv-number|

                height of clipping rectangle.
    2.  |love.graphics.setScissor|()

        Disables scissor.

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-love.graphics.setShader*
|love.graphics.setShader|

Sets or resets a Shader as the current pixel effect or vertex shaders. All
drawing operations until the next ''love.graphics.setShader'' will be drawn
using the Shader object specified.

Synopses:

    1.  |love.graphics.setShader|( `shader` )
    2.  |love.graphics.setShader|()

Variants:

    1.  |love.graphics.setShader|( `shader` )

        Sets the current shader to a specified Shader. All drawing operations until the next ''love.graphics.setShader'' will be drawn using the Shader object specified.

        returns:

            None

        arguments:

            `shader`: |love-Shader|

                The new shader.
    2.  |love.graphics.setShader|()

        Disables shaders, allowing unfiltered drawing operations.

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-love.graphics.setStencilTest*
|love.graphics.setStencilTest|

Configures or disables stencil testing.

When stencil testing is enabled, the geometry of everything that is drawn
afterward will be clipped / stencilled out based on a comparison between the
arguments of this function and the stencil value of each pixel that the
geometry touches. The stencil values of pixels are affected via
love.graphics.stencil.

Synopses:

    1.  |love.graphics.setStencilTest|( `comparemode`, `comparevalue` )
    2.  |love.graphics.setStencilTest|()

Variants:

    1.  |love.graphics.setStencilTest|( `comparemode`, `comparevalue` )

        See function description

        returns:

            None

        arguments:

            `comparemode`: |love-CompareMode|

                The type of comparison to make for each pixel.

            `comparevalue`: |lrv-number|

                The value to use when comparing with the stencil value of each
                pixel. Must be between 0 and 255.
    2.  |love.graphics.setStencilTest|()

        Disables stencil testing.

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.graphics.setWireframe*
|love.graphics.setWireframe|

Sets whether wireframe lines will be used when drawing.

Synopses:

    1.  |love.graphics.setWireframe|( `enable` )

Variants:

    1.  |love.graphics.setWireframe|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: |lrv-boolean|

                True to enable wireframe mode when drawing, false to disable
                it.

-------------------------------------------------------------------------------
                                                     *love-love.graphics.shear*
|love.graphics.shear|

Shears the coordinate system.

Synopses:

    1.  |love.graphics.shear|( `kx`, `ky` )

Variants:

    1.  |love.graphics.shear|( `kx`, `ky` )

        See function description

        returns:

            None

        arguments:

            `kx`: |lrv-number|

                The shear factor on the x-axis.

            `ky`: |lrv-number|

                The shear factor on the y-axis.

-------------------------------------------------------------------------------
                                                   *love-love.graphics.stencil*
|love.graphics.stencil|

Draws geometry as a stencil.

The geometry drawn by the supplied function sets invisible stencil values of
pixels, instead of setting pixel colors. The stencil buffer (which contains
those stencil values) can act like a mask / stencil -
love.graphics.setStencilTest can be used afterward to determine how further
rendering is affected by the stencil values in each pixel.

Stencil values are integers within the range of 255.

Synopses:

    1.  |love.graphics.stencil|( `stencilfunction`, `action`, `value`,
        `keepvalues` )

Variants:

    1.  |love.graphics.stencil|( `stencilfunction`, `action`, `value`,
        `keepvalues` )

        It is possible to draw to the screen and to the stencil values of pixels at the same time, by using love.graphics.setColorMask inside the stencil function to enable drawing to all color components.

        returns:

            None

        arguments:

            `stencilfunction`: |lrv-function|

                Function which draws geometry. The stencil values of pixels,
                rather than the color of each pixel, will be affected by the
                geometry.

            `action`: |love-StencilAction|

                How to modify any stencil values of pixels that are touched by
                what's drawn in the stencil function.

            `value`: |lrv-number|

                The new stencil value to use for pixels if the 'replace'
                stencil action is used. Has no effect with other stencil
                actions. Must be between 0 and 255.

            `keepvalues`: |lrv-boolean|

                True to preserve old stencil values of pixels, false to re-set
                every pixel's stencil value to 0 before executing the stencil
                function. love.graphics.clear will also re-set all stencil
                values.

-------------------------------------------------------------------------------
                                            *love-love.graphics.transformPoint*
|love.graphics.transformPoint|

Converts the given 2D position from global coordinates into screen-space.

This effectively applies the current graphics transformations to the given
position. A similar Transform:transformPoint method exists for Transform
objects.

Synopses:

    1.  `screenX`, `screenY` = |love.graphics.transformPoint|(
        `globalX`, `globalY` )

Variants:

    1.  `screenX`, `screenY` = |love.graphics.transformPoint|(
        `globalX`, `globalY` )

        See function description

        returns:

            `screenX`: |lrv-number|

                The x component of the position with graphics transformations
                applied.

            `screenY`: |lrv-number|

                The y component of the position with graphics transformations
                applied.

        arguments:

            `globalX`: |lrv-number|

                The x component of the position in global coordinates.

            `globalY`: |lrv-number|

                The y component of the position in global coordinates.

-------------------------------------------------------------------------------
                                                 *love-love.graphics.translate*
|love.graphics.translate|

Translates the coordinate system in two dimensions.

When this function is called with two numbers, dx, and dy, all the following
drawing operations take effect as if their x and y coordinates were x+dx and
y+dy.

Scale and translate are not commutative operations, therefore, calling them in
different orders will change the outcome.

This change lasts until love.draw() exits or else a love.graphics.pop reverts
to a previous love.graphics.push.

Translating using whole numbers will prevent tearing/blurring of images and
fonts draw after translating.

Synopses:

    1.  |love.graphics.translate|( `dx`, `dy` )

Variants:

    1.  |love.graphics.translate|( `dx`, `dy` )

        See function description

        returns:

            None

        arguments:

            `dx`: |lrv-number|

                The translation relative to the x-axis.

            `dy`: |lrv-number|

                The translation relative to the y-axis.

-------------------------------------------------------------------------------
                                            *love-love.graphics.validateShader*
|love.graphics.validateShader|

Validates shader code. Check if specified shader code does not contain any
errors.

Synopses:

    1.  `status`, `message` = |love.graphics.validateShader|( `gles`,
        `code` )
    2.  `status`, `message` = |love.graphics.validateShader|( `gles`,
        `pixelcode`, `vertexcode` )

Variants:

    1.  `status`, `message` = |love.graphics.validateShader|( `gles`,
        `code` )

        See function description

        returns:

            `status`: |lrv-boolean|

                true if specified shader code doesn't contain any errors. false
                otherwise.

            `message`: |lrv-string|

                Reason why shader code validation failed (or nil if validation
                succeded).

        arguments:

            `gles`: |lrv-boolean|

                Validate code as GLSL ES shader.

            `code`: |lrv-string|

                The pixel shader or vertex shader code, or a filename pointing
                to a file with the code.
    2.  `status`, `message` = |love.graphics.validateShader|( `gles`,
        `pixelcode`, `vertexcode` )

        See function description

        returns:

            `status`: |lrv-boolean|

                true if specified shader code doesn't contain any errors. false
                otherwise.

            `message`: |lrv-string|

                Reason why shader code validation failed (or nil if validation
                succeded).

        arguments:

            `gles`: |lrv-boolean|

                Validate code as GLSL ES shader.

            `pixelcode`: |lrv-string|

                The pixel shader code, or a filename pointing to a file with
                the code.

            `vertexcode`: |lrv-string|

                The vertex shader code, or a filename pointing to a file with
                the code.
-------------------------------------------------------------------------------
                                                     *love-love.graphics-types*
The types of |love.graphics|:

    |Canvas|                              |love-Canvas|
    |Font|                                |love-Font|
    |Image|                               |love-Image|
    |Mesh|                                |love-Mesh|
    |ParticleSystem|                      |love-ParticleSystem|
    |Quad|                                |love-Quad|
    |Shader|                              |love-Shader|
    |SpriteBatch|                         |love-SpriteBatch|
    |Text|                                |love-Text|
    |Texture|                             |love-Texture|
    |Video|                               |love-Video|

-------------------------------------------------------------------------------
                                                                  *love-Canvas*
|Canvas|

A Canvas is used for off-screen rendering. Think of it as an invisible screen
that you can draw to, but that will not be visible until you draw it to the
actual visible screen. It is also known as "render to texture".

By drawing things that do not change position often (such as background items)
to the Canvas, and then drawing the entire Canvas instead of each item,  you
can reduce the number of draw operations performed each frame.

In versions prior to love.graphics.isSupported("canvas") could be used to check
for support at runtime.

                                                     *love-Canvas-constructors*
    constructors:

        None

                                                       *love-Canvas-supertypes*
    supertypes:

        |Texture|                         |love-Texture|
        |Drawable|                        |love-Drawable|
        |Object|                          |love-Object|

                                                         *love-Canvas-subtypes*
    subtypes:

        None

                                                        *love-Canvas-functions*
    functions:

        |generateMipmaps|                 |love-Canvas:generateMipmaps|
        |getDimensions|                   |love-Canvas:getDimensions|
        |getFilter|                       |love-Canvas:getFilter|
        |getHeight|                       |love-Canvas:getHeight|
        |getMSAA|                         |love-Canvas:getMSAA|
        |getMipmapMode|                   |love-Canvas:getMipmapMode|
        |getWidth|                        |love-Canvas:getWidth|
        |getWrap|                         |love-Canvas:getWrap|
        |newImageData|                    |love-Canvas:newImageData|
        |renderTo|                        |love-Canvas:renderTo|
        |setFilter|                       |love-Canvas:setFilter|
        |setWrap|                         |love-Canvas:setWrap|

-------------------------------------------------------------------------------
                                                  *love-Canvas:generateMipmaps*
|Canvas:generateMipmaps|

Generates mipmaps for the Canvas, based on the contents of the
highest-resolution mipmap level.

The Canvas must be created with mipmaps set to a MipmapMode other than 'none'
for this function to work. It should only be called while the Canvas is not the
active render target.

If the mipmap mode is set to 'auto', this function is automatically called
inside love.graphics.setCanvas when switching from this Canvas to another
Canvas or to the main screen.

Synopses:

    1.  |Canvas:generateMipmaps|()

Variants:

    1.  |Canvas:generateMipmaps|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-Canvas:getDimensions*
|Canvas:getDimensions|

Gets the width and height of the Canvas.

Synopses:

    1.  `width`, `height` = |Canvas:getDimensions|()

Variants:

    1.  `width`, `height` = |Canvas:getDimensions|()

        See function description

        returns:

            `width`: |lrv-number|

                The width of the Canvas, in pixels.

            `height`: |lrv-number|

                The height of the Canvas, in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Canvas:getFilter*
|Canvas:getFilter|

Gets the filter mode of the Canvas.

Synopses:

    1.  `min`, `mag` = |Canvas:getFilter|()
    2.  `min`, `mag`, `anisotropy` = |Canvas:getFilter|()

Variants:

    1.  `min`, `mag` = |Canvas:getFilter|()

        See function description

        returns:

            `min`: |love-FilterMode|

                Filter mode used when minifying the canvas.

            `mag`: |love-FilterMode|

                Filter mode used when magnifying the canvas.

        arguments:

            None
    2.  `min`, `mag`, `anisotropy` = |Canvas:getFilter|()

        See function description

        returns:

            `min`: |love-FilterMode|

                Filter mode used when minifying the canvas.

            `mag`: |love-FilterMode|

                Filter mode used when magnifying the canvas.

            `anisotropy`: |lrv-number|

                Maximum amount of anisotropic filtering used.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Canvas:getHeight*
|Canvas:getHeight|

Gets the height of the Canvas.

Synopses:

    1.  `height` = |Canvas:getHeight|()

Variants:

    1.  `height` = |Canvas:getHeight|()

        See function description

        returns:

            `height`: |lrv-number|

                The height of the Canvas, in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Canvas:getMSAA*
|Canvas:getMSAA|

Gets the number of multisample antialiasing (MSAA) samples used when drawing to
the Canvas.

This may be different than the number used as an argument to
love.graphics.newCanvas if the system running LÖVE doesn't support that
number.

Synopses:

    1.  `samples` = |Canvas:getMSAA|()

Variants:

    1.  `samples` = |Canvas:getMSAA|()

        See function description

        returns:

            `samples`: |lrv-number|

                The number of multisample antialiasing samples used by the
                canvas when drawing to it.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-Canvas:getMipmapMode*
|Canvas:getMipmapMode|

Gets the MipmapMode this Canvas was created with.

Synopses:

    1.  `mode` = |Canvas:getMipmapMode|()

Variants:

    1.  `mode` = |Canvas:getMipmapMode|()

        See function description

        returns:

            `mode`: <MipmapMode>

                The mipmap mode this Canvas was created with.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Canvas:getWidth*
|Canvas:getWidth|

Gets the width of the Canvas.

Synopses:

    1.  `width` = |Canvas:getWidth|()

Variants:

    1.  `width` = |Canvas:getWidth|()

        See function description

        returns:

            `width`: |lrv-number|

                The width of the Canvas, in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Canvas:getWrap*
|Canvas:getWrap|

Gets the wrapping properties of a Canvas.

This function returns the currently set horizontal and vertical wrapping modes
for the Canvas.

Synopses:

    1.  `horiz`, `vert` = |Canvas:getWrap|()

Variants:

    1.  `horiz`, `vert` = |Canvas:getWrap|()

        See function description

        returns:

            `horiz`: |love-WrapMode|

                Horizontal wrapping mode of the Canvas.

            `vert`: |love-WrapMode|

                Vertical wrapping mode of the Canvas.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Canvas:newImageData*
|Canvas:newImageData|

Generates ImageData from the contents of the Canvas.

Synopses:

    1.  `data` = |Canvas:newImageData|()
    2.  `data` = |Canvas:newImageData|( `slice`, `mipmap`, `x`, `y`,
        `width`, `height` )

Variants:

    1.  `data` = |Canvas:newImageData|()

        See function description

        returns:

            `data`: |love-ImageData|

                The new ImageData made from the Canvas' contents.

        arguments:

            None
    2.  `data` = |Canvas:newImageData|( `slice`, `mipmap`, `x`, `y`,
        `width`, `height` )

        See function description

        returns:

            `data`: |love-ImageData|

                The new ImageData made from the Canvas' contents.

        arguments:

            `slice`: |lrv-number|

                The cubemap face index, array index, or depth layer for
                cubemap, array, or volume type Canvases, respectively. This
                argument is ignored for regular 2D canvases.

            `mipmap`: |lrv-number|

                The mipmap index to use, for Canvases with mipmaps.

            `x`: |lrv-number|

                The x-axis of the top-left corner (in pixels) of the area
                within the Canvas to capture.

            `y`: |lrv-number|

                The y-axis of the top-left corner (in pixels) of the area
                within the Canvas to capture.

            `width`: |lrv-number|

                The width in pixels of the area within the Canvas to capture.

            `height`: |lrv-number|

                The height in pixels of the area within the Canvas to capture.

-------------------------------------------------------------------------------
                                                         *love-Canvas:renderTo*
|Canvas:renderTo|

Render to the Canvas using a function.

This is a shortcut to love.graphics.setCanvas:

canvas:renderTo( func )

is the same as

love.graphics.setCanvas( canvas )

func()

love.graphics.setCanvas()

Synopses:

    1.  |Canvas:renderTo|( `func` )

Variants:

    1.  |Canvas:renderTo|( `func` )

        See function description

        returns:

            None

        arguments:

            `func`: |lrv-function|

                A function performing drawing operations.

-------------------------------------------------------------------------------
                                                        *love-Canvas:setFilter*
|Canvas:setFilter|

Sets the filter mode of the Canvas.

Synopses:

    1.  |Canvas:setFilter|( `min`, `mag` )
    2.  |Canvas:setFilter|( `min`, `mag`, `anisotropy` )

Variants:

    1.  |Canvas:setFilter|( `min`, `mag` )

        See function description

        returns:

            None

        arguments:

            `min`: |love-FilterMode|

                Filter mode to use when minifying the canvas.

            `mag`: |love-FilterMode|

                Filter mode to use when magnifying the canvas.
    2.  |Canvas:setFilter|( `min`, `mag`, `anisotropy` )

        See function description

        returns:

            None

        arguments:

            `min`: |love-FilterMode|

                Filter mode to use when minifying the canvas.

            `mag`: |love-FilterMode|

                Filter mode to use when magnifying the canvas.

            `anisotropy`: |lrv-number|

                Maximum amount of anisotropic filtering to use.

-------------------------------------------------------------------------------
                                                          *love-Canvas:setWrap*
|Canvas:setWrap|

Sets the wrapping properties of a Canvas.

This function sets the way the edges of a Canvas are treated if it is scaled or
rotated. If the WrapMode is set to 'clamp', the edge will not be interpolated.
If set to 'repeat', the edge will be interpolated with the pixels on the
opposing side of the framebuffer.

Synopses:

    1.  |Canvas:setWrap|( `horiz`, `vert` )

Variants:

    1.  |Canvas:setWrap|( `horiz`, `vert` )

        See function description

        returns:

            None

        arguments:

            `horiz`: |love-WrapMode|

                Horizontal wrapping mode of the Canvas.

            `vert`: |love-WrapMode|

                Vertical wrapping mode of the Canvas.

-------------------------------------------------------------------------------
                                                                    *love-Font*
|Font|

Defines the shape of characters that can be drawn onto the screen.

                                                       *love-Font-constructors*
    constructors:

        None

                                                         *love-Font-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                           *love-Font-subtypes*
    subtypes:

        None

                                                          *love-Font-functions*
    functions:

        |getAscent|                       |love-Font:getAscent|
        |getBaseline|                     |love-Font:getBaseline|
        |getDPIScale|                     |love-Font:getDPIScale|
        |getDescent|                      |love-Font:getDescent|
        |getFilter|                       |love-Font:getFilter|
        |getHeight|                       |love-Font:getHeight|
        |getLineHeight|                   |love-Font:getLineHeight|
        |getWidth|                        |love-Font:getWidth|
        |getWrap|                         |love-Font:getWrap|
        |hasGlyphs|                       |love-Font:hasGlyphs|
        |setFallbacks|                    |love-Font:setFallbacks|
        |setFilter|                       |love-Font:setFilter|
        |setLineHeight|                   |love-Font:setLineHeight|

-------------------------------------------------------------------------------
                                                          *love-Font:getAscent*
|Font:getAscent|

Gets the ascent of the Font.

The ascent spans the distance between the baseline and the top of the glyph
that reaches farthest from the baseline.

Synopses:

    1.  `ascent` = |Font:getAscent|()

Variants:

    1.  `ascent` = |Font:getAscent|()

        See function description

        returns:

            `ascent`: |lrv-number|

                The ascent of the Font in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Font:getBaseline*
|Font:getBaseline|

Gets the baseline of the Font.

Most scripts share the notion of a baseline: an imaginary horizontal line on
which characters rest. In some scripts, parts of glyphs lie below the baseline.

Synopses:

    1.  `baseline` = |Font:getBaseline|()

Variants:

    1.  `baseline` = |Font:getBaseline|()

        See function description

        returns:

            `baseline`: |lrv-number|

                The baseline of the Font in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Font:getDPIScale*
|Font:getDPIScale|

Gets the DPI scale factor of the Font.

The DPI scale factor represents relative pixel density. A DPI scale factor of 2
means the font's glyphs have twice the pixel density in each dimension (4 times
as many pixels in the same area) compared to a font with a DPI scale factor of
1.

The font size of TrueType fonts is scaled internally by the font's specified
DPI scale factor. By default, LÖVE uses the screen's DPI scale factor when
creating TrueType fonts.

Synopses:

    1.  `dpiscale` = |Font:getDPIScale|()

Variants:

    1.  `dpiscale` = |Font:getDPIScale|()

        See function description

        returns:

            `dpiscale`: |lrv-number|

                The DPI scale factor of the Font.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Font:getDescent*
|Font:getDescent|

Gets the descent of the Font.

The descent spans the distance between the baseline and the lowest descending
glyph in a typeface.

Synopses:

    1.  `descent` = |Font:getDescent|()

Variants:

    1.  `descent` = |Font:getDescent|()

        See function description

        returns:

            `descent`: |lrv-number|

                The descent of the Font in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Font:getFilter*
|Font:getFilter|

Gets the filter mode for a font.

Synopses:

    1.  `min`, `mag`, `anisotropy` = |Font:getFilter|()

Variants:

    1.  `min`, `mag`, `anisotropy` = |Font:getFilter|()

        See function description

        returns:

            `min`: |love-FilterMode|

                Filter mode used when minifying the font.

            `mag`: |love-FilterMode|

                Filter mode used when magnifying the font.

            `anisotropy`: |lrv-number|

                Maximum amount of anisotropic filtering used.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Font:getHeight*
|Font:getHeight|

Gets the height of the Font.

The height of the font is the size including any spacing; the height which it
will need.

Synopses:

    1.  `height` = |Font:getHeight|()

Variants:

    1.  `height` = |Font:getHeight|()

        See function description

        returns:

            `height`: |lrv-number|

                The height of the Font in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Font:getLineHeight*
|Font:getLineHeight|

Gets the line height.

This will be the value previously set by Font:setLineHeight, or 1.0 by default.

Synopses:

    1.  `height` = |Font:getLineHeight|()

Variants:

    1.  `height` = |Font:getLineHeight|()

        See function description

        returns:

            `height`: |lrv-number|

                The current line height.

        arguments:

            None

-------------------------------------------------------------------------------
                                                           *love-Font:getWidth*
|Font:getWidth|

Determines the maximum width (accounting for newlines) taken by the given
string.

Synopses:

    1.  `width` = |Font:getWidth|( `text` )

Variants:

    1.  `width` = |Font:getWidth|( `text` )

        See function description

        returns:

            `width`: |lrv-number|

                The width of the text.

        arguments:

            `text`: |lrv-string|

                A string.

-------------------------------------------------------------------------------
                                                            *love-Font:getWrap*
|Font:getWrap|

Gets formatting information for text, given a wrap limit.

This function accounts for newlines correctly (i.e. '\n').

Synopses:

    1.  `width`, `wrappedtext` = |Font:getWrap|( `text`, `wraplimit` )

Variants:

    1.  `width`, `wrappedtext` = |Font:getWrap|( `text`, `wraplimit` )

        See function description

        returns:

            `width`: |lrv-number|

                The maximum width of the wrapped text.

            `wrappedtext`: |lrv-table|

                A sequence containing each line of text that was wrapped.

        arguments:

            `text`: |lrv-string|

                The text that will be wrapped.

            `wraplimit`: |lrv-number|

                The maximum width in pixels of each line that ''text'' is
                allowed before wrapping.

-------------------------------------------------------------------------------
                                                          *love-Font:hasGlyphs*
|Font:hasGlyphs|

Gets whether the Font can render a character or string.

Synopses:

    1.  `hasglyph` = |Font:hasGlyphs|( `text` )
    2.  `hasglyph` = |Font:hasGlyphs|( `character1`, `character2` )
    3.  `hasglyph` = |Font:hasGlyphs|( `codepoint1`, `codepoint2` )

Variants:

    1.  `hasglyph` = |Font:hasGlyphs|( `text` )

        See function description

        returns:

            `hasglyph`: |lrv-boolean|

                Whether the font can render all the UTF-8 characters in the
                string.

        arguments:

            `text`: |lrv-string|

                A UTF-8 encoded unicode string.
    2.  `hasglyph` = |Font:hasGlyphs|( `character1`, `character2` )

        See function description

        returns:

            `hasglyph`: |lrv-boolean|

                Whether the font can render all the glyphs represented by the
                characters.

        arguments:

            `character1`: |lrv-string|

                A unicode character.

            `character2`: |lrv-string|

                Another unicode character.
    3.  `hasglyph` = |Font:hasGlyphs|( `codepoint1`, `codepoint2` )

        See function description

        returns:

            `hasglyph`: |lrv-boolean|

                Whether the font can render all the glyphs represented by the
                codepoint numbers.

        arguments:

            `codepoint1`: |lrv-number|

                A unicode codepoint number.

            `codepoint2`: |lrv-number|

                Another unicode codepoint number.

-------------------------------------------------------------------------------
                                                       *love-Font:setFallbacks*
|Font:setFallbacks|

Sets the fallback fonts. When the Font doesn't contain a glyph, it will
substitute the glyph from the next subsequent fallback Fonts. This is akin to
setting a 'font stack' in Cascading Style Sheets (CSS).

Synopses:

    1.  |Font:setFallbacks|( `fallbackfont1`, `...` )

Variants:

    1.  |Font:setFallbacks|( `fallbackfont1`, `...` )

        If this is called it should be before love.graphics.print, Font:getWrap, and other Font methods which use glyph positioning information are called.

Every fallback Font must be created from the same file type as the primary Font. For example, a Font created from a .ttf file can only use fallback Fonts that were created from .ttf files.

        returns:

            None

        arguments:

            `fallbackfont1`: |love-Font|

                The first fallback Font to use.

            `...`: |love-Font|

                Additional fallback Fonts.

-------------------------------------------------------------------------------
                                                          *love-Font:setFilter*
|Font:setFilter|

Sets the filter mode for a font.

Synopses:

    1.  |Font:setFilter|( `min`, `mag`, `anisotropy` )

Variants:

    1.  |Font:setFilter|( `min`, `mag`, `anisotropy` )

        See function description

        returns:

            None

        arguments:

            `min`: |love-FilterMode|

                How to scale a font down.

            `mag`: |love-FilterMode|

                How to scale a font up.

            `anisotropy`: |lrv-number|

                Maximum amount of anisotropic filtering used.

-------------------------------------------------------------------------------
                                                      *love-Font:setLineHeight*
|Font:setLineHeight|

Sets the line height.

When rendering the font in lines the actual height will be determined by the
line height multiplied by the height of the font. The default is 1.0.

Synopses:

    1.  |Font:setLineHeight|( `height` )

Variants:

    1.  |Font:setLineHeight|( `height` )

        See function description

        returns:

            None

        arguments:

            `height`: |lrv-number|

                The new line height.

-------------------------------------------------------------------------------
                                                                   *love-Image*
|Image|

Drawable image type.

                                                      *love-Image-constructors*
    constructors:

        None

                                                        *love-Image-supertypes*
    supertypes:

        |Texture|                         |love-Texture|
        |Drawable|                        |love-Drawable|
        |Object|                          |love-Object|

                                                          *love-Image-subtypes*
    subtypes:

        None

                                                         *love-Image-functions*
    functions:

        |getDimensions|                   |love-Image:getDimensions|
        |getFilter|                       |love-Image:getFilter|
        |getFlags|                        |love-Image:getFlags|
        |getHeight|                       |love-Image:getHeight|
        |getWidth|                        |love-Image:getWidth|
        |getWrap|                         |love-Image:getWrap|
        |replacePixels|                   |love-Image:replacePixels|
        |setFilter|                       |love-Image:setFilter|
        |setWrap|                         |love-Image:setWrap|

-------------------------------------------------------------------------------
                                                     *love-Image:getDimensions*
|Image:getDimensions|

Gets the width and height of the Image.

Synopses:

    1.  `width`, `height` = |Image:getDimensions|()

Variants:

    1.  `width`, `height` = |Image:getDimensions|()

        See function description

        returns:

            `width`: |lrv-number|

                The width of the Image, in pixels.

            `height`: |lrv-number|

                The height of the Image, in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Image:getFilter*
|Image:getFilter|

Gets the filter mode for an image.

Synopses:

    1.  `min`, `mag` = |Image:getFilter|()
    2.  `min`, `mag`, `anisotropy` = |Image:getFilter|()

Variants:

    1.  `min`, `mag` = |Image:getFilter|()

        See function description

        returns:

            `min`: |love-FilterMode|

                Filter mode used when minifying the image.

            `mag`: |love-FilterMode|

                Filter mode used when magnifying the image.

        arguments:

            None
    2.  `min`, `mag`, `anisotropy` = |Image:getFilter|()

        See function description

        returns:

            `min`: |love-FilterMode|

                Filter mode used when minifying the image.

            `mag`: |love-FilterMode|

                Filter mode used when magnifying the image.

            `anisotropy`: |lrv-number|

                Maximum amount of anisotropic filtering used.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Image:getFlags*
|Image:getFlags|

Gets the flags used when the image was created.

Synopses:

    1.  `flags` = |Image:getFlags|()

Variants:

    1.  `flags` = |Image:getFlags|()

        See function description

        returns:

            `flags`: |lrv-table|

                A table with ImageFlag keys.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Image:getHeight*
|Image:getHeight|

Gets the height of the Image.

Synopses:

    1.  `height` = |Image:getHeight|()

Variants:

    1.  `height` = |Image:getHeight|()

        See function description

        returns:

            `height`: |lrv-number|

                The height of the Image, in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Image:getWidth*
|Image:getWidth|

Gets the width of the Image.

Synopses:

    1.  `width` = |Image:getWidth|()

Variants:

    1.  `width` = |Image:getWidth|()

        See function description

        returns:

            `width`: |lrv-number|

                The width of the Image, in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                           *love-Image:getWrap*
|Image:getWrap|

Gets the wrapping properties of an Image.

This function returns the currently set horizontal and vertical wrapping modes
for the image.

Synopses:

    1.  `horiz`, `vert` = |Image:getWrap|()

Variants:

    1.  `horiz`, `vert` = |Image:getWrap|()

        See function description

        returns:

            `horiz`: |love-WrapMode|

                Horizontal wrapping mode of the image.

            `vert`: |love-WrapMode|

                Vertical wrapping mode of the image.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Image:replacePixels*
|Image:replacePixels|

Replace the contents of an Image.

Synopses:

    1.  |Image:replacePixels|( `data`, `slice`, `mipmap`, `x`, `y`,
        `reloadmipmaps` )

Variants:

    1.  |Image:replacePixels|( `data`, `slice`, `mipmap`, `x`, `y`,
        `reloadmipmaps` )

        See function description

        returns:

            None

        arguments:

            `data`: |love-ImageData|

                The new ImageData to replace the contents with.

            `slice`: |lrv-number|

                Which cubemap face, array index, or volume layer to replace, if
                applicable.

            `mipmap`: |lrv-number|

                The mimap level to replace, if the Image has mipmaps.

            `x`: |lrv-number|

                The x-offset in pixels from the top-left of the image to
                replace. The given ImageData's width plus this value must not
                be greater than the pixel width of the Image's specified mipmap
                level.

            `y`: |lrv-number|

                The y-offset in pixels from the top-left of the image to
                replace. The given ImageData's height plus this value must not
                be greater than the pixel height of the Image's specified
                mipmap level.

            `reloadmipmaps`: |lrv-boolean|

                Whether to generate new mipmaps after replacing the Image's
                pixels. True by default if the Image was created with
                automatically generated mipmaps, false by default otherwise.

-------------------------------------------------------------------------------
                                                         *love-Image:setFilter*
|Image:setFilter|

Sets the filter mode for an image.

Synopses:

    1.  |Image:setFilter|( `min`, `mag` )
    2.  |Image:setFilter|( `min`, `mag`, `anisotropy` )

Variants:

    1.  |Image:setFilter|( `min`, `mag` )

        See function description

        returns:

            None

        arguments:

            `min`: |love-FilterMode|

                How to scale an image down.

            `mag`: |love-FilterMode|

                How to scale an image up.
    2.  |Image:setFilter|( `min`, `mag`, `anisotropy` )

        See function description

        returns:

            None

        arguments:

            `min`: |love-FilterMode|

                How to scale an image down.

            `mag`: |love-FilterMode|

                How to scale an image up.

            `anisotropy`: |lrv-number|

                Maximum amount of anisotropic filtering used.

-------------------------------------------------------------------------------
                                                           *love-Image:setWrap*
|Image:setWrap|

Sets the wrapping properties of an Image.

This function sets the way an Image is repeated when it is drawn with a  Quad
that is larger than the image's extent. An image may be clamped or set to
repeat in both horizontal and vertical directions. Clamped images appear only
once, but repeated ones repeat as many times as there is room in the Quad.

N.B. If you use a Quad that is larger than the image extent and do not use
repeated tiling, there may be an unwanted visual effect of the image stretching
all the way to fill the Quad. If this is the case, setting
Image:setWrap('repeat', 'repeat') for all the images to be repeated, and using
Quads of appropriate size will result in the best visual appearance.

Synopses:

    1.  |Image:setWrap|( `horiz`, `vert` )

Variants:

    1.  |Image:setWrap|( `horiz`, `vert` )

        See function description

        returns:

            None

        arguments:

            `horiz`: |love-WrapMode|

                Horizontal wrapping mode of the image.

            `vert`: |love-WrapMode|

                Vertical wrapping mode of the image.

-------------------------------------------------------------------------------
                                                                    *love-Mesh*
|Mesh|

A 2D polygon mesh used for drawing arbitrary textured shapes.

                                                       *love-Mesh-constructors*
    constructors:

        None

                                                         *love-Mesh-supertypes*
    supertypes:

        |Drawable|                        |love-Drawable|
        |Object|                          |love-Object|

                                                           *love-Mesh-subtypes*
    subtypes:

        None

                                                          *love-Mesh-functions*
    functions:

        |attachAttribute|                 |love-Mesh:attachAttribute|
        |attachAttribute|                 |love-Mesh:attachAttribute|
        |detachAttribute|                 |love-Mesh:detachAttribute|
        |getDrawMode|                     |love-Mesh:getDrawMode|
        |getDrawRange|                    |love-Mesh:getDrawRange|
        |getTexture|                      |love-Mesh:getTexture|
        |getVertex|                       |love-Mesh:getVertex|
        |getVertexAttribute|              |love-Mesh:getVertexAttribute|
        |getVertexCount|                  |love-Mesh:getVertexCount|
        |getVertexFormat|                 |love-Mesh:getVertexFormat|
        |getVertexMap|                    |love-Mesh:getVertexMap|
        |isAttributeEnabled|              |love-Mesh:isAttributeEnabled|
        |setAttributeEnabled|             |love-Mesh:setAttributeEnabled|
        |setDrawMode|                     |love-Mesh:setDrawMode|
        |setDrawRange|                    |love-Mesh:setDrawRange|
        |setTexture|                      |love-Mesh:setTexture|
        |setVertex|                       |love-Mesh:setVertex|
        |setVertexAttribute|              |love-Mesh:setVertexAttribute|
        |setVertexMap|                    |love-Mesh:setVertexMap|
        |setVertices|                     |love-Mesh:setVertices|

-------------------------------------------------------------------------------
                                                    *love-Mesh:attachAttribute*
|Mesh:attachAttribute|

Attaches a vertex attribute from a different Mesh onto this Mesh, for use when
drawing. This can be used to share vertex attribute data between several
different Meshes.

Synopses:

    1.  |Mesh:attachAttribute|( `name`, `mesh` )
    2.  |Mesh:attachAttribute|( `name`, `mesh`, `step`, `attachname` )

Variants:

    1.  |Mesh:attachAttribute|( `name`, `mesh` )

        See function description

        returns:

            None

        arguments:

            `name`: |lrv-string|

                The name of the vertex attribute to attach.

            `mesh`: |love-Mesh|

                The Mesh to get the vertex attribute from.
    2.  |Mesh:attachAttribute|( `name`, `mesh`, `step`, `attachname` )

        If a Mesh wasn't created with a custom vertex format, it will have 3 vertex attributes named VertexPosition, VertexTexCoord, and VertexColor.

Custom named attributes can be accessed in a vertex shader by declaring them as attribute vec4 MyCustomAttributeName; at the top-level of the vertex shader code. The name must match what was specified in the Mesh's vertex format and in the name argument of Mesh:attachAttribute.

        returns:

            None

        arguments:

            `name`: |lrv-string|

                The name of the vertex attribute to attach.

            `mesh`: |love-Mesh|

                The Mesh to get the vertex attribute from.

            `step`: <VertexAttributeStep>

                Whether the attribute will be per-vertex or per-instance when
                the mesh is drawn.

            `attachname`: |lrv-string|

                The name of the attribute to use in shader code. Defaults to
                the name of the attribute in the given mesh. Can be used to use
                a different name for this attribute when rendering.

-------------------------------------------------------------------------------
                                                    *love-Mesh:attachAttribute*
|Mesh:attachAttribute|

Attaches a vertex attribute from a different Mesh onto this Mesh, for use when
drawing. This can be used to share vertex attribute data between several
different Meshes.

Synopses:

    1.  |Mesh:attachAttribute|( `name`, `mesh` )
    2.  |Mesh:attachAttribute|( `name`, `mesh`, `step`, `attachname` )

Variants:

    1.  |Mesh:attachAttribute|( `name`, `mesh` )

        See function description

        returns:

            None

        arguments:

            `name`: |lrv-string|

                The name of the vertex attribute to attach.

            `mesh`: |love-Mesh|

                The Mesh to get the vertex attribute from.
    2.  |Mesh:attachAttribute|( `name`, `mesh`, `step`, `attachname` )

        If a Mesh wasn't created with a custom vertex format, it will have 3 vertex attributes named VertexPosition, VertexTexCoord, and VertexColor.

Custom named attributes can be accessed in a vertex shader by declaring them as attribute vec4 MyCustomAttributeName; at the top-level of the vertex shader code. The name must match what was specified in the Mesh's vertex format and in the name argument of Mesh:attachAttribute.

        returns:

            None

        arguments:

            `name`: |lrv-string|

                The name of the vertex attribute to attach.

            `mesh`: |love-Mesh|

                The Mesh to get the vertex attribute from.

            `step`: <VertexAttributeStep>

                Whether the attribute will be per-vertex or per-instance when
                the mesh is drawn.

            `attachname`: |lrv-string|

                The name of the attribute to use in shader code. Defaults to
                the name of the attribute in the given mesh. Can be used to use
                a different name for this attribute when rendering.

-------------------------------------------------------------------------------
                                                    *love-Mesh:detachAttribute*
|Mesh:detachAttribute|

Removes a previously attached vertex attribute from this Mesh.

Synopses:

    1.  `success` = |Mesh:detachAttribute|( `name` )

Variants:

    1.  `success` = |Mesh:detachAttribute|( `name` )

        See function description

        returns:

            `success`: |lrv-boolean|

                Whether the attribute was successfully detached.

        arguments:

            `name`: |lrv-string|

                The name of the attached vertex attribute to detach.

-------------------------------------------------------------------------------
                                                        *love-Mesh:getDrawMode*
|Mesh:getDrawMode|

Gets the mode used when drawing the Mesh.

Synopses:

    1.  `mode` = |Mesh:getDrawMode|()

Variants:

    1.  `mode` = |Mesh:getDrawMode|()

        See function description

        returns:

            `mode`: |love-MeshDrawMode|

                The mode used when drawing the Mesh.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Mesh:getDrawRange*
|Mesh:getDrawRange|

Gets the range of vertices used when drawing the Mesh.

Synopses:

    1.  `min`, `max` = |Mesh:getDrawRange|()

Variants:

    1.  `min`, `max` = |Mesh:getDrawRange|()

        If the Mesh's draw range has not been set previously with Mesh:setDrawRange, this function will return nil.

        returns:

            `min`: |lrv-number|

                The index of the first vertex used when drawing, or the index
                of the first value in the vertex map used if one is set for
                this Mesh.

            `max`: |lrv-number|

                The index of the last vertex used when drawing, or the index of
                the last value in the vertex map used if one is set for this
                Mesh.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Mesh:getTexture*
|Mesh:getTexture|

Gets the texture (Image or Canvas) used when drawing the Mesh.

Synopses:

    1.  `texture` = |Mesh:getTexture|()

Variants:

    1.  `texture` = |Mesh:getTexture|()

        See function description

        returns:

            `texture`: |love-Texture|

                The Image or Canvas to texture the Mesh with when drawing, or
                nil if none is set.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Mesh:getVertex*
|Mesh:getVertex|

Gets the properties of a vertex in the Mesh.

In versions prior to 11.0, color and byte component values were within the
range of 0 to 255 instead of 0 to 1.

Synopses:

    1.  `attributecomponent`, `...` = |Mesh:getVertex|( `index` )
    2.  `x`, `y`, `u`, `v`, `r`, `g`, `b`, `a` = |Mesh:getVertex|(
        `index` )

Variants:

    1.  `attributecomponent`, `...` = |Mesh:getVertex|( `index` )

        The values are returned in the same order as the vertex attributes in the Mesh's vertex format. A standard Mesh that wasn't created with a custom vertex format will return two position numbers, two texture coordinate numbers, and four color components: x, y, u, v, r, g, b, a.

        returns:

            `attributecomponent`: |lrv-number|

                The first component of the first vertex attribute in the
                specified vertex.

            `...`: |lrv-number|

                Additional components of all vertex attributes in the specified
                vertex.

        arguments:

            `index`: |lrv-number|

                The one-based index of the vertex you want to retrieve the
                information for.
    2.  `x`, `y`, `u`, `v`, `r`, `g`, `b`, `a` = |Mesh:getVertex|(
        `index` )

        Gets the vertex components of a Mesh that wasn't created with a custom vertex format.

        returns:

            `x`: |lrv-number|

                The position of the vertex on the x-axis.

            `y`: |lrv-number|

                The position of the vertex on the y-axis.

            `u`: |lrv-number|

                The horizontal component of the texture coordinate.

            `v`: |lrv-number|

                The vertical component of the texture coordinate.

            `r`: |lrv-number|

                The red component of the vertex's color.

            `g`: |lrv-number|

                The green component of the vertex's color.

            `b`: |lrv-number|

                The blue component of the vertex's color.

            `a`: |lrv-number|

                The alpha component of the vertex's color.

        arguments:

            `index`: |lrv-number|

                The index of the vertex you want to retrieve the information
                for.

-------------------------------------------------------------------------------
                                                 *love-Mesh:getVertexAttribute*
|Mesh:getVertexAttribute|

Gets the properties of a specific attribute within a vertex in the Mesh.

Meshes without a custom vertex format specified in love.graphics.newMesh have
position as their first attribute, texture coordinates as their second
attribute, and color as their third attribute.

Synopses:

    1.  `value1`, `value2`, `...` = |Mesh:getVertexAttribute|(
        `vertexindex`, `attributeindex` )

Variants:

    1.  `value1`, `value2`, `...` = |Mesh:getVertexAttribute|(
        `vertexindex`, `attributeindex` )

        See function description

        returns:

            `value1`: |lrv-number|

                The value of the first component of the attribute.

            `value2`: |lrv-number|

                The value of the second component of the attribute.

            `...`: |lrv-number|

                Any additional vertex attribute components.

        arguments:

            `vertexindex`: |lrv-number|

                The index of the the vertex you want to retrieve the attribute
                for (one-based).

            `attributeindex`: |lrv-number|

                The index of the attribute within the vertex to be retrieved
                (one-based).

-------------------------------------------------------------------------------
                                                     *love-Mesh:getVertexCount*
|Mesh:getVertexCount|

Gets the total number of vertices in the Mesh.

Synopses:

    1.  `count` = |Mesh:getVertexCount|()

Variants:

    1.  `count` = |Mesh:getVertexCount|()

        See function description

        returns:

            `count`: |lrv-number|

                The total number of vertices in the mesh.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-Mesh:getVertexFormat*
|Mesh:getVertexFormat|

Gets the vertex format that the Mesh was created with.

Synopses:

    1.  `format` = |Mesh:getVertexFormat|()

Variants:

    1.  `format` = |Mesh:getVertexFormat|()

        If a Mesh wasn't created with a custom vertex format, it will have the following vertex format:

defaultformat = {

    {'VertexPosition', 'float', 2}, -- The x,y position of each vertex.

    {'VertexTexCoord', 'float', 2}, -- The u,v texture coordinates of each vertex.

    {'VertexColor', 'byte', 4} -- The r,g,b,a color of each vertex.

}

        returns:

            `format`: |lrv-table|

                The vertex format of the Mesh, which is a table containing
                tables for each vertex attribute the Mesh was created with, in
                the form of {attribute, ...}.

                `attribute`: |lrv-table|

                    A table containing the attribute's name, it's data type,
                    and the number of components in the attribute, in the form
                    of {name, datatype, components}.

                `...`: |lrv-table|

                    Additional vertex attributes in the Mesh.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Mesh:getVertexMap*
|Mesh:getVertexMap|

Gets the vertex map for the Mesh. The vertex map describes the order in which
the vertices are used when the Mesh is drawn. The vertices, vertex map, and
mesh draw mode work together to determine what exactly is displayed on the
screen.

If no vertex map has been set previously via Mesh:setVertexMap, then this
function will return nil in LÖVE 0.10.0+, or an empty table in 0.9.2 and
older.

Synopses:

    1.  `map` = |Mesh:getVertexMap|()

Variants:

    1.  `map` = |Mesh:getVertexMap|()

        See function description

        returns:

            `map`: |lrv-table|

                A table containing the list of vertex indices used when
                drawing.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-Mesh:isAttributeEnabled*
|Mesh:isAttributeEnabled|

Gets whether a specific vertex attribute in the Mesh is enabled. Vertex data
from disabled attributes is not used when drawing the Mesh.

Synopses:

    1.  `enabled` = |Mesh:isAttributeEnabled|( `name` )

Variants:

    1.  `enabled` = |Mesh:isAttributeEnabled|( `name` )

        If a Mesh wasn't created with a custom vertex format, it will have 3 vertex attributes named VertexPosition, VertexTexCoord, and VertexColor. Otherwise the attribute name must either match one of the vertex attributes specified in the vertex format when creating the Mesh, 

or must match a vertex attribute from another Mesh attached to this Mesh via Mesh:attachAttribute.

        returns:

            `enabled`: |lrv-boolean|

                Whether the vertex attribute is used when drawing this Mesh.

        arguments:

            `name`: |lrv-string|

                The name of the vertex attribute to be checked.

-------------------------------------------------------------------------------
                                                *love-Mesh:setAttributeEnabled*
|Mesh:setAttributeEnabled|

Enables or disables a specific vertex attribute in the Mesh. Vertex data from
disabled attributes is not used when drawing the Mesh.

Synopses:

    1.  |Mesh:setAttributeEnabled|( `name`, `enable` )

Variants:

    1.  |Mesh:setAttributeEnabled|( `name`, `enable` )

        If a Mesh wasn't created with a custom vertex format, it will have 3 vertex attributes named VertexPosition, VertexTexCoord, and VertexColor. Otherwise the attribute name must either match one of the vertex attributes specified in the vertex format when creating the Mesh, 

or must match a vertex attribute from another Mesh attached to this Mesh via Mesh:attachAttribute.

        returns:

            None

        arguments:

            `name`: |lrv-string|

                The name of the vertex attribute to enable or disable.

            `enable`: |lrv-boolean|

                Whether the vertex attribute is used when drawing this Mesh.

-------------------------------------------------------------------------------
                                                        *love-Mesh:setDrawMode*
|Mesh:setDrawMode|

Sets the mode used when drawing the Mesh.

Synopses:

    1.  |Mesh:setDrawMode|( `mode` )

Variants:

    1.  |Mesh:setDrawMode|( `mode` )

        See function description

        returns:

            None

        arguments:

            `mode`: |love-MeshDrawMode|

                The mode to use when drawing the Mesh.

-------------------------------------------------------------------------------
                                                       *love-Mesh:setDrawRange*
|Mesh:setDrawRange|

Restricts the drawn vertices of the Mesh to a subset of the total.

Synopses:

    1.  |Mesh:setDrawRange|( `start`, `count` )
    2.  |Mesh:setDrawRange|()

Variants:

    1.  |Mesh:setDrawRange|( `start`, `count` )

        See function description

        returns:

            None

        arguments:

            `start`: |lrv-number|

                The index of the first vertex to use when drawing, or the index
                of the first value in the vertex map to use if one is set for
                this Mesh.

            `count`: |lrv-number|

                The number of vertices to use when drawing, or number of values
                in the vertex map to use if one is set for this Mesh.
    2.  |Mesh:setDrawRange|()

        Allows all vertices in the Mesh to be drawn.

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Mesh:setTexture*
|Mesh:setTexture|

Sets the texture (Image or Canvas) used when drawing the Mesh.

Synopses:

    1.  |Mesh:setTexture|( `texture` )
    2.  |Mesh:setTexture|()

Variants:

    1.  |Mesh:setTexture|( `texture` )

        See function description

        returns:

            None

        arguments:

            `texture`: |love-Texture|

                The Image or Canvas to texture the Mesh with when drawing.
    2.  |Mesh:setTexture|()

        Disables any texture from being used when drawing the Mesh. Untextured meshes have a white color by default.

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Mesh:setVertex*
|Mesh:setVertex|

Sets the properties of a vertex in the Mesh.

In versions prior to 11.0, color and byte component values were within the
range of 0 to 255 instead of 0 to 1.

Synopses:

    1.  |Mesh:setVertex|( `index`, `attributecomponent`, `...` )
    2.  |Mesh:setVertex|( `index`, `vertex` )
    3.  |Mesh:setVertex|( `index`, `x`, `y`, `u`, `v`, `r`, `g`, `b`,
        `a` )
    4.  |Mesh:setVertex|( `index`, `vertex` )

Variants:

    1.  |Mesh:setVertex|( `index`, `attributecomponent`, `...` )

        The arguments are in the same order as the vertex attributes in the Mesh's vertex format. A standard Mesh that wasn't created with a custom vertex format will use two position numbers, two texture coordinate numbers, and four color components per vertex: x, y, u, v, r, g, b, a.

If no value is supplied for a specific vertex attribute component, it will be set to a default value of 0 if its data type is 'float', or 1 if its data type is 'byte'.

        returns:

            None

        arguments:

            `index`: |lrv-number|

                The index of the the vertex you want to modify (one-based).

            `attributecomponent`: |lrv-number|

                The first component of the first vertex attribute in the
                specified vertex.

            `...`: |lrv-number|

                Additional components of all vertex attributes in the specified
                vertex.
    2.  |Mesh:setVertex|( `index`, `vertex` )

        The table indices are in the same order as the vertex attributes in the Mesh's vertex format. A standard Mesh that wasn't created with a custom vertex format will use two position numbers, two texture coordinate numbers, and four color components per vertex: x, y, u, v, r, g, b, a.

If no value is supplied for a specific vertex attribute component, it will be set to a default value of 0 if its data type is 'float', or 1 if its data type is 'byte'.

        returns:

            None

        arguments:

            `index`: |lrv-number|

                The index of the the vertex you want to modify (one-based).

            `vertex`: |lrv-table|

                A table with vertex information, in the form of
                {attributecomponent, ...}.

                `attributecomponent`: |lrv-number|

                    The first component of the first vertex attribute in the
                    specified vertex.

                `...`: |lrv-number|

                    Additional components of all vertex attributes in the
                    specified vertex.
    3.  |Mesh:setVertex|( `index`, `x`, `y`, `u`, `v`, `r`, `g`, `b`,
        `a` )

        Sets the vertex components of a Mesh that wasn't created with a custom vertex format.

        returns:

            None

        arguments:

            `index`: |lrv-number|

                The index of the the vertex you want to modify (one-based).

            `x`: |lrv-number|

                The position of the vertex on the x-axis.

            `y`: |lrv-number|

                The position of the vertex on the y-axis.

            `u`: |lrv-number|

                The horizontal component of the texture coordinate.

            `v`: |lrv-number|

                The vertical component of the texture coordinate.

            `r`: |lrv-number|

                The red component of the vertex's color.

            `g`: |lrv-number|

                The green component of the vertex's color.

            `b`: |lrv-number|

                The blue component of the vertex's color.

            `a`: |lrv-number|

                The alpha component of the vertex's color.
    4.  |Mesh:setVertex|( `index`, `vertex` )

        Sets the vertex components of a Mesh that wasn't created with a custom vertex format.

        returns:

            None

        arguments:

            `index`: |lrv-number|

                The index of the the vertex you want to modify (one-based).

            `vertex`: |lrv-table|

                A table with vertex information.

                `1`: |lrv-number|

                    The position of the vertex on the x-axis.

                `2`: |lrv-number|

                    The position of the vertex on the y-axis.

                `3`: |lrv-number|

                    The u texture coordinate. Texture coordinates are normally
                    in the range of 1, but can be greater or less (see
                    WrapMode.)

                `4`: |lrv-number|

                    The v texture coordinate. Texture coordinates are normally
                    in the range of 1, but can be greater or less (see
                    WrapMode.)

                `5`: |lrv-number|

                    The red color component.

                `6`: |lrv-number|

                    The green color component.

                `7`: |lrv-number|

                    The blue color component.

                `8`: |lrv-number|

                    The alpha color component.

-------------------------------------------------------------------------------
                                                 *love-Mesh:setVertexAttribute*
|Mesh:setVertexAttribute|

Sets the properties of a specific attribute within a vertex in the Mesh.

Meshes without a custom vertex format specified in love.graphics.newMesh have
position as their first attribute, texture coordinates as their second
attribute, and color as their third attribute.

Synopses:

    1.  |Mesh:setVertexAttribute|( `vertexindex`, `attributeindex`,
        `value1`, `value2`, `...` )

Variants:

    1.  |Mesh:setVertexAttribute|( `vertexindex`, `attributeindex`,
        `value1`, `value2`, `...` )

        Attribute components which exist within the attribute but are not specified as arguments default to 0 for attributes with the float data type, and 255 for the byte data type.

        returns:

            None

        arguments:

            `vertexindex`: |lrv-number|

                The index of the the vertex to be modified (one-based).

            `attributeindex`: |lrv-number|

                The index of the attribute within the vertex to be modified
                (one-based).

            `value1`: |lrv-number|

                The new value for the first component of the attribute.

            `value2`: |lrv-number|

                The new value for the second component of the attribute.

            `...`: |lrv-number|

                Any additional vertex attribute components.

-------------------------------------------------------------------------------
                                                       *love-Mesh:setVertexMap*
|Mesh:setVertexMap|

Sets the vertex map for the Mesh. The vertex map describes the order in which
the vertices are used when the Mesh is drawn. The vertices, vertex map, and
mesh draw mode work together to determine what exactly is displayed on the
screen.

The vertex map allows you to re-order or reuse vertices when drawing without
changing the actual vertex parameters or duplicating vertices. It is especially
useful when combined with different Mesh Draw Modes.

Synopses:

    1.  |Mesh:setVertexMap|( `map` )
    2.  |Mesh:setVertexMap|( `vi1`, `vi2`, `vi3` )
    3.  |Mesh:setVertexMap|( `data`, `datatype` )

Variants:

    1.  |Mesh:setVertexMap|( `map` )

        See function description

        returns:

            None

        arguments:

            `map`: |lrv-table|

                A table containing a list of vertex indices to use when
                drawing. Values must be in the range of Mesh:getVertexCount().
    2.  |Mesh:setVertexMap|( `vi1`, `vi2`, `vi3` )

        See function description

        returns:

            None

        arguments:

            `vi1`: |lrv-number|

                The index of the first vertex to use when drawing. Must be in
                the range of Mesh:getVertexCount().

            `vi2`: |lrv-number|

                The index of the second vertex to use when drawing.

            `vi3`: |lrv-number|

                The index of the third vertex to use when drawing.
    3.  |Mesh:setVertexMap|( `data`, `datatype` )

        See function description

        returns:

            None

        arguments:

            `data`: |love-Data|

                Array of vertex indices to use when drawing. Values must be in
                the range of Mesh:getVertexCount()-1

            `datatype`: <IndexDataType>

                Datatype of the vertex indices array above.

-------------------------------------------------------------------------------
                                                        *love-Mesh:setVertices*
|Mesh:setVertices|

Replaces a range of vertices in the Mesh with new ones. The total number of
vertices in a Mesh cannot be changed after it has been created. This is often
more efficient than calling Mesh:setVertex in a loop.

Synopses:

    1.  |Mesh:setVertices|( `vertices`, `startvertex` )
    2.  |Mesh:setVertices|( `data`, `startvertex` )
    3.  |Mesh:setVertices|( `vertices` )

Variants:

    1.  |Mesh:setVertices|( `vertices`, `startvertex` )

        The values in each vertex table are in the same order as the vertex attributes in the Mesh's vertex format. A standard Mesh that wasn't created with a custom vertex format will use two position numbers, two texture coordinate numbers, and four color components per vertex: x, y, u, v, r, g, b, a.

If no value is supplied for a specific vertex attribute component, it will be set to a default value of 0 if its data type is 'float', or 255 if its data type is 'byte'.

        returns:

            None

        arguments:

            `vertices`: |lrv-table|

                The table filled with vertex information tables for each
                vertex, in the form of {vertex, ...} where each vertex is a
                table in the form of {attributecomponent, ...}.

                `attributecomponent`: |lrv-number|

                    The first component of the first vertex attribute in the
                    vertex.

                `...`: |lrv-number|

                    Additional components of all vertex attributes in the
                    vertex.

            `startvertex`: |lrv-number|

                The index of the first vertex to replace.
    2.  |Mesh:setVertices|( `data`, `startvertex` )

        Sets the vertex components of the Mesh by copying directly from the memory of a Data object.

If LuaJIT's FFI is used to populate the Data object via Data:getPointer and ffi.cast, this variant can be drastically more efficient than other methods of setting Mesh vertex data.

        returns:

            None

        arguments:

            `data`: |love-Data|

                A Data object to copy from. The contents of the Data must match
                the layout of this Mesh's vertex format.

            `startvertex`: |lrv-number|

                The index of the first vertex to replace.
    3.  |Mesh:setVertices|( `vertices` )

        Sets the vertex components of a Mesh that wasn't created with a custom vertex format.

        returns:

            None

        arguments:

            `vertices`: |lrv-table|

                The table filled with vertex information tables for each vertex
                as follows:

                `1`: |lrv-number|

                    The position of the vertex on the x-axis.

                `2`: |lrv-number|

                    The position of the vertex on the y-axis.

                `3`: |lrv-number|

                    The horizontal component of the texture coordinate. Texture
                    coordinates are normally in the range of 1, but can be
                    greater or less (see WrapMode).

                `4`: |lrv-number|

                    The vertical component of the texture coordinate. Texture
                    coordinates are normally in the range of 1, but can be
                    greater or less (see WrapMode).

                `5`: |lrv-number|

                    The red color component.

                `6`: |lrv-number|

                    The green color component.

                `7`: |lrv-number|

                    The blue color component.

                `8`: |lrv-number|

                    The alpha color component.

-------------------------------------------------------------------------------
                                                          *love-ParticleSystem*
|ParticleSystem|

A ParticleSystem can be used to create particle effects like fire or smoke.

The particle system has to be created using update it in the update callback to
see any changes in the particles emitted.

The particle system won't create any particles unless you call
setParticleLifetime and setEmissionRate.

                                             *love-ParticleSystem-constructors*
    constructors:

        None

                                               *love-ParticleSystem-supertypes*
    supertypes:

        |Drawable|                        |love-Drawable|
        |Object|                          |love-Object|

                                                 *love-ParticleSystem-subtypes*
    subtypes:

        None

                                                *love-ParticleSystem-functions*
    functions:

        |clone|                           |love-ParticleSystem:clone|
        |emit|                            |love-ParticleSystem:emit|
        |getBufferSize|                   |love-ParticleSystem:getBufferSize|
        |getColors|                       |love-ParticleSystem:getColors|
        |getCount|                        |love-ParticleSystem:getCount|
        |getDirection|                    |love-ParticleSystem:getDirection|
        |getEmissionArea|                 |love-ParticleSystem:getEmissionArea|
        |getEmissionRate|                 |love-ParticleSystem:getEmissionRate|
        |getEmitterLifetime|              |love-ParticleSystem:getEmitterLife-|
        |getInsertMode|                   |love-ParticleSystem:getInsertMode|
        |getLinearAcceleration|           |love-ParticleSystem:getLinearAccel-|
        |getLinearDamping|                |love-ParticleSystem:getLinearDampi-|
        |getOffset|                       |love-ParticleSystem:getOffset|
        |getParticleLifetime|             |love-ParticleSystem:getParticleLif-|
        |getPosition|                     |love-ParticleSystem:getPosition|
        |getQuads|                        |love-ParticleSystem:getQuads|
        |getRadialAcceleration|           |love-ParticleSystem:getRadialAccel-|
        |getRotation|                     |love-ParticleSystem:getRotation|
        |getSizeVariation|                |love-ParticleSystem:getSizeVariati-|
        |getSizes|                        |love-ParticleSystem:getSizes|
        |getSpeed|                        |love-ParticleSystem:getSpeed|
        |getSpin|                         |love-ParticleSystem:getSpin|
        |getSpinVariation|                |love-ParticleSystem:getSpinVariati-|
        |getSpread|                       |love-ParticleSystem:getSpread|
        |getTangentialAcceleration|       |love-ParticleSystem:getTangentialA-|
        |getTexture|                      |love-ParticleSystem:getTexture|
        |hasRelativeRotation|             |love-ParticleSystem:hasRelativeRot-|
        |isActive|                        |love-ParticleSystem:isActive|
        |isPaused|                        |love-ParticleSystem:isPaused|
        |isStopped|                       |love-ParticleSystem:isStopped|
        |moveTo|                          |love-ParticleSystem:moveTo|
        |pause|                           |love-ParticleSystem:pause|
        |reset|                           |love-ParticleSystem:reset|
        |setBufferSize|                   |love-ParticleSystem:setBufferSize|
        |setColors|                       |love-ParticleSystem:setColors|
        |setDirection|                    |love-ParticleSystem:setDirection|
        |setEmissionArea|                 |love-ParticleSystem:setEmissionArea|
        |setEmissionRate|                 |love-ParticleSystem:setEmissionRate|
        |setEmitterLifetime|              |love-ParticleSystem:setEmitterLife-|
        |setInsertMode|                   |love-ParticleSystem:setInsertMode|
        |setLinearAcceleration|           |love-ParticleSystem:setLinearAccel-|
        |setLinearDamping|                |love-ParticleSystem:setLinearDampi-|
        |setOffset|                       |love-ParticleSystem:setOffset|
        |setParticleLifetime|             |love-ParticleSystem:setParticleLif-|
        |setPosition|                     |love-ParticleSystem:setPosition|
        |setQuads|                        |love-ParticleSystem:setQuads|
        |setRadialAcceleration|           |love-ParticleSystem:setRadialAccel-|
        |setRelativeRotation|             |love-ParticleSystem:setRelativeRot-|
        |setRotation|                     |love-ParticleSystem:setRotation|
        |setSizeVariation|                |love-ParticleSystem:setSizeVariati-|
        |setSizes|                        |love-ParticleSystem:setSizes|
        |setSpeed|                        |love-ParticleSystem:setSpeed|
        |setSpin|                         |love-ParticleSystem:setSpin|
        |setSpinVariation|                |love-ParticleSystem:setSpinVariati-|
        |setSpread|                       |love-ParticleSystem:setSpread|
        |setTangentialAcceleration|       |love-ParticleSystem:setTangentialA-|
        |setTexture|                      |love-ParticleSystem:setTexture|
        |start|                           |love-ParticleSystem:start|
        |stop|                            |love-ParticleSystem:stop|
        |update|                          |love-ParticleSystem:update|

-------------------------------------------------------------------------------
                                                    *love-ParticleSystem:clone*
|ParticleSystem:clone|

Creates an identical copy of the ParticleSystem in the stopped state.

Synopses:

    1.  `particlesystem` = |ParticleSystem:clone|()

Variants:

    1.  `particlesystem` = |ParticleSystem:clone|()

        Cloned ParticleSystem inherit all the set-able state of the original ParticleSystem, but they are initialized stopped.

        returns:

            `particlesystem`: |love-ParticleSystem|

                The new identical copy of this ParticleSystem.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-ParticleSystem:emit*
|ParticleSystem:emit|

Emits a burst of particles from the particle emitter.

Synopses:

    1.  |ParticleSystem:emit|( `numparticles` )

Variants:

    1.  |ParticleSystem:emit|( `numparticles` )

        See function description

        returns:

            None

        arguments:

            `numparticles`: |lrv-number|

                The amount of particles to emit. The number of emitted
                particles will be truncated if the particle system's max buffer
                size is reached.

-------------------------------------------------------------------------------
                                            *love-ParticleSystem:getBufferSize*
|ParticleSystem:getBufferSize|

Gets the maximum number of particles the ParticleSystem can have at once.

Synopses:

    1.  `size` = |ParticleSystem:getBufferSize|()

Variants:

    1.  `size` = |ParticleSystem:getBufferSize|()

        See function description

        returns:

            `size`: |lrv-number|

                The maximum number of particles.

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-ParticleSystem:getColors*
|ParticleSystem:getColors|

Gets the series of colors applied to the particle sprite.

In versions prior to 11.0, color component values were within the range of 0 to
255 instead of 0 to 1.

Synopses:

    1.  `r1`, `g1`, `b1`, `a1`, `r2`, `g2`, `b2`, `a2`, `r8`, `g8`,
        `b8`, `a8` = |ParticleSystem:getColors|()

Variants:

    1.  `r1`, `g1`, `b1`, `a1`, `r2`, `g2`, `b2`, `a2`, `r8`, `g8`,
        `b8`, `a8` = |ParticleSystem:getColors|()

        See function description

        returns:

            `r1`: |lrv-number|

                First color, red component (0-1).

            `g1`: |lrv-number|

                First color, green component (0-1).

            `b1`: |lrv-number|

                First color, blue component (0-1).

            `a1`: |lrv-number|

                First color, alpha component (0-1).

            `r2`: |lrv-number|

                Second color, red component (0-1).

            `g2`: |lrv-number|

                Second color, green component (0-1).

            `b2`: |lrv-number|

                Second color, blue component (0-1).

            `a2`: |lrv-number|

                Second color, alpha component (0-1).

            `r8`: |lrv-number|

                Eighth color, red component (0-1).

            `g8`: |lrv-number|

                Eighth color, green component (0-1).

            `b8`: |lrv-number|

                Eighth color, blue component (0-1).

            `a8`: |lrv-number|

                Eighth color, alpha component (0-1).

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-ParticleSystem:getCount*
|ParticleSystem:getCount|

Gets the number of particles that are currently in the system.

Synopses:

    1.  `count` = |ParticleSystem:getCount|()

Variants:

    1.  `count` = |ParticleSystem:getCount|()

        See function description

        returns:

            `count`: |lrv-number|

                The current number of live particles.

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-ParticleSystem:getDirection*
|ParticleSystem:getDirection|

Gets the direction of the particle emitter (in radians).

Synopses:

    1.  `direction` = |ParticleSystem:getDirection|()

Variants:

    1.  `direction` = |ParticleSystem:getDirection|()

        See function description

        returns:

            `direction`: |lrv-number|

                The direction of the emitter (radians).

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-ParticleSystem:getEmissionArea*
|ParticleSystem:getEmissionArea|

Gets the area-based spawn parameters for the particles.

Synopses:

    1.  `distribution`, `dx`, `dy`, `angle`,
        `directionRelativeToCenter` = |ParticleSystem:getEmissionArea|()

Variants:

    1.  `distribution`, `dx`, `dy`, `angle`,
        `directionRelativeToCenter` = |ParticleSystem:getEmissionArea|()

        See function description

        returns:

            `distribution`: |love-AreaSpreadDistribution|

                The type of distribution for new particles.

            `dx`: |lrv-number|

                The maximum spawn distance from the emitter along the x-axis
                for uniform distribution, or the standard deviation along the
                x-axis for normal distribution.

            `dy`: |lrv-number|

                The maximum spawn distance from the emitter along the y-axis
                for uniform distribution, or the standard deviation along the
                y-axis for normal distribution.

            `angle`: |lrv-number|

                The angle in radians of the emission area.

            `directionRelativeToCenter`: |lrv-boolean|

                True if newly spawned particles will be oriented relative to
                the center of the emission area, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-ParticleSystem:getEmissionRate*
|ParticleSystem:getEmissionRate|

Gets the amount of particles emitted per second.

Synopses:

    1.  `rate` = |ParticleSystem:getEmissionRate|()

Variants:

    1.  `rate` = |ParticleSystem:getEmissionRate|()

        See function description

        returns:

            `rate`: |lrv-number|

                The amount of particles per second.

        arguments:

            None

-------------------------------------------------------------------------------
                                       *love-ParticleSystem:getEmitterLifetime*
|ParticleSystem:getEmitterLifetime|

Gets how long the particle system will emit particles (if -1 then it emits
particles forever).

Synopses:

    1.  `life` = |ParticleSystem:getEmitterLifetime|()

Variants:

    1.  `life` = |ParticleSystem:getEmitterLifetime|()

        See function description

        returns:

            `life`: |lrv-number|

                The lifetime of the emitter (in seconds).

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-ParticleSystem:getInsertMode*
|ParticleSystem:getInsertMode|

Gets the mode used when the ParticleSystem adds new particles.

Synopses:

    1.  `mode` = |ParticleSystem:getInsertMode|()

Variants:

    1.  `mode` = |ParticleSystem:getInsertMode|()

        See function description

        returns:

            `mode`: |love-ParticleInsertMode|

                The mode used when the ParticleSystem adds new particles.

        arguments:

            None

-------------------------------------------------------------------------------
                                    *love-ParticleSystem:getLinearAcceleration*
|ParticleSystem:getLinearAcceleration|

Gets the linear acceleration (acceleration along the x and y axes) for
particles.

Every particle created will accelerate along the x and y axes between xmin,ymin
and xmax,ymax.

Synopses:

    1.  `xmin`, `ymin`, `xmax`, `ymax` =
        |ParticleSystem:getLinearAcceleration|()

Variants:

    1.  `xmin`, `ymin`, `xmax`, `ymax` =
        |ParticleSystem:getLinearAcceleration|()

        See function description

        returns:

            `xmin`: |lrv-number|

                The minimum acceleration along the x axis.

            `ymin`: |lrv-number|

                The minimum acceleration along the y axis.

            `xmax`: |lrv-number|

                The maximum acceleration along the x axis.

            `ymax`: |lrv-number|

                The maximum acceleration along the y axis.

        arguments:

            None

-------------------------------------------------------------------------------
                                         *love-ParticleSystem:getLinearDamping*
|ParticleSystem:getLinearDamping|

Gets the amount of linear damping (constant deceleration) for particles.

Synopses:

    1.  `min`, `max` = |ParticleSystem:getLinearDamping|()

Variants:

    1.  `min`, `max` = |ParticleSystem:getLinearDamping|()

        See function description

        returns:

            `min`: |lrv-number|

                The minimum amount of linear damping applied to particles.

            `max`: |lrv-number|

                The maximum amount of linear damping applied to particles.

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-ParticleSystem:getOffset*
|ParticleSystem:getOffset|

Gets the particle image's draw offset.

Synopses:

    1.  `ox`, `oy` = |ParticleSystem:getOffset|()

Variants:

    1.  `ox`, `oy` = |ParticleSystem:getOffset|()

        See function description

        returns:

            `ox`: |lrv-number|

                The x coordinate of the particle image's draw offset.

            `oy`: |lrv-number|

                The y coordinate of the particle image's draw offset.

        arguments:

            None

-------------------------------------------------------------------------------
                                      *love-ParticleSystem:getParticleLifetime*
|ParticleSystem:getParticleLifetime|

Gets the lifetime of the particles.

Synopses:

    1.  `min`, `max` = |ParticleSystem:getParticleLifetime|()

Variants:

    1.  `min`, `max` = |ParticleSystem:getParticleLifetime|()

        See function description

        returns:

            `min`: |lrv-number|

                The minimum life of the particles (in seconds).

            `max`: |lrv-number|

                The maximum life of the particles (in seconds).

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-ParticleSystem:getPosition*
|ParticleSystem:getPosition|

Gets the position of the emitter.

Synopses:

    1.  `x`, `y` = |ParticleSystem:getPosition|()

Variants:

    1.  `x`, `y` = |ParticleSystem:getPosition|()

        See function description

        returns:

            `x`: |lrv-number|

                Position along x-axis.

            `y`: |lrv-number|

                Position along y-axis.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-ParticleSystem:getQuads*
|ParticleSystem:getQuads|

Gets the series of Quads used for the particle sprites.

Synopses:

    1.  `quads` = |ParticleSystem:getQuads|()

Variants:

    1.  `quads` = |ParticleSystem:getQuads|()

        See function description

        returns:

            `quads`: |lrv-table|

                A table containing the Quads used.

        arguments:

            None

-------------------------------------------------------------------------------
                                    *love-ParticleSystem:getRadialAcceleration*
|ParticleSystem:getRadialAcceleration|

Gets the radial acceleration (away from the emitter).

Synopses:

    1.  `min`, `max` = |ParticleSystem:getRadialAcceleration|()

Variants:

    1.  `min`, `max` = |ParticleSystem:getRadialAcceleration|()

        See function description

        returns:

            `min`: |lrv-number|

                The minimum acceleration.

            `max`: |lrv-number|

                The maximum acceleration.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-ParticleSystem:getRotation*
|ParticleSystem:getRotation|

Gets the rotation of the image upon particle creation (in radians).

Synopses:

    1.  `min`, `max` = |ParticleSystem:getRotation|()

Variants:

    1.  `min`, `max` = |ParticleSystem:getRotation|()

        See function description

        returns:

            `min`: |lrv-number|

                The minimum initial angle (radians).

            `max`: |lrv-number|

                The maximum initial angle (radians).

        arguments:

            None

-------------------------------------------------------------------------------
                                         *love-ParticleSystem:getSizeVariation*
|ParticleSystem:getSizeVariation|

Gets the amount of size variation (0 meaning no variation and 1 meaning full
variation between start and end).

Synopses:

    1.  `variation` = |ParticleSystem:getSizeVariation|()

Variants:

    1.  `variation` = |ParticleSystem:getSizeVariation|()

        See function description

        returns:

            `variation`: |lrv-number|

                The amount of variation (0 meaning no variation and 1 meaning
                full variation between start and end).

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-ParticleSystem:getSizes*
|ParticleSystem:getSizes|

Gets the series of sizes by which the sprite is scaled. 1.0 is normal size. The
particle system will interpolate between each size evenly over the particle's
lifetime.

Synopses:

    1.  `size1`, `size2`, `size8` = |ParticleSystem:getSizes|()

Variants:

    1.  `size1`, `size2`, `size8` = |ParticleSystem:getSizes|()

        See function description

        returns:

            `size1`: |lrv-number|

                The first size.

            `size2`: |lrv-number|

                The second size.

            `size8`: |lrv-number|

                The eighth size.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-ParticleSystem:getSpeed*
|ParticleSystem:getSpeed|

Gets the speed of the particles.

Synopses:

    1.  `min`, `max` = |ParticleSystem:getSpeed|()

Variants:

    1.  `min`, `max` = |ParticleSystem:getSpeed|()

        See function description

        returns:

            `min`: |lrv-number|

                The minimum linear speed of the particles.

            `max`: |lrv-number|

                The maximum linear speed of the particles.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-ParticleSystem:getSpin*
|ParticleSystem:getSpin|

Gets the spin of the sprite.

Synopses:

    1.  `min`, `max`, `variation` = |ParticleSystem:getSpin|()

Variants:

    1.  `min`, `max`, `variation` = |ParticleSystem:getSpin|()

        See function description

        returns:

            `min`: |lrv-number|

                The minimum spin (radians per second).

            `max`: |lrv-number|

                The maximum spin (radians per second).

            `variation`: |lrv-number|

                The degree of variation (0 meaning no variation and 1 meaning
                full variation between start and end).

        arguments:

            None

-------------------------------------------------------------------------------
                                         *love-ParticleSystem:getSpinVariation*
|ParticleSystem:getSpinVariation|

Gets the amount of spin variation (0 meaning no variation and 1 meaning full
variation between start and end).

Synopses:

    1.  `variation` = |ParticleSystem:getSpinVariation|()

Variants:

    1.  `variation` = |ParticleSystem:getSpinVariation|()

        See function description

        returns:

            `variation`: |lrv-number|

                The amount of variation (0 meaning no variation and 1 meaning
                full variation between start and end).

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-ParticleSystem:getSpread*
|ParticleSystem:getSpread|

Gets the amount of directional spread of the particle emitter (in radians).

Synopses:

    1.  `spread` = |ParticleSystem:getSpread|()

Variants:

    1.  `spread` = |ParticleSystem:getSpread|()

        See function description

        returns:

            `spread`: |lrv-number|

                The spread of the emitter (radians).

        arguments:

            None

-------------------------------------------------------------------------------
                                *love-ParticleSystem:getTangentialAcceleration*
|ParticleSystem:getTangentialAcceleration|

Gets the tangential acceleration (acceleration perpendicular to the particle's
direction).

Synopses:

    1.  `min`, `max` = |ParticleSystem:getTangentialAcceleration|()

Variants:

    1.  `min`, `max` = |ParticleSystem:getTangentialAcceleration|()

        See function description

        returns:

            `min`: |lrv-number|

                The minimum acceleration.

            `max`: |lrv-number|

                The maximum acceleration.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-ParticleSystem:getTexture*
|ParticleSystem:getTexture|

Gets the texture (Image or Canvas) used for the particles.

Synopses:

    1.  `texture` = |ParticleSystem:getTexture|()

Variants:

    1.  `texture` = |ParticleSystem:getTexture|()

        See function description

        returns:

            `texture`: |love-Texture|

                The Image or Canvas used for the particles.

        arguments:

            None

-------------------------------------------------------------------------------
                                      *love-ParticleSystem:hasRelativeRotation*
|ParticleSystem:hasRelativeRotation|

Gets whether particle angles and rotations are relative to their velocities. If
enabled, particles are aligned to the angle of their velocities and rotate
relative to that angle.

Synopses:

    1.  `enable` = |ParticleSystem:hasRelativeRotation|()

Variants:

    1.  `enable` = |ParticleSystem:hasRelativeRotation|()

        See function description

        returns:

            `enable`: |lrv-boolean|

                True if relative particle rotation is enabled, false if it's
                disabled.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-ParticleSystem:isActive*
|ParticleSystem:isActive|

Checks whether the particle system is actively emitting particles.

Synopses:

    1.  `active` = |ParticleSystem:isActive|()

Variants:

    1.  `active` = |ParticleSystem:isActive|()

        See function description

        returns:

            `active`: |lrv-boolean|

                True if system is active, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-ParticleSystem:isPaused*
|ParticleSystem:isPaused|

Checks whether the particle system is paused.

Synopses:

    1.  `paused` = |ParticleSystem:isPaused|()

Variants:

    1.  `paused` = |ParticleSystem:isPaused|()

        See function description

        returns:

            `paused`: |lrv-boolean|

                True if system is paused, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-ParticleSystem:isStopped*
|ParticleSystem:isStopped|

Checks whether the particle system is stopped.

Synopses:

    1.  `stopped` = |ParticleSystem:isStopped|()

Variants:

    1.  `stopped` = |ParticleSystem:isStopped|()

        See function description

        returns:

            `stopped`: |lrv-boolean|

                True if system is stopped, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-ParticleSystem:moveTo*
|ParticleSystem:moveTo|

Moves the position of the emitter. This results in smoother particle spawning
behaviour than if ParticleSystem:setPosition is used every frame.

Synopses:

    1.  |ParticleSystem:moveTo|( `x`, `y` )

Variants:

    1.  |ParticleSystem:moveTo|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                Position along x-axis.

            `y`: |lrv-number|

                Position along y-axis.

-------------------------------------------------------------------------------
                                                    *love-ParticleSystem:pause*
|ParticleSystem:pause|

Pauses the particle emitter.

Synopses:

    1.  |ParticleSystem:pause|()

Variants:

    1.  |ParticleSystem:pause|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-ParticleSystem:reset*
|ParticleSystem:reset|

Resets the particle emitter, removing any existing particles and resetting the
lifetime counter.

Synopses:

    1.  |ParticleSystem:reset|()

Variants:

    1.  |ParticleSystem:reset|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-ParticleSystem:setBufferSize*
|ParticleSystem:setBufferSize|

Sets the size of the buffer (the max allowed amount of particles in the
system).

Synopses:

    1.  |ParticleSystem:setBufferSize|( `size` )

Variants:

    1.  |ParticleSystem:setBufferSize|( `size` )

        See function description

        returns:

            None

        arguments:

            `size`: |lrv-number|

                The buffer size.

-------------------------------------------------------------------------------
                                                *love-ParticleSystem:setColors*
|ParticleSystem:setColors|

Sets a series of colors to apply to the particle sprite. The particle system
will interpolate between each color evenly over the particle's lifetime.

Arguments can be passed in groups of four, representing the components of the
desired RGBA value, or as tables of RGBA component values, with a default alpha
value of 1 if only three values are given. At least one color must be
specified. A maximum of eight may be used.

In versions prior to 11.0, color component values were within the range of 0 to
255 instead of 0 to 1.

Synopses:

    1.  |ParticleSystem:setColors|( `r1`, `g1`, `b1`, `a1`, `r2`, `g2`,
        `b2`, `a2`, `r8`, `g8`, `b8`, `a8` )

Variants:

    1.  |ParticleSystem:setColors|( `r1`, `g1`, `b1`, `a1`, `r2`, `g2`,
        `b2`, `a2`, `r8`, `g8`, `b8`, `a8` )

        See function description

        returns:

            None

        arguments:

            `r1`: |lrv-number|

                First color, red component (0-1).

            `g1`: |lrv-number|

                First color, green component (0-1).

            `b1`: |lrv-number|

                First color, blue component (0-1).

            `a1`: |lrv-number|

                First color, alpha component (0-1).

            `r2`: |lrv-number|

                Second color, red component (0-1).

            `g2`: |lrv-number|

                Second color, green component (0-1).

            `b2`: |lrv-number|

                Second color, blue component (0-1).

            `a2`: |lrv-number|

                Second color, alpha component (0-1).

            `r8`: |lrv-number|

                Eighth color, red component (0-1).

            `g8`: |lrv-number|

                Eighth color, green component (0-1).

            `b8`: |lrv-number|

                Eighth color, blue component (0-1).

            `a8`: |lrv-number|

                Eighth color, alpha component (0-1).

-------------------------------------------------------------------------------
                                             *love-ParticleSystem:setDirection*
|ParticleSystem:setDirection|

Sets the direction the particles will be emitted in.

Synopses:

    1.  |ParticleSystem:setDirection|( `direction` )

Variants:

    1.  |ParticleSystem:setDirection|( `direction` )

        See function description

        returns:

            None

        arguments:

            `direction`: |lrv-number|

                The direction of the particles (in radians).

-------------------------------------------------------------------------------
                                          *love-ParticleSystem:setEmissionArea*
|ParticleSystem:setEmissionArea|

Sets area-based spawn parameters for the particles. Newly created particles
will spawn in an area around the emitter based on the parameters to this
function.

Synopses:

    1.  |ParticleSystem:setEmissionArea|( `distribution`, `dx`, `dy`,
        `angle`, `directionRelativeToCenter` )

Variants:

    1.  |ParticleSystem:setEmissionArea|( `distribution`, `dx`, `dy`,
        `angle`, `directionRelativeToCenter` )

        See function description

        returns:

            None

        arguments:

            `distribution`: |love-AreaSpreadDistribution|

                The type of distribution for new particles.

            `dx`: |lrv-number|

                The maximum spawn distance from the emitter along the x-axis
                for uniform distribution, or the standard deviation along the
                x-axis for normal distribution.

            `dy`: |lrv-number|

                The maximum spawn distance from the emitter along the y-axis
                for uniform distribution, or the standard deviation along the
                y-axis for normal distribution.

            `angle`: |lrv-number|

                The angle in radians of the emission area.

            `directionRelativeToCenter`: |lrv-boolean|

                True if newly spawned particles will be oriented relative to
                the center of the emission area, false otherwise.

-------------------------------------------------------------------------------
                                          *love-ParticleSystem:setEmissionRate*
|ParticleSystem:setEmissionRate|

Sets the amount of particles emitted per second.

Synopses:

    1.  |ParticleSystem:setEmissionRate|( `rate` )

Variants:

    1.  |ParticleSystem:setEmissionRate|( `rate` )

        See function description

        returns:

            None

        arguments:

            `rate`: |lrv-number|

                The amount of particles per second.

-------------------------------------------------------------------------------
                                       *love-ParticleSystem:setEmitterLifetime*
|ParticleSystem:setEmitterLifetime|

Sets how long the particle system should emit particles (if -1 then it emits
particles forever).

Synopses:

    1.  |ParticleSystem:setEmitterLifetime|( `life` )

Variants:

    1.  |ParticleSystem:setEmitterLifetime|( `life` )

        See function description

        returns:

            None

        arguments:

            `life`: |lrv-number|

                The lifetime of the emitter (in seconds).

-------------------------------------------------------------------------------
                                            *love-ParticleSystem:setInsertMode*
|ParticleSystem:setInsertMode|

Sets the mode to use when the ParticleSystem adds new particles.

Synopses:

    1.  |ParticleSystem:setInsertMode|( `mode` )

Variants:

    1.  |ParticleSystem:setInsertMode|( `mode` )

        See function description

        returns:

            None

        arguments:

            `mode`: |love-ParticleInsertMode|

                The mode to use when the ParticleSystem adds new particles.

-------------------------------------------------------------------------------
                                    *love-ParticleSystem:setLinearAcceleration*
|ParticleSystem:setLinearAcceleration|

Sets the linear acceleration (acceleration along the x and y axes) for
particles.

Every particle created will accelerate along the x and y axes between xmin,ymin
and xmax,ymax.

Synopses:

    1.  |ParticleSystem:setLinearAcceleration|( `xmin`, `ymin`, `xmax`,
        `ymax` )

Variants:

    1.  |ParticleSystem:setLinearAcceleration|( `xmin`, `ymin`, `xmax`,
        `ymax` )

        See function description

        returns:

            None

        arguments:

            `xmin`: |lrv-number|

                The minimum acceleration along the x axis.

            `ymin`: |lrv-number|

                The minimum acceleration along the y axis.

            `xmax`: |lrv-number|

                The maximum acceleration along the x axis.

            `ymax`: |lrv-number|

                The maximum acceleration along the y axis.

-------------------------------------------------------------------------------
                                         *love-ParticleSystem:setLinearDamping*
|ParticleSystem:setLinearDamping|

Sets the amount of linear damping (constant deceleration) for particles.

Synopses:

    1.  |ParticleSystem:setLinearDamping|( `min`, `max` )

Variants:

    1.  |ParticleSystem:setLinearDamping|( `min`, `max` )

        See function description

        returns:

            None

        arguments:

            `min`: |lrv-number|

                The minimum amount of linear damping applied to particles.

            `max`: |lrv-number|

                The maximum amount of linear damping applied to particles.

-------------------------------------------------------------------------------
                                                *love-ParticleSystem:setOffset*
|ParticleSystem:setOffset|

Set the offset position which the particle sprite is rotated around.

If this function is not used, the particles rotate around their center.

Synopses:

    1.  |ParticleSystem:setOffset|( `x`, `y` )

Variants:

    1.  |ParticleSystem:setOffset|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The x coordinate of the rotation offset.

            `y`: |lrv-number|

                The y coordinate of the rotation offset.

-------------------------------------------------------------------------------
                                      *love-ParticleSystem:setParticleLifetime*
|ParticleSystem:setParticleLifetime|

Sets the lifetime of the particles.

Synopses:

    1.  |ParticleSystem:setParticleLifetime|( `min`, `max` )

Variants:

    1.  |ParticleSystem:setParticleLifetime|( `min`, `max` )

        See function description

        returns:

            None

        arguments:

            `min`: |lrv-number|

                The minimum life of the particles (in seconds).

            `max`: |lrv-number|

                The maximum life of the particles (in seconds).

-------------------------------------------------------------------------------
                                              *love-ParticleSystem:setPosition*
|ParticleSystem:setPosition|

Sets the position of the emitter.

Synopses:

    1.  |ParticleSystem:setPosition|( `x`, `y` )

Variants:

    1.  |ParticleSystem:setPosition|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                Position along x-axis.

            `y`: |lrv-number|

                Position along y-axis.

-------------------------------------------------------------------------------
                                                 *love-ParticleSystem:setQuads*
|ParticleSystem:setQuads|

Sets a series of Quads to use for the particle sprites. Particles will choose a
Quad from the list based on the particle's current lifetime, allowing for the
use of animated sprite sheets with ParticleSystems.

Synopses:

    1.  |ParticleSystem:setQuads|( `quad1`, `quad2` )
    2.  |ParticleSystem:setQuads|( `quads` )

Variants:

    1.  |ParticleSystem:setQuads|( `quad1`, `quad2` )

        See function description

        returns:

            None

        arguments:

            `quad1`: |love-Quad|

                The first Quad to use.

            `quad2`: |love-Quad|

                The second Quad to use.
    2.  |ParticleSystem:setQuads|( `quads` )

        See function description

        returns:

            None

        arguments:

            `quads`: |lrv-table|

                A table containing the Quads to use.

-------------------------------------------------------------------------------
                                    *love-ParticleSystem:setRadialAcceleration*
|ParticleSystem:setRadialAcceleration|

Set the radial acceleration (away from the emitter).

Synopses:

    1.  |ParticleSystem:setRadialAcceleration|( `min`, `max` )

Variants:

    1.  |ParticleSystem:setRadialAcceleration|( `min`, `max` )

        See function description

        returns:

            None

        arguments:

            `min`: |lrv-number|

                The minimum acceleration.

            `max`: |lrv-number|

                The maximum acceleration.

-------------------------------------------------------------------------------
                                      *love-ParticleSystem:setRelativeRotation*
|ParticleSystem:setRelativeRotation|

Sets whether particle angles and rotations are relative to their velocities. If
enabled, particles are aligned to the angle of their velocities and rotate
relative to that angle.

Synopses:

    1.  |ParticleSystem:setRelativeRotation|( `enable` )

Variants:

    1.  |ParticleSystem:setRelativeRotation|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: |lrv-boolean|

                True to enable relative particle rotation, false to disable it.

-------------------------------------------------------------------------------
                                              *love-ParticleSystem:setRotation*
|ParticleSystem:setRotation|

Sets the rotation of the image upon particle creation (in radians).

Synopses:

    1.  |ParticleSystem:setRotation|( `min`, `max` )

Variants:

    1.  |ParticleSystem:setRotation|( `min`, `max` )

        See function description

        returns:

            None

        arguments:

            `min`: |lrv-number|

                The minimum initial angle (radians).

            `max`: |lrv-number|

                The maximum initial angle (radians).

-------------------------------------------------------------------------------
                                         *love-ParticleSystem:setSizeVariation*
|ParticleSystem:setSizeVariation|

Sets the amount of size variation (0 meaning no variation and 1 meaning full
variation between start and end).

Synopses:

    1.  |ParticleSystem:setSizeVariation|( `variation` )

Variants:

    1.  |ParticleSystem:setSizeVariation|( `variation` )

        See function description

        returns:

            None

        arguments:

            `variation`: |lrv-number|

                The amount of variation (0 meaning no variation and 1 meaning
                full variation between start and end).

-------------------------------------------------------------------------------
                                                 *love-ParticleSystem:setSizes*
|ParticleSystem:setSizes|

Sets a series of sizes by which to scale a particle sprite. 1.0 is normal size.
The particle system will interpolate between each size evenly over the
particle's lifetime.

At least one size must be specified. A maximum of eight may be used.

Synopses:

    1.  |ParticleSystem:setSizes|( `size1`, `size2`, `size8` )

Variants:

    1.  |ParticleSystem:setSizes|( `size1`, `size2`, `size8` )

        See function description

        returns:

            None

        arguments:

            `size1`: |lrv-number|

                The first size.

            `size2`: |lrv-number|

                The second size.

            `size8`: |lrv-number|

                The eighth size.

-------------------------------------------------------------------------------
                                                 *love-ParticleSystem:setSpeed*
|ParticleSystem:setSpeed|

Sets the speed of the particles.

Synopses:

    1.  |ParticleSystem:setSpeed|( `min`, `max` )

Variants:

    1.  |ParticleSystem:setSpeed|( `min`, `max` )

        See function description

        returns:

            None

        arguments:

            `min`: |lrv-number|

                The minimum linear speed of the particles.

            `max`: |lrv-number|

                The maximum linear speed of the particles.

-------------------------------------------------------------------------------
                                                  *love-ParticleSystem:setSpin*
|ParticleSystem:setSpin|

Sets the spin of the sprite.

Synopses:

    1.  |ParticleSystem:setSpin|( `min`, `max` )

Variants:

    1.  |ParticleSystem:setSpin|( `min`, `max` )

        See function description

        returns:

            None

        arguments:

            `min`: |lrv-number|

                The minimum spin (radians per second).

            `max`: |lrv-number|

                The maximum spin (radians per second).

-------------------------------------------------------------------------------
                                         *love-ParticleSystem:setSpinVariation*
|ParticleSystem:setSpinVariation|

Sets the amount of spin variation (0 meaning no variation and 1 meaning full
variation between start and end).

Synopses:

    1.  |ParticleSystem:setSpinVariation|( `variation` )

Variants:

    1.  |ParticleSystem:setSpinVariation|( `variation` )

        See function description

        returns:

            None

        arguments:

            `variation`: |lrv-number|

                The amount of variation (0 meaning no variation and 1 meaning
                full variation between start and end).

-------------------------------------------------------------------------------
                                                *love-ParticleSystem:setSpread*
|ParticleSystem:setSpread|

Sets the amount of spread for the system.

Synopses:

    1.  |ParticleSystem:setSpread|( `spread` )

Variants:

    1.  |ParticleSystem:setSpread|( `spread` )

        See function description

        returns:

            None

        arguments:

            `spread`: |lrv-number|

                The amount of spread (radians).

-------------------------------------------------------------------------------
                                *love-ParticleSystem:setTangentialAcceleration*
|ParticleSystem:setTangentialAcceleration|

Sets the tangential acceleration (acceleration perpendicular to the particle's
direction).

Synopses:

    1.  |ParticleSystem:setTangentialAcceleration|( `min`, `max` )

Variants:

    1.  |ParticleSystem:setTangentialAcceleration|( `min`, `max` )

        See function description

        returns:

            None

        arguments:

            `min`: |lrv-number|

                The minimum acceleration.

            `max`: |lrv-number|

                The maximum acceleration.

-------------------------------------------------------------------------------
                                               *love-ParticleSystem:setTexture*
|ParticleSystem:setTexture|

Sets the texture (Image or Canvas) to be used for the particles.

Synopses:

    1.  |ParticleSystem:setTexture|( `texture` )

Variants:

    1.  |ParticleSystem:setTexture|( `texture` )

        See function description

        returns:

            None

        arguments:

            `texture`: |love-Texture|

                An Image or Canvas to use for the particles.

-------------------------------------------------------------------------------
                                                    *love-ParticleSystem:start*
|ParticleSystem:start|

Starts the particle emitter.

Synopses:

    1.  |ParticleSystem:start|()

Variants:

    1.  |ParticleSystem:start|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-ParticleSystem:stop*
|ParticleSystem:stop|

Stops the particle emitter, resetting the lifetime counter.

Synopses:

    1.  |ParticleSystem:stop|()

Variants:

    1.  |ParticleSystem:stop|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-ParticleSystem:update*
|ParticleSystem:update|

Updates the particle system; moving, creating and killing particles.

Synopses:

    1.  |ParticleSystem:update|( `dt` )

Variants:

    1.  |ParticleSystem:update|( `dt` )

        See function description

        returns:

            None

        arguments:

            `dt`: |lrv-number|

                The time (seconds) since last frame.

-------------------------------------------------------------------------------
                                                                    *love-Quad*
|Quad|

A quadrilateral (a polygon with four sides and four corners) with texture
coordinate information.

Quads can be used to select part of a texture to draw. In this way, one large
texture atlas can be loaded, and then split up into sub-images.

                                                       *love-Quad-constructors*
    constructors:

        None

                                                         *love-Quad-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                           *love-Quad-subtypes*
    subtypes:

        None

                                                          *love-Quad-functions*
    functions:

        |getTextureDimensions|            |love-Quad:getTextureDimensions|
        |getViewport|                     |love-Quad:getViewport|
        |setViewport|                     |love-Quad:setViewport|

-------------------------------------------------------------------------------
                                               *love-Quad:getTextureDimensions*
|Quad:getTextureDimensions|

Gets reference texture dimensions initially specified in love.graphics.newQuad.

Synopses:

    1.  `sw`, `sh` = |Quad:getTextureDimensions|()

Variants:

    1.  `sw`, `sh` = |Quad:getTextureDimensions|()

        See function description

        returns:

            `sw`: |lrv-number|

                The Texture width used by the Quad.

            `sh`: |lrv-number|

                The Texture height used by the Quad.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Quad:getViewport*
|Quad:getViewport|

Gets the current viewport of this Quad.

Synopses:

    1.  `x`, `y`, `w`, `h` = |Quad:getViewport|()

Variants:

    1.  `x`, `y`, `w`, `h` = |Quad:getViewport|()

        See function description

        returns:

            `x`: |lrv-number|

                The top-left corner along the x-axis.

            `y`: |lrv-number|

                The top-left corner along the y-axis.

            `w`: |lrv-number|

                The width of the viewport.

            `h`: |lrv-number|

                The height of the viewport.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Quad:setViewport*
|Quad:setViewport|

Sets the texture coordinates according to a viewport.

Synopses:

    1.  |Quad:setViewport|( `x`, `y`, `w`, `h`, `sw`, `sh` )

Variants:

    1.  |Quad:setViewport|( `x`, `y`, `w`, `h`, `sw`, `sh` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The top-left corner along the x-axis.

            `y`: |lrv-number|

                The top-left corner along the y-axis.

            `w`: |lrv-number|

                The width of the viewport.

            `h`: |lrv-number|

                The height of the viewport.

            `sw`: |lrv-number|

                The reference width, the width of the Image. (Must be greater
                than 0.)

            `sh`: |lrv-number|

                The reference height, the height of the Image. (Must be greater
                than 0.)

-------------------------------------------------------------------------------
                                                                  *love-Shader*
|Shader|

A Shader is used for advanced hardware-accelerated pixel or vertex
manipulation. These effects are written in a language based on GLSL (OpenGL
Shading Language) with a few things simplified for easier coding.

Potential uses for shaders include HDR/bloom, motion blur,
grayscale/invert/sepia/any kind of color effect, reflection/refraction,
distortions, bump mapping, and much more! Here is a collection of basic shaders
and good starting point to learn: https://github.com/vrld/moonshine

                                                     *love-Shader-constructors*
    constructors:

        None

                                                       *love-Shader-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                         *love-Shader-subtypes*
    subtypes:

        None

                                                        *love-Shader-functions*
    functions:

        |getWarnings|                     |love-Shader:getWarnings|
        |hasUniform|                      |love-Shader:hasUniform|
        |send|                            |love-Shader:send|
        |sendColor|                       |love-Shader:sendColor|

-------------------------------------------------------------------------------
                                                      *love-Shader:getWarnings*
|Shader:getWarnings|

Returns any warning and error messages from compiling the shader code. This can
be used for debugging your shaders if there's anything the graphics hardware
doesn't like.

Synopses:

    1.  `warnings` = |Shader:getWarnings|()

Variants:

    1.  `warnings` = |Shader:getWarnings|()

        See function description

        returns:

            `warnings`: |lrv-string|

                Warning and error messages (if any).

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Shader:hasUniform*
|Shader:hasUniform|

Gets whether a uniform / extern variable exists in the Shader.

If a graphics driver's shader compiler determines that a uniform / extern
variable doesn't affect the final output of the shader, it may optimize the
variable out. This function will return false in that case.

Synopses:

    1.  `hasuniform` = |Shader:hasUniform|( `name` )

Variants:

    1.  `hasuniform` = |Shader:hasUniform|( `name` )

        See function description

        returns:

            `hasuniform`: |lrv-boolean|

                Whether the uniform exists in the shader and affects its final
                output.

        arguments:

            `name`: |lrv-string|

                The name of the uniform variable.

-------------------------------------------------------------------------------
                                                             *love-Shader:send*
|Shader:send|

Sends one or more values to a special (''uniform'') variable inside the shader.
Uniform variables have to be marked using the ''uniform'' or ''extern''
keyword, e.g.

uniform float time;  // 'float' is the typical number type used in GLSL
shaders.

uniform float varsvec2 light_pos;

uniform vec4 colors[4;

The corresponding send calls would be

shader:send('time', t)

shader:send('vars',a,b)

shader:send('light_pos', {light_x, light_y})

shader:send('colors', {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},
{r4, g4, b4, a4})

Uniform / extern variables are read-only in the shader code and remain constant
until modified by a Shader:send call. Uniform variables can be accessed in both
the Vertex and Pixel components of a shader, as long as the variable is
declared in each.

Synopses:

    1.  |Shader:send|( `name`, `number`, `...` )
    2.  |Shader:send|( `name`, `vector`, `...` )
    3.  |Shader:send|( `name`, `matrix`, `...` )
    4.  |Shader:send|( `name`, `texture` )
    5.  |Shader:send|( `name`, `boolean`, `...` )
    6.  |Shader:send|( `name`, `matrixlayout`, `matrix`, `...` )
    7.  |Shader:send|( `name`, `data`, `offset`, `size` )
    8.  |Shader:send|( `name`, `data`, `matrixlayout`, `offset`, `size`
        )

Variants:

    1.  |Shader:send|( `name`, `number`, `...` )

        Because all numbers in Lua are floating point, in versions prior to 0.10.2 you must use the function Shader:sendInt to send values to uniform int variables in the shader's code.

        returns:

            None

        arguments:

            `name`: |lrv-string|

                Name of the number to send to the shader.

            `number`: |lrv-number|

                Number to send to store in the uniform variable.

            `...`: |lrv-number|

                Additional numbers to send if the uniform variable is an array.
    2.  |Shader:send|( `name`, `vector`, `...` )

        See function description

        returns:

            None

        arguments:

            `name`: |lrv-string|

                Name of the vector to send to the shader.

            `vector`: |lrv-table|

                Numbers to send to the uniform variable as a vector. The number
                of elements in the table determines the type of the vector
                (e.g. two numbers -&gt; vec2). At least two and at most four
                numbers can be used.

            `...`: |lrv-table|

                Additional vectors to send if the uniform variable is an array.
                All vectors need to be of the same size (e.g. only vec3's).
    3.  |Shader:send|( `name`, `matrix`, `...` )

        See function description

        returns:

            None

        arguments:

            `name`: |lrv-string|

                Name of the matrix to send to the shader.

            `matrix`: |lrv-table|

                2x2, 3x3, or 4x4 matrix to send to the uniform variable. Using
                table form: {{a,b,c,d}, {e,f,g,h}, ... } or (since version
                0.10.2) {a,b,c,d, e,f,g,h, ...}. The order in 0.10.2 is
                column-major; starting in 11.0 it's row-major instead.

            `...`: |lrv-table|

                Additional matrices of the same type as ''matrix'' to store in
                a uniform array.
    4.  |Shader:send|( `name`, `texture` )

        See function description

        returns:

            None

        arguments:

            `name`: |lrv-string|

                Name of the Texture to send to the shader.

            `texture`: |love-Texture|

                Texture (Image or Canvas) to send to the uniform variable.
    5.  |Shader:send|( `name`, `boolean`, `...` )

        See function description

        returns:

            None

        arguments:

            `name`: |lrv-string|

                Name of the boolean to send to the shader.

            `boolean`: |lrv-boolean|

                Boolean to send to store in the uniform variable.

            `...`: |lrv-boolean|

                Additional booleans to send if the uniform variable is an
                array.
    6.  |Shader:send|( `name`, `matrixlayout`, `matrix`, `...` )

        See function description

        returns:

            None

        arguments:

            `name`: |lrv-string|

                Name of the matrix to send to the shader.

            `matrixlayout`: |love-MatrixLayout|

                The layout (row- or column-major) of the matrix.

            `matrix`: |lrv-table|

                2x2, 3x3, or 4x4 matrix to send to the uniform variable. Using
                table form: {{a,b,c,d}, {e,f,g,h}, ... } or {a,b,c,d, e,f,g,h,
                ...}.

            `...`: |lrv-table|

                Additional matrices of the same type as ''matrix'' to store in
                a uniform array.
    7.  |Shader:send|( `name`, `data`, `offset`, `size` )

        Sends uniform values to the Shader sourced from the contents of a Data object. This directly copies the bytes of the data.

        returns:

            None

        arguments:

            `name`: |lrv-string|

                Name of the uniform to send to the shader.

            `data`: |love-Data|

                Data object containing the values to send.

            `offset`: |lrv-number|

                Offset in bytes from the start of the Data object.

            `size`: |lrv-number|

                Size in bytes of the data to send. If nil, as many bytes as the
                specified uniform uses will be copied.
    8.  |Shader:send|( `name`, `data`, `matrixlayout`, `offset`, `size`
        )

        Sends uniform matrices to the Shader sourced from the contents of a Data object. This directly copies the bytes of the data.

        returns:

            None

        arguments:

            `name`: |lrv-string|

                Name of the uniform matrix to send to the shader.

            `data`: |love-Data|

                Data object containing the values to send.

            `matrixlayout`: |love-MatrixLayout|

                The layout (row- or column-major) of the matrix in memory.

            `offset`: |lrv-number|

                Offset in bytes from the start of the Data object.

            `size`: |lrv-number|

                Size in bytes of the data to send. If nil, as many bytes as the
                specified uniform uses will be copied.

-------------------------------------------------------------------------------
                                                        *love-Shader:sendColor*
|Shader:sendColor|

Sends one or more colors to a special (''extern'' / ''uniform'') vec3 or vec4
variable inside the shader. The color components must be in the range of 1. The
colors are gamma-corrected if global gamma-correction is enabled.

Extern variables must be marked using the ''extern'' keyword, e.g.

extern vec4 Color;

The corresponding sendColor call would be

shader:sendColor('Color', {r, g, b, a})

Extern variables can be accessed in both the Vertex and Pixel stages of a
shader, as long as the variable is declared in each.

In versions prior to 11.0, color component values were within the range of 0 to
255 instead of 0 to 1.

Synopses:

    1.  |Shader:sendColor|( `name`, `color`, `...` )

Variants:

    1.  |Shader:sendColor|( `name`, `color`, `...` )

        See function description

        returns:

            None

        arguments:

            `name`: |lrv-string|

                The name of the color extern variable to send to in the shader.

            `color`: |lrv-table|

                A table with red, green, blue, and optional alpha color
                components in the range of 1 to send to the extern as a vector.

            `...`: |lrv-table|

                Additional colors to send in case the extern is an array. All
                colors need to be of the same size (e.g. only vec3's).

-------------------------------------------------------------------------------
                                                             *love-SpriteBatch*
|SpriteBatch|

Using a single image, draw any number of identical copies of the image using a
single call to love.graphics.draw(). This can be used, for example, to draw
repeating copies of a single background image with high performance.

A SpriteBatch can be even more useful when the underlying image is a texture
atlas (a single image file containing many independent images); by adding Quads
to the batch, different sub-images from within the atlas can be drawn.

                                                *love-SpriteBatch-constructors*
    constructors:

        None

                                                  *love-SpriteBatch-supertypes*
    supertypes:

        |Drawable|                        |love-Drawable|
        |Object|                          |love-Object|

                                                    *love-SpriteBatch-subtypes*
    subtypes:

        None

                                                   *love-SpriteBatch-functions*
    functions:

        |add|                             |love-SpriteBatch:add|
        |addLayer|                        |love-SpriteBatch:addLayer|
        |attachAttribute|                 |love-SpriteBatch:attachAttribute|
        |clear|                           |love-SpriteBatch:clear|
        |flush|                           |love-SpriteBatch:flush|
        |getBufferSize|                   |love-SpriteBatch:getBufferSize|
        |getColor|                        |love-SpriteBatch:getColor|
        |getCount|                        |love-SpriteBatch:getCount|
        |getTexture|                      |love-SpriteBatch:getTexture|
        |set|                             |love-SpriteBatch:set|
        |setColor|                        |love-SpriteBatch:setColor|
        |setDrawRange|                    |love-SpriteBatch:setDrawRange|
        |setLayer|                        |love-SpriteBatch:setLayer|
        |setTexture|                      |love-SpriteBatch:setTexture|

-------------------------------------------------------------------------------
                                                         *love-SpriteBatch:add*
|SpriteBatch:add|

Adds a sprite to the batch. Sprites are drawn in the order they are added.

Synopses:

    1.  `id` = |SpriteBatch:add|( `x`, `y`, `r`, `sx`, `sy`, `ox`,
        `oy`, `kx`, `ky` )
    2.  `id` = |SpriteBatch:add|( `quad`, `x`, `y`, `r`, `sx`, `sy`,
        `ox`, `oy`, `kx`, `ky` )

Variants:

    1.  `id` = |SpriteBatch:add|( `x`, `y`, `r`, `sx`, `sy`, `ox`,
        `oy`, `kx`, `ky` )

        See function description

        returns:

            `id`: |lrv-number|

                An identifier for the added sprite.

        arguments:

            `x`: |lrv-number|

                The position to draw the object (x-axis).

            `y`: |lrv-number|

                The position to draw the object (y-axis).

            `r`: |lrv-number|

                Orientation (radians).

            `sx`: |lrv-number|

                Scale factor (x-axis).

            `sy`: |lrv-number|

                Scale factor (y-axis).

            `ox`: |lrv-number|

                Origin offset (x-axis).

            `oy`: |lrv-number|

                Origin offset (y-axis).

            `kx`: |lrv-number|

                Shear factor (x-axis).

            `ky`: |lrv-number|

                Shear factor (y-axis).
    2.  `id` = |SpriteBatch:add|( `quad`, `x`, `y`, `r`, `sx`, `sy`,
        `ox`, `oy`, `kx`, `ky` )

        Adds a Quad to the batch.

        returns:

            `id`: |lrv-number|

                An identifier for the added sprite.

        arguments:

            `quad`: |love-Quad|

                The Quad to add.

            `x`: |lrv-number|

                The position to draw the object (x-axis).

            `y`: |lrv-number|

                The position to draw the object (y-axis).

            `r`: |lrv-number|

                Orientation (radians).

            `sx`: |lrv-number|

                Scale factor (x-axis).

            `sy`: |lrv-number|

                Scale factor (y-axis).

            `ox`: |lrv-number|

                Origin offset (x-axis).

            `oy`: |lrv-number|

                Origin offset (y-axis).

            `kx`: |lrv-number|

                Shear factor (x-axis).

            `ky`: |lrv-number|

                Shear factor (y-axis).

-------------------------------------------------------------------------------
                                                    *love-SpriteBatch:addLayer*
|SpriteBatch:addLayer|

Adds a sprite to a batch created with an Array Texture.

Synopses:

    1.  `spriteindex` = |SpriteBatch:addLayer|( `layerindex`, `x`, `y`,
        `r`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )
    2.  `spriteindex` = |SpriteBatch:addLayer|( `layerindex`, `quad`,
        `x`, `y`, `r`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )
    3.  `spriteindex` = |SpriteBatch:addLayer|( `layerindex`,
        `transform` )
    4.  `spriteindex` = |SpriteBatch:addLayer|( `layerindex`, `quad`,
        `transform` )

Variants:

    1.  `spriteindex` = |SpriteBatch:addLayer|( `layerindex`, `x`, `y`,
        `r`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

        Adds a layer of the SpriteBatch's Array Texture.

        returns:

            `spriteindex`: |lrv-number|

                The index of the added sprite, for use with SpriteBatch:set or
                SpriteBatch:setLayer.

        arguments:

            `layerindex`: |lrv-number|

                The index of the layer to use for this sprite.

            `x`: |lrv-number|

                The position to draw the sprite (x-axis).

            `y`: |lrv-number|

                The position to draw the sprite (y-axis).

            `r`: |lrv-number|

                Orientation (radians).

            `sx`: |lrv-number|

                Scale factor (x-axis).

            `sy`: |lrv-number|

                Scale factor (y-axis).

            `ox`: |lrv-number|

                Origin offset (x-axis).

            `oy`: |lrv-number|

                Origin offset (y-axis).

            `kx`: |lrv-number|

                Shearing factor (x-axis).

            `ky`: |lrv-number|

                Shearing factor (y-axis).
    2.  `spriteindex` = |SpriteBatch:addLayer|( `layerindex`, `quad`,
        `x`, `y`, `r`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

        Adds a layer of the SpriteBatch's Array Texture using the specified Quad.

The specified layer index overrides any layer index set on the Quad via Quad:setLayer.

        returns:

            `spriteindex`: |lrv-number|

                The index of the added sprite, for use with SpriteBatch:set or
                SpriteBatch:setLayer.

        arguments:

            `layerindex`: |lrv-number|

                The index of the layer to use for this sprite.

            `quad`: |love-Quad|

                The subsection of the texture's layer to use when drawing the
                sprite.

            `x`: |lrv-number|

                The position to draw the sprite (x-axis).

            `y`: |lrv-number|

                The position to draw the sprite (y-axis).

            `r`: |lrv-number|

                Orientation (radians).

            `sx`: |lrv-number|

                Scale factor (x-axis).

            `sy`: |lrv-number|

                Scale factor (y-axis).

            `ox`: |lrv-number|

                Origin offset (x-axis).

            `oy`: |lrv-number|

                Origin offset (y-axis).

            `kx`: |lrv-number|

                Shearing factor (x-axis).

            `ky`: |lrv-number|

                Shearing factor (y-axis).
    3.  `spriteindex` = |SpriteBatch:addLayer|( `layerindex`,
        `transform` )

        Adds a layer of the SpriteBatch's Array Texture using the specified Transform.

        returns:

            `spriteindex`: |lrv-number|

                The index of the added sprite, for use with SpriteBatch:set or
                SpriteBatch:setLayer.

        arguments:

            `layerindex`: |lrv-number|

                The index of the layer to use for this sprite.

            `transform`: |love-Transform|

                A transform object.
    4.  `spriteindex` = |SpriteBatch:addLayer|( `layerindex`, `quad`,
        `transform` )

        Adds a layer of the SpriteBatch's Array Texture using the specified Quad and Transform.

In order to use an Array Texture or other non-2D texture types as the main texture in a custom void effect() variant must be used in the pixel shader, and MainTex must be declared as an ArrayImage or sampler2DArray like so: uniform ArrayImage MainTex;.

        returns:

            `spriteindex`: |lrv-number|

                The index of the added sprite, for use with SpriteBatch:set or
                SpriteBatch:setLayer.

        arguments:

            `layerindex`: |lrv-number|

                The index of the layer to use for this sprite.

            `quad`: |love-Quad|

                The subsection of the texture's layer to use when drawing the
                sprite.

            `transform`: |love-Transform|

                A transform object.

-------------------------------------------------------------------------------
                                             *love-SpriteBatch:attachAttribute*
|SpriteBatch:attachAttribute|

Attaches a per-vertex attribute from a Mesh onto this SpriteBatch, for use when
drawing. This can be combined with a Shader to augment a SpriteBatch with
per-vertex or additional per-sprite information instead of just having
per-sprite colors.

Each sprite in a SpriteBatch has 4 vertices in the following order: top-left,
bottom-left, top-right, bottom-right. The index returned by SpriteBatch:add
(and used by SpriteBatch:set) can used to determine the first vertex of a
specific sprite with the formula 1 + 4 * ( id - 1 ).

Synopses:

    1.  |SpriteBatch:attachAttribute|( `name`, `mesh` )

Variants:

    1.  |SpriteBatch:attachAttribute|( `name`, `mesh` )

        If a created with a custom vertex format, it will have 3 vertex attributes named VertexPosition, VertexTexCoord, and VertexColor. If vertex attributes with those names are attached to the SpriteBatch, it will override the SpriteBatch's sprite positions, texture coordinates, and sprite colors, respectively.

Custom named attributes can be accessed in a vertex shader by declaring them as attribute vec4 MyCustomAttributeName; at the top-level of the vertex shader code. The name must match what was specified in the Mesh's vertex format and in the name argument of SpriteBatch:attachAttribute.

A Mesh must have at least 4 * SpriteBatch:getBufferSize vertices in order to be attachable to a SpriteBatch.

        returns:

            None

        arguments:

            `name`: |lrv-string|

                The name of the vertex attribute to attach.

            `mesh`: |love-Mesh|

                The Mesh to get the vertex attribute from.

-------------------------------------------------------------------------------
                                                       *love-SpriteBatch:clear*
|SpriteBatch:clear|

Removes all sprites from the buffer.

Synopses:

    1.  |SpriteBatch:clear|()

Variants:

    1.  |SpriteBatch:clear|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-SpriteBatch:flush*
|SpriteBatch:flush|

Immediately sends all new and modified sprite data in the batch to the graphics
card.

Normally it isn't necessary to call this method as
love.graphics.draw(spritebatch, ...) will do it automatically if needed, but
explicitly using SpriteBatch:flush gives more control over when the work
happens.

If this method is used, it generally shouldn't be called more than once (at
most) between love.graphics.draw(spritebatch, ...) calls.

Synopses:

    1.  |SpriteBatch:flush|()

Variants:

    1.  |SpriteBatch:flush|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-SpriteBatch:getBufferSize*
|SpriteBatch:getBufferSize|

Gets the maximum number of sprites the SpriteBatch can hold.

Synopses:

    1.  `size` = |SpriteBatch:getBufferSize|()

Variants:

    1.  `size` = |SpriteBatch:getBufferSize|()

        See function description

        returns:

            `size`: |lrv-number|

                The maximum number of sprites the batch can hold.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-SpriteBatch:getColor*
|SpriteBatch:getColor|

Gets the color that will be used for the next add and set operations.

If no color has been set with SpriteBatch:setColor or the current SpriteBatch
color has been cleared, this method will return nil.

In versions prior to 11.0, color component values were within the range of 0 to
255 instead of 0 to 1.

Synopses:

    1.  `r`, `g`, `b`, `a` = |SpriteBatch:getColor|()

Variants:

    1.  `r`, `g`, `b`, `a` = |SpriteBatch:getColor|()

        See function description

        returns:

            `r`: |lrv-number|

                The red component (0-1).

            `g`: |lrv-number|

                The green component (0-1).

            `b`: |lrv-number|

                The blue component (0-1).

            `a`: |lrv-number|

                The alpha component (0-1).

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-SpriteBatch:getCount*
|SpriteBatch:getCount|

Gets the number of sprites currently in the SpriteBatch.

Synopses:

    1.  `count` = |SpriteBatch:getCount|()

Variants:

    1.  `count` = |SpriteBatch:getCount|()

        See function description

        returns:

            `count`: |lrv-number|

                The number of sprites currently in the batch.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-SpriteBatch:getTexture*
|SpriteBatch:getTexture|

Gets the texture (Image or Canvas) used by the SpriteBatch.

Synopses:

    1.  `texture` = |SpriteBatch:getTexture|()

Variants:

    1.  `texture` = |SpriteBatch:getTexture|()

        See function description

        returns:

            `texture`: |love-Texture|

                The Image or Canvas used by the SpriteBatch.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-SpriteBatch:set*
|SpriteBatch:set|

Changes a sprite in the batch. This requires the sprite index returned by
SpriteBatch:add or SpriteBatch:addLayer.

Synopses:

    1.  |SpriteBatch:set|( `spriteindex`, `x`, `y`, `r`, `sx`, `sy`,
        `ox`, `oy`, `kx`, `ky` )
    2.  |SpriteBatch:set|( `spriteindex`, `quad`, `x`, `y`, `r`, `sx`,
        `sy`, `ox`, `oy`, `kx`, `ky` )

Variants:

    1.  |SpriteBatch:set|( `spriteindex`, `x`, `y`, `r`, `sx`, `sy`,
        `ox`, `oy`, `kx`, `ky` )

        See function description

        returns:

            None

        arguments:

            `spriteindex`: |lrv-number|

                The index of the sprite that will be changed.

            `x`: |lrv-number|

                The position to draw the object (x-axis).

            `y`: |lrv-number|

                The position to draw the object (y-axis).

            `r`: |lrv-number|

                Orientation (radians).

            `sx`: |lrv-number|

                Scale factor (x-axis).

            `sy`: |lrv-number|

                Scale factor (y-axis).

            `ox`: |lrv-number|

                Origin offset (x-axis).

            `oy`: |lrv-number|

                Origin offset (y-axis).

            `kx`: |lrv-number|

                Shear factor (x-axis).

            `ky`: |lrv-number|

                Shear factor (y-axis).
    2.  |SpriteBatch:set|( `spriteindex`, `quad`, `x`, `y`, `r`, `sx`,
        `sy`, `ox`, `oy`, `kx`, `ky` )

        Changes a sprite with a Quad in the batch. This requires the index returned by SpriteBatch:add or SpriteBatch:addLayer.

SpriteBatches do not support removing individual sprites. One can do a pseudo removal (instead of clearing and re-adding everything) by:

SpriteBatch:set(id, 0, 0, 0, 0, 0)

This makes all the sprite's vertices equal (because the x and y scales are 0), which prevents the GPU from fully processing the sprite when drawing the SpriteBatch.

        returns:

            None

        arguments:

            `spriteindex`: |lrv-number|

                The index of the sprite that will be changed.

            `quad`: |love-Quad|

                The Quad used on the image of the batch.

            `x`: |lrv-number|

                The position to draw the object (x-axis).

            `y`: |lrv-number|

                The position to draw the object (y-axis).

            `r`: |lrv-number|

                Orientation (radians).

            `sx`: |lrv-number|

                Scale factor (x-axis).

            `sy`: |lrv-number|

                Scale factor (y-axis).

            `ox`: |lrv-number|

                Origin offset (x-axis).

            `oy`: |lrv-number|

                Origin offset (y-axis).

            `kx`: |lrv-number|

                Shear factor (x-axis).

            `ky`: |lrv-number|

                Shear factor (y-axis).

-------------------------------------------------------------------------------
                                                    *love-SpriteBatch:setColor*
|SpriteBatch:setColor|

Sets the color that will be used for the next add and set operations. Calling
the function without arguments will disable all per-sprite colors for the
SpriteBatch.

In versions prior to 11.0, color component values were within the range of 0 to
255 instead of 0 to 1.

In version 0.9.2 and older, the global color set with love.graphics.setColor
will not work on the SpriteBatch if any of the sprites has its own color.

Synopses:

    1.  |SpriteBatch:setColor|( `r`, `g`, `b`, `a` )
    2.  |SpriteBatch:setColor|()

Variants:

    1.  |SpriteBatch:setColor|( `r`, `g`, `b`, `a` )

        See function description

        returns:

            None

        arguments:

            `r`: |lrv-number|

                The amount of red.

            `g`: |lrv-number|

                The amount of green.

            `b`: |lrv-number|

                The amount of blue.

            `a`: |lrv-number|

                The amount of alpha.
    2.  |SpriteBatch:setColor|()

        Disables all per-sprite colors for this SpriteBatch.

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-SpriteBatch:setDrawRange*
|SpriteBatch:setDrawRange|

Restricts the drawn sprites in the SpriteBatch to a subset of the total.

Synopses:

    1.  |SpriteBatch:setDrawRange|( `start`, `count` )
    2.  |SpriteBatch:setDrawRange|()

Variants:

    1.  |SpriteBatch:setDrawRange|( `start`, `count` )

        See function description

        returns:

            None

        arguments:

            `start`: |lrv-number|

                The index of the first sprite to draw. Index 1 corresponds to
                the first sprite added with SpriteBatch:add.

            `count`: |lrv-number|

                The number of sprites to draw.
    2.  |SpriteBatch:setDrawRange|()

        Allows all sprites in the SpriteBatch to be drawn.

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-SpriteBatch:setLayer*
|SpriteBatch:setLayer|

Changes a sprite previously added with add or addLayer, in a batch created with
an Array Texture.

Synopses:

    1.  |SpriteBatch:setLayer|( `spriteindex`, `layerindex`, `x`, `y`,
        `r`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )
    2.  |SpriteBatch:setLayer|( `spriteindex`, `layerindex`, `quad`,
        `x`, `y`, `r`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )
    3.  |SpriteBatch:setLayer|( `spriteindex`, `layerindex`,
        `transform` )
    4.  |SpriteBatch:setLayer|( `spriteindex`, `layerindex`, `quad`,
        `transform` )

Variants:

    1.  |SpriteBatch:setLayer|( `spriteindex`, `layerindex`, `x`, `y`,
        `r`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

        Changes the sprite in the SpriteBatch.

        returns:

            None

        arguments:

            `spriteindex`: |lrv-number|

                The index of the existing sprite to replace.

            `layerindex`: |lrv-number|

                The index of the layer in the Array Texture to use for this
                sprite.

            `x`: |lrv-number|

                The position to draw the sprite (x-axis).

            `y`: |lrv-number|

                The position to draw the sprite (y-axis).

            `r`: |lrv-number|

                Orientation (radians).

            `sx`: |lrv-number|

                Scale factor (x-axis).

            `sy`: |lrv-number|

                Scale factor (y-axis).

            `ox`: |lrv-number|

                Origin offset (x-axis).

            `oy`: |lrv-number|

                Origin offset (y-axis).

            `kx`: |lrv-number|

                Shearing factor (x-axis).

            `ky`: |lrv-number|

                Shearing factor (y-axis).
    2.  |SpriteBatch:setLayer|( `spriteindex`, `layerindex`, `quad`,
        `x`, `y`, `r`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

        Adds a layer of the SpriteBatch's Array Texture using the specified Quad.

The specified layer index overrides any layer index set on the Quad via Quad:setLayer.

        returns:

            None

        arguments:

            `spriteindex`: |lrv-number|

                The index of the existing sprite to replace.

            `layerindex`: |lrv-number|

                The index of the layer to use for this sprite.

            `quad`: |love-Quad|

                The subsection of the texture's layer to use when drawing the
                sprite.

            `x`: |lrv-number|

                The position to draw the sprite (x-axis).

            `y`: |lrv-number|

                The position to draw the sprite (y-axis).

            `r`: |lrv-number|

                Orientation (radians).

            `sx`: |lrv-number|

                Scale factor (x-axis).

            `sy`: |lrv-number|

                Scale factor (y-axis).

            `ox`: |lrv-number|

                Origin offset (x-axis).

            `oy`: |lrv-number|

                Origin offset (y-axis).

            `kx`: |lrv-number|

                Shearing factor (x-axis).

            `ky`: |lrv-number|

                Shearing factor (y-axis).
    3.  |SpriteBatch:setLayer|( `spriteindex`, `layerindex`,
        `transform` )

        Adds a layer of the SpriteBatch's Array Texture using the specified Transform.

        returns:

            None

        arguments:

            `spriteindex`: |lrv-number|

                The index of the existing sprite to replace.

            `layerindex`: |lrv-number|

                The index of the layer to use for the sprite.

            `transform`: |love-Transform|

                A transform object.
    4.  |SpriteBatch:setLayer|( `spriteindex`, `layerindex`, `quad`,
        `transform` )

        Adds a layer of the SpriteBatch's Array Texture using the specified Quad and Transform.

The specified layer index overrides any layer index set on the Quad via Quad:setLayer.

        returns:

            None

        arguments:

            `spriteindex`: |lrv-number|

                The index of the existing sprite to replace.

            `layerindex`: |lrv-number|

                The index of the layer to use for the sprite.

            `quad`: |love-Quad|

                The subsection of the texture's layer to use when drawing the
                sprite.

            `transform`: |love-Transform|

                A transform object.

-------------------------------------------------------------------------------
                                                  *love-SpriteBatch:setTexture*
|SpriteBatch:setTexture|

Sets the texture (Image or Canvas) used for the sprites in the batch, when
drawing.

Synopses:

    1.  |SpriteBatch:setTexture|( `texture` )

Variants:

    1.  |SpriteBatch:setTexture|( `texture` )

        See function description

        returns:

            None

        arguments:

            `texture`: |love-Texture|

                The new Image or Canvas to use for the sprites in the batch.

-------------------------------------------------------------------------------
                                                                    *love-Text*
|Text|

Drawable text.

                                                       *love-Text-constructors*
    constructors:

        None

                                                         *love-Text-supertypes*
    supertypes:

        |Drawable|                        |love-Drawable|
        |Object|                          |love-Object|

                                                           *love-Text-subtypes*
    subtypes:

        None

                                                          *love-Text-functions*
    functions:

        |add|                             |love-Text:add|
        |addf|                            |love-Text:addf|
        |clear|                           |love-Text:clear|
        |getDimensions|                   |love-Text:getDimensions|
        |getFont|                         |love-Text:getFont|
        |getHeight|                       |love-Text:getHeight|
        |getWidth|                        |love-Text:getWidth|
        |set|                             |love-Text:set|
        |setFont|                         |love-Text:setFont|
        |setf|                            |love-Text:setf|

-------------------------------------------------------------------------------
                                                                *love-Text:add*
|Text:add|

Adds additional colored text to the Text object at the specified position.

Synopses:

    1.  `index` = |Text:add|( `textstring`, `x`, `y`, `angle`, `sx`,
        `sy`, `ox`, `oy`, `kx`, `ky` )
    2.  `index` = |Text:add|( `coloredtext`, `x`, `y`, `angle`, `sx`,
        `sy`, `ox`, `oy`, `kx`, `ky` )

Variants:

    1.  `index` = |Text:add|( `textstring`, `x`, `y`, `angle`, `sx`,
        `sy`, `ox`, `oy`, `kx`, `ky` )

        See function description

        returns:

            `index`: |lrv-number|

                An index number that can be used with Text:getWidth or
                Text:getHeight.

        arguments:

            `textstring`: |lrv-string|

                The text to add to the object.

            `x`: |lrv-number|

                The position of the new text on the x-axis.

            `y`: |lrv-number|

                The position of the new text on the y-axis.

            `angle`: |lrv-number|

                The orientation of the new text in radians.

            `sx`: |lrv-number|

                Scale factor on the x-axis.

            `sy`: |lrv-number|

                Scale factor on the y-axis.

            `ox`: |lrv-number|

                Origin offset on the x-axis.

            `oy`: |lrv-number|

                Origin offset on the y-axis.

            `kx`: |lrv-number|

                Shearing / skew factor on the x-axis.

            `ky`: |lrv-number|

                Shearing / skew factor on the y-axis.
    2.  `index` = |Text:add|( `coloredtext`, `x`, `y`, `angle`, `sx`,
        `sy`, `ox`, `oy`, `kx`, `ky` )

        The color set by love.graphics.setColor will be combined (multiplied) with the colors of the text, when drawing the Text object.

        returns:

            `index`: |lrv-number|

                An index number that can be used with Text:getWidth or
                Text:getHeight.

        arguments:

            `coloredtext`: |lrv-table|

                A table containing colors and strings to add to the object, in
                the form of {color1, string1, color2, string2, ...}.

                `color1`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string1`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `color2`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string2`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `...`: <tables and strings>

                    Additional colors and strings.

            `x`: |lrv-number|

                The position of the new text on the x-axis.

            `y`: |lrv-number|

                The position of the new text on the y-axis.

            `angle`: |lrv-number|

                The orientation of the new text in radians.

            `sx`: |lrv-number|

                Scale factor on the x-axis.

            `sy`: |lrv-number|

                Scale factor on the y-axis.

            `ox`: |lrv-number|

                Origin offset on the x-axis.

            `oy`: |lrv-number|

                Origin offset on the y-axis.

            `kx`: |lrv-number|

                Shearing / skew factor on the x-axis.

            `ky`: |lrv-number|

                Shearing / skew factor on the y-axis.

-------------------------------------------------------------------------------
                                                               *love-Text:addf*
|Text:addf|

Adds additional formatted / colored text to the Text object at the specified
position.

The word wrap limit is applied before any scaling, rotation, and other
coordinate transformations. Therefore the amount of text per line stays
constant given the same wrap limit, even if the scale arguments change.

Synopses:

    1.  `index` = |Text:addf|( `textstring`, `wraplimit`, `align`, `x`,
        `y`, `angle`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )
    2.  `index` = |Text:addf|( `coloredtext`, `wraplimit`, `align`,
        `x`, `y`, `angle`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

Variants:

    1.  `index` = |Text:addf|( `textstring`, `wraplimit`, `align`, `x`,
        `y`, `angle`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

        See function description

        returns:

            `index`: |lrv-number|

                An index number that can be used with Text:getWidth or
                Text:getHeight.

        arguments:

            `textstring`: |lrv-string|

                The text to add to the object.

            `wraplimit`: |lrv-number|

                The maximum width in pixels of the text before it gets
                automatically wrapped to a new line.

            `align`: |love-AlignMode|

                The alignment of the text.

            `x`: |lrv-number|

                The position of the new text (x-axis).

            `y`: |lrv-number|

                The position of the new text (y-axis).

            `angle`: |lrv-number|

                Orientation (radians).

            `sx`: |lrv-number|

                Scale factor (x-axis).

            `sy`: |lrv-number|

                Scale factor (y-axis).

            `ox`: |lrv-number|

                Origin offset (x-axis).

            `oy`: |lrv-number|

                Origin offset (y-axis).

            `kx`: |lrv-number|

                Shearing / skew factor (x-axis).

            `ky`: |lrv-number|

                Shearing / skew factor (y-axis).
    2.  `index` = |Text:addf|( `coloredtext`, `wraplimit`, `align`,
        `x`, `y`, `angle`, `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

        The color set by love.graphics.setColor will be combined (multiplied) with the colors of the text, when drawing the Text object.

        returns:

            `index`: |lrv-number|

                An index number that can be used with Text:getWidth or
                Text:getHeight.

        arguments:

            `coloredtext`: |lrv-table|

                A table containing colors and strings to add to the object, in
                the form of {color1, string1, color2, string2, ...}.

                `color1`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string1`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `color2`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string2`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `...`: <tables and strings>

                    Additional colors and strings.

            `wraplimit`: |lrv-number|

                The maximum width in pixels of the text before it gets
                automatically wrapped to a new line.

            `align`: |love-AlignMode|

                The alignment of the text.

            `x`: |lrv-number|

                The position of the new text (x-axis).

            `y`: |lrv-number|

                The position of the new text (y-axis).

            `angle`: |lrv-number|

                Orientation (radians).

            `sx`: |lrv-number|

                Scale factor (x-axis).

            `sy`: |lrv-number|

                Scale factor (y-axis).

            `ox`: |lrv-number|

                Origin offset (x-axis).

            `oy`: |lrv-number|

                Origin offset (y-axis).

            `kx`: |lrv-number|

                Shearing / skew factor (x-axis).

            `ky`: |lrv-number|

                Shearing / skew factor (y-axis).

-------------------------------------------------------------------------------
                                                              *love-Text:clear*
|Text:clear|

Clears the contents of the Text object.

Synopses:

    1.  |Text:clear|()

Variants:

    1.  |Text:clear|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Text:getDimensions*
|Text:getDimensions|

Gets the width and height of the text in pixels.

Synopses:

    1.  `width`, `height` = |Text:getDimensions|()
    2.  `width`, `height` = |Text:getDimensions|( `index` )

Variants:

    1.  `width`, `height` = |Text:getDimensions|()

        See function description

        returns:

            `width`: |lrv-number|

                The width of the text. If multiple sub-strings have been added
                with Text:add, the width of the last sub-string is returned.

            `height`: |lrv-number|

                The height of the text. If multiple sub-strings have been added
                with Text:add, the height of the last sub-string is returned.

        arguments:

            None
    2.  `width`, `height` = |Text:getDimensions|( `index` )

        Gets the width and height of a specific sub-string that was previously added to the Text object.

        returns:

            `width`: |lrv-number|

                The width of the sub-string (before scaling and other
                transformations).

            `height`: |lrv-number|

                The height of the sub-string (before scaling and other
                transformations).

        arguments:

            `index`: |lrv-number|

                An index number returned by Text:add or Text:addf.

-------------------------------------------------------------------------------
                                                            *love-Text:getFont*
|Text:getFont|

Gets the Font used with the Text object.

Synopses:

    1.  `font` = |Text:getFont|()

Variants:

    1.  `font` = |Text:getFont|()

        See function description

        returns:

            `font`: |love-Font|

                The font used with this Text object.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Text:getHeight*
|Text:getHeight|

Gets the height of the text in pixels.

Synopses:

    1.  ` height ` = |Text:getHeight|()
    2.  `height` = |Text:getHeight|( `index` )

Variants:

    1.  ` height ` = |Text:getHeight|()

        See function description

        returns:

            ` height `: |lrv-number|

                The height of the text. If multiple sub-strings have been added
                with Text:add, the height of the last sub-string is returned.

        arguments:

            None
    2.  `height` = |Text:getHeight|( `index` )

        Gets the height of a specific sub-string that was previously added to the Text object.

        returns:

            `height`: |lrv-number|

                The height of the sub-string (before scaling and other
                transformations).

        arguments:

            `index`: |lrv-number|

                An index number returned by Text:add or Text:addf.

-------------------------------------------------------------------------------
                                                           *love-Text:getWidth*
|Text:getWidth|

Gets the width of the text in pixels.

Synopses:

    1.  `width` = |Text:getWidth|()
    2.  `width` = |Text:getWidth|( `index` )

Variants:

    1.  `width` = |Text:getWidth|()

        See function description

        returns:

            `width`: |lrv-number|

                The width of the text. If multiple sub-strings have been added
                with Text:add, the width of the last sub-string is returned.

        arguments:

            None
    2.  `width` = |Text:getWidth|( `index` )

        Gets the width of a specific sub-string that was previously added to the Text object.

        returns:

            `width`: |lrv-number|

                The width of the sub-string (before scaling and other
                transformations).

        arguments:

            `index`: |lrv-number|

                An index number returned by Text:add or Text:addf.

-------------------------------------------------------------------------------
                                                                *love-Text:set*
|Text:set|

Replaces the contents of the Text object with a new unformatted string.

Synopses:

    1.  |Text:set|( `textstring` )
    2.  |Text:set|( `coloredtext` )

Variants:

    1.  |Text:set|( `textstring` )

        See function description

        returns:

            None

        arguments:

            `textstring`: |lrv-string|

                The new string of text to use.
    2.  |Text:set|( `coloredtext` )

        The color set by love.graphics.setColor will be combined (multiplied) with the colors of the text, when drawing the Text object.

        returns:

            None

        arguments:

            `coloredtext`: |lrv-table|

                A table containing colors and strings to use as the new text,
                in the form of {color1, string1, color2, string2, ...}.

                `color1`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string1`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `color2`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string2`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `...`: <tables and strings>

                    Additional colors and strings.

-------------------------------------------------------------------------------
                                                            *love-Text:setFont*
|Text:setFont|

Replaces the Font used with the text.

Synopses:

    1.  |Text:setFont|( `font` )

Variants:

    1.  |Text:setFont|( `font` )

        See function description

        returns:

            None

        arguments:

            `font`: |love-Font|

                The new font to use with this Text object.

-------------------------------------------------------------------------------
                                                               *love-Text:setf*
|Text:setf|

Replaces the contents of the Text object with a new formatted string.

Synopses:

    1.  |Text:setf|( `textstring`, `wraplimit`, `align` )
    2.  |Text:setf|( `coloredtext`, `wraplimit`, `align` )

Variants:

    1.  |Text:setf|( `textstring`, `wraplimit`, `align` )

        See function description

        returns:

            None

        arguments:

            `textstring`: |lrv-string|

                The new string of text to use.

            `wraplimit`: |lrv-number|

                The maximum width in pixels of the text before it gets
                automatically wrapped to a new line.

            `align`: |love-AlignMode|

                The alignment of the text.
    2.  |Text:setf|( `coloredtext`, `wraplimit`, `align` )

        The color set by love.graphics.setColor will be combined (multiplied) with the colors of the text, when drawing the Text object.

        returns:

            None

        arguments:

            `coloredtext`: |lrv-table|

                A table containing colors and strings to use as the new text,
                in the form of {color1, string1, color2, string2, ...}.

                `color1`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string1`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `color2`: |lrv-table|

                    A table containing red, green, blue, and optional alpha
                    components to use as a color for the next string in the
                    table, in the form of {red, green, blue, alpha}.

                `string2`: |lrv-string|

                    A string of text which has a color specified by the
                    previous color.

                `...`: <tables and strings>

                    Additional colors and strings.

            `wraplimit`: |lrv-number|

                The maximum width in pixels of the text before it gets
                automatically wrapped to a new line.

            `align`: |love-AlignMode|

                The alignment of the text.

-------------------------------------------------------------------------------
                                                                 *love-Texture*
|Texture|

Superclass for drawable objects which represent a texture. All Textures can be
drawn with Quads. This is an abstract type that can't be created directly.

                                                    *love-Texture-constructors*
    constructors:

        None

                                                      *love-Texture-supertypes*
    supertypes:

        |Drawable|                        |love-Drawable|
        |Object|                          |love-Object|

                                                        *love-Texture-subtypes*
    subtypes:

        None

                                                       *love-Texture-functions*
    functions:

        |getDPIScale|                     |love-Texture:getDPIScale|
        |getDepth|                        |love-Texture:getDepth|
        |getFormat|                       |love-Texture:getFormat|
        |getLayerCount|                   |love-Texture:getLayerCount|
        |getMipmapCount|                  |love-Texture:getMipmapCount|
        |getMipmapFilter|                 |love-Texture:getMipmapFilter|
        |getPixelHeight|                  |love-Texture:getPixelHeight|
        |getPixelWidth|                   |love-Texture:getPixelWidth|
        |getTextureType|                  |love-Texture:getTextureType|
        |isReadable|                      |love-Texture:isReadable|
        |setMipmapFilter|                 |love-Texture:setMipmapFilter|

-------------------------------------------------------------------------------
                                                     *love-Texture:getDPIScale*
|Texture:getDPIScale|

Gets the DPI scale factor of the Texture.

The DPI scale factor represents relative pixel density. A DPI scale factor of 2
means the texture has twice the pixel density in each dimension (4 times as
many pixels in the same area) compared to a texture with a DPI scale factor of
1.

For example, a texture with pixel dimensions of 100x100 with a DPI scale factor
of 2 will be drawn as if it was 50x50. This is useful with high-dpi /  retina
displays to easily allow swapping out higher or lower pixel density Images and
Canvases without needing any extra manual scaling logic.

Synopses:

    1.  `dpiscale` = |Texture:getDPIScale|()

Variants:

    1.  `dpiscale` = |Texture:getDPIScale|()

        See function description

        returns:

            `dpiscale`: |lrv-number|

                The DPI scale factor of the Texture.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Texture:getDepth*
|Texture:getDepth|

Gets the depth of a Volume Texture. Returns 1 for 2D, Cubemap, and Array
textures.

Synopses:

    1.  `depth` = |Texture:getDepth|()

Variants:

    1.  `depth` = |Texture:getDepth|()

        See function description

        returns:

            `depth`: |lrv-number|

                The depth of the volume Texture.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Texture:getFormat*
|Texture:getFormat|

Gets the pixel format of the Texture.

Synopses:

    1.  `format` = |Texture:getFormat|()

Variants:

    1.  `format` = |Texture:getFormat|()

        See function description

        returns:

            `format`: <PixelFormat>

                The pixel format the Texture was created with.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-Texture:getLayerCount*
|Texture:getLayerCount|

Gets the number of layers / slices in an Array Texture. Returns 1 for 2D,
Cubemap, and Volume textures.

Synopses:

    1.  `layers` = |Texture:getLayerCount|()

Variants:

    1.  `layers` = |Texture:getLayerCount|()

        See function description

        returns:

            `layers`: |lrv-number|

                The number of layers in the Array Texture.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Texture:getMipmapCount*
|Texture:getMipmapCount|

Gets the number of mipmaps contained in the Texture. If the texture was not
created with mipmaps, it will return 1.

Synopses:

    1.  `mipmaps` = |Texture:getMipmapCount|()

Variants:

    1.  `mipmaps` = |Texture:getMipmapCount|()

        See function description

        returns:

            `mipmaps`: |lrv-number|

                The number of mipmaps in the Texture.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-Texture:getMipmapFilter*
|Texture:getMipmapFilter|

Gets the mipmap filter mode for a Texture. Prior to 11.0 this method only
worked on Images.

Synopses:

    1.  `mode`, `sharpness` = |Texture:getMipmapFilter|()

Variants:

    1.  `mode`, `sharpness` = |Texture:getMipmapFilter|()

        See function description

        returns:

            `mode`: |love-FilterMode|

                The filter mode used in between mipmap levels. nil if mipmap
                filtering is not enabled.

            `sharpness`: |lrv-number|

                Value used to determine whether the image should use more or
                less detailed mipmap levels than normal when drawing.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Texture:getPixelHeight*
|Texture:getPixelHeight|

Gets the height in pixels of the Texture.

DPI scale factor, rather than pixels. Use getHeight for calculations related to
drawing the texture (calculating an origin offset, for example), and
getPixelHeight only when dealing specifically with pixels, for example when
using Canvas:newImageData.

Synopses:

    1.  `pixelheight` = |Texture:getPixelHeight|()

Variants:

    1.  `pixelheight` = |Texture:getPixelHeight|()

        See function description

        returns:

            `pixelheight`: |lrv-number|

                The height of the Texture, in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-Texture:getPixelWidth*
|Texture:getPixelWidth|

Gets the width in pixels of the Texture.

DPI scale factor, rather than pixels. Use getWidth for calculations related to
drawing the texture (calculating an origin offset, for example), and
getPixelWidth only when dealing specifically with pixels, for example when
using Canvas:newImageData.

Synopses:

    1.  `pixelwidth` = |Texture:getPixelWidth|()

Variants:

    1.  `pixelwidth` = |Texture:getPixelWidth|()

        See function description

        returns:

            `pixelwidth`: |lrv-number|

                The width of the Texture, in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Texture:getTextureType*
|Texture:getTextureType|

Gets the type of the Texture.

Synopses:

    1.  `texturetype` = |Texture:getTextureType|()

Variants:

    1.  `texturetype` = |Texture:getTextureType|()

        See function description

        returns:

            `texturetype`: |love-TextureType|

                The type of the Texture.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Texture:isReadable*
|Texture:isReadable|

Gets whether the Texture can be drawn and sent to a Shader.

Canvases created with stencil and/or depth PixelFormats are not readable by
default, unless readable=true is specified in the settings table passed into
love.graphics.newCanvas.

Non-readable Canvases can still be rendered to.

Synopses:

    1.  `readable` = |Texture:isReadable|()

Variants:

    1.  `readable` = |Texture:isReadable|()

        See function description

        returns:

            `readable`: |lrv-boolean|

                Whether the Texture is readable.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-Texture:setMipmapFilter*
|Texture:setMipmapFilter|

Sets the mipmap filter mode for a Texture. Prior to 11.0 this method only
worked on Images.

Mipmapping is useful when drawing a texture at a reduced scale. It can improve
performance and reduce aliasing issues.

In created with the mipmaps flag enabled for the mipmap filter to have any
effect. In versions prior to 0.10.0 it's best to call this method directly
after creating the image with love.graphics.newImage, to avoid bugs in certain
graphics drivers.

Due to hardware restrictions and driver bugs, in versions prior to 0.10.0
images that weren't loaded from a CompressedData must have power-of-two
dimensions (64x64, 512x256, etc.) to use mipmaps.

Synopses:

    1.  |Texture:setMipmapFilter|( `filtermode`, `sharpness` )
    2.  |Texture:setMipmapFilter|()

Variants:

    1.  |Texture:setMipmapFilter|( `filtermode`, `sharpness` )

        On mobile devices (Android and iOS), the sharpness parameter is not supported and will do nothing. You can use a custom compressed and its CompressedData has mipmap data included, it will use that.

        returns:

            None

        arguments:

            `filtermode`: |love-FilterMode|

                The filter mode to use in between mipmap levels. 'nearest' will
                often give better performance.

            `sharpness`: |lrv-number|

                A positive sharpness value makes the texture use a more
                detailed mipmap level when drawing, at the expense of
                performance. A negative value does the reverse.
    2.  |Texture:setMipmapFilter|()

        Disables mipmap filtering.

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                                   *love-Video*
|Video|

A drawable video.

                                                      *love-Video-constructors*
    constructors:

        None

                                                        *love-Video-supertypes*
    supertypes:

        |Drawable|                        |love-Drawable|
        |Object|                          |love-Object|

                                                          *love-Video-subtypes*
    subtypes:

        None

                                                         *love-Video-functions*
    functions:

        |getDimensions|                   |love-Video:getDimensions|
        |getFilter|                       |love-Video:getFilter|
        |getHeight|                       |love-Video:getHeight|
        |getSource|                       |love-Video:getSource|
        |getStream|                       |love-Video:getStream|
        |getWidth|                        |love-Video:getWidth|
        |isPlaying|                       |love-Video:isPlaying|
        |pause|                           |love-Video:pause|
        |play|                            |love-Video:play|
        |rewind|                          |love-Video:rewind|
        |seek|                            |love-Video:seek|
        |setFilter|                       |love-Video:setFilter|
        |setSource|                       |love-Video:setSource|
        |tell|                            |love-Video:tell|

-------------------------------------------------------------------------------
                                                     *love-Video:getDimensions*
|Video:getDimensions|

Gets the width and height of the Video in pixels.

Synopses:

    1.  `width`, `height` = |Video:getDimensions|()

Variants:

    1.  `width`, `height` = |Video:getDimensions|()

        See function description

        returns:

            `width`: |lrv-number|

                The width of the Video.

            `height`: |lrv-number|

                The height of the Video.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Video:getFilter*
|Video:getFilter|

Gets the scaling filters used when drawing the Video.

Synopses:

    1.  `min`, `mag`, `anisotropy` = |Video:getFilter|()

Variants:

    1.  `min`, `mag`, `anisotropy` = |Video:getFilter|()

        See function description

        returns:

            `min`: |love-FilterMode|

                The filter mode used when scaling the Video down.

            `mag`: |love-FilterMode|

                The filter mode used when scaling the Video up.

            `anisotropy`: |lrv-number|

                Maximum amount of anisotropic filtering used.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Video:getHeight*
|Video:getHeight|

Gets the height of the Video in pixels.

Synopses:

    1.  `height` = |Video:getHeight|()

Variants:

    1.  `height` = |Video:getHeight|()

        See function description

        returns:

            `height`: |lrv-number|

                The height of the Video.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Video:getSource*
|Video:getSource|

Gets the audio Source used for playing back the video's audio. May return nil
if the video has no audio, or if Video:setSource is called with a nil argument.

Synopses:

    1.  `source` = |Video:getSource|()

Variants:

    1.  `source` = |Video:getSource|()

        See function description

        returns:

            `source`: |love-Source|

                The audio Source used for audio playback, or nil if the video
                has no audio.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Video:getStream*
|Video:getStream|

Gets the VideoStream object used for decoding and controlling the video.

Synopses:

    1.  `stream` = |Video:getStream|()

Variants:

    1.  `stream` = |Video:getStream|()

        See function description

        returns:

            `stream`: |love-VideoStream|

                The VideoStream used for decoding and controlling the video.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Video:getWidth*
|Video:getWidth|

Gets the width of the Video in pixels.

Synopses:

    1.  `width` = |Video:getWidth|()

Variants:

    1.  `width` = |Video:getWidth|()

        See function description

        returns:

            `width`: |lrv-number|

                The width of the Video.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Video:isPlaying*
|Video:isPlaying|

Gets whether the Video is currently playing.

Synopses:

    1.  `playing` = |Video:isPlaying|()

Variants:

    1.  `playing` = |Video:isPlaying|()

        See function description

        returns:

            `playing`: |lrv-boolean|

                Whether the video is playing.

        arguments:

            None

-------------------------------------------------------------------------------
                                                             *love-Video:pause*
|Video:pause|

Pauses the Video.

Synopses:

    1.  |Video:pause|()

Variants:

    1.  |Video:pause|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                              *love-Video:play*
|Video:play|

Starts playing the Video. In order for the video to appear onscreen it must be
drawn with love.graphics.draw.

Synopses:

    1.  |Video:play|()

Variants:

    1.  |Video:play|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                            *love-Video:rewind*
|Video:rewind|

Rewinds the Video to the beginning.

Synopses:

    1.  |Video:rewind|()

Variants:

    1.  |Video:rewind|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                              *love-Video:seek*
|Video:seek|

Sets the current playback position of the Video.

Synopses:

    1.  |Video:seek|( `offset` )

Variants:

    1.  |Video:seek|( `offset` )

        See function description

        returns:

            None

        arguments:

            `offset`: |lrv-number|

                The time in seconds since the beginning of the Video.

-------------------------------------------------------------------------------
                                                         *love-Video:setFilter*
|Video:setFilter|

Sets the scaling filters used when drawing the Video.

Synopses:

    1.  |Video:setFilter|( `min`, `mag`, `anisotropy` )

Variants:

    1.  |Video:setFilter|( `min`, `mag`, `anisotropy` )

        See function description

        returns:

            None

        arguments:

            `min`: |love-FilterMode|

                The filter mode used when scaling the Video down.

            `mag`: |love-FilterMode|

                The filter mode used when scaling the Video up.

            `anisotropy`: |lrv-number|

                Maximum amount of anisotropic filtering used.

-------------------------------------------------------------------------------
                                                         *love-Video:setSource*
|Video:setSource|

Sets the audio Source used for playing back the video's audio. The audio Source
also controls playback speed and synchronization.

Synopses:

    1.  |Video:setSource|( `source` )

Variants:

    1.  |Video:setSource|( `source` )

        See function description

        returns:

            None

        arguments:

            `source`: |love-Source|

                The audio Source used for audio playback, or nil to disable
                audio synchronization.

-------------------------------------------------------------------------------
                                                              *love-Video:tell*
|Video:tell|

Gets the current playback position of the Video.

Synopses:

    1.  `seconds` = |Video:tell|()

Variants:

    1.  `seconds` = |Video:tell|()

        See function description

        returns:

            `seconds`: |lrv-number|

                The time in seconds since the beginning of the Video.

        arguments:

            None

===============================================================================
                                                              *love-love.image*
|love.image|

Provides an interface to decode encoded image data.

    |callbacks|                           |love-love.image-callbacks|
    |enums|                               |love-love.image-enums|
    |functions|                           |love-love.image-functions|
    |types|                               |love-love.image-types|

-------------------------------------------------------------------------------
                                                    *love-love.image-callbacks*
The callbacks of |love.image|:

    None

-------------------------------------------------------------------------------
                                                        *love-love.image-enums*
The enums of |love.image|:

    |CompressedImageFormat|               |love-CompressedImageFormat|
    |ImageFormat|                         |love-ImageFormat|

-------------------------------------------------------------------------------
                                                   *love-CompressedImageFormat*
|CompressedImageFormat|

Compressed image data formats. Here and here are a couple overviews of many of
the formats.

Unlike traditional PNG or jpeg, these formats stay compressed in RAM and in the
graphics card's VRAM. This is good for saving memory space as well as improving
performance, since the graphics card will be able to keep more of the image's
pixels in its fast-access cache when drawing it.

    constants:

        `DXT1`: |lrv-string|

            The DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits
            for ImageData and regular Images.) Suitable for fully opaque images
            on desktop systems.

        `DXT3`: |lrv-string|

            The DXT3 format. RGBA data at 8 bits per pixel. Smooth variations
            in opacity do not mix well with this format.

        `DXT5`: |lrv-string|

            The DXT5 format. RGBA data at 8 bits per pixel. Recommended for
            images with varying opacity on desktop systems.

        `BC4`: |lrv-string|

            The BC4 format (also known as 3Dc+ or ATI1.) Stores just the red
            channel, at 4 bits per pixel.

        `BC4s`: |lrv-string|

            The signed variant of the BC4 format. Same as above but pixel
            values in the texture are in the range of 1 instead of 1 in
            shaders.

        `BC5`: |lrv-string|

            The BC5 format (also known as 3Dc or ATI2.) Stores red and green
            channels at 8 bits per pixel.

        `BC5s`: |lrv-string|

            The signed variant of the BC5 format.

        `BC6h`: |lrv-string|

            The BC6H format. Stores half-precision floating-point RGB data in
            the range of 65504 at 8 bits per pixel. Suitable for HDR images on
            desktop systems.

        `BC6hs`: |lrv-string|

            The signed variant of the BC6H format. Stores RGB data in the range
            of +65504.

        `BC7`: |lrv-string|

            The BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8
            bits per pixel.

        `ETC1`: |lrv-string|

            The ETC1 format. RGB data at 4 bits per pixel. Suitable for fully
            opaque images on older Android devices.

        `ETC2rgb`: |lrv-string|

            The RGB variant of the ETC2 format. RGB data at 4 bits per pixel.
            Suitable for fully opaque images on newer mobile devices.

        `ETC2rgba`: |lrv-string|

            The RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel.
            Recommended for images with varying opacity on newer mobile
            devices.

        `ETC2rgba1`: |lrv-string|

            The RGBA variant of the ETC2 format where pixels are either fully
            transparent or fully opaque. RGBA data at 4 bits per pixel.

        `EACr`: |lrv-string|

            The single-channel variant of the EAC format. Stores just the red
            channel, at 4 bits per pixel.

        `EACrs`: |lrv-string|

            The signed single-channel variant of the EAC format. Same as above
            but pixel values in the texture are in the range of 1 instead of 1
            in shaders.

        `EACrg`: |lrv-string|

            The two-channel variant of the EAC format. Stores red and green
            channels at 8 bits per pixel.

        `EACrgs`: |lrv-string|

            The signed two-channel variant of the EAC format.

        `PVR1rgb2`: |lrv-string|

            The 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB
            data at 2 bits per pixel. Textures compressed with PVRTC1 formats
            must be square and power-of-two sized.

        `PVR1rgb4`: |lrv-string|

            The 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB
            data at 4 bits per pixel.

        `PVR1rgba2`: |lrv-string|

            The 2 bit per pixel RGBA variant of the PVRTC1 format.

        `PVR1rgba4`: |lrv-string|

            The 4 bit per pixel RGBA variant of the PVRTC1 format.

        `ASTC4x4`: |lrv-string|

            The 4x4 pixels per block variant of the ASTC format. RGBA data at 8
            bits per pixel.

        `ASTC5x4`: |lrv-string|

            The 5x4 pixels per block variant of the ASTC format. RGBA data at
            6.4 bits per pixel.

        `ASTC5x5`: |lrv-string|

            The 5x5 pixels per block variant of the ASTC format. RGBA data at
            5.12 bits per pixel.

        `ASTC6x5`: |lrv-string|

            The 6x5 pixels per block variant of the ASTC format. RGBA data at
            4.27 bits per pixel.

        `ASTC6x6`: |lrv-string|

            The 6x6 pixels per block variant of the ASTC format. RGBA data at
            3.56 bits per pixel.

        `ASTC8x5`: |lrv-string|

            The 8x5 pixels per block variant of the ASTC format. RGBA data at
            3.2 bits per pixel.

        `ASTC8x6`: |lrv-string|

            The 8x6 pixels per block variant of the ASTC format. RGBA data at
            2.67 bits per pixel.

        `ASTC8x8`: |lrv-string|

            The 8x8 pixels per block variant of the ASTC format. RGBA data at 2
            bits per pixel.

        `ASTC10x5`: |lrv-string|

            The 10x5 pixels per block variant of the ASTC format. RGBA data at
            2.56 bits per pixel.

        `ASTC10x6`: |lrv-string|

            The 10x6 pixels per block variant of the ASTC format. RGBA data at
            2.13 bits per pixel.

        `ASTC10x8`: |lrv-string|

            The 10x8 pixels per block variant of the ASTC format. RGBA data at
            1.6 bits per pixel.

        `ASTC10x10`: |lrv-string|

            The 10x10 pixels per block variant of the ASTC format. RGBA data at
            1.28 bits per pixel.

        `ASTC12x10`: |lrv-string|

            The 12x10 pixels per block variant of the ASTC format. RGBA data at
            1.07 bits per pixel.

        `ASTC12x12`: |lrv-string|

            The 12x12 pixels per block variant of the ASTC format. RGBA data at
            0.89 bits per pixel.

-------------------------------------------------------------------------------
                                                             *love-ImageFormat*
|ImageFormat|

Encoded image formats.

    constants:

        `tga`: |lrv-string|

            Targa image format.

        `png`: |lrv-string|

            PNG image format.

        `jpg`: |lrv-string|

            JPG image format.

        `bmp`: |lrv-string|

            BMP image format.

-------------------------------------------------------------------------------
                                                    *love-love.image-functions*
The functions of |love.image|:

    |isCompressed|                        |love-love.image.isCompressed|
    |newCompressedData|                   |love-love.image.newCompressedData|
    |newImageData|                        |love-love.image.newImageData|

-------------------------------------------------------------------------------
                                                 *love-love.image.isCompressed*
|love.image.isCompressed|

Determines whether a file can be loaded as CompressedImageData.

Synopses:

    1.  `compressed` = |love.image.isCompressed|( `filename` )
    2.  `compressed` = |love.image.isCompressed|( `fileData` )

Variants:

    1.  `compressed` = |love.image.isCompressed|( `filename` )

        See function description

        returns:

            `compressed`: |lrv-boolean|

                Whether the file can be loaded as CompressedImageData or not.

        arguments:

            `filename`: |lrv-string|

                The filename of the potentially compressed image file.
    2.  `compressed` = |love.image.isCompressed|( `fileData` )

        See function description

        returns:

            `compressed`: |lrv-boolean|

                Whether the FileData can be loaded as CompressedImageData or
                not.

        arguments:

            `fileData`: |love-FileData|

                A FileData potentially containing a compressed image.

-------------------------------------------------------------------------------
                                            *love-love.image.newCompressedData*
|love.image.newCompressedData|

Create a new CompressedImageData object from a compressed image file. LÖVE
supports several compressed texture formats, enumerated in the
CompressedImageFormat page.

Synopses:

    1.  `compressedImageData` = |love.image.newCompressedData|(
        `filename` )
    2.  `compressedImageData` = |love.image.newCompressedData|(
        `fileData` )

Variants:

    1.  `compressedImageData` = |love.image.newCompressedData|(
        `filename` )

        See function description

        returns:

            `compressedImageData`: |love-CompressedImageData|

                The new CompressedImageData object.

        arguments:

            `filename`: |lrv-string|

                The filename of the compressed image file.
    2.  `compressedImageData` = |love.image.newCompressedData|(
        `fileData` )

        See function description

        returns:

            `compressedImageData`: |love-CompressedImageData|

                The new CompressedImageData object.

        arguments:

            `fileData`: |love-FileData|

                A FileData containing a compressed image.

-------------------------------------------------------------------------------
                                                 *love-love.image.newImageData*
|love.image.newImageData|

Creates a new ImageData object.

Synopses:

    1.  `imageData` = |love.image.newImageData|( `width`, `height` )
    2.  `imageData` = |love.image.newImageData|( `width`, `height`,
        `format`, `data` )
    3.  `imageData` = |love.image.newImageData|( `width`, `height`,
        `data` )
    4.  `imageData` = |love.image.newImageData|( `filename` )
    5.  `imageData` = |love.image.newImageData|( `filedata` )

Variants:

    1.  `imageData` = |love.image.newImageData|( `width`, `height` )

        See function description

        returns:

            `imageData`: |love-ImageData|

                The new blank ImageData object. Each pixel's color values,
                (including the alpha values!) will be set to zero.

        arguments:

            `width`: |lrv-number|

                The width of the ImageData.

            `height`: |lrv-number|

                The height of the ImageData.
    2.  `imageData` = |love.image.newImageData|( `width`, `height`,
        `format`, `data` )

        See function description

        returns:

            `imageData`: |love-ImageData|

                The new ImageData object.

        arguments:

            `width`: |lrv-number|

                The width of the ImageData.

            `height`: |lrv-number|

                The height of the ImageData.

            `format`: <PixelFormat>

                The pixel format of the ImageData.

            `data`: |lrv-string|

                Optional raw byte data to load into the ImageData, in the
                format specified by ''format''.
    3.  `imageData` = |love.image.newImageData|( `width`, `height`,
        `data` )

        See function description

        returns:

            `imageData`: |love-ImageData|

                The new ImageData object.

        arguments:

            `width`: |lrv-number|

                The width of the ImageData.

            `height`: |lrv-number|

                The height of the ImageData.

            `data`: |lrv-string|

                The data to load into the ImageData (RGBA bytes, left to right
                and top to bottom).
    4.  `imageData` = |love.image.newImageData|( `filename` )

        See function description

        returns:

            `imageData`: |love-ImageData|

                The new ImageData object.

        arguments:

            `filename`: |lrv-string|

                The filename of the image file.
    5.  `imageData` = |love.image.newImageData|( `filedata` )

        See function description

        returns:

            `imageData`: |love-ImageData|

                The new ImageData object.

        arguments:

            `filedata`: |love-FileData|

                The encoded file data to decode into image data.
-------------------------------------------------------------------------------
                                                        *love-love.image-types*
The types of |love.image|:

    |CompressedImageData|                 |love-CompressedImageData|
    |ImageData|                           |love-ImageData|

-------------------------------------------------------------------------------
                                                     *love-CompressedImageData*
|CompressedImageData|

Represents compressed image data designed to stay compressed in RAM.

CompressedImageData encompasses standard compressed texture formats such as
DXT1, DXT5, and BC5 / 3Dc.

You can't draw CompressedImageData directly to the screen. See Image for that.

                                        *love-CompressedImageData-constructors*
    constructors:

        None

                                          *love-CompressedImageData-supertypes*
    supertypes:

        |Data|                            |love-Data|
        |Object|                          |love-Object|

                                            *love-CompressedImageData-subtypes*
    subtypes:

        None

                                           *love-CompressedImageData-functions*
    functions:

        |getDimensions|                   |love-CompressedImageData:getDimens-|
        |getFormat|                       |love-CompressedImageData:getFormat|
        |getHeight|                       |love-CompressedImageData:getHeight|
        |getMipmapCount|                  |love-CompressedImageData:getMipmap-|
        |getWidth|                        |love-CompressedImageData:getWidth|

-------------------------------------------------------------------------------
                                       *love-CompressedImageData:getDimensions*
|CompressedImageData:getDimensions|

Gets the width and height of the CompressedImageData.

Synopses:

    1.  `width`, `height` = |CompressedImageData:getDimensions|()
    2.  `width`, `height` = |CompressedImageData:getDimensions|(
        `level` )

Variants:

    1.  `width`, `height` = |CompressedImageData:getDimensions|()

        See function description

        returns:

            `width`: |lrv-number|

                The width of the CompressedImageData.

            `height`: |lrv-number|

                The height of the CompressedImageData.

        arguments:

            None
    2.  `width`, `height` = |CompressedImageData:getDimensions|(
        `level` )

        See function description

        returns:

            `width`: |lrv-number|

                The width of a specific mipmap level of the
                CompressedImageData.

            `height`: |lrv-number|

                The height of a specific mipmap level of the
                CompressedImageData.

        arguments:

            `level`: |lrv-number|

                A mipmap level. Must be in the range of
                CompressedImageData:getMipmapCount().

-------------------------------------------------------------------------------
                                           *love-CompressedImageData:getFormat*
|CompressedImageData:getFormat|

Gets the format of the CompressedImageData.

Synopses:

    1.  `format` = |CompressedImageData:getFormat|()

Variants:

    1.  `format` = |CompressedImageData:getFormat|()

        See function description

        returns:

            `format`: |love-CompressedImageFormat|

                The format of the CompressedImageData.

        arguments:

            None

-------------------------------------------------------------------------------
                                           *love-CompressedImageData:getHeight*
|CompressedImageData:getHeight|

Gets the height of the CompressedImageData.

Synopses:

    1.  `height` = |CompressedImageData:getHeight|()
    2.  `height` = |CompressedImageData:getHeight|( `level` )

Variants:

    1.  `height` = |CompressedImageData:getHeight|()

        See function description

        returns:

            `height`: |lrv-number|

                The height of the CompressedImageData.

        arguments:

            None
    2.  `height` = |CompressedImageData:getHeight|( `level` )

        See function description

        returns:

            `height`: |lrv-number|

                The height of a specific mipmap level of the
                CompressedImageData.

        arguments:

            `level`: |lrv-number|

                A mipmap level. Must be in the range of
                CompressedImageData:getMipmapCount().

-------------------------------------------------------------------------------
                                      *love-CompressedImageData:getMipmapCount*
|CompressedImageData:getMipmapCount|

Gets the number of mipmap levels in the CompressedImageData. The base mipmap
level (original image) is included in the count.

Synopses:

    1.  `mipmaps` = |CompressedImageData:getMipmapCount|()

Variants:

    1.  `mipmaps` = |CompressedImageData:getMipmapCount|()

        Mipmap filtering cannot be activated for an Image:setMipmapFilter will error. Most tools which can create compressed textures are able to automatically generate mipmaps for them in the same file.

        returns:

            `mipmaps`: |lrv-number|

                The number of mipmap levels stored in the CompressedImageData.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-CompressedImageData:getWidth*
|CompressedImageData:getWidth|

Gets the width of the CompressedImageData.

Synopses:

    1.  `width` = |CompressedImageData:getWidth|()
    2.  `width` = |CompressedImageData:getWidth|( `level` )

Variants:

    1.  `width` = |CompressedImageData:getWidth|()

        See function description

        returns:

            `width`: |lrv-number|

                The width of the CompressedImageData.

        arguments:

            None
    2.  `width` = |CompressedImageData:getWidth|( `level` )

        See function description

        returns:

            `width`: |lrv-number|

                The width of a specific mipmap level of the
                CompressedImageData.

        arguments:

            `level`: |lrv-number|

                A mipmap level. Must be in the range of
                CompressedImageData:getMipmapCount().

-------------------------------------------------------------------------------
                                                               *love-ImageData*
|ImageData|

Raw (decoded) image data.

You can't draw ImageData directly to screen. See Image for that.

                                                  *love-ImageData-constructors*
    constructors:

        None

                                                    *love-ImageData-supertypes*
    supertypes:

        |Data|                            |love-Data|
        |Object|                          |love-Object|

                                                      *love-ImageData-subtypes*
    subtypes:

        None

                                                     *love-ImageData-functions*
    functions:

        |encode|                          |love-ImageData:encode|
        |getDimensions|                   |love-ImageData:getDimensions|
        |getHeight|                       |love-ImageData:getHeight|
        |getPixel|                        |love-ImageData:getPixel|
        |getWidth|                        |love-ImageData:getWidth|
        |mapPixel|                        |love-ImageData:mapPixel|
        |paste|                           |love-ImageData:paste|
        |setPixel|                        |love-ImageData:setPixel|

-------------------------------------------------------------------------------
                                                        *love-ImageData:encode*
|ImageData:encode|

Encodes the ImageData and optionally writes it to the save directory.

Synopses:

    1.  `filedata` = |ImageData:encode|( `format`, `filename` )
    2.  |ImageData:encode|( `outFile` )
    3.  |ImageData:encode|( `outFile`, `format` )

Variants:

    1.  `filedata` = |ImageData:encode|( `format`, `filename` )

        See function description

        returns:

            `filedata`: |love-FileData|

                The encoded image as a new FileData object.

        arguments:

            `format`: |love-ImageFormat|

                The format to encode the image as.

            `filename`: |lrv-string|

                The filename to write the file to. If nil, no file will be
                written but the FileData will still be returned.
    2.  |ImageData:encode|( `outFile` )

        See function description

        returns:

            None

        arguments:

            `outFile`: |lrv-string|

                Name of a file to write encoded data to. The format will be
                automatically deduced from the file extension.
    3.  |ImageData:encode|( `outFile`, `format` )

        See function description

        returns:

            None

        arguments:

            `outFile`: |lrv-string|

                Name of a file to write encoded data to.

            `format`: |love-ImageFormat|

                The format to encode the image in.

-------------------------------------------------------------------------------
                                                 *love-ImageData:getDimensions*
|ImageData:getDimensions|

Gets the width and height of the ImageData in pixels.

Synopses:

    1.  `width`, `height` = |ImageData:getDimensions|()

Variants:

    1.  `width`, `height` = |ImageData:getDimensions|()

        See function description

        returns:

            `width`: |lrv-number|

                The width of the ImageData in pixels.

            `height`: |lrv-number|

                The height of the ImageData in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-ImageData:getHeight*
|ImageData:getHeight|

Gets the height of the ImageData in pixels.

Synopses:

    1.  `height` = |ImageData:getHeight|()

Variants:

    1.  `height` = |ImageData:getHeight|()

        See function description

        returns:

            `height`: |lrv-number|

                The height of the ImageData in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-ImageData:getPixel*
|ImageData:getPixel|

Gets the color of a pixel at a specific position in the image.

Valid x and y values start at 0 and go up to image width and height minus 1.
Non-integer values are floored.

In versions prior to 11.0, color component values were within the range of 0 to
255 instead of 0 to 1.

Synopses:

    1.  `r`, `g`, `b`, `a` = |ImageData:getPixel|( `x`, `y` )

Variants:

    1.  `r`, `g`, `b`, `a` = |ImageData:getPixel|( `x`, `y` )

        See function description

        returns:

            `r`: |lrv-number|

                The red component (0-1).

            `g`: |lrv-number|

                The green component (0-1).

            `b`: |lrv-number|

                The blue component (0-1).

            `a`: |lrv-number|

                The alpha component (0-1).

        arguments:

            `x`: |lrv-number|

                The position of the pixel on the x-axis.

            `y`: |lrv-number|

                The position of the pixel on the y-axis.

-------------------------------------------------------------------------------
                                                      *love-ImageData:getWidth*
|ImageData:getWidth|

Gets the width of the ImageData in pixels.

Synopses:

    1.  `width` = |ImageData:getWidth|()

Variants:

    1.  `width` = |ImageData:getWidth|()

        See function description

        returns:

            `width`: |lrv-number|

                The width of the ImageData in pixels.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-ImageData:mapPixel*
|ImageData:mapPixel|

Transform an image by applying a function to every pixel.

This function is a higher-order function. It takes another function as a
parameter, and calls it once for each pixel in the ImageData.

The passed function is called with six parameters for each pixel in turn. The
parameters are numbers that represent the x and y coordinates of the pixel and
its red, green, blue and alpha values. The function should return the new red,
green, blue, and alpha values for that pixel.

function pixelFunction(x, y, r, g, b, a)

    -- template for defining your own pixel mapping function

    -- perform computations giving the new values for r, g, b and a

    -- ...

    return r, g, b, a

end

In versions prior to 11.0, color component values were within the range of 0 to
255 instead of 0 to 1.

Synopses:

    1.  |ImageData:mapPixel|( `pixelFunction`, `x`, `y`, `width`,
        `height` )

Variants:

    1.  |ImageData:mapPixel|( `pixelFunction`, `x`, `y`, `width`,
        `height` )

        See function description

        returns:

            None

        arguments:

            `pixelFunction`: |lrv-function|

                Function to apply to every pixel.

            `x`: |lrv-number|

                The x-axis of the top-left corner of the area within the
                ImageData to apply the function to.

            `y`: |lrv-number|

                The y-axis of the top-left corner of the area within the
                ImageData to apply the function to.

            `width`: |lrv-number|

                The width of the area within the ImageData to apply the
                function to.

            `height`: |lrv-number|

                The height of the area within the ImageData to apply the
                function to.

-------------------------------------------------------------------------------
                                                         *love-ImageData:paste*
|ImageData:paste|

Paste into ImageData from another source ImageData.

Synopses:

    1.  |ImageData:paste|( `source`, `dx`, `dy`, `sx`, `sy`, `sw`, `sh`
        )

Variants:

    1.  |ImageData:paste|( `source`, `dx`, `dy`, `sx`, `sy`, `sw`, `sh`
        )

        Note that this function just replaces the contents in the destination rectangle; it does not do any alpha blending.

        returns:

            None

        arguments:

            `source`: |love-ImageData|

                Source ImageData from which to copy.

            `dx`: |lrv-number|

                Destination top-left position on x-axis.

            `dy`: |lrv-number|

                Destination top-left position on y-axis.

            `sx`: |lrv-number|

                Source top-left position on x-axis.

            `sy`: |lrv-number|

                Source top-left position on y-axis.

            `sw`: |lrv-number|

                Source width.

            `sh`: |lrv-number|

                Source height.

-------------------------------------------------------------------------------
                                                      *love-ImageData:setPixel*
|ImageData:setPixel|

Sets the color of a pixel at a specific position in the image.

Valid x and y values start at 0 and go up to image width and height minus 1.

In versions prior to 11.0, color component values were within the range of 0 to
255 instead of 0 to 1.

Synopses:

    1.  |ImageData:setPixel|( `x`, `y`, `r`, `g`, `b`, `a` )

Variants:

    1.  |ImageData:setPixel|( `x`, `y`, `r`, `g`, `b`, `a` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The position of the pixel on the x-axis.

            `y`: |lrv-number|

                The position of the pixel on the y-axis.

            `r`: |lrv-number|

                The red component (0-1).

            `g`: |lrv-number|

                The green component (0-1).

            `b`: |lrv-number|

                The blue component (0-1).

            `a`: |lrv-number|

                The alpha component (0-1).

===============================================================================
                                                           *love-love.joystick*
|love.joystick|

Provides an interface to the user's joystick.

    |callbacks|                           |love-love.joystick-callbacks|
    |enums|                               |love-love.joystick-enums|
    |functions|                           |love-love.joystick-functions|
    |types|                               |love-love.joystick-types|

-------------------------------------------------------------------------------
                                                 *love-love.joystick-callbacks*
The callbacks of |love.joystick|:

    None

-------------------------------------------------------------------------------
                                                     *love-love.joystick-enums*
The enums of |love.joystick|:

    |GamepadAxis|                         |love-GamepadAxis|
    |GamepadButton|                       |love-GamepadButton|
    |JoystickHat|                         |love-JoystickHat|
    |JoystickInputType|                   |love-JoystickInputType|

-------------------------------------------------------------------------------
                                                             *love-GamepadAxis*
|GamepadAxis|

Virtual gamepad axes.

    constants:

        `leftx`: |lrv-string|

            The x-axis of the left thumbstick.

        `lefty`: |lrv-string|

            The y-axis of the left thumbstick.

        `rightx`: |lrv-string|

            The x-axis of the right thumbstick.

        `righty`: |lrv-string|

            The y-axis of the right thumbstick.

        `triggerleft`: |lrv-string|

            Left analog trigger.

        `triggerright`: |lrv-string|

            Right analog trigger.

-------------------------------------------------------------------------------
                                                           *love-GamepadButton*
|GamepadButton|

Virtual gamepad buttons.

    constants:

        `a`: |lrv-string|

            Bottom face button (A).

        `b`: |lrv-string|

            Right face button (B).

        `x`: |lrv-string|

            Left face button (X).

        `y`: |lrv-string|

            Top face button (Y).

        `back`: |lrv-string|

            Back button.

        `guide`: |lrv-string|

            Guide button.

        `start`: |lrv-string|

            Start button.

        `leftstick`: |lrv-string|

            Left stick click button.

        `rightstick`: |lrv-string|

            Right stick click button.

        `leftshoulder`: |lrv-string|

            Left bumper.

        `rightshoulder`: |lrv-string|

            Right bumper.

        `dpup`: |lrv-string|

            D-pad up.

        `dpdown`: |lrv-string|

            D-pad down.

        `dpleft`: |lrv-string|

            D-pad left.

        `dpright`: |lrv-string|

            D-pad right.

-------------------------------------------------------------------------------
                                                             *love-JoystickHat*
|JoystickHat|

Joystick hat positions.

    constants:

        `c`: |lrv-string|

            Centered

        `d`: |lrv-string|

            Down

        `l`: |lrv-string|

            Left

        `ld`: |lrv-string|

            Left+Down

        `lu`: |lrv-string|

            Left+Up

        `r`: |lrv-string|

            Right

        `rd`: |lrv-string|

            Right+Down

        `ru`: |lrv-string|

            Right+Up

        `u`: |lrv-string|

            Up

-------------------------------------------------------------------------------
                                                       *love-JoystickInputType*
|JoystickInputType|

Types of Joystick inputs.

    constants:

        `axis`: |lrv-string|

            Analog axis.

        `button`: |lrv-string|

            Button.

        `hat`: |lrv-string|

            8-direction hat value.

-------------------------------------------------------------------------------
                                                 *love-love.joystick-functions*
The functions of |love.joystick|:

    |getGamepadMappingString|             |love-love.joystick.getGamepadMappi-|
    |getJoystickCount|                    |love-love.joystick.getJoystickCount|
    |getJoysticks|                        |love-love.joystick.getJoysticks|
    |loadGamepadMappings|                 |love-love.joystick.loadGamepadMapp-|
    |saveGamepadMappings|                 |love-love.joystick.saveGamepadMapp-|
    |setGamepadMapping|                   |love-love.joystick.setGamepadMappi-|

-------------------------------------------------------------------------------
                                   *love-love.joystick.getGamepadMappingString*
|love.joystick.getGamepadMappingString|

Gets the full gamepad mapping string of the Joysticks which have the given
GUID, or nil if the GUID isn't recognized as a gamepad.

The mapping string contains binding information used to map the Joystick's
buttons an axes to the standard gamepad layout, and can be used later with
love.joystick.loadGamepadMappings.

Synopses:

    1.  `mappingstring` = |love.joystick.getGamepadMappingString|(
        `guid` )

Variants:

    1.  `mappingstring` = |love.joystick.getGamepadMappingString|(
        `guid` )

        See function description

        returns:

            `mappingstring`: |lrv-string|

                A string containing the Joystick's gamepad mappings, or nil if
                the GUID is not recognized as a gamepad.

        arguments:

            `guid`: |lrv-string|

                The GUID value to get the mapping string for.

-------------------------------------------------------------------------------
                                          *love-love.joystick.getJoystickCount*
|love.joystick.getJoystickCount|

Gets the number of connected joysticks.

Synopses:

    1.  `joystickcount` = |love.joystick.getJoystickCount|()

Variants:

    1.  `joystickcount` = |love.joystick.getJoystickCount|()

        See function description

        returns:

            `joystickcount`: |lrv-number|

                The number of connected joysticks.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.joystick.getJoysticks*
|love.joystick.getJoysticks|

Gets a list of connected Joysticks.

Synopses:

    1.  `joysticks` = |love.joystick.getJoysticks|()

Variants:

    1.  `joysticks` = |love.joystick.getJoysticks|()

        See function description

        returns:

            `joysticks`: |lrv-table|

                The list of currently connected Joysticks.

        arguments:

            None

-------------------------------------------------------------------------------
                                       *love-love.joystick.loadGamepadMappings*
|love.joystick.loadGamepadMappings|

Loads a gamepad mappings string or file created with
love.joystick.saveGamepadMappings.

It also recognizes any SDL gamecontroller mapping string, such as those created
with Steam's Big Picture controller configure interface, or this nice database.
If a new mapping is loaded for an already known controller GUID, the later
version will overwrite the one currently loaded.

Synopses:

    1.  |love.joystick.loadGamepadMappings|( `filename` )
    2.  |love.joystick.loadGamepadMappings|( `mappings` )

Variants:

    1.  |love.joystick.loadGamepadMappings|( `filename` )

        Loads a gamepad mappings string from a file.

        returns:

            None

        arguments:

            `filename`: |lrv-string|

                The filename to load the mappings string from.
    2.  |love.joystick.loadGamepadMappings|( `mappings` )

        Loads a gamepad mappings string directly.

        returns:

            None

        arguments:

            `mappings`: |lrv-string|

                The mappings string to load.

-------------------------------------------------------------------------------
                                       *love-love.joystick.saveGamepadMappings*
|love.joystick.saveGamepadMappings|

Saves the virtual gamepad mappings of all recognized as gamepads and have
either been recently used or their gamepad bindings have been modified.

The mappings are stored as a string for use with
love.joystick.loadGamepadMappings.

Synopses:

    1.  `mappings` = |love.joystick.saveGamepadMappings|( `filename` )
    2.  `mappings` = |love.joystick.saveGamepadMappings|()

Variants:

    1.  `mappings` = |love.joystick.saveGamepadMappings|( `filename` )

        Saves the gamepad mappings of all relevant joysticks to a file.

        returns:

            `mappings`: |lrv-string|

                The mappings string that was written to the file.

        arguments:

            `filename`: |lrv-string|

                The filename to save the mappings string to.
    2.  `mappings` = |love.joystick.saveGamepadMappings|()

        Returns the mappings string without writing to a file.

        returns:

            `mappings`: |lrv-string|

                The mappings string.

        arguments:

            None

-------------------------------------------------------------------------------
                                         *love-love.joystick.setGamepadMapping*
|love.joystick.setGamepadMapping|

Binds a virtual gamepad input to a button, axis or hat for all Joysticks of a
certain type. For example, if this function is used with a GUID returned by a
Dualshock 3 controller in OS X, the binding will affect Joystick:getGamepadAxis
and Joystick:isGamepadDown for ''all'' Dualshock 3 controllers used with the
game when run in OS X.

LÖVE includes built-in gamepad bindings for many common controllers. This
function lets you change the bindings or add new ones for types of Joysticks
which aren't recognized as gamepads by default.

The virtual gamepad buttons and axes are designed around the Xbox 360
controller layout.

Synopses:

    1.  `success` = |love.joystick.setGamepadMapping|( `guid`,
        `button`, `inputtype`, `inputindex`, `hatdir` )
    2.  `success` = |love.joystick.setGamepadMapping|( `guid`, `axis`,
        `inputtype`, `inputindex`, `hatdir` )

Variants:

    1.  `success` = |love.joystick.setGamepadMapping|( `guid`,
        `button`, `inputtype`, `inputindex`, `hatdir` )

        See function description

        returns:

            `success`: |lrv-boolean|

                Whether the virtual gamepad button was successfully bound.

        arguments:

            `guid`: |lrv-string|

                The OS-dependent GUID for the type of Joystick the binding will
                affect.

            `button`: |love-GamepadButton|

                The virtual gamepad button to bind.

            `inputtype`: |love-JoystickInputType|

                The type of input to bind the virtual gamepad button to.

            `inputindex`: |lrv-number|

                The index of the axis, button, or hat to bind the virtual
                gamepad button to.

            `hatdir`: |love-JoystickHat|

                The direction of the hat, if the virtual gamepad button will be
                bound to a hat. nil otherwise.
    2.  `success` = |love.joystick.setGamepadMapping|( `guid`, `axis`,
        `inputtype`, `inputindex`, `hatdir` )

        The physical locations for the bound gamepad axes and buttons should correspond as closely as possible to the layout of a standard Xbox 360 controller.

        returns:

            `success`: |lrv-boolean|

                Whether the virtual gamepad axis was successfully bound.

        arguments:

            `guid`: |lrv-string|

                The OS-dependent GUID for the type of Joystick the binding will
                affect.

            `axis`: |love-GamepadAxis|

                The virtual gamepad axis to bind.

            `inputtype`: |love-JoystickInputType|

                The type of input to bind the virtual gamepad axis to.

            `inputindex`: |lrv-number|

                The index of the axis, button, or hat to bind the virtual
                gamepad axis to.

            `hatdir`: |love-JoystickHat|

                The direction of the hat, if the virtual gamepad axis will be
                bound to a hat. nil otherwise.
-------------------------------------------------------------------------------
                                                     *love-love.joystick-types*
The types of |love.joystick|:

    |Joystick|                            |love-Joystick|

-------------------------------------------------------------------------------
                                                                *love-Joystick*
|Joystick|

Represents a physical joystick.

                                                   *love-Joystick-constructors*
    constructors:

        None

                                                     *love-Joystick-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                       *love-Joystick-subtypes*
    subtypes:

        None

                                                      *love-Joystick-functions*
    functions:

        |getAxes|                         |love-Joystick:getAxes|
        |getAxis|                         |love-Joystick:getAxis|
        |getAxisCount|                    |love-Joystick:getAxisCount|
        |getButtonCount|                  |love-Joystick:getButtonCount|
        |getDeviceInfo|                   |love-Joystick:getDeviceInfo|
        |getGUID|                         |love-Joystick:getGUID|
        |getGamepadAxis|                  |love-Joystick:getGamepadAxis|
        |getGamepadMapping|               |love-Joystick:getGamepadMapping|
        |getGamepadMappingString|         |love-Joystick:getGamepadMappingStr-|
        |getHat|                          |love-Joystick:getHat|
        |getHatCount|                     |love-Joystick:getHatCount|
        |getID|                           |love-Joystick:getID|
        |getName|                         |love-Joystick:getName|
        |getVibration|                    |love-Joystick:getVibration|
        |isConnected|                     |love-Joystick:isConnected|
        |isDown|                          |love-Joystick:isDown|
        |isGamepad|                       |love-Joystick:isGamepad|
        |isGamepadDown|                   |love-Joystick:isGamepadDown|
        |isVibrationSupported|            |love-Joystick:isVibrationSupported|
        |setVibration|                    |love-Joystick:setVibration|

-------------------------------------------------------------------------------
                                                        *love-Joystick:getAxes*
|Joystick:getAxes|

Gets the direction of each axis.

Synopses:

    1.  `axisDir1`, `axisDir2`, `axisDirN` = |Joystick:getAxes|()

Variants:

    1.  `axisDir1`, `axisDir2`, `axisDirN` = |Joystick:getAxes|()

        See function description

        returns:

            `axisDir1`: |lrv-number|

                Direction of axis1.

            `axisDir2`: |lrv-number|

                Direction of axis2.

            `axisDirN`: |lrv-number|

                Direction of axisN.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Joystick:getAxis*
|Joystick:getAxis|

Gets the direction of an axis.

Synopses:

    1.  `direction` = |Joystick:getAxis|( `axis` )

Variants:

    1.  `direction` = |Joystick:getAxis|( `axis` )

        See function description

        returns:

            `direction`: |lrv-number|

                Current value of the axis.

        arguments:

            `axis`: |lrv-number|

                The index of the axis to be checked.

-------------------------------------------------------------------------------
                                                   *love-Joystick:getAxisCount*
|Joystick:getAxisCount|

Gets the number of axes on the joystick.

Synopses:

    1.  `axes` = |Joystick:getAxisCount|()

Variants:

    1.  `axes` = |Joystick:getAxisCount|()

        See function description

        returns:

            `axes`: |lrv-number|

                The number of axes available.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-Joystick:getButtonCount*
|Joystick:getButtonCount|

Gets the number of buttons on the joystick.

Synopses:

    1.  `buttons` = |Joystick:getButtonCount|()

Variants:

    1.  `buttons` = |Joystick:getButtonCount|()

        See function description

        returns:

            `buttons`: |lrv-number|

                The number of buttons available.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Joystick:getDeviceInfo*
|Joystick:getDeviceInfo|

Gets the USB vendor ID, product ID, and product version numbers of joystick
which consistent across operating systems.

Can be used to show different icons, etc. for different gamepads.

Synopses:

    1.  `vendorID`, `productID`, `productVersion` =
        |Joystick:getDeviceInfo|()

Variants:

    1.  `vendorID`, `productID`, `productVersion` =
        |Joystick:getDeviceInfo|()

        Some Linux distribution may not ship with SDL 2.0.6 or later, in which case this function will returns 0 for all the three values.

        returns:

            `vendorID`: |lrv-number|

                The USB vendor ID of the joystick.

            `productID`: |lrv-number|

                The USB product ID of the joystick.

            `productVersion`: |lrv-number|

                The product version of the joystick.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Joystick:getGUID*
|Joystick:getGUID|

Gets a stable GUID unique to the type of the physical joystick which does not
change over time. For example, all Sony Dualshock 3 controllers in OS X have
the same GUID. The value is platform-dependent.

Synopses:

    1.  `guid` = |Joystick:getGUID|()

Variants:

    1.  `guid` = |Joystick:getGUID|()

        See function description

        returns:

            `guid`: |lrv-string|

                The Joystick type's OS-dependent unique identifier.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-Joystick:getGamepadAxis*
|Joystick:getGamepadAxis|

Gets the direction of a virtual gamepad axis. If the Joystick isn't recognized
as a gamepad or isn't connected, this function will always return 0.

Synopses:

    1.  `direction` = |Joystick:getGamepadAxis|( `axis` )

Variants:

    1.  `direction` = |Joystick:getGamepadAxis|( `axis` )

        See function description

        returns:

            `direction`: |lrv-number|

                Current value of the axis.

        arguments:

            `axis`: |love-GamepadAxis|

                The virtual axis to be checked.

-------------------------------------------------------------------------------
                                              *love-Joystick:getGamepadMapping*
|Joystick:getGamepadMapping|

Gets the button, axis or hat that a virtual gamepad input is bound to.

Synopses:

    1.  `inputtype`, `inputindex`, `hatdirection` =
        |Joystick:getGamepadMapping|( `axis` )
    2.  `inputtype`, `inputindex`, `hatdirection` =
        |Joystick:getGamepadMapping|( `button` )

Variants:

    1.  `inputtype`, `inputindex`, `hatdirection` =
        |Joystick:getGamepadMapping|( `axis` )

        Returns nil if the Joystick isn't recognized as a gamepad or the virtual gamepad axis is not bound to a Joystick input.

        returns:

            `inputtype`: |love-JoystickInputType|

                The type of input the virtual gamepad axis is bound to.

            `inputindex`: |lrv-number|

                The index of the Joystick's button, axis or hat that the
                virtual gamepad axis is bound to.

            `hatdirection`: |love-JoystickHat|

                The direction of the hat, if the virtual gamepad axis is bound
                to a hat. nil otherwise.

        arguments:

            `axis`: |love-GamepadAxis|

                The virtual gamepad axis to get the binding for.
    2.  `inputtype`, `inputindex`, `hatdirection` =
        |Joystick:getGamepadMapping|( `button` )

        The physical locations for the virtual gamepad axes and buttons correspond as closely as possible to the layout of a standard Xbox 360 controller.

        returns:

            `inputtype`: |love-JoystickInputType|

                The type of input the virtual gamepad button is bound to.

            `inputindex`: |lrv-number|

                The index of the Joystick's button, axis or hat that the
                virtual gamepad button is bound to.

            `hatdirection`: |love-JoystickHat|

                The direction of the hat, if the virtual gamepad button is
                bound to a hat. nil otherwise.

        arguments:

            `button`: |love-GamepadButton|

                The virtual gamepad button to get the binding for.

-------------------------------------------------------------------------------
                                        *love-Joystick:getGamepadMappingString*
|Joystick:getGamepadMappingString|

Gets the full gamepad mapping string of this Joystick, or nil if it's not
recognized as a gamepad.

The mapping string contains binding information used to map the Joystick's
buttons an axes to the standard gamepad layout, and can be used later with
love.joystick.loadGamepadMappings.

Synopses:

    1.  `mappingstring` = |Joystick:getGamepadMappingString|()

Variants:

    1.  `mappingstring` = |Joystick:getGamepadMappingString|()

        See function description

        returns:

            `mappingstring`: |lrv-string|

                A string containing the Joystick's gamepad mappings, or nil if
                the Joystick is not recognized as a gamepad.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Joystick:getHat*
|Joystick:getHat|

Gets the direction of the Joystick's hat.

Synopses:

    1.  `direction` = |Joystick:getHat|( `hat` )

Variants:

    1.  `direction` = |Joystick:getHat|( `hat` )

        See function description

        returns:

            `direction`: |love-JoystickHat|

                The direction the hat is pushed.

        arguments:

            `hat`: |lrv-number|

                The index of the hat to be checked.

-------------------------------------------------------------------------------
                                                    *love-Joystick:getHatCount*
|Joystick:getHatCount|

Gets the number of hats on the joystick.

Synopses:

    1.  `hats` = |Joystick:getHatCount|()

Variants:

    1.  `hats` = |Joystick:getHatCount|()

        See function description

        returns:

            `hats`: |lrv-number|

                How many hats the joystick has.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Joystick:getID*
|Joystick:getID|

Gets the joystick's unique identifier. The identifier will remain the same for
the life of the game, even when the Joystick is disconnected and reconnected,
but it '''will''' change when the game is re-launched.

Synopses:

    1.  `id`, `instanceid` = |Joystick:getID|()

Variants:

    1.  `id`, `instanceid` = |Joystick:getID|()

        See function description

        returns:

            `id`: |lrv-number|

                The Joystick's unique identifier. Remains the same as long as
                the game is running.

            `instanceid`: |lrv-number|

                Unique instance identifier. Changes every time the Joystick is
                reconnected. nil if the Joystick is not connected.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Joystick:getName*
|Joystick:getName|

Gets the name of the joystick.

Synopses:

    1.  `name` = |Joystick:getName|()

Variants:

    1.  `name` = |Joystick:getName|()

        See function description

        returns:

            `name`: |lrv-string|

                The name of the joystick.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-Joystick:getVibration*
|Joystick:getVibration|

Gets the current vibration motor strengths on a Joystick with rumble support.

Synopses:

    1.  `left`, `right` = |Joystick:getVibration|()

Variants:

    1.  `left`, `right` = |Joystick:getVibration|()

        See function description

        returns:

            `left`: |lrv-number|

                Current strength of the left vibration motor on the Joystick.

            `right`: |lrv-number|

                Current strength of the right vibration motor on the Joystick.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-Joystick:isConnected*
|Joystick:isConnected|

Gets whether the Joystick is connected.

Synopses:

    1.  `connected` = |Joystick:isConnected|()

Variants:

    1.  `connected` = |Joystick:isConnected|()

        See function description

        returns:

            `connected`: |lrv-boolean|

                True if the Joystick is currently connected, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Joystick:isDown*
|Joystick:isDown|

Checks if a button on the Joystick is pressed.

LÖVE 0.9.0 had a bug which required the button indices passed to
Joystick:isDown to be 0-based instead of 1-based, for example button 1 would be
0 for this function. It was fixed in 0.9.1.

Synopses:

    1.  `anyDown` = |Joystick:isDown|( `buttonN` )

Variants:

    1.  `anyDown` = |Joystick:isDown|( `buttonN` )

        See function description

        returns:

            `anyDown`: |lrv-boolean|

                True if any supplied button is down, false if not.

        arguments:

            `buttonN`: |lrv-number|

                The index of a button to check.

-------------------------------------------------------------------------------
                                                      *love-Joystick:isGamepad*
|Joystick:isGamepad|

Gets whether the Joystick is recognized as a gamepad. If this is the case, the
Joystick's buttons and axes can be used in a standardized manner across
different operating systems and joystick models via Joystick:getGamepadAxis,
Joystick:isGamepadDown, love.gamepadpressed, and related functions.

LÖVE automatically recognizes most popular controllers with a similar layout
to the Xbox 360 controller as gamepads, but you can add more with
love.joystick.setGamepadMapping.

Synopses:

    1.  `isgamepad` = |Joystick:isGamepad|()

Variants:

    1.  `isgamepad` = |Joystick:isGamepad|()

        If the Joystick is recognized as a gamepad, the physical locations for the virtual gamepad axes and buttons correspond as closely as possible to the layout of a standard Xbox 360 controller.

        returns:

            `isgamepad`: |lrv-boolean|

                True if the Joystick is recognized as a gamepad, false
                otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Joystick:isGamepadDown*
|Joystick:isGamepadDown|

Checks if a virtual gamepad button on the Joystick is pressed. If the Joystick
is not recognized as a Gamepad or isn't connected, then this function will
always return false.

Synopses:

    1.  `anyDown` = |Joystick:isGamepadDown|( `buttonN` )

Variants:

    1.  `anyDown` = |Joystick:isGamepadDown|( `buttonN` )

        See function description

        returns:

            `anyDown`: |lrv-boolean|

                True if any supplied button is down, false if not.

        arguments:

            `buttonN`: |love-GamepadButton|

                The gamepad button to check.

-------------------------------------------------------------------------------
                                           *love-Joystick:isVibrationSupported*
|Joystick:isVibrationSupported|

Gets whether the Joystick supports vibration.

Synopses:

    1.  `supported` = |Joystick:isVibrationSupported|()

Variants:

    1.  `supported` = |Joystick:isVibrationSupported|()

        The very first call to this function may take more time than expected because SDL's Haptic / Force Feedback subsystem needs to be initialized.

        returns:

            `supported`: |lrv-boolean|

                True if rumble / force feedback vibration is supported on this
                Joystick, false if not.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-Joystick:setVibration*
|Joystick:setVibration|

Sets the vibration motor speeds on a Joystick with rumble support. Most common
gamepads have this functionality, although not all drivers give proper support.
Use Joystick:isVibrationSupported to check.

Synopses:

    1.  `success` = |Joystick:setVibration|( `left`, `right` )
    2.  `success` = |Joystick:setVibration|()
    3.  `success` = |Joystick:setVibration|( `left`, `right`,
        `duration` )

Variants:

    1.  `success` = |Joystick:setVibration|( `left`, `right` )

        See function description

        returns:

            `success`: |lrv-boolean|

                True if the vibration was successfully applied, false if not.

        arguments:

            `left`: |lrv-number|

                Strength of the left vibration motor on the Joystick. Must be
                in the range of 1.

            `right`: |lrv-number|

                Strength of the right vibration motor on the Joystick. Must be
                in the range of 1.
    2.  `success` = |Joystick:setVibration|()

        Disables vibration.

        returns:

            `success`: |lrv-boolean|

                True if the vibration was successfully disabled, false if not.

        arguments:

            None
    3.  `success` = |Joystick:setVibration|( `left`, `right`,
        `duration` )

        If the Joystick only has a single vibration motor, it will still work but it will use the largest value of the left and right parameters.

The Xbox 360 controller on Mac OS X only has support for vibration if a modified version of the Tattiebogle driver is used.

The very first call to this function may take more time than expected because SDL's Haptic / Force Feedback subsystem needs to be initialized.

        returns:

            `success`: |lrv-boolean|

                True if the vibration was successfully applied, false if not.

        arguments:

            `left`: |lrv-number|

                Strength of the left vibration motor on the Joystick. Must be
                in the range of 1.

            `right`: |lrv-number|

                Strength of the right vibration motor on the Joystick. Must be
                in the range of 1.

            `duration`: |lrv-number|

                The duration of the vibration in seconds. A negative value
                means infinite duration.

===============================================================================
                                                           *love-love.keyboard*
|love.keyboard|

Provides an interface to the user's keyboard.

    |callbacks|                           |love-love.keyboard-callbacks|
    |enums|                               |love-love.keyboard-enums|
    |functions|                           |love-love.keyboard-functions|
    |types|                               |love-love.keyboard-types|

-------------------------------------------------------------------------------
                                                 *love-love.keyboard-callbacks*
The callbacks of |love.keyboard|:

    None

-------------------------------------------------------------------------------
                                                     *love-love.keyboard-enums*
The enums of |love.keyboard|:

    |KeyConstant|                         |love-KeyConstant|
    |Scancode|                            |love-Scancode|

-------------------------------------------------------------------------------
                                                             *love-KeyConstant*
|KeyConstant|

All the keys you can press. Note that some keys may not be available on your
keyboard or system.

    constants:

        `a`: |lrv-string|

            The A key

        `b`: |lrv-string|

            The B key

        `c`: |lrv-string|

            The C key

        `d`: |lrv-string|

            The D key

        `e`: |lrv-string|

            The E key

        `f`: |lrv-string|

            The F key

        `g`: |lrv-string|

            The G key

        `h`: |lrv-string|

            The H key

        `i`: |lrv-string|

            The I key

        `j`: |lrv-string|

            The J key

        `k`: |lrv-string|

            The K key

        `l`: |lrv-string|

            The L key

        `m`: |lrv-string|

            The M key

        `n`: |lrv-string|

            The N key

        `o`: |lrv-string|

            The O key

        `p`: |lrv-string|

            The P key

        `q`: |lrv-string|

            The Q key

        `r`: |lrv-string|

            The R key

        `s`: |lrv-string|

            The S key

        `t`: |lrv-string|

            The T key

        `u`: |lrv-string|

            The U key

        `v`: |lrv-string|

            The V key

        `w`: |lrv-string|

            The W key

        `x`: |lrv-string|

            The X key

        `y`: |lrv-string|

            The Y key

        `z`: |lrv-string|

            The Z key

        `0`: |lrv-string|

            The zero key

        `1`: |lrv-string|

            The one key

        `2`: |lrv-string|

            The two key

        `3`: |lrv-string|

            The three key

        `4`: |lrv-string|

            The four key

        `5`: |lrv-string|

            The five key

        `6`: |lrv-string|

            The six key

        `7`: |lrv-string|

            The seven key

        `8`: |lrv-string|

            The eight key

        `9`: |lrv-string|

            The nine key

        `space`: |lrv-string|

            Space key

        `!`: |lrv-string|

            Exclamation mark key

        `"`: |lrv-string|

            Double quote key

        `#`: |lrv-string|

            Hash key

        `$`: |lrv-string|

            Dollar key

        `&`: |lrv-string|

            Ampersand key

        `'`: |lrv-string|

            Single quote key

        `(`: |lrv-string|

            Left parenthesis key

        `)`: |lrv-string|

            Right parenthesis key

        `*`: |lrv-string|

            Asterisk key

        `+`: |lrv-string|

            Plus key

        `,`: |lrv-string|

            Comma key

        `-`: |lrv-string|

            Hyphen-minus key

        `.`: |lrv-string|

            Full stop key

        `/`: |lrv-string|

            Slash key

        `:`: |lrv-string|

            Colon key

        `;`: |lrv-string|

            Semicolon key

        `<`: |lrv-string|

            Less-than key

        `=`: |lrv-string|

            Equal key

        `>`: |lrv-string|

            Greater-than key

        `?`: |lrv-string|

            Question mark key

        `@`: |lrv-string|

            At sign key

        `[`: |lrv-string|

            Left square bracket key

        `\`: |lrv-string|

            Backslash key

        `]`: |lrv-string|

            Right square bracket key

        `^`: |lrv-string|

            Caret key

        `_`: |lrv-string|

            Underscore key

        ```: |lrv-string|

            Grave accent key

        `kp0`: |lrv-string|

            The numpad zero key

        `kp1`: |lrv-string|

            The numpad one key

        `kp2`: |lrv-string|

            The numpad two key

        `kp3`: |lrv-string|

            The numpad three key

        `kp4`: |lrv-string|

            The numpad four key

        `kp5`: |lrv-string|

            The numpad five key

        `kp6`: |lrv-string|

            The numpad six key

        `kp7`: |lrv-string|

            The numpad seven key

        `kp8`: |lrv-string|

            The numpad eight key

        `kp9`: |lrv-string|

            The numpad nine key

        `kp.`: |lrv-string|

            The numpad decimal point key

        `kp/`: |lrv-string|

            The numpad division key

        `kp*`: |lrv-string|

            The numpad multiplication key

        `kp-`: |lrv-string|

            The numpad substraction key

        `kp+`: |lrv-string|

            The numpad addition key

        `kpenter`: |lrv-string|

            The numpad enter key

        `kp=`: |lrv-string|

            The numpad equals key

        `up`: |lrv-string|

            Up cursor key

        `down`: |lrv-string|

            Down cursor key

        `right`: |lrv-string|

            Right cursor key

        `left`: |lrv-string|

            Left cursor key

        `home`: |lrv-string|

            Home key

        `end`: |lrv-string|

            End key

        `pageup`: |lrv-string|

            Page up key

        `pagedown`: |lrv-string|

            Page down key

        `insert`: |lrv-string|

            Insert key

        `backspace`: |lrv-string|

            Backspace key

        `tab`: |lrv-string|

            Tab key

        `clear`: |lrv-string|

            Clear key

        `return`: |lrv-string|

            Return key

        `delete`: |lrv-string|

            Delete key

        `f1`: |lrv-string|

            The 1st function key

        `f2`: |lrv-string|

            The 2nd function key

        `f3`: |lrv-string|

            The 3rd function key

        `f4`: |lrv-string|

            The 4th function key

        `f5`: |lrv-string|

            The 5th function key

        `f6`: |lrv-string|

            The 6th function key

        `f7`: |lrv-string|

            The 7th function key

        `f8`: |lrv-string|

            The 8th function key

        `f9`: |lrv-string|

            The 9th function key

        `f10`: |lrv-string|

            The 10th function key

        `f11`: |lrv-string|

            The 11th function key

        `f12`: |lrv-string|

            The 12th function key

        `f13`: |lrv-string|

            The 13th function key

        `f14`: |lrv-string|

            The 14th function key

        `f15`: |lrv-string|

            The 15th function key

        `numlock`: |lrv-string|

            Num-lock key

        `capslock`: |lrv-string|

            Caps-lock key

        `scrollock`: |lrv-string|

            Scroll-lock key

        `rshift`: |lrv-string|

            Right shift key

        `lshift`: |lrv-string|

            Left shift key

        `rctrl`: |lrv-string|

            Right control key

        `lctrl`: |lrv-string|

            Left control key

        `ralt`: |lrv-string|

            Right alt key

        `lalt`: |lrv-string|

            Left alt key

        `rmeta`: |lrv-string|

            Right meta key

        `lmeta`: |lrv-string|

            Left meta key

        `lsuper`: |lrv-string|

            Left super key

        `rsuper`: |lrv-string|

            Right super key

        `mode`: |lrv-string|

            Mode key

        `compose`: |lrv-string|

            Compose key

        `pause`: |lrv-string|

            Pause key

        `escape`: |lrv-string|

            Escape key

        `help`: |lrv-string|

            Help key

        `print`: |lrv-string|

            Print key

        `sysreq`: |lrv-string|

            System request key

        `break`: |lrv-string|

            Break key

        `menu`: |lrv-string|

            Menu key

        `power`: |lrv-string|

            Power key

        `euro`: |lrv-string|

            Euro (&euro;) key

        `undo`: |lrv-string|

            Undo key

        `www`: |lrv-string|

            WWW key

        `mail`: |lrv-string|

            Mail key

        `calculator`: |lrv-string|

            Calculator key

        `appsearch`: |lrv-string|

            Application search key

        `apphome`: |lrv-string|

            Application home key

        `appback`: |lrv-string|

            Application back key

        `appforward`: |lrv-string|

            Application forward key

        `apprefresh`: |lrv-string|

            Application refresh key

        `appbookmarks`: |lrv-string|

            Application bookmarks key

-------------------------------------------------------------------------------
                                                                *love-Scancode*
|Scancode|

Keyboard scancodes.

Scancodes are keyboard layout-independent, so the scancode "w" will be
generated if the key in the same place as the "w" key on an American QWERTY
keyboard is pressed, no matter what the key is labelled or what the user's
operating system settings are.

Using scancodes, rather than keycodes, is useful because keyboards with layouts
differing from the US/UK layout(s) might have keys that generate 'unknown'
keycodes, but the scancodes will still be detected. This however would
necessitate having a list for each keyboard layout one would choose to support.

One could use textinput or textedited instead, but those only give back the end
result of keys used, i.e. you can't get modifiers on their own from it, only
the final symbols that were generated.

    constants:

        `a`: |lrv-string|

            The 'A' key on an American layout.

        `b`: |lrv-string|

            The 'B' key on an American layout.

        `c`: |lrv-string|

            The 'C' key on an American layout.

        `d`: |lrv-string|

            The 'D' key on an American layout.

        `e`: |lrv-string|

            The 'E' key on an American layout.

        `f`: |lrv-string|

            The 'F' key on an American layout.

        `g`: |lrv-string|

            The 'G' key on an American layout.

        `h`: |lrv-string|

            The 'H' key on an American layout.

        `i`: |lrv-string|

            The 'I' key on an American layout.

        `j`: |lrv-string|

            The 'J' key on an American layout.

        `k`: |lrv-string|

            The 'K' key on an American layout.

        `l`: |lrv-string|

            The 'L' key on an American layout.

        `m`: |lrv-string|

            The 'M' key on an American layout.

        `n`: |lrv-string|

            The 'N' key on an American layout.

        `o`: |lrv-string|

            The 'O' key on an American layout.

        `p`: |lrv-string|

            The 'P' key on an American layout.

        `q`: |lrv-string|

            The 'Q' key on an American layout.

        `r`: |lrv-string|

            The 'R' key on an American layout.

        `s`: |lrv-string|

            The 'S' key on an American layout.

        `t`: |lrv-string|

            The 'T' key on an American layout.

        `u`: |lrv-string|

            The 'U' key on an American layout.

        `v`: |lrv-string|

            The 'V' key on an American layout.

        `w`: |lrv-string|

            The 'W' key on an American layout.

        `x`: |lrv-string|

            The 'X' key on an American layout.

        `y`: |lrv-string|

            The 'Y' key on an American layout.

        `z`: |lrv-string|

            The 'Z' key on an American layout.

        `1`: |lrv-string|

            The '1' key on an American layout.

        `2`: |lrv-string|

            The '2' key on an American layout.

        `3`: |lrv-string|

            The '3' key on an American layout.

        `4`: |lrv-string|

            The '4' key on an American layout.

        `5`: |lrv-string|

            The '5' key on an American layout.

        `6`: |lrv-string|

            The '6' key on an American layout.

        `7`: |lrv-string|

            The '7' key on an American layout.

        `8`: |lrv-string|

            The '8' key on an American layout.

        `9`: |lrv-string|

            The '9' key on an American layout.

        `0`: |lrv-string|

            The '0' key on an American layout.

        `return`: |lrv-string|

            The 'return' / 'enter' key on an American layout.

        `escape`: |lrv-string|

            The 'escape' key on an American layout.

        `backspace`: |lrv-string|

            The 'backspace' key on an American layout.

        `tab`: |lrv-string|

            The 'tab' key on an American layout.

        `space`: |lrv-string|

            The spacebar on an American layout.

        `-`: |lrv-string|

            The minus key on an American layout.

        `=`: |lrv-string|

            The equals key on an American layout.

        `[`: |lrv-string|

            The left-bracket key on an American layout.

        `]`: |lrv-string|

            The right-bracket key on an American layout.

        `\`: |lrv-string|

            The backslash key on an American layout.

        `nonus#`: |lrv-string|

            The non-U.S. hash scancode.

        `;`: |lrv-string|

            The semicolon key on an American layout.

        `'`: |lrv-string|

            The apostrophe key on an American layout.

        ```: |lrv-string|

            The back-tick / grave key on an American layout.

        `,`: |lrv-string|

            The comma key on an American layout.

        `.`: |lrv-string|

            The period key on an American layout.

        `/`: |lrv-string|

            The forward-slash key on an American layout.

        `capslock`: |lrv-string|

            The capslock key on an American layout.

        `f1`: |lrv-string|

            The F1 key on an American layout.

        `f2`: |lrv-string|

            The F2 key on an American layout.

        `f3`: |lrv-string|

            The F3 key on an American layout.

        `f4`: |lrv-string|

            The F4 key on an American layout.

        `f5`: |lrv-string|

            The F5 key on an American layout.

        `f6`: |lrv-string|

            The F6 key on an American layout.

        `f7`: |lrv-string|

            The F7 key on an American layout.

        `f8`: |lrv-string|

            The F8 key on an American layout.

        `f9`: |lrv-string|

            The F9 key on an American layout.

        `f10`: |lrv-string|

            The F10 key on an American layout.

        `f11`: |lrv-string|

            The F11 key on an American layout.

        `f12`: |lrv-string|

            The F12 key on an American layout.

        `f13`: |lrv-string|

            The F13 key on an American layout.

        `f14`: |lrv-string|

            The F14 key on an American layout.

        `f15`: |lrv-string|

            The F15 key on an American layout.

        `f16`: |lrv-string|

            The F16 key on an American layout.

        `f17`: |lrv-string|

            The F17 key on an American layout.

        `f18`: |lrv-string|

            The F18 key on an American layout.

        `f19`: |lrv-string|

            The F19 key on an American layout.

        `f20`: |lrv-string|

            The F20 key on an American layout.

        `f21`: |lrv-string|

            The F21 key on an American layout.

        `f22`: |lrv-string|

            The F22 key on an American layout.

        `f23`: |lrv-string|

            The F23 key on an American layout.

        `f24`: |lrv-string|

            The F24 key on an American layout.

        `lctrl`: |lrv-string|

            The left control key on an American layout.

        `lshift`: |lrv-string|

            The left shift key on an American layout.

        `lalt`: |lrv-string|

            The left alt / option key on an American layout.

        `lgui`: |lrv-string|

            The left GUI (command / windows / super) key on an American layout.

        `rctrl`: |lrv-string|

            The right control key on an American layout.

        `rshift`: |lrv-string|

            The right shift key on an American layout.

        `ralt`: |lrv-string|

            The right alt / option key on an American layout.

        `rgui`: |lrv-string|

            The right GUI (command / windows / super) key on an American
            layout.

        `printscreen`: |lrv-string|

            The printscreen key on an American layout.

        `scrolllock`: |lrv-string|

            The scroll-lock key on an American layout.

        `pause`: |lrv-string|

            The pause key on an American layout.

        `insert`: |lrv-string|

            The insert key on an American layout.

        `home`: |lrv-string|

            The home key on an American layout.

        `numlock`: |lrv-string|

            The numlock / clear key on an American layout.

        `pageup`: |lrv-string|

            The page-up key on an American layout.

        `delete`: |lrv-string|

            The forward-delete key on an American layout.

        `end`: |lrv-string|

            The end key on an American layout.

        `pagedown`: |lrv-string|

            The page-down key on an American layout.

        `right`: |lrv-string|

            The right-arrow key on an American layout.

        `left`: |lrv-string|

            The left-arrow key on an American layout.

        `down`: |lrv-string|

            The down-arrow key on an American layout.

        `up`: |lrv-string|

            The up-arrow key on an American layout.

        `nonusbackslash`: |lrv-string|

            The non-U.S. backslash scancode.

        `application`: |lrv-string|

            The application key on an American layout. Windows contextual menu,
            compose key.

        `execute`: |lrv-string|

            The 'execute' key on an American layout.

        `help`: |lrv-string|

            The 'help' key on an American layout.

        `menu`: |lrv-string|

            The 'menu' key on an American layout.

        `select`: |lrv-string|

            The 'select' key on an American layout.

        `stop`: |lrv-string|

            The 'stop' key on an American layout.

        `again`: |lrv-string|

            The 'again' key on an American layout.

        `undo`: |lrv-string|

            The 'undo' key on an American layout.

        `cut`: |lrv-string|

            The 'cut' key on an American layout.

        `copy`: |lrv-string|

            The 'copy' key on an American layout.

        `paste`: |lrv-string|

            The 'paste' key on an American layout.

        `find`: |lrv-string|

            The 'find' key on an American layout.

        `kp/`: |lrv-string|

            The keypad forward-slash key on an American layout.

        `kp*`: |lrv-string|

            The keypad '*' key on an American layout.

        `kp-`: |lrv-string|

            The keypad minus key on an American layout.

        `kp+`: |lrv-string|

            The keypad plus key on an American layout.

        `kp=`: |lrv-string|

            The keypad equals key on an American layout.

        `kpenter`: |lrv-string|

            The keypad enter key on an American layout.

        `kp1`: |lrv-string|

            The keypad '1' key on an American layout.

        `kp2`: |lrv-string|

            The keypad '2' key on an American layout.

        `kp3`: |lrv-string|

            The keypad '3' key on an American layout.

        `kp4`: |lrv-string|

            The keypad '4' key on an American layout.

        `kp5`: |lrv-string|

            The keypad '5' key on an American layout.

        `kp6`: |lrv-string|

            The keypad '6' key on an American layout.

        `kp7`: |lrv-string|

            The keypad '7' key on an American layout.

        `kp8`: |lrv-string|

            The keypad '8' key on an American layout.

        `kp9`: |lrv-string|

            The keypad '9' key on an American layout.

        `kp0`: |lrv-string|

            The keypad '0' key on an American layout.

        `kp.`: |lrv-string|

            The keypad period key on an American layout.

        `international1`: |lrv-string|

            The 1st international key on an American layout. Used on Asian
            keyboards.

        `international2`: |lrv-string|

            The 2nd international key on an American layout.

        `international3`: |lrv-string|

            The 3rd international  key on an American layout. Yen.

        `international4`: |lrv-string|

            The 4th international key on an American layout.

        `international5`: |lrv-string|

            The 5th international key on an American layout.

        `international6`: |lrv-string|

            The 6th international key on an American layout.

        `international7`: |lrv-string|

            The 7th international key on an American layout.

        `international8`: |lrv-string|

            The 8th international key on an American layout.

        `international9`: |lrv-string|

            The 9th international key on an American layout.

        `lang1`: |lrv-string|

            Hangul/English toggle scancode.

        `lang2`: |lrv-string|

            Hanja conversion scancode.

        `lang3`: |lrv-string|

            Katakana scancode.

        `lang4`: |lrv-string|

            Hiragana scancode.

        `lang5`: |lrv-string|

            Zenkaku/Hankaku scancode.

        `mute`: |lrv-string|

            The mute key on an American layout.

        `volumeup`: |lrv-string|

            The volume up key on an American layout.

        `volumedown`: |lrv-string|

            The volume down key on an American layout.

        `audionext`: |lrv-string|

            The audio next track key on an American layout.

        `audioprev`: |lrv-string|

            The audio previous track key on an American layout.

        `audiostop`: |lrv-string|

            The audio stop key on an American layout.

        `audioplay`: |lrv-string|

            The audio play key on an American layout.

        `audiomute`: |lrv-string|

            The audio mute key on an American layout.

        `mediaselect`: |lrv-string|

            The media select key on an American layout.

        `www`: |lrv-string|

            The 'WWW' key on an American layout.

        `mail`: |lrv-string|

            The Mail key on an American layout.

        `calculator`: |lrv-string|

            The calculator key on an American layout.

        `computer`: |lrv-string|

            The 'computer' key on an American layout.

        `acsearch`: |lrv-string|

            The AC Search key on an American layout.

        `achome`: |lrv-string|

            The AC Home key on an American layout.

        `acback`: |lrv-string|

            The AC Back key on an American layout.

        `acforward`: |lrv-string|

            The AC Forward key on an American layout.

        `acstop`: |lrv-string|

            Th AC Stop key on an American layout.

        `acrefresh`: |lrv-string|

            The AC Refresh key on an American layout.

        `acbookmarks`: |lrv-string|

            The AC Bookmarks key on an American layout.

        `power`: |lrv-string|

            The system power scancode.

        `brightnessdown`: |lrv-string|

            The brightness-down scancode.

        `brightnessup`: |lrv-string|

            The brightness-up scancode.

        `displayswitch`: |lrv-string|

            The display switch scancode.

        `kbdillumtoggle`: |lrv-string|

            The keyboard illumination toggle scancode.

        `kbdillumdown`: |lrv-string|

            The keyboard illumination down scancode.

        `kbdillumup`: |lrv-string|

            The keyboard illumination up scancode.

        `eject`: |lrv-string|

            The eject scancode.

        `sleep`: |lrv-string|

            The system sleep scancode.

        `alterase`: |lrv-string|

            The alt-erase key on an American layout.

        `sysreq`: |lrv-string|

            The sysreq key on an American layout.

        `cancel`: |lrv-string|

            The 'cancel' key on an American layout.

        `clear`: |lrv-string|

            The 'clear' key on an American layout.

        `prior`: |lrv-string|

            The 'prior' key on an American layout.

        `return2`: |lrv-string|

            The 'return2' key on an American layout.

        `separator`: |lrv-string|

            The 'separator' key on an American layout.

        `out`: |lrv-string|

            The 'out' key on an American layout.

        `oper`: |lrv-string|

            The 'oper' key on an American layout.

        `clearagain`: |lrv-string|

            The 'clearagain' key on an American layout.

        `crsel`: |lrv-string|

            The 'crsel' key on an American layout.

        `exsel`: |lrv-string|

            The 'exsel' key on an American layout.

        `kp00`: |lrv-string|

            The keypad 00 key on an American layout.

        `kp000`: |lrv-string|

            The keypad 000 key on an American layout.

        `thsousandsseparator`: |lrv-string|

            The thousands-separator key on an American layout.

        `decimalseparator`: |lrv-string|

            The decimal separator key on an American layout.

        `currencyunit`: |lrv-string|

            The currency unit key on an American layout.

        `currencysubunit`: |lrv-string|

            The currency sub-unit key on an American layout.

        `app1`: |lrv-string|

            The 'app1' scancode.

        `app2`: |lrv-string|

            The 'app2' scancode.

        `unknown`: |lrv-string|

            An unknown key.

-------------------------------------------------------------------------------
                                                 *love-love.keyboard-functions*
The functions of |love.keyboard|:

    |getKeyFromScancode|                  |love-love.keyboard.getKeyFromScanc-|
    |getScancodeFromKey|                  |love-love.keyboard.getScancodeFrom-|
    |hasKeyRepeat|                        |love-love.keyboard.hasKeyRepeat|
    |hasTextInput|                        |love-love.keyboard.hasTextInput|
    |isDown|                              |love-love.keyboard.isDown|
    |isScancodeDown|                      |love-love.keyboard.isScancodeDown|
    |setKeyRepeat|                        |love-love.keyboard.setKeyRepeat|
    |setTextInput|                        |love-love.keyboard.setTextInput|

-------------------------------------------------------------------------------
                                        *love-love.keyboard.getKeyFromScancode*
|love.keyboard.getKeyFromScancode|

Gets the key corresponding to the given hardware scancode.

Unlike key constants, Scancodes are keyboard layout-independent. For example
the scancode 'w' will be generated if the key in the same place as the 'w' key
on an American keyboard is pressed, no matter what the key is labelled or what
the user's operating system settings are.

Scancodes are useful for creating default controls that have the same physical
locations on on all systems.

Synopses:

    1.  `key` = |love.keyboard.getKeyFromScancode|( `scancode` )

Variants:

    1.  `key` = |love.keyboard.getKeyFromScancode|( `scancode` )

        See function description

        returns:

            `key`: |love-KeyConstant|

                The key corresponding to the given scancode, or 'unknown' if
                the scancode doesn't map to a KeyConstant on the current
                system.

        arguments:

            `scancode`: |love-Scancode|

                The scancode to get the key from.

-------------------------------------------------------------------------------
                                        *love-love.keyboard.getScancodeFromKey*
|love.keyboard.getScancodeFromKey|

Gets the hardware scancode corresponding to the given key.

Unlike key constants, Scancodes are keyboard layout-independent. For example
the scancode 'w' will be generated if the key in the same place as the 'w' key
on an American keyboard is pressed, no matter what the key is labelled or what
the user's operating system settings are.

Scancodes are useful for creating default controls that have the same physical
locations on on all systems.

Synopses:

    1.  `scancode` = |love.keyboard.getScancodeFromKey|( `key` )

Variants:

    1.  `scancode` = |love.keyboard.getScancodeFromKey|( `key` )

        See function description

        returns:

            `scancode`: |love-Scancode|

                The scancode corresponding to the given key, or 'unknown' if
                the given key has no known physical representation on the
                current system.

        arguments:

            `key`: |love-KeyConstant|

                The key to get the scancode from.

-------------------------------------------------------------------------------
                                              *love-love.keyboard.hasKeyRepeat*
|love.keyboard.hasKeyRepeat|

Gets whether key repeat is enabled.

Synopses:

    1.  `enabled` = |love.keyboard.hasKeyRepeat|()

Variants:

    1.  `enabled` = |love.keyboard.hasKeyRepeat|()

        See function description

        returns:

            `enabled`: |lrv-boolean|

                Whether key repeat is enabled.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.keyboard.hasTextInput*
|love.keyboard.hasTextInput|

Gets whether text input events are enabled.

Synopses:

    1.  `enabled` = |love.keyboard.hasTextInput|()

Variants:

    1.  `enabled` = |love.keyboard.hasTextInput|()

        See function description

        returns:

            `enabled`: |lrv-boolean|

                Whether text input events are enabled.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.keyboard.isDown*
|love.keyboard.isDown|

Checks whether a certain key is down. Not to be confused with love.keypressed
or love.keyreleased.

Synopses:

    1.  `down` = |love.keyboard.isDown|( `key` )
    2.  `anyDown` = |love.keyboard.isDown|( `key`, `...` )

Variants:

    1.  `down` = |love.keyboard.isDown|( `key` )

        See function description

        returns:

            `down`: |lrv-boolean|

                True if the key is down, false if not.

        arguments:

            `key`: |love-KeyConstant|

                The key to check.
    2.  `anyDown` = |love.keyboard.isDown|( `key`, `...` )

        See function description

        returns:

            `anyDown`: |lrv-boolean|

                True if any supplied key is down, false if not.

        arguments:

            `key`: |love-KeyConstant|

                A key to check.

            `...`: |love-KeyConstant|

                Additional keys to check.

-------------------------------------------------------------------------------
                                            *love-love.keyboard.isScancodeDown*
|love.keyboard.isScancodeDown|

Checks whether the specified Scancodes are pressed. Not to be confused with
love.keypressed or love.keyreleased.

Unlike regular KeyConstants, Scancodes are keyboard layout-independent. The
scancode 'w' is used if the key in the same place as the 'w' key on an American
keyboard is pressed, no matter what the key is labelled or what the user's
operating system settings are.

Synopses:

    1.  `down` = |love.keyboard.isScancodeDown|( `scancode`, `...` )

Variants:

    1.  `down` = |love.keyboard.isScancodeDown|( `scancode`, `...` )

        See function description

        returns:

            `down`: |lrv-boolean|

                True if any supplied Scancode is down, false if not.

        arguments:

            `scancode`: |love-Scancode|

                A Scancode to check.

            `...`: |love-Scancode|

                Additional Scancodes to check.

-------------------------------------------------------------------------------
                                              *love-love.keyboard.setKeyRepeat*
|love.keyboard.setKeyRepeat|

Enables or disables key repeat for love.keypressed. It is disabled by default.

Synopses:

    1.  |love.keyboard.setKeyRepeat|( `enable` )

Variants:

    1.  |love.keyboard.setKeyRepeat|( `enable` )

        The interval between repeats depends on the user's system settings. This function doesn't affect whether love.textinput is called multiple times while a key is held down.

        returns:

            None

        arguments:

            `enable`: |lrv-boolean|

                Whether repeat keypress events should be enabled when a key is
                held down.

-------------------------------------------------------------------------------
                                              *love-love.keyboard.setTextInput*
|love.keyboard.setTextInput|

Enables or disables text input events. It is enabled by default on Windows,
Mac, and Linux, and disabled by default on iOS and Android.

On touch devices, this shows the system's native on-screen keyboard when it's
enabled.

Synopses:

    1.  |love.keyboard.setTextInput|( `enable` )
    2.  |love.keyboard.setTextInput|( `enable`, `x`, `y`, `w`, `h` )

Variants:

    1.  |love.keyboard.setTextInput|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: |lrv-boolean|

                Whether text input events should be enabled.
    2.  |love.keyboard.setTextInput|( `enable`, `x`, `y`, `w`, `h` )

        On iOS and Android this variant tells the OS that the specified rectangle is where text will show up in the game, which prevents the system on-screen keyboard from covering the text.

        returns:

            None

        arguments:

            `enable`: |lrv-boolean|

                Whether text input events should be enabled.

            `x`: |lrv-number|

                Text rectangle x position.

            `y`: |lrv-number|

                Text rectangle y position.

            `w`: |lrv-number|

                Text rectangle width.

            `h`: |lrv-number|

                Text rectangle height.
-------------------------------------------------------------------------------
                                                     *love-love.keyboard-types*
The types of |love.keyboard|:

    None

===============================================================================
                                                               *love-love.math*
|love.math|

Provides system-independent mathematical functions.

    |callbacks|                           |love-love.math-callbacks|
    |enums|                               |love-love.math-enums|
    |functions|                           |love-love.math-functions|
    |types|                               |love-love.math-types|

-------------------------------------------------------------------------------
                                                     *love-love.math-callbacks*
The callbacks of |love.math|:

    None

-------------------------------------------------------------------------------
                                                         *love-love.math-enums*
The enums of |love.math|:

    |CompressedDataFormat|                |love-CompressedDataFormat|
    |MatrixLayout|                        |love-MatrixLayout|

-------------------------------------------------------------------------------
                                                    *love-CompressedDataFormat*
|CompressedDataFormat|

Compressed data formats.

    constants:

        `lz4`: |lrv-string|

            The LZ4 compression format. Compresses and decompresses very
            quickly, but the compression ratio is not the best. LZ4-HC is used
            when compression level 9 is specified. Some benchmarks are
            available here.

        `zlib`: |lrv-string|

            The zlib format is DEFLATE-compressed data with a small bit of
            header data. Compresses relatively slowly and decompresses
            moderately quickly, and has a decent compression ratio.

        `gzip`: |lrv-string|

            The gzip format is DEFLATE-compressed data with a slightly larger
            header than zlib. Since it uses DEFLATE it has the same compression
            characteristics as the zlib format.

        `deflate`: |lrv-string|

            Raw DEFLATE-compressed data (no header).

-------------------------------------------------------------------------------
                                                            *love-MatrixLayout*
|MatrixLayout|

The layout of matrix elements (row-major or column-major).

    constants:

        `row`: |lrv-string|

            The matrix is row-major:

        `column`: |lrv-string|

            The matrix is column-major:

-------------------------------------------------------------------------------
                                                     *love-love.math-functions*
The functions of |love.math|:

    |colorFromBytes|                      |love-love.math.colorFromBytes|
    |colorToBytes|                        |love-love.math.colorToBytes|
    |compress|                            |love-love.math.compress|
    |decompress|                          |love-love.math.decompress|
    |gammaToLinear|                       |love-love.math.gammaToLinear|
    |getRandomSeed|                       |love-love.math.getRandomSeed|
    |getRandomState|                      |love-love.math.getRandomState|
    |isConvex|                            |love-love.math.isConvex|
    |linearToGamma|                       |love-love.math.linearToGamma|
    |newBezierCurve|                      |love-love.math.newBezierCurve|
    |newRandomGenerator|                  |love-love.math.newRandomGenerator|
    |newTransform|                        |love-love.math.newTransform|
    |noise|                               |love-love.math.noise|
    |random|                              |love-love.math.random|
    |randomNormal|                        |love-love.math.randomNormal|
    |setRandomSeed|                       |love-love.math.setRandomSeed|
    |setRandomState|                      |love-love.math.setRandomState|
    |triangulate|                         |love-love.math.triangulate|

-------------------------------------------------------------------------------
                                                *love-love.math.colorFromBytes*
|love.math.colorFromBytes|

Converts a color from 0..255 to 0..1 range.

Synopses:

    1.  `r`, `g`, `b`, `a` = |love.math.colorFromBytes|( `rb`, `gb`,
        `bb`, `ab` )

Variants:

    1.  `r`, `g`, `b`, `a` = |love.math.colorFromBytes|( `rb`, `gb`,
        `bb`, `ab` )

        Here's implementation for 11.2 and earlier.

function love.math.colorFromBytes(r, g, b, a)

	if type(r) == 'table' then

		r, g, b, a = rr[2, rr[4

	end

	r = clamp01(floor(r + 0.5) / 255)

	g = clamp01(floor(g + 0.5) / 255)

	b = clamp01(floor(b + 0.5) / 255)

	a = a ~= nil and clamp01(floor(a + 0.5) / 255) or nil

	return r, g, b, a

end

Where clamp01 is defined as follows

local function clamp01(x)

	return math.min(math.max(x, 0), 1)

end

        returns:

            `r`: |lrv-number|

                Red color component in 0..1 range.

            `g`: |lrv-number|

                Green color component in 0..1 range.

            `b`: |lrv-number|

                Blue color component in 0..1 range.

            `a`: |lrv-number|

                Alpha color component in 0..1 range or nil if alpha is not
                specified.

        arguments:

            `rb`: |lrv-number|

                Red color component in 0..255 range.

            `gb`: |lrv-number|

                Green color component in 0..255 range.

            `bb`: |lrv-number|

                Blue color component in 0..255 range.

            `ab`: |lrv-number|

                Alpha color component in 0..255 range.

-------------------------------------------------------------------------------
                                                  *love-love.math.colorToBytes*
|love.math.colorToBytes|

Converts a color from 0..1 to 0..255 range.

Synopses:

    1.  `rb`, `gb`, `bb`, `ab` = |love.math.colorToBytes|( `r`, `g`,
        `b`, `a` )

Variants:

    1.  `rb`, `gb`, `bb`, `ab` = |love.math.colorToBytes|( `r`, `g`,
        `b`, `a` )

        Here's implementation for 11.2 and earlier.

function love.math.colorToBytes(r, g, b, a)

	if type(r) == 'table' then

		r, g, b, a = rr[2, rr[4

	end

	r = floor(clamp01(r) * 255 + 0.5)

	g = floor(clamp01(g) * 255 + 0.5)

	b = floor(clamp01(b) * 255 + 0.5)

	a = a ~= nil and floor(clamp01(a) * 255 + 0.5) or nil

	return r, g, b, a

end

Where clamp01 is defined as follows

local function clamp01(x)

	return math.min(math.max(x, 0), 1)

end

        returns:

            `rb`: |lrv-number|

                Red color component in 0..255 range.

            `gb`: |lrv-number|

                Green color component in 0..255 range.

            `bb`: |lrv-number|

                Blue color component in 0..255 range.

            `ab`: |lrv-number|

                Alpha color component in 0..255 range or nil if alpha is not
                specified.

        arguments:

            `r`: |lrv-number|

                Red color component.

            `g`: |lrv-number|

                Green color component.

            `b`: |lrv-number|

                Blue color component.

            `a`: |lrv-number|

                Alpha color component.

-------------------------------------------------------------------------------
                                                      *love-love.math.compress*
|love.math.compress|

Compresses a string or data using a specific compression algorithm.

Synopses:

    1.  `compressedData` = |love.math.compress|( `rawstring`, `format`,
        `level` )
    2.  `compressedData` = |love.math.compress|( `data`, `format`,
        `level` )

Variants:

    1.  `compressedData` = |love.math.compress|( `rawstring`, `format`,
        `level` )

        See function description

        returns:

            `compressedData`: |love-CompressedData|

                A new Data object containing the compressed version of the
                string.

        arguments:

            `rawstring`: |lrv-string|

                The raw (un-compressed) string to compress.

            `format`: |love-CompressedDataFormat|

                The format to use when compressing the string.

            `level`: |lrv-number|

                The level of compression to use, between 0 and 9. -1 indicates
                the default level. The meaning of this argument depends on the
                compression format being used.
    2.  `compressedData` = |love.math.compress|( `data`, `format`,
        `level` )

        See function description

        returns:

            `compressedData`: |love-CompressedData|

                A new Data object containing the compressed version of the raw
                data.

        arguments:

            `data`: |love-Data|

                A Data object containing the raw (un-compressed) data to
                compress.

            `format`: |love-CompressedDataFormat|

                The format to use when compressing the data.

            `level`: |lrv-number|

                The level of compression to use, between 0 and 9. -1 indicates
                the default level. The meaning of this argument depends on the
                compression format being used.

-------------------------------------------------------------------------------
                                                    *love-love.math.decompress*
|love.math.decompress|

Decompresses a CompressedData or previously compressed string or Data object.

Synopses:

    1.  `rawstring` = |love.math.decompress|( `compressedData` )
    2.  `rawstring` = |love.math.decompress|( `compressedstring`,
        `format` )
    3.  `rawstring` = |love.math.decompress|( `data`, `format` )

Variants:

    1.  `rawstring` = |love.math.decompress|( `compressedData` )

        See function description

        returns:

            `rawstring`: |lrv-string|

                A string containing the raw decompressed data.

        arguments:

            `compressedData`: |love-CompressedData|

                The compressed data to decompress.
    2.  `rawstring` = |love.math.decompress|( `compressedstring`,
        `format` )

        See function description

        returns:

            `rawstring`: |lrv-string|

                A string containing the raw decompressed data.

        arguments:

            `compressedstring`: |lrv-string|

                A string containing data previously compressed with
                love.math.compress.

            `format`: |love-CompressedDataFormat|

                The format that was used to compress the given string.
    3.  `rawstring` = |love.math.decompress|( `data`, `format` )

        See function description

        returns:

            `rawstring`: |lrv-string|

                A string containing the raw decompressed data.

        arguments:

            `data`: |love-Data|

                A Data object containing data previously compressed with
                love.math.compress.

            `format`: |love-CompressedDataFormat|

                The format that was used to compress the given data.

-------------------------------------------------------------------------------
                                                 *love-love.math.gammaToLinear*
|love.math.gammaToLinear|

Converts a color from gamma-space (sRGB) to linear-space (RGB). This is useful
when doing gamma-correct rendering and you need to do math in linear RGB in the
few cases where LÖVE doesn't handle conversions automatically.

Read more about gamma-correct rendering here, here, and here.

In versions prior to 11.0, color component values were within the range of 0 to
255 instead of 0 to 1.

Synopses:

    1.  `lr`, `lg`, `lb` = |love.math.gammaToLinear|( `r`, `g`, `b` )
    2.  `lr`, `lg`, `lb` = |love.math.gammaToLinear|( `color` )
    3.  `lc` = |love.math.gammaToLinear|( `c` )

Variants:

    1.  `lr`, `lg`, `lb` = |love.math.gammaToLinear|( `r`, `g`, `b` )

        An alpha value can be passed into the function as a fourth argument, but it will be returned unchanged because alpha is always linear.

        returns:

            `lr`: |lrv-number|

                The red channel of the converted color in linear RGB space.

            `lg`: |lrv-number|

                The green channel of the converted color in linear RGB space.

            `lb`: |lrv-number|

                The blue channel of the converted color in linear RGB space.

        arguments:

            `r`: |lrv-number|

                The red channel of the sRGB color to convert.

            `g`: |lrv-number|

                The green channel of the sRGB color to convert.

            `b`: |lrv-number|

                The blue channel of the sRGB color to convert.
    2.  `lr`, `lg`, `lb` = |love.math.gammaToLinear|( `color` )

        See function description

        returns:

            `lr`: |lrv-number|

                The red channel of the converted color in linear RGB space.

            `lg`: |lrv-number|

                The green channel of the converted color in linear RGB space.

            `lb`: |lrv-number|

                The blue channel of the converted color in linear RGB space.

        arguments:

            `color`: |lrv-table|

                An array with the red, green, and blue channels of the sRGB
                color to convert.
    3.  `lc` = |love.math.gammaToLinear|( `c` )

        See function description

        returns:

            `lc`: |lrv-number|

                The value of the color channel in linear RGB space.

        arguments:

            `c`: |lrv-number|

                The value of a color channel in sRGB space to convert.

-------------------------------------------------------------------------------
                                                 *love-love.math.getRandomSeed*
|love.math.getRandomSeed|

Gets the seed of the random number generator.

The seed is split into two numbers due to Lua's use of doubles for all number
values - doubles can't accurately represent integer  values above 2^53, but the
seed can be an integer value up to 2^64.

Synopses:

    1.  `low`, `high` = |love.math.getRandomSeed|()

Variants:

    1.  `low`, `high` = |love.math.getRandomSeed|()

        See function description

        returns:

            `low`: |lrv-number|

                Integer number representing the lower 32 bits of the random
                number generator's 64 bit seed value.

            `high`: |lrv-number|

                Integer number representing the higher 32 bits of the random
                number generator's 64 bit seed value.

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-love.math.getRandomState*
|love.math.getRandomState|

Gets the current state of the random number generator. This returns an opaque
implementation-dependent string which is only useful for later use with
love.math.setRandomState or RandomGenerator:setState.

This is different from love.math.getRandomSeed in that getRandomState gets the
random number generator's current state, whereas getRandomSeed gets the
previously set seed number.

Synopses:

    1.  `state` = |love.math.getRandomState|()

Variants:

    1.  `state` = |love.math.getRandomState|()

        The value of the state string does not depend on the current operating system.

        returns:

            `state`: |lrv-string|

                The current state of the random number generator, represented
                as a string.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-love.math.isConvex*
|love.math.isConvex|

Checks whether a polygon is convex.

PolygonShapes in love.physics, some forms of Meshes, and polygons drawn with
love.graphics.polygon must be simple convex polygons.

Synopses:

    1.  `convex` = |love.math.isConvex|( `vertices` )
    2.  `convex` = |love.math.isConvex|( `x1`, `y1`, `x2`, `y2`, `x3`,
        `y3` )

Variants:

    1.  `convex` = |love.math.isConvex|( `vertices` )

        See function description

        returns:

            `convex`: |lrv-boolean|

                Whether the given polygon is convex.

        arguments:

            `vertices`: |lrv-table|

                The vertices of the polygon as a table in the form of {x1, y1,
                x2, y2, x3, y3, ...}.
    2.  `convex` = |love.math.isConvex|( `x1`, `y1`, `x2`, `y2`, `x3`,
        `y3` )

        See function description

        returns:

            `convex`: |lrv-boolean|

                Whether the given polygon is convex.

        arguments:

            `x1`: |lrv-number|

                The position of the first vertex of the polygon on the x-axis.

            `y1`: |lrv-number|

                The position of the first vertex of the polygon on the y-axis.

            `x2`: |lrv-number|

                The position of the second vertex of the polygon on the x-axis.

            `y2`: |lrv-number|

                The position of the second vertex of the polygon on the y-axis.

            `x3`: |lrv-number|

                The position of the third vertex of the polygon on the x-axis.

            `y3`: |lrv-number|

                The position of the third vertex of the polygon on the y-axis.

-------------------------------------------------------------------------------
                                                 *love-love.math.linearToGamma*
|love.math.linearToGamma|

Converts a color from linear-space (RGB) to gamma-space (sRGB). This is useful
when storing linear RGB color values in an image, because the linear RGB color
space has less precision than sRGB for dark colors, which can result in
noticeable color banding when drawing.

In general, colors chosen based on what they look like on-screen are already in
gamma-space and should not be double-converted. Colors calculated using math
are often in the linear RGB space.

Read more about gamma-correct rendering here, here, and here.

In versions prior to 11.0, color component values were within the range of 0 to
255 instead of 0 to 1.

Synopses:

    1.  `cr`, `cg`, `cb` = |love.math.linearToGamma|( `lr`, `lg`, `lb`
        )
    2.  `cr`, `cg`, `cb` = |love.math.linearToGamma|( `color` )
    3.  `c` = |love.math.linearToGamma|( `lc` )

Variants:

    1.  `cr`, `cg`, `cb` = |love.math.linearToGamma|( `lr`, `lg`, `lb`
        )

        An alpha value can be passed into the function as a fourth argument, but it will be returned unchanged because alpha is always linear.

        returns:

            `cr`: |lrv-number|

                The red channel of the converted color in gamma sRGB space.

            `cg`: |lrv-number|

                The green channel of the converted color in gamma sRGB space.

            `cb`: |lrv-number|

                The blue channel of the converted color in gamma sRGB space.

        arguments:

            `lr`: |lrv-number|

                The red channel of the linear RGB color to convert.

            `lg`: |lrv-number|

                The green channel of the linear RGB color to convert.

            `lb`: |lrv-number|

                The blue channel of the linear RGB color to convert.
    2.  `cr`, `cg`, `cb` = |love.math.linearToGamma|( `color` )

        See function description

        returns:

            `cr`: |lrv-number|

                The red channel of the converted color in gamma sRGB space.

            `cg`: |lrv-number|

                The green channel of the converted color in gamma sRGB space.

            `cb`: |lrv-number|

                The blue channel of the converted color in gamma sRGB space.

        arguments:

            `color`: |lrv-table|

                An array with the red, green, and blue channels of the linear
                RGB color to convert.
    3.  `c` = |love.math.linearToGamma|( `lc` )

        See function description

        returns:

            `c`: |lrv-number|

                The value of the color channel in gamma sRGB space.

        arguments:

            `lc`: |lrv-number|

                The value of a color channel in linear RGB space to convert.

-------------------------------------------------------------------------------
                                                *love-love.math.newBezierCurve*
|love.math.newBezierCurve|

Creates a new BezierCurve object.

The number of vertices in the control polygon determines the degree of the
curve, e.g. three vertices define a quadratic (degree 2) Bézier curve, four
vertices define a cubic (degree 3) Bézier curve, etc.

Synopses:

    1.  `curve` = |love.math.newBezierCurve|( `vertices` )
    2.  `curve` = |love.math.newBezierCurve|( `x1`, `y1`, `x2`, `y2`,
        `x3`, `y3` )

Variants:

    1.  `curve` = |love.math.newBezierCurve|( `vertices` )

        See function description

        returns:

            `curve`: |love-BezierCurve|

                A Bézier curve object.

        arguments:

            `vertices`: |lrv-table|

                The vertices of the control polygon as a table in the form of
                {x1, y1, x2, y2, x3, y3, ...}.
    2.  `curve` = |love.math.newBezierCurve|( `x1`, `y1`, `x2`, `y2`,
        `x3`, `y3` )

        See function description

        returns:

            `curve`: |love-BezierCurve|

                A Bézier curve object.

        arguments:

            `x1`: |lrv-number|

                The position of the first vertex of the control polygon on the
                x-axis.

            `y1`: |lrv-number|

                The position of the first vertex of the control polygon on the
                y-axis.

            `x2`: |lrv-number|

                The position of the second vertex of the control polygon on the
                x-axis.

            `y2`: |lrv-number|

                The position of the second vertex of the control polygon on the
                y-axis.

            `x3`: |lrv-number|

                The position of the third vertex of the control polygon on the
                x-axis.

            `y3`: |lrv-number|

                The position of the third vertex of the control polygon on the
                y-axis.

-------------------------------------------------------------------------------
                                            *love-love.math.newRandomGenerator*
|love.math.newRandomGenerator|

Creates a new RandomGenerator object which is completely independent of other
RandomGenerator objects and random functions.

Synopses:

    1.  `rng` = |love.math.newRandomGenerator|()
    2.  `rng` = |love.math.newRandomGenerator|( `seed` )
    3.  `rng` = |love.math.newRandomGenerator|( `low`, `high` )

Variants:

    1.  `rng` = |love.math.newRandomGenerator|()

        See function description

        returns:

            `rng`: |love-RandomGenerator|

                The new Random Number Generator object.

        arguments:

            None
    2.  `rng` = |love.math.newRandomGenerator|( `seed` )

        See RandomGenerator:setSeed.

        returns:

            `rng`: |love-RandomGenerator|

                The new Random Number Generator object.

        arguments:

            `seed`: |lrv-number|

                The initial seed number to use for this object.
    3.  `rng` = |love.math.newRandomGenerator|( `low`, `high` )

        See RandomGenerator:setSeed.

        returns:

            `rng`: |love-RandomGenerator|

                The new Random Number Generator object.

        arguments:

            `low`: |lrv-number|

                The lower 32 bits of the seed number to use for this object.

            `high`: |lrv-number|

                The higher 32 bits of the seed number to use for this object.

-------------------------------------------------------------------------------
                                                  *love-love.math.newTransform*
|love.math.newTransform|

Creates a new Transform object.

Synopses:

    1.  `transform` = |love.math.newTransform|()
    2.  `transform` = |love.math.newTransform|( `x`, `y`, `angle`,
        `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

Variants:

    1.  `transform` = |love.math.newTransform|()

        Creates a Transform with no transformations applied. Call methods on the returned object to apply transformations.

        returns:

            `transform`: |love-Transform|

                The new Transform object.

        arguments:

            None
    2.  `transform` = |love.math.newTransform|( `x`, `y`, `angle`,
        `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

        Creates a Transform with the specified transformation applied on creation.

        returns:

            `transform`: |love-Transform|

                The new Transform object.

        arguments:

            `x`: |lrv-number|

                The position of the new Transform on the x-axis.

            `y`: |lrv-number|

                The position of the new Transform on the y-axis.

            `angle`: |lrv-number|

                The orientation of the new Transform in radians.

            `sx`: |lrv-number|

                Scale factor on the x-axis.

            `sy`: |lrv-number|

                Scale factor on the y-axis.

            `ox`: |lrv-number|

                Origin offset on the x-axis.

            `oy`: |lrv-number|

                Origin offset on the y-axis.

            `kx`: |lrv-number|

                Shearing / skew factor on the x-axis.

            `ky`: |lrv-number|

                Shearing / skew factor on the y-axis.

-------------------------------------------------------------------------------
                                                         *love-love.math.noise*
|love.math.noise|

Generates a Simplex or Perlin noise value in 1-4 dimensions. The return value
will always be the same, given the same arguments.

Simplex noise is closely related to Perlin noise. It is widely used for
procedural content generation.

There are many webpages which discuss Perlin and Simplex noise in detail.

Synopses:

    1.  `value` = |love.math.noise|( `x` )
    2.  `value` = |love.math.noise|( `x`, `y` )
    3.  `value` = |love.math.noise|( `x`, `y`, `z` )
    4.  `value` = |love.math.noise|( `x`, `y`, `z`, `w` )

Variants:

    1.  `value` = |love.math.noise|( `x` )

        Generates Simplex noise from 1 dimension.

        returns:

            `value`: |lrv-number|

                The noise value in the range of 1.

        arguments:

            `x`: |lrv-number|

                The number used to generate the noise value.
    2.  `value` = |love.math.noise|( `x`, `y` )

        Generates Simplex noise from 2 dimensions.

        returns:

            `value`: |lrv-number|

                The noise value in the range of 1.

        arguments:

            `x`: |lrv-number|

                The first value of the 2-dimensional vector used to generate
                the noise value.

            `y`: |lrv-number|

                The second value of the 2-dimensional vector used to generate
                the noise value.
    3.  `value` = |love.math.noise|( `x`, `y`, `z` )

        Generates Perlin noise (Simplex noise in version 0.9.2 and older) from 3 dimensions.

        returns:

            `value`: |lrv-number|

                The noise value in the range of 1.

        arguments:

            `x`: |lrv-number|

                The first value of the 3-dimensional vector used to generate
                the noise value.

            `y`: |lrv-number|

                The second value of the 3-dimensional vector used to generate
                the noise value.

            `z`: |lrv-number|

                The third value of the 3-dimensional vector used to generate
                the noise value.
    4.  `value` = |love.math.noise|( `x`, `y`, `z`, `w` )

        Generates Perlin noise (Simplex noise in version 0.9.2 and older) from 4 dimensions.

        returns:

            `value`: |lrv-number|

                The noise value in the range of 1.

        arguments:

            `x`: |lrv-number|

                The first value of the 4-dimensional vector used to generate
                the noise value.

            `y`: |lrv-number|

                The second value of the 4-dimensional vector used to generate
                the noise value.

            `z`: |lrv-number|

                The third value of the 4-dimensional vector used to generate
                the noise value.

            `w`: |lrv-number|

                The fourth value of the 4-dimensional vector used to generate
                the noise value.

-------------------------------------------------------------------------------
                                                        *love-love.math.random*
|love.math.random|

Generates a pseudo-random number in a platform independent manner. The default
love.run seeds this function at startup, so you generally don't need to seed it
yourself.

Synopses:

    1.  `number` = |love.math.random|()
    2.  `number` = |love.math.random|( `max` )
    3.  `number` = |love.math.random|( `min`, `max` )

Variants:

    1.  `number` = |love.math.random|()

        Get uniformly distributed pseudo-random real number within 1.

        returns:

            `number`: |lrv-number|

                The pseudo-random number.

        arguments:

            None
    2.  `number` = |love.math.random|( `max` )

        Get a uniformly distributed pseudo-random integer within max.

        returns:

            `number`: |lrv-number|

                The pseudo-random integer number.

        arguments:

            `max`: |lrv-number|

                The maximum possible value it should return.
    3.  `number` = |love.math.random|( `min`, `max` )

        Get uniformly distributed pseudo-random integer within max.

        returns:

            `number`: |lrv-number|

                The pseudo-random integer number.

        arguments:

            `min`: |lrv-number|

                The minimum possible value it should return.

            `max`: |lrv-number|

                The maximum possible value it should return.

-------------------------------------------------------------------------------
                                                  *love-love.math.randomNormal*
|love.math.randomNormal|

Get a normally distributed pseudo random number.

Synopses:

    1.  `number` = |love.math.randomNormal|( `stddev`, `mean` )

Variants:

    1.  `number` = |love.math.randomNormal|( `stddev`, `mean` )

        See function description

        returns:

            `number`: |lrv-number|

                Normally distributed random number with variance (stddev)² and
                the specified mean.

        arguments:

            `stddev`: |lrv-number|

                Standard deviation of the distribution.

            `mean`: |lrv-number|

                The mean of the distribution.

-------------------------------------------------------------------------------
                                                 *love-love.math.setRandomSeed*
|love.math.setRandomSeed|

Sets the seed of the random number generator using the specified integer
number. This is called internally at startup, so you generally don't need to
call it yourself.

Synopses:

    1.  |love.math.setRandomSeed|( `seed` )
    2.  |love.math.setRandomSeed|( `low`, `high` )

Variants:

    1.  |love.math.setRandomSeed|( `seed` )

        Due to Lua's use of double-precision floating point numbers, integer values above 2^53 cannot be accurately represented. Use the other variant of the function if you want to use a larger number.

        returns:

            None

        arguments:

            `seed`: |lrv-number|

                The integer number with which you want to seed the
                randomization. Must be within the range of 2^53 - 1.
    2.  |love.math.setRandomSeed|( `low`, `high` )

        Combines two 32-bit integer numbers into a 64-bit integer value and sets the seed of the random number generator using the value.

        returns:

            None

        arguments:

            `low`: |lrv-number|

                The lower 32 bits of the seed value. Must be within the range
                of 2^32 - 1.

            `high`: |lrv-number|

                The higher 32 bits of the seed value. Must be within the range
                of 2^32 - 1.

-------------------------------------------------------------------------------
                                                *love-love.math.setRandomState*
|love.math.setRandomState|

Sets the current state of the random number generator. The value used as an
argument for this function is an opaque implementation-dependent string and
should only originate from a previous call to love.math.getRandomState.

This is different from love.math.setRandomSeed in that setRandomState directly
sets the random number generator's current implementation-dependent state,
whereas setRandomSeed gives it a new seed value.

Synopses:

    1.  |love.math.setRandomState|( `state` )

Variants:

    1.  |love.math.setRandomState|( `state` )

        The effect of the state string does not depend on the current operating system.

        returns:

            None

        arguments:

            `state`: |lrv-string|

                The new state of the random number generator, represented as a
                string. This should originate from a previous call to
                love.math.getRandomState.

-------------------------------------------------------------------------------
                                                   *love-love.math.triangulate*
|love.math.triangulate|

Decomposes a simple convex or concave polygon into triangles.

Synopses:

    1.  `triangles` = |love.math.triangulate|( `polygon` )
    2.  `triangles` = |love.math.triangulate|( `x1`, `y1`, `x2`, `y2`,
        `x3`, `y3` )

Variants:

    1.  `triangles` = |love.math.triangulate|( `polygon` )

        See function description

        returns:

            `triangles`: |lrv-table|

                List of triangles the polygon is composed of, in the form of
                {{x1, y1, x2, y2, x3, y3},  {x1, y1, x2, y2, x3, y3}, ...}.

        arguments:

            `polygon`: |lrv-table|

                Polygon to triangulate. Must not intersect itself.
    2.  `triangles` = |love.math.triangulate|( `x1`, `y1`, `x2`, `y2`,
        `x3`, `y3` )

        See function description

        returns:

            `triangles`: |lrv-table|

                List of triangles the polygon is composed of, in the form of
                {{x1, y1, x2, y2, x3, y3},  {x1, y1, x2, y2, x3, y3}, ...}.

        arguments:

            `x1`: |lrv-number|

                The position of the first vertex of the polygon on the x-axis.

            `y1`: |lrv-number|

                The position of the first vertex of the polygon on the y-axis.

            `x2`: |lrv-number|

                The position of the second vertex of the polygon on the x-axis.

            `y2`: |lrv-number|

                The position of the second vertex of the polygon on the y-axis.

            `x3`: |lrv-number|

                The position of the third vertex of the polygon on the x-axis.

            `y3`: |lrv-number|

                The position of the third vertex of the polygon on the y-axis.
-------------------------------------------------------------------------------
                                                         *love-love.math-types*
The types of |love.math|:

    |BezierCurve|                         |love-BezierCurve|
    |CompressedData|                      |love-CompressedData|
    |RandomGenerator|                     |love-RandomGenerator|
    |Transform|                           |love-Transform|

-------------------------------------------------------------------------------
                                                             *love-BezierCurve*
|BezierCurve|

A Bézier curve object that can evaluate and render Bézier curves of arbitrary
degree.

For more information on Bézier curves check this great article on Wikipedia.

                                                *love-BezierCurve-constructors*
    constructors:

        None

                                                  *love-BezierCurve-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                    *love-BezierCurve-subtypes*
    subtypes:

        None

                                                   *love-BezierCurve-functions*
    functions:

        |evaluate|                        |love-BezierCurve:evaluate|
        |getControlPoint|                 |love-BezierCurve:getControlPoint|
        |getControlPointCount|            |love-BezierCurve:getControlPointCo-|
        |getDegree|                       |love-BezierCurve:getDegree|
        |getDerivative|                   |love-BezierCurve:getDerivative|
        |getSegment|                      |love-BezierCurve:getSegment|
        |insertControlPoint|              |love-BezierCurve:insertControlPoint|
        |removeControlPoint|              |love-BezierCurve:removeControlPoint|
        |render|                          |love-BezierCurve:render|
        |renderSegment|                   |love-BezierCurve:renderSegment|
        |rotate|                          |love-BezierCurve:rotate|
        |scale|                           |love-BezierCurve:scale|
        |setControlPoint|                 |love-BezierCurve:setControlPoint|
        |translate|                       |love-BezierCurve:translate|

-------------------------------------------------------------------------------
                                                    *love-BezierCurve:evaluate*
|BezierCurve:evaluate|

Evaluate Bézier curve at parameter t. The parameter must be between 0 and 1
(inclusive).

This function can be used to move objects along paths or tween parameters.
However it should not be used to render the curve, see BezierCurve:render for
that purpose.

Synopses:

    1.  `x`, `y` = |BezierCurve:evaluate|( `t` )

Variants:

    1.  `x`, `y` = |BezierCurve:evaluate|( `t` )

        See function description

        returns:

            `x`: |lrv-number|

                x coordinate of the curve at parameter t.

            `y`: |lrv-number|

                y coordinate of the curve at parameter t.

        arguments:

            `t`: |lrv-number|

                Where to evaluate the curve.

-------------------------------------------------------------------------------
                                             *love-BezierCurve:getControlPoint*
|BezierCurve:getControlPoint|

Get coordinates of the i-th control point. Indices start with 1.

Synopses:

    1.  `x`, `y` = |BezierCurve:getControlPoint|( `i` )

Variants:

    1.  `x`, `y` = |BezierCurve:getControlPoint|( `i` )

        See function description

        returns:

            `x`: |lrv-number|

                Position of the control point along the x axis.

            `y`: |lrv-number|

                Position of the control point along the y axis.

        arguments:

            `i`: |lrv-number|

                Index of the control point.

-------------------------------------------------------------------------------
                                        *love-BezierCurve:getControlPointCount*
|BezierCurve:getControlPointCount|

Get the number of control points in the Bézier curve.

Synopses:

    1.  `count` = |BezierCurve:getControlPointCount|()

Variants:

    1.  `count` = |BezierCurve:getControlPointCount|()

        See function description

        returns:

            `count`: |lrv-number|

                The number of control points.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-BezierCurve:getDegree*
|BezierCurve:getDegree|

Get degree of the Bézier curve. The degree is equal to
number-of-control-points - 1.

Synopses:

    1.  `degree` = |BezierCurve:getDegree|()

Variants:

    1.  `degree` = |BezierCurve:getDegree|()

        See function description

        returns:

            `degree`: |lrv-number|

                Degree of the Bézier curve.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-BezierCurve:getDerivative*
|BezierCurve:getDerivative|

Get the derivative of the Bézier curve.

This function can be used to rotate sprites moving along a curve in the
direction of the movement and compute the direction perpendicular to the curve
at some parameter t.

Synopses:

    1.  `derivative` = |BezierCurve:getDerivative|()

Variants:

    1.  `derivative` = |BezierCurve:getDerivative|()

        See function description

        returns:

            `derivative`: |love-BezierCurve|

                The derivative curve.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-BezierCurve:getSegment*
|BezierCurve:getSegment|

Gets a BezierCurve that corresponds to the specified segment of this
BezierCurve.

Synopses:

    1.  `curve` = |BezierCurve:getSegment|( `startpoint`, `endpoint` )

Variants:

    1.  `curve` = |BezierCurve:getSegment|( `startpoint`, `endpoint` )

        See function description

        returns:

            `curve`: |love-BezierCurve|

                A BezierCurve that corresponds to the specified segment.

        arguments:

            `startpoint`: |lrv-number|

                The starting point along the curve. Must be between 0 and 1.

            `endpoint`: |lrv-number|

                The end of the segment. Must be between 0 and 1.

-------------------------------------------------------------------------------
                                          *love-BezierCurve:insertControlPoint*
|BezierCurve:insertControlPoint|

Insert control point as the new i-th control point. Existing control points
from i onwards are pushed back by 1. Indices start with 1. Negative indices
wrap around: -1 is the last control point, -2 the one before the last, etc.

Synopses:

    1.  |BezierCurve:insertControlPoint|( `x`, `y`, `i` )

Variants:

    1.  |BezierCurve:insertControlPoint|( `x`, `y`, `i` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                Position of the control point along the x axis.

            `y`: |lrv-number|

                Position of the control point along the y axis.

            `i`: |lrv-number|

                Index of the control point.

-------------------------------------------------------------------------------
                                          *love-BezierCurve:removeControlPoint*
|BezierCurve:removeControlPoint|

Removes the specified control point.

Synopses:

    1.  |BezierCurve:removeControlPoint|( `index` )

Variants:

    1.  |BezierCurve:removeControlPoint|( `index` )

        See function description

        returns:

            None

        arguments:

            `index`: |lrv-number|

                The index of the control point to remove.

-------------------------------------------------------------------------------
                                                      *love-BezierCurve:render*
|BezierCurve:render|

Get a list of coordinates to be used with love.graphics.line.

This function samples the Bézier curve using recursive subdivision. You can
control the recursion depth using the depth parameter.

If you are just interested to know the position on the curve given a parameter,
use BezierCurve:evaluate.

Synopses:

    1.  `coordinates` = |BezierCurve:render|( `depth` )

Variants:

    1.  `coordinates` = |BezierCurve:render|( `depth` )

        See function description

        returns:

            `coordinates`: |lrv-table|

                List of x,y-coordinate pairs of points on the curve.

        arguments:

            `depth`: |lrv-number|

                Number of recursive subdivision steps.

-------------------------------------------------------------------------------
                                               *love-BezierCurve:renderSegment*
|BezierCurve:renderSegment|

Get a list of coordinates on a specific part of the curve, to be used with
love.graphics.line.

This function samples the Bézier curve using recursive subdivision. You can
control the recursion depth using the depth parameter.

If you are just need to know the position on the curve given a parameter, use
BezierCurve:evaluate.

Synopses:

    1.  `coordinates` = |BezierCurve:renderSegment|( `startpoint`,
        `endpoint`, `depth` )

Variants:

    1.  `coordinates` = |BezierCurve:renderSegment|( `startpoint`,
        `endpoint`, `depth` )

        See function description

        returns:

            `coordinates`: |lrv-table|

                List of x,y-coordinate pairs of points on the specified part of
                the curve.

        arguments:

            `startpoint`: |lrv-number|

                The starting point along the curve. Must be between 0 and 1.

            `endpoint`: |lrv-number|

                The end of the segment to render. Must be between 0 and 1.

            `depth`: |lrv-number|

                Number of recursive subdivision steps.

-------------------------------------------------------------------------------
                                                      *love-BezierCurve:rotate*
|BezierCurve:rotate|

Rotate the Bézier curve by an angle.

Synopses:

    1.  |BezierCurve:rotate|( `angle`, `ox`, `oy` )

Variants:

    1.  |BezierCurve:rotate|( `angle`, `ox`, `oy` )

        See function description

        returns:

            None

        arguments:

            `angle`: |lrv-number|

                Rotation angle in radians.

            `ox`: |lrv-number|

                X coordinate of the rotation center.

            `oy`: |lrv-number|

                Y coordinate of the rotation center.

-------------------------------------------------------------------------------
                                                       *love-BezierCurve:scale*
|BezierCurve:scale|

Scale the Bézier curve by a factor.

Synopses:

    1.  |BezierCurve:scale|( `s`, `ox`, `oy` )

Variants:

    1.  |BezierCurve:scale|( `s`, `ox`, `oy` )

        See function description

        returns:

            None

        arguments:

            `s`: |lrv-number|

                Scale factor.

            `ox`: |lrv-number|

                X coordinate of the scaling center.

            `oy`: |lrv-number|

                Y coordinate of the scaling center.

-------------------------------------------------------------------------------
                                             *love-BezierCurve:setControlPoint*
|BezierCurve:setControlPoint|

Set coordinates of the i-th control point. Indices start with 1.

Synopses:

    1.  |BezierCurve:setControlPoint|( `i`, `x`, `y` )

Variants:

    1.  |BezierCurve:setControlPoint|( `i`, `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `i`: |lrv-number|

                Index of the control point.

            `x`: |lrv-number|

                Position of the control point along the x axis.

            `y`: |lrv-number|

                Position of the control point along the y axis.

-------------------------------------------------------------------------------
                                                   *love-BezierCurve:translate*
|BezierCurve:translate|

Move the Bézier curve by an offset.

Synopses:

    1.  |BezierCurve:translate|( `dx`, `dy` )

Variants:

    1.  |BezierCurve:translate|( `dx`, `dy` )

        See function description

        returns:

            None

        arguments:

            `dx`: |lrv-number|

                Offset along the x axis.

            `dy`: |lrv-number|

                Offset along the y axis.

-------------------------------------------------------------------------------
                                                          *love-CompressedData*
|CompressedData|

Represents byte data compressed using a specific algorithm.

love.data.decompress can be used to de-compress the data (or
love.math.decompress in 0.10.2 or earlier).

                                             *love-CompressedData-constructors*
    constructors:

        None

                                               *love-CompressedData-supertypes*
    supertypes:

        |Data|                            |love-Data|
        |Object|                          |love-Object|

                                                 *love-CompressedData-subtypes*
    subtypes:

        None

                                                *love-CompressedData-functions*
    functions:

        |getFormat|                       |love-CompressedData:getFormat|

-------------------------------------------------------------------------------
                                                *love-CompressedData:getFormat*
|CompressedData:getFormat|

Gets the compression format of the CompressedData.

Synopses:

    1.  `format` = |CompressedData:getFormat|()

Variants:

    1.  `format` = |CompressedData:getFormat|()

        See function description

        returns:

            `format`: |love-CompressedDataFormat|

                The format of the CompressedData.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-RandomGenerator*
|RandomGenerator|

A random number generation object which has its own random state.

                                            *love-RandomGenerator-constructors*
    constructors:

        None

                                              *love-RandomGenerator-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                *love-RandomGenerator-subtypes*
    subtypes:

        None

                                               *love-RandomGenerator-functions*
    functions:

        |getSeed|                         |love-RandomGenerator:getSeed|
        |getState|                        |love-RandomGenerator:getState|
        |random|                          |love-RandomGenerator:random|
        |randomNormal|                    |love-RandomGenerator:randomNormal|
        |setSeed|                         |love-RandomGenerator:setSeed|
        |setState|                        |love-RandomGenerator:setState|

-------------------------------------------------------------------------------
                                                 *love-RandomGenerator:getSeed*
|RandomGenerator:getSeed|

Gets the seed of the random number generator object.

The seed is split into two numbers due to Lua's use of doubles for all number
values - doubles can't accurately represent integer  values above 2^53, but the
seed value is an integer number in the range of 2^64 - 1.

Synopses:

    1.  `low`, `high` = |RandomGenerator:getSeed|()

Variants:

    1.  `low`, `high` = |RandomGenerator:getSeed|()

        See function description

        returns:

            `low`: |lrv-number|

                Integer number representing the lower 32 bits of the
                RandomGenerator's 64 bit seed value.

            `high`: |lrv-number|

                Integer number representing the higher 32 bits of the
                RandomGenerator's 64 bit seed value.

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-RandomGenerator:getState*
|RandomGenerator:getState|

Gets the current state of the random number generator. This returns an opaque
string which is only useful for later use with RandomGenerator:setState in the
same major version of LÖVE.

This is different from RandomGenerator:getSeed in that getState gets the
RandomGenerator's current state, whereas getSeed gets the previously set seed
number.

Synopses:

    1.  `state` = |RandomGenerator:getState|()

Variants:

    1.  `state` = |RandomGenerator:getState|()

        The value of the state string does not depend on the current operating system.

        returns:

            `state`: |lrv-string|

                The current state of the RandomGenerator object, represented as
                a string.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-RandomGenerator:random*
|RandomGenerator:random|

Generates a pseudo-random number in a platform independent manner.

Synopses:

    1.  `number` = |RandomGenerator:random|()
    2.  `number` = |RandomGenerator:random|( `max` )
    3.  `number` = |RandomGenerator:random|( `min`, `max` )

Variants:

    1.  `number` = |RandomGenerator:random|()

        Get uniformly distributed pseudo-random number within 1.

        returns:

            `number`: |lrv-number|

                The pseudo-random number.

        arguments:

            None
    2.  `number` = |RandomGenerator:random|( `max` )

        Get uniformly distributed pseudo-random integer number within max.

        returns:

            `number`: |lrv-number|

                The pseudo-random integer number.

        arguments:

            `max`: |lrv-number|

                The maximum possible value it should return.
    3.  `number` = |RandomGenerator:random|( `min`, `max` )

        Get uniformly distributed pseudo-random integer number within max.

        returns:

            `number`: |lrv-number|

                The pseudo-random integer number.

        arguments:

            `min`: |lrv-number|

                The minimum possible value it should return.

            `max`: |lrv-number|

                The maximum possible value it should return.

-------------------------------------------------------------------------------
                                            *love-RandomGenerator:randomNormal*
|RandomGenerator:randomNormal|

Get a normally distributed pseudo random number.

Synopses:

    1.  `number` = |RandomGenerator:randomNormal|( `stddev`, `mean` )

Variants:

    1.  `number` = |RandomGenerator:randomNormal|( `stddev`, `mean` )

        See function description

        returns:

            `number`: |lrv-number|

                Normally distributed random number with variance (stddev)² and
                the specified mean.

        arguments:

            `stddev`: |lrv-number|

                Standard deviation of the distribution.

            `mean`: |lrv-number|

                The mean of the distribution.

-------------------------------------------------------------------------------
                                                 *love-RandomGenerator:setSeed*
|RandomGenerator:setSeed|

Sets the seed of the random number generator using the specified integer
number.

Synopses:

    1.  |RandomGenerator:setSeed|( `seed` )
    2.  |RandomGenerator:setSeed|( `low`, `high` )

Variants:

    1.  |RandomGenerator:setSeed|( `seed` )

        Due to Lua's use of double-precision floating point numbers, values above 2^53 cannot be accurately represented. Use the other variant of this function if your seed will have a larger value.

        returns:

            None

        arguments:

            `seed`: |lrv-number|

                The integer number with which you want to seed the
                randomization. Must be within the range of 2^53.
    2.  |RandomGenerator:setSeed|( `low`, `high` )

        Combines two 32-bit integer numbers into a 64-bit integer value and sets the seed of the random number generator using the value.

        returns:

            None

        arguments:

            `low`: |lrv-number|

                The lower 32 bits of the seed value. Must be within the range
                of 2^32 - 1.

            `high`: |lrv-number|

                The higher 32 bits of the seed value. Must be within the range
                of 2^32 - 1.

-------------------------------------------------------------------------------
                                                *love-RandomGenerator:setState*
|RandomGenerator:setState|

Sets the current state of the random number generator. The value used as an
argument for this function is an opaque string and should only originate from a
previous call to RandomGenerator:getState in the same major version of LÖVE.

This is different from RandomGenerator:setSeed in that setState directly sets
the RandomGenerator's current implementation-dependent state, whereas setSeed
gives it a new seed value.

Synopses:

    1.  |RandomGenerator:setState|( `state` )

Variants:

    1.  |RandomGenerator:setState|( `state` )

        The effect of the state string does not depend on the current operating system.

        returns:

            None

        arguments:

            `state`: |lrv-string|

                The new state of the RandomGenerator object, represented as a
                string. This should originate from a previous call to
                RandomGenerator:getState.

-------------------------------------------------------------------------------
                                                               *love-Transform*
|Transform|

Object containing a coordinate system transformation.

The love.graphics module has several functions and function variants which
accept Transform objects.

                                                  *love-Transform-constructors*
    constructors:

        None

                                                    *love-Transform-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                      *love-Transform-subtypes*
    subtypes:

        None

                                                     *love-Transform-functions*
    functions:

        |apply|                           |love-Transform:apply|
        |clone|                           |love-Transform:clone|
        |getMatrix|                       |love-Transform:getMatrix|
        |inverse|                         |love-Transform:inverse|
        |inverseTransformPoint|           |love-Transform:inverseTransformPoi-|
        |isAffine|                        |love-Transform:isAffine|
        |reset|                           |love-Transform:reset|
        |rotate|                          |love-Transform:rotate|
        |scale|                           |love-Transform:scale|
        |setMatrix|                       |love-Transform:setMatrix|
        |setTransformation|               |love-Transform:setTransformation|
        |shear|                           |love-Transform:shear|
        |transformPoint|                  |love-Transform:transformPoint|
        |translate|                       |love-Transform:translate|

-------------------------------------------------------------------------------
                                                         *love-Transform:apply*
|Transform:apply|

Applies the given other Transform object to this one.

This effectively multiplies this Transform's internal transformation matrix
with the other Transform's (i.e. self * other), and stores the result in this
object.

Synopses:

    1.  `transform` = |Transform:apply|( `other` )

Variants:

    1.  `transform` = |Transform:apply|( `other` )

        See function description

        returns:

            `transform`: |love-Transform|

                The Transform object the method was called on. Allows easily
                chaining Transform methods.

        arguments:

            `other`: |love-Transform|

                The other Transform object to apply to this Transform.

-------------------------------------------------------------------------------
                                                         *love-Transform:clone*
|Transform:clone|

Creates a new copy of this Transform.

Synopses:

    1.  `clone` = |Transform:clone|()

Variants:

    1.  `clone` = |Transform:clone|()

        See function description

        returns:

            `clone`: |love-Transform|

                The copy of this Transform.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Transform:getMatrix*
|Transform:getMatrix|

Gets the internal 4x4 transformation matrix stored by this Transform. The
matrix is returned in row-major order.

Synopses:

    1.  `e1_1`, `e1_2`, `...`, `e4_4` = |Transform:getMatrix|()

Variants:

    1.  `e1_1`, `e1_2`, `...`, `e4_4` = |Transform:getMatrix|()

        See function description

        returns:

            `e1_1`: |lrv-number|

                The first column of the first row of the matrix.

            `e1_2`: |lrv-number|

                The second column of the first row of the matrix.

            `...`: |lrv-number|

                Additional matrix elements.

            `e4_4`: |lrv-number|

                The fourth column of the fourth row of the matrix.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Transform:inverse*
|Transform:inverse|

Creates a new Transform containing the inverse of this Transform.

Synopses:

    1.  `inverse` = |Transform:inverse|()

Variants:

    1.  `inverse` = |Transform:inverse|()

        See function description

        returns:

            `inverse`: |love-Transform|

                A new Transform object representing the inverse of this
                Transform's matrix.

        arguments:

            None

-------------------------------------------------------------------------------
                                         *love-Transform:inverseTransformPoint*
|Transform:inverseTransformPoint|

Applies the reverse of the Transform object's transformation to the given 2D
position.

This effectively converts the given position from the local coordinate space of
the Transform into global coordinates.

One use of this method can be to convert a screen-space mouse position into
global world coordinates, if the given Transform has transformations applied
that are used for a camera system in-game.

Synopses:

    1.  `globalX`, `globalY` = |Transform:inverseTransformPoint|(
        `localX`, `localY` )

Variants:

    1.  `globalX`, `globalY` = |Transform:inverseTransformPoint|(
        `localX`, `localY` )

        See function description

        returns:

            `globalX`: |lrv-number|

                The x component of the position in global coordinates.

            `globalY`: |lrv-number|

                The y component of the position in global coordinates.

        arguments:

            `localX`: |lrv-number|

                The x component of the position with the transform applied.

            `localY`: |lrv-number|

                The y component of the position with the transform applied.

-------------------------------------------------------------------------------
                                                      *love-Transform:isAffine*
|Transform:isAffine|

Checks whether the Transform is an affine transformation.

Synopses:

    1.  `affine` = |Transform:isAffine|()

Variants:

    1.  `affine` = |Transform:isAffine|()

        See function description

        returns:

            `affine`: |lrv-boolean|

                true if the transform object is an affine transformation, false
                otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Transform:reset*
|Transform:reset|

Resets the Transform to an identity state. All previously applied
transformations are erased.

Synopses:

    1.  `transform` = |Transform:reset|()

Variants:

    1.  `transform` = |Transform:reset|()

        See function description

        returns:

            `transform`: |love-Transform|

                The Transform object the method was called on. Allows easily
                chaining Transform methods.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Transform:rotate*
|Transform:rotate|

Applies a rotation to the Transform's coordinate system. This method does not
reset any previously applied transformations.

Synopses:

    1.  `transform` = |Transform:rotate|( `angle` )

Variants:

    1.  `transform` = |Transform:rotate|( `angle` )

        See function description

        returns:

            `transform`: |love-Transform|

                The Transform object the method was called on. Allows easily
                chaining Transform methods.

        arguments:

            `angle`: |lrv-number|

                The relative angle in radians to rotate this Transform by.

-------------------------------------------------------------------------------
                                                         *love-Transform:scale*
|Transform:scale|

Scales the Transform's coordinate system. This method does not reset any
previously applied transformations.

Synopses:

    1.  `transform` = |Transform:scale|( `sx`, `sy` )

Variants:

    1.  `transform` = |Transform:scale|( `sx`, `sy` )

        See function description

        returns:

            `transform`: |love-Transform|

                The Transform object the method was called on. Allows easily
                chaining Transform methods.

        arguments:

            `sx`: |lrv-number|

                The relative scale factor along the x-axis.

            `sy`: |lrv-number|

                The relative scale factor along the y-axis.

-------------------------------------------------------------------------------
                                                     *love-Transform:setMatrix*
|Transform:setMatrix|

Directly sets the Transform's internal 4x4 transformation matrix.

Synopses:

    1.  `transform` = |Transform:setMatrix|( `e1_1`, `e1_2`, `...`,
        `e4_4` )
    2.  `transform` = |Transform:setMatrix|( `layout`, `e1_1`, `e1_2`,
        `...`, `e4_4` )
    3.  `transform` = |Transform:setMatrix|( `layout`, `matrix` )
    4.  `transform` = |Transform:setMatrix|( `layout`, `matrix` )

Variants:

    1.  `transform` = |Transform:setMatrix|( `e1_1`, `e1_2`, `...`,
        `e4_4` )

        See function description

        returns:

            `transform`: |love-Transform|

                The Transform object the method was called on. Allows easily
                chaining Transform methods.

        arguments:

            `e1_1`: |lrv-number|

                The first column of the first row of the matrix.

            `e1_2`: |lrv-number|

                The second column of the first row of the matrix.

            `...`: |lrv-number|

                Additional matrix elements.

            `e4_4`: |lrv-number|

                The fourth column of the fourth row of the matrix.
    2.  `transform` = |Transform:setMatrix|( `layout`, `e1_1`, `e1_2`,
        `...`, `e4_4` )

        See function description

        returns:

            `transform`: |love-Transform|

                The Transform object the method was called on. Allows easily
                chaining Transform methods.

        arguments:

            `layout`: |love-MatrixLayout|

                How to interpret the matrix element arguments (row-major or
                column-major).

            `e1_1`: |lrv-number|

                The first column of the first row of the matrix.

            `e1_2`: |lrv-number|

                The second column of the first row or the first column of the
                second row of the matrix, depending on the specified layout.

            `...`: |lrv-number|

                Additional matrix elements.

            `e4_4`: |lrv-number|

                The fourth column of the fourth row of the matrix.
    3.  `transform` = |Transform:setMatrix|( `layout`, `matrix` )

        See function description

        returns:

            `transform`: |love-Transform|

                The Transform object the method was called on. Allows easily
                chaining Transform methods.

        arguments:

            `layout`: |love-MatrixLayout|

                How to interpret the matrix element arguments (row-major or
                column-major).

            `matrix`: |lrv-table|

                A flat table containing the 16 matrix elements.
    4.  `transform` = |Transform:setMatrix|( `layout`, `matrix` )

        See function description

        returns:

            `transform`: |love-Transform|

                The Transform object the method was called on. Allows easily
                chaining Transform methods.

        arguments:

            `layout`: |love-MatrixLayout|

                How to interpret the matrix element arguments (row-major or
                column-major).

            `matrix`: |lrv-table|

                A table of 4 tables, with each sub-table containing 4 matrix
                elements.

-------------------------------------------------------------------------------
                                             *love-Transform:setTransformation*
|Transform:setTransformation|

Resets the Transform to the specified transformation parameters.

Synopses:

    1.  `transform` = |Transform:setTransformation|( `x`, `y`, `angle`,
        `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

Variants:

    1.  `transform` = |Transform:setTransformation|( `x`, `y`, `angle`,
        `sx`, `sy`, `ox`, `oy`, `kx`, `ky` )

        See function description

        returns:

            `transform`: |love-Transform|

                The Transform object the method was called on. Allows easily
                chaining Transform methods.

        arguments:

            `x`: |lrv-number|

                The position of the Transform on the x-axis.

            `y`: |lrv-number|

                The position of the Transform on the y-axis.

            `angle`: |lrv-number|

                The orientation of the Transform in radians.

            `sx`: |lrv-number|

                Scale factor on the x-axis.

            `sy`: |lrv-number|

                Scale factor on the y-axis.

            `ox`: |lrv-number|

                Origin offset on the x-axis.

            `oy`: |lrv-number|

                Origin offset on the y-axis.

            `kx`: |lrv-number|

                Shearing / skew factor on the x-axis.

            `ky`: |lrv-number|

                Shearing / skew factor on the y-axis.

-------------------------------------------------------------------------------
                                                         *love-Transform:shear*
|Transform:shear|

Applies a shear factor (skew) to the Transform's coordinate system. This method
does not reset any previously applied transformations.

Synopses:

    1.  `transform` = |Transform:shear|( `kx`, `ky` )

Variants:

    1.  `transform` = |Transform:shear|( `kx`, `ky` )

        See function description

        returns:

            `transform`: |love-Transform|

                The Transform object the method was called on. Allows easily
                chaining Transform methods.

        arguments:

            `kx`: |lrv-number|

                The shear factor along the x-axis.

            `ky`: |lrv-number|

                The shear factor along the y-axis.

-------------------------------------------------------------------------------
                                                *love-Transform:transformPoint*
|Transform:transformPoint|

Applies the Transform object's transformation to the given 2D position.

This effectively converts the given position from global coordinates into the
local coordinate space of the Transform.

Synopses:

    1.  `localX`, `localY` = |Transform:transformPoint|( `globalX`,
        `globalY` )

Variants:

    1.  `localX`, `localY` = |Transform:transformPoint|( `globalX`,
        `globalY` )

        See function description

        returns:

            `localX`: |lrv-number|

                The x component of the position with the transform applied.

            `localY`: |lrv-number|

                The y component of the position with the transform applied.

        arguments:

            `globalX`: |lrv-number|

                The x component of the position in global coordinates.

            `globalY`: |lrv-number|

                The y component of the position in global coordinates.

-------------------------------------------------------------------------------
                                                     *love-Transform:translate*
|Transform:translate|

Applies a translation to the Transform's coordinate system. This method does
not reset any previously applied transformations.

Synopses:

    1.  `transform` = |Transform:translate|( `dx`, `dy` )

Variants:

    1.  `transform` = |Transform:translate|( `dx`, `dy` )

        See function description

        returns:

            `transform`: |love-Transform|

                The Transform object the method was called on. Allows easily
                chaining Transform methods.

        arguments:

            `dx`: |lrv-number|

                The relative translation along the x-axis.

            `dy`: |lrv-number|

                The relative translation along the y-axis.

===============================================================================
                                                              *love-love.mouse*
|love.mouse|

Provides an interface to the user's mouse.

    |callbacks|                           |love-love.mouse-callbacks|
    |enums|                               |love-love.mouse-enums|
    |functions|                           |love-love.mouse-functions|
    |types|                               |love-love.mouse-types|

-------------------------------------------------------------------------------
                                                    *love-love.mouse-callbacks*
The callbacks of |love.mouse|:

    None

-------------------------------------------------------------------------------
                                                        *love-love.mouse-enums*
The enums of |love.mouse|:

    |CursorType|                          |love-CursorType|

-------------------------------------------------------------------------------
                                                              *love-CursorType*
|CursorType|

Types of hardware cursors.

    constants:

        `image`: |lrv-string|

            The cursor is using a custom image.

        `arrow`: |lrv-string|

            An arrow pointer.

        `ibeam`: |lrv-string|

            An I-beam, normally used when mousing over editable or selectable
            text.

        `wait`: |lrv-string|

            Wait graphic.

        `waitarrow`: |lrv-string|

            Small wait cursor with an arrow pointer.

        `crosshair`: |lrv-string|

            Crosshair symbol.

        `sizenwse`: |lrv-string|

            Double arrow pointing to the top-left and bottom-right.

        `sizenesw`: |lrv-string|

            Double arrow pointing to the top-right and bottom-left.

        `sizewe`: |lrv-string|

            Double arrow pointing left and right.

        `sizens`: |lrv-string|

            Double arrow pointing up and down.

        `sizeall`: |lrv-string|

            Four-pointed arrow pointing up, down, left, and right.

        `no`: |lrv-string|

            Slashed circle or crossbones.

        `hand`: |lrv-string|

            Hand symbol.

-------------------------------------------------------------------------------
                                                    *love-love.mouse-functions*
The functions of |love.mouse|:

    |getCursor|                           |love-love.mouse.getCursor|
    |getPosition|                         |love-love.mouse.getPosition|
    |getRelativeMode|                     |love-love.mouse.getRelativeMode|
    |getSystemCursor|                     |love-love.mouse.getSystemCursor|
    |getX|                                |love-love.mouse.getX|
    |getY|                                |love-love.mouse.getY|
    |hasCursor|                           |love-love.mouse.hasCursor|
    |isCursorSupported|                   |love-love.mouse.isCursorSupported|
    |isDown|                              |love-love.mouse.isDown|
    |isGrabbed|                           |love-love.mouse.isGrabbed|
    |isVisible|                           |love-love.mouse.isVisible|
    |newCursor|                           |love-love.mouse.newCursor|
    |setCursor|                           |love-love.mouse.setCursor|
    |setGrabbed|                          |love-love.mouse.setGrabbed|
    |setPosition|                         |love-love.mouse.setPosition|
    |setRelativeMode|                     |love-love.mouse.setRelativeMode|
    |setVisible|                          |love-love.mouse.setVisible|
    |setX|                                |love-love.mouse.setX|
    |setY|                                |love-love.mouse.setY|

-------------------------------------------------------------------------------
                                                    *love-love.mouse.getCursor*
|love.mouse.getCursor|

Gets the current Cursor.

Synopses:

    1.  `cursor` = |love.mouse.getCursor|()

Variants:

    1.  `cursor` = |love.mouse.getCursor|()

        See function description

        returns:

            `cursor`: |love-Cursor|

                The current cursor, or nil if no cursor is set.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-love.mouse.getPosition*
|love.mouse.getPosition|

Returns the current position of the mouse.

Synopses:

    1.  `x`, `y` = |love.mouse.getPosition|()

Variants:

    1.  `x`, `y` = |love.mouse.getPosition|()

        See function description

        returns:

            `x`: |lrv-number|

                The position of the mouse along the x-axis.

            `y`: |lrv-number|

                The position of the mouse along the y-axis.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.mouse.getRelativeMode*
|love.mouse.getRelativeMode|

Gets whether relative mode is enabled for the mouse.

If relative mode is enabled, the cursor is hidden and doesn't move when the
mouse does, but relative mouse motion events are still generated via
love.mousemoved. This lets the mouse move in any direction indefinitely without
the cursor getting stuck at the edges of the screen.

The reported position of the mouse is not updated while relative mode is
enabled, even when relative mouse motion events are generated.

Synopses:

    1.  `enabled` = |love.mouse.getRelativeMode|()

Variants:

    1.  `enabled` = |love.mouse.getRelativeMode|()

        See function description

        returns:

            `enabled`: |lrv-boolean|

                True if relative mode is enabled, false if it's disabled.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.mouse.getSystemCursor*
|love.mouse.getSystemCursor|

Gets a Cursor object representing a system-native hardware cursor.

Hardware cursors are framerate-independent and work the same way as normal
operating system cursors. Unlike drawing an image at the mouse's current
coordinates, hardware cursors never have visible lag between when the mouse is
moved and when the cursor position updates, even at low framerates.

Synopses:

    1.  `cursor` = |love.mouse.getSystemCursor|( `ctype` )

Variants:

    1.  `cursor` = |love.mouse.getSystemCursor|( `ctype` )

        The 'image' CursorType is not a valid argument. Use love.mouse.newCursor to create a hardware cursor using a custom image.

        returns:

            `cursor`: |love-Cursor|

                The Cursor object representing the system cursor type.

        arguments:

            `ctype`: |love-CursorType|

                The type of system cursor to get.

-------------------------------------------------------------------------------
                                                         *love-love.mouse.getX*
|love.mouse.getX|

Returns the current x-position of the mouse.

Synopses:

    1.  `x` = |love.mouse.getX|()

Variants:

    1.  `x` = |love.mouse.getX|()

        See function description

        returns:

            `x`: |lrv-number|

                The position of the mouse along the x-axis.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-love.mouse.getY*
|love.mouse.getY|

Returns the current y-position of the mouse.

Synopses:

    1.  `y` = |love.mouse.getY|()

Variants:

    1.  `y` = |love.mouse.getY|()

        See function description

        returns:

            `y`: |lrv-number|

                The position of the mouse along the y-axis.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.mouse.hasCursor*
|love.mouse.hasCursor|

Gets whether cursor functionality is supported.

If it isn't supported, calling love.mouse.newCursor and
love.mouse.getSystemCursor will cause an error. Mobile devices do not support
cursors.

Synopses:

    1.  `hascursor` = |love.mouse.hasCursor|()

Variants:

    1.  `hascursor` = |love.mouse.hasCursor|()

        See function description

        returns:

            `hascursor`: |lrv-boolean|

                Whether the system has cursor functionality.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-love.mouse.isCursorSupported*
|love.mouse.isCursorSupported|

Gets whether cursor functionality is supported.

If it isn't supported, calling love.mouse.newCursor and
love.mouse.getSystemCursor will cause an error. Mobile devices do not support
cursors.

Synopses:

    1.  `supported` = |love.mouse.isCursorSupported|()

Variants:

    1.  `supported` = |love.mouse.isCursorSupported|()

        See function description

        returns:

            `supported`: |lrv-boolean|

                Whether the system has cursor functionality.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-love.mouse.isDown*
|love.mouse.isDown|

Checks whether a certain mouse button is down.

This function does not detect mouse wheel scrolling; you must use the
love.wheelmoved (or love.mousepressed in version 0.9.2 and older) callback for
that.

Synopses:

    1.  `down` = |love.mouse.isDown|( `button`, `...` )
    2.  `anyDown` = |love.mouse.isDown|( `buttonN` )

Variants:

    1.  `down` = |love.mouse.isDown|( `button`, `...` )

        See function description

        returns:

            `down`: |lrv-boolean|

                True if any specified button is down.

        arguments:

            `button`: |lrv-number|

                The index of a button to check. 1 is the primary mouse button,
                2 is the secondary mouse button and 3 is the middle button.
                Further buttons are mouse dependant.

            `...`: |lrv-number|

                Additional button numbers to check.
    2.  `anyDown` = |love.mouse.isDown|( `buttonN` )

        See function description

        returns:

            `anyDown`: |lrv-boolean|

                True if any specified button is down, false otherwise.

        arguments:

            `buttonN`: <MouseConstant>

                A button to check.

-------------------------------------------------------------------------------
                                                    *love-love.mouse.isGrabbed*
|love.mouse.isGrabbed|

Checks if the mouse is grabbed.

Synopses:

    1.  `grabbed` = |love.mouse.isGrabbed|()

Variants:

    1.  `grabbed` = |love.mouse.isGrabbed|()

        See function description

        returns:

            `grabbed`: |lrv-boolean|

                True if the cursor is grabbed, false if it is not.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.mouse.isVisible*
|love.mouse.isVisible|

Checks if the cursor is visible.

Synopses:

    1.  `visible` = |love.mouse.isVisible|()

Variants:

    1.  `visible` = |love.mouse.isVisible|()

        See function description

        returns:

            `visible`: |lrv-boolean|

                True if the cursor to visible, false if the cursor is hidden.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.mouse.newCursor*
|love.mouse.newCursor|

Creates a new hardware Cursor object from an image file or ImageData.

Hardware cursors are framerate-independent and work the same way as normal
operating system cursors. Unlike drawing an image at the mouse's current
coordinates, hardware cursors never have visible lag between when the mouse is
moved and when the cursor position updates, even at low framerates.

The hot spot is the point the operating system uses to determine what was
clicked and at what position the mouse cursor is. For example, the normal arrow
pointer normally has its hot spot at the top left of the image, but a crosshair
cursor might have it in the middle.

Synopses:

    1.  `cursor` = |love.mouse.newCursor|( `imageData`, `hotx`, `hoty`
        )
    2.  `cursor` = |love.mouse.newCursor|( `filename`, `hotx`, `hoty` )
    3.  `cursor` = |love.mouse.newCursor|( `fileData`, `hotx`, `hoty` )

Variants:

    1.  `cursor` = |love.mouse.newCursor|( `imageData`, `hotx`, `hoty`
        )

        See function description

        returns:

            `cursor`: |love-Cursor|

                The new Cursor object.

        arguments:

            `imageData`: |love-ImageData|

                The ImageData to use for the new Cursor.

            `hotx`: |lrv-number|

                The x-coordinate in the ImageData of the cursor's hot spot.

            `hoty`: |lrv-number|

                The y-coordinate in the ImageData of the cursor's hot spot.
    2.  `cursor` = |love.mouse.newCursor|( `filename`, `hotx`, `hoty` )

        See function description

        returns:

            `cursor`: |love-Cursor|

                The new Cursor object.

        arguments:

            `filename`: |lrv-string|

                Path to the image to use for the new Cursor.

            `hotx`: |lrv-number|

                The x-coordinate in the image of the cursor's hot spot.

            `hoty`: |lrv-number|

                The y-coordinate in the image of the cursor's hot spot.
    3.  `cursor` = |love.mouse.newCursor|( `fileData`, `hotx`, `hoty` )

        See function description

        returns:

            `cursor`: |love-Cursor|

                The new Cursor object.

        arguments:

            `fileData`: |love-FileData|

                Data representing the image to use for the new Cursor.

            `hotx`: |lrv-number|

                The x-coordinate in the image of the cursor's hot spot.

            `hoty`: |lrv-number|

                The y-coordinate in the image of the cursor's hot spot.

-------------------------------------------------------------------------------
                                                    *love-love.mouse.setCursor*
|love.mouse.setCursor|

Sets the current mouse cursor.

Synopses:

    1.  |love.mouse.setCursor|( `cursor` )
    2.  |love.mouse.setCursor|()

Variants:

    1.  |love.mouse.setCursor|( `cursor` )

        See function description

        returns:

            None

        arguments:

            `cursor`: |love-Cursor|

                The Cursor object to use as the current mouse cursor.
    2.  |love.mouse.setCursor|()

        Resets the current mouse cursor to the default.

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-love.mouse.setGrabbed*
|love.mouse.setGrabbed|

Grabs the mouse and confines it to the window.

Synopses:

    1.  |love.mouse.setGrabbed|( `grab` )

Variants:

    1.  |love.mouse.setGrabbed|( `grab` )

        See function description

        returns:

            None

        arguments:

            `grab`: |lrv-boolean|

                True to confine the mouse, false to let it leave the window.

-------------------------------------------------------------------------------
                                                  *love-love.mouse.setPosition*
|love.mouse.setPosition|

Sets the current position of the mouse. Non-integer values are floored.

Synopses:

    1.  |love.mouse.setPosition|( `x`, `y` )

Variants:

    1.  |love.mouse.setPosition|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The new position of the mouse along the x-axis.

            `y`: |lrv-number|

                The new position of the mouse along the y-axis.

-------------------------------------------------------------------------------
                                              *love-love.mouse.setRelativeMode*
|love.mouse.setRelativeMode|

Sets whether relative mode is enabled for the mouse.

When relative mode is enabled, the cursor is hidden and doesn't move when the
mouse does, but relative mouse motion events are still generated via
love.mousemoved. This lets the mouse move in any direction indefinitely without
the cursor getting stuck at the edges of the screen.

The reported position of the mouse may not be updated while relative mode is
enabled, even when relative mouse motion events are generated.

Synopses:

    1.  |love.mouse.setRelativeMode|( `enable` )

Variants:

    1.  |love.mouse.setRelativeMode|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: |lrv-boolean|

                True to enable relative mode, false to disable it.

-------------------------------------------------------------------------------
                                                   *love-love.mouse.setVisible*
|love.mouse.setVisible|

Sets the current visibility of the cursor.

Synopses:

    1.  |love.mouse.setVisible|( `visible` )

Variants:

    1.  |love.mouse.setVisible|( `visible` )

        See function description

        returns:

            None

        arguments:

            `visible`: |lrv-boolean|

                True to set the cursor to visible, false to hide the cursor.

-------------------------------------------------------------------------------
                                                         *love-love.mouse.setX*
|love.mouse.setX|

Sets the current X position of the mouse.

Non-integer values are floored.

Synopses:

    1.  |love.mouse.setX|( `x` )

Variants:

    1.  |love.mouse.setX|( `x` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The new position of the mouse along the x-axis.

-------------------------------------------------------------------------------
                                                         *love-love.mouse.setY*
|love.mouse.setY|

Sets the current Y position of the mouse.

Non-integer values are floored.

Synopses:

    1.  |love.mouse.setY|( `y` )

Variants:

    1.  |love.mouse.setY|( `y` )

        See function description

        returns:

            None

        arguments:

            `y`: |lrv-number|

                The new position of the mouse along the y-axis.
-------------------------------------------------------------------------------
                                                        *love-love.mouse-types*
The types of |love.mouse|:

    |Cursor|                              |love-Cursor|

-------------------------------------------------------------------------------
                                                                  *love-Cursor*
|Cursor|

Represents a hardware cursor.

                                                     *love-Cursor-constructors*
    constructors:

        None

                                                       *love-Cursor-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                         *love-Cursor-subtypes*
    subtypes:

        None

                                                        *love-Cursor-functions*
    functions:

        |getType|                         |love-Cursor:getType|

-------------------------------------------------------------------------------
                                                          *love-Cursor:getType*
|Cursor:getType|

Gets the type of the Cursor.

Synopses:

    1.  `ctype` = |Cursor:getType|()

Variants:

    1.  `ctype` = |Cursor:getType|()

        See function description

        returns:

            `ctype`: |love-CursorType|

                The type of the Cursor.

        arguments:

            None

===============================================================================
                                                            *love-love.physics*
|love.physics|

Can simulate 2D rigid body physics in a realistic manner. This module is based
on Box2D, and this API corresponds to the Box2D API as closely as possible.

    |callbacks|                           |love-love.physics-callbacks|
    |enums|                               |love-love.physics-enums|
    |functions|                           |love-love.physics-functions|
    |types|                               |love-love.physics-types|

-------------------------------------------------------------------------------
                                                  *love-love.physics-callbacks*
The callbacks of |love.physics|:

    None

-------------------------------------------------------------------------------
                                                      *love-love.physics-enums*
The enums of |love.physics|:

    |BodyType|                            |love-BodyType|
    |JointType|                           |love-JointType|
    |ShapeType|                           |love-ShapeType|

-------------------------------------------------------------------------------
                                                                *love-BodyType*
|BodyType|

The types of a Body.

    constants:

        `static`: |lrv-string|

            Static bodies do not move.

        `dynamic`: |lrv-string|

            Dynamic bodies collide with all bodies.

        `kinematic`: |lrv-string|

            Kinematic bodies only collide with dynamic bodies.

-------------------------------------------------------------------------------
                                                               *love-JointType*
|JointType|

Different types of joints.

    constants:

        `distance`: |lrv-string|

            A DistanceJoint.

        `friction`: |lrv-string|

            A FrictionJoint.

        `gear`: |lrv-string|

            A GearJoint.

        `mouse`: |lrv-string|

            A MouseJoint.

        `prismatic`: |lrv-string|

            A PrismaticJoint.

        `pulley`: |lrv-string|

            A PulleyJoint.

        `revolute`: |lrv-string|

            A RevoluteJoint.

        `rope`: |lrv-string|

            A RopeJoint.

        `weld`: |lrv-string|

            A WeldJoint.

-------------------------------------------------------------------------------
                                                               *love-ShapeType*
|ShapeType|

The different types of Shapes, as returned by Shape:getType.

    constants:

        `circle`: |lrv-string|

            The Shape is a CircleShape.

        `polygon`: |lrv-string|

            The Shape is a PolygonShape.

        `edge`: |lrv-string|

            The Shape is a EdgeShape.

        `chain`: |lrv-string|

            The Shape is a ChainShape.

-------------------------------------------------------------------------------
                                                  *love-love.physics-functions*
The functions of |love.physics|:

    |getDistance|                         |love-love.physics.getDistance|
    |getMeter|                            |love-love.physics.getMeter|
    |newBody|                             |love-love.physics.newBody|
    |newChainShape|                       |love-love.physics.newChainShape|
    |newCircleShape|                      |love-love.physics.newCircleShape|
    |newDistanceJoint|                    |love-love.physics.newDistanceJoint|
    |newEdgeShape|                        |love-love.physics.newEdgeShape|
    |newFixture|                          |love-love.physics.newFixture|
    |newFrictionJoint|                    |love-love.physics.newFrictionJoint|
    |newGearJoint|                        |love-love.physics.newGearJoint|
    |newMotorJoint|                       |love-love.physics.newMotorJoint|
    |newMouseJoint|                       |love-love.physics.newMouseJoint|
    |newPolygonShape|                     |love-love.physics.newPolygonShape|
    |newPrismaticJoint|                   |love-love.physics.newPrismaticJoint|
    |newPulleyJoint|                      |love-love.physics.newPulleyJoint|
    |newRectangleShape|                   |love-love.physics.newRectangleShape|
    |newRevoluteJoint|                    |love-love.physics.newRevoluteJoint|
    |newRopeJoint|                        |love-love.physics.newRopeJoint|
    |newWeldJoint|                        |love-love.physics.newWeldJoint|
    |newWheelJoint|                       |love-love.physics.newWheelJoint|
    |newWorld|                            |love-love.physics.newWorld|
    |setMeter|                            |love-love.physics.setMeter|

-------------------------------------------------------------------------------
                                                *love-love.physics.getDistance*
|love.physics.getDistance|

Returns the two closest points between two fixtures and their distance.

Synopses:

    1.  `distance`, `x1`, `y1`, `x2`, `y2` =
        |love.physics.getDistance|( `fixture1`, `fixture2` )

Variants:

    1.  `distance`, `x1`, `y1`, `x2`, `y2` =
        |love.physics.getDistance|( `fixture1`, `fixture2` )

        See function description

        returns:

            `distance`: |lrv-number|

                The distance of the two points.

            `x1`: |lrv-number|

                The x-coordinate of the first point.

            `y1`: |lrv-number|

                The y-coordinate of the first point.

            `x2`: |lrv-number|

                The x-coordinate of the second point.

            `y2`: |lrv-number|

                The y-coordinate of the second point.

        arguments:

            `fixture1`: |love-Fixture|

                The first fixture.

            `fixture2`: |love-Fixture|

                The second fixture.

-------------------------------------------------------------------------------
                                                   *love-love.physics.getMeter*
|love.physics.getMeter|

Returns the meter scale factor.

All coordinates in the physics module are divided by this number, creating a
convenient way to draw the objects directly to the screen without the need for
graphics transformations.

It is recommended to create shapes no larger than 10 times the scale. This is
important because Box2D is tuned to work well with shape sizes from 0.1 to 10
meters.

Synopses:

    1.  `scale` = |love.physics.getMeter|()

Variants:

    1.  `scale` = |love.physics.getMeter|()

        See function description

        returns:

            `scale`: |lrv-number|

                The scale factor as an integer.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.physics.newBody*
|love.physics.newBody|

Creates a new body.

There are three types of bodies.

* Static bodies do not move, have a infinite mass, and can be used for level
boundaries.

* Dynamic bodies are the main actors in the simulation, they collide with
everything.

* Kinematic bodies do not react to forces and only collide with dynamic bodies.

The mass of the body gets calculated when a Fixture is attached or removed, but
can be changed at any time with Body:setMass or Body:resetMassData.

Synopses:

    1.  `body` = |love.physics.newBody|( `world`, `x`, `y`, `type` )

Variants:

    1.  `body` = |love.physics.newBody|( `world`, `x`, `y`, `type` )

        See function description

        returns:

            `body`: |love-Body|

                A new body.

        arguments:

            `world`: |love-World|

                The world to create the body in.

            `x`: |lrv-number|

                The x position of the body.

            `y`: |lrv-number|

                The y position of the body.

            `type`: |love-BodyType|

                The type of the body.

-------------------------------------------------------------------------------
                                              *love-love.physics.newChainShape*
|love.physics.newChainShape|

Creates a new ChainShape.

Synopses:

    1.  `shape` = |love.physics.newChainShape|( `loop`, `x1`, `y1`,
        `x2`, `y2`, `...` )
    2.  `shape` = |love.physics.newChainShape|( `loop`, `points` )

Variants:

    1.  `shape` = |love.physics.newChainShape|( `loop`, `x1`, `y1`,
        `x2`, `y2`, `...` )

        See function description

        returns:

            `shape`: |love-ChainShape|

                The new shape.

        arguments:

            `loop`: |lrv-boolean|

                If the chain should loop back to the first point.

            `x1`: |lrv-number|

                The x position of the first point.

            `y1`: |lrv-number|

                The y position of the first point.

            `x2`: |lrv-number|

                The x position of the second point.

            `y2`: |lrv-number|

                The y position of the second point.

            `...`: |lrv-number|

                Additional point positions.
    2.  `shape` = |love.physics.newChainShape|( `loop`, `points` )

        See function description

        returns:

            `shape`: |love-ChainShape|

                The new shape.

        arguments:

            `loop`: |lrv-boolean|

                If the chain should loop back to the first point.

            `points`: |lrv-table|

                A list of points to construct the ChainShape, in the form of
                {x1, y1, x2, y2, ...}.

-------------------------------------------------------------------------------
                                             *love-love.physics.newCircleShape*
|love.physics.newCircleShape|

Creates a new CircleShape.

Synopses:

    1.  `shape` = |love.physics.newCircleShape|( `radius` )
    2.  `shape` = |love.physics.newCircleShape|( `x`, `y`, `radius` )

Variants:

    1.  `shape` = |love.physics.newCircleShape|( `radius` )

        See function description

        returns:

            `shape`: |love-CircleShape|

                The new shape.

        arguments:

            `radius`: |lrv-number|

                The radius of the circle.
    2.  `shape` = |love.physics.newCircleShape|( `x`, `y`, `radius` )

        See function description

        returns:

            `shape`: |love-CircleShape|

                The new shape.

        arguments:

            `x`: |lrv-number|

                The x position of the circle.

            `y`: |lrv-number|

                The y position of the circle.

            `radius`: |lrv-number|

                The radius of the circle.

-------------------------------------------------------------------------------
                                           *love-love.physics.newDistanceJoint*
|love.physics.newDistanceJoint|

Creates a DistanceJoint between two bodies.

This joint constrains the distance between two points on two bodies to be
constant. These two points are specified in world coordinates and the two
bodies are assumed to be in place when this joint is created. The first anchor
point is connected to the first body and the second to the second body, and the
points define the length of the distance joint.

Synopses:

    1.  `joint` = |love.physics.newDistanceJoint|( `body1`, `body2`,
        `x1`, `y1`, `x2`, `y2`, `collideConnected` )

Variants:

    1.  `joint` = |love.physics.newDistanceJoint|( `body1`, `body2`,
        `x1`, `y1`, `x2`, `y2`, `collideConnected` )

        See function description

        returns:

            `joint`: |love-DistanceJoint|

                The new distance joint.

        arguments:

            `body1`: |love-Body|

                The first body to attach to the joint.

            `body2`: |love-Body|

                The second body to attach to the joint.

            `x1`: |lrv-number|

                The x position of the first anchor point (world space).

            `y1`: |lrv-number|

                The y position of the first anchor point (world space).

            `x2`: |lrv-number|

                The x position of the second anchor point (world space).

            `y2`: |lrv-number|

                The y position of the second anchor point (world space).

            `collideConnected`: |lrv-boolean|

                Specifies whether the two bodies should collide with each
                other.

-------------------------------------------------------------------------------
                                               *love-love.physics.newEdgeShape*
|love.physics.newEdgeShape|

Creates a new EdgeShape.

Synopses:

    1.  `shape` = |love.physics.newEdgeShape|( `x1`, `y1`, `x2`, `y2` )

Variants:

    1.  `shape` = |love.physics.newEdgeShape|( `x1`, `y1`, `x2`, `y2` )

        See function description

        returns:

            `shape`: |love-EdgeShape|

                The new shape.

        arguments:

            `x1`: |lrv-number|

                The x position of the first point.

            `y1`: |lrv-number|

                The y position of the first point.

            `x2`: |lrv-number|

                The x position of the second point.

            `y2`: |lrv-number|

                The y position of the second point.

-------------------------------------------------------------------------------
                                                 *love-love.physics.newFixture*
|love.physics.newFixture|

Creates and attaches a Fixture to a body.

Note that the Shape object is copied rather than kept as a reference when the
Fixture is created. To get the Shape object that the Fixture owns, use
Fixture:getShape.

Synopses:

    1.  `fixture` = |love.physics.newFixture|( `body`, `shape`,
        `density` )

Variants:

    1.  `fixture` = |love.physics.newFixture|( `body`, `shape`,
        `density` )

        See function description

        returns:

            `fixture`: |love-Fixture|

                The new fixture.

        arguments:

            `body`: |love-Body|

                The body which gets the fixture attached.

            `shape`: |love-Shape|

                The shape to be copied to the fixture.

            `density`: |lrv-number|

                The density of the fixture.

-------------------------------------------------------------------------------
                                           *love-love.physics.newFrictionJoint*
|love.physics.newFrictionJoint|

Create a friction joint between two bodies. A FrictionJoint applies friction to
a body.

Synopses:

    1.  `joint` = |love.physics.newFrictionJoint|( `body1`, `body2`,
        `x`, `y`, `collideConnected` )
    2.  `joint` = |love.physics.newFrictionJoint|( `body1`, `body2`,
        `x1`, `y1`, `x2`, `y2`, `collideConnected` )

Variants:

    1.  `joint` = |love.physics.newFrictionJoint|( `body1`, `body2`,
        `x`, `y`, `collideConnected` )

        See function description

        returns:

            `joint`: |love-FrictionJoint|

                The new FrictionJoint.

        arguments:

            `body1`: |love-Body|

                The first body to attach to the joint.

            `body2`: |love-Body|

                The second body to attach to the joint.

            `x`: |lrv-number|

                The x position of the anchor point.

            `y`: |lrv-number|

                The y position of the anchor point.

            `collideConnected`: |lrv-boolean|

                Specifies whether the two bodies should collide with each
                other.
    2.  `joint` = |love.physics.newFrictionJoint|( `body1`, `body2`,
        `x1`, `y1`, `x2`, `y2`, `collideConnected` )

        See function description

        returns:

            `joint`: |love-FrictionJoint|

                The new FrictionJoint.

        arguments:

            `body1`: |love-Body|

                The first body to attach to the joint.

            `body2`: |love-Body|

                The second body to attach to the joint.

            `x1`: |lrv-number|

                The x position of the first anchor point.

            `y1`: |lrv-number|

                The y position of the first anchor point.

            `x2`: |lrv-number|

                The x position of the second anchor point.

            `y2`: |lrv-number|

                The y position of the second anchor point.

            `collideConnected`: |lrv-boolean|

                Specifies whether the two bodies should collide with each
                other.

-------------------------------------------------------------------------------
                                               *love-love.physics.newGearJoint*
|love.physics.newGearJoint|

Create a GearJoint connecting two Joints.

The gear joint connects two joints that must be either  prismatic or  revolute
joints. Using this joint requires that the joints it uses connect their
respective bodies to the ground and have the ground as the first body. When
destroying the bodies and joints you must make sure you destroy the gear joint
before the other joints.

The gear joint has a ratio the determines how the angular or distance values of
the connected joints relate to each other. The formula coordinate1 + ratio *
coordinate2 always has a constant value that is set when the gear joint is
created.

Synopses:

    1.  `joint` = |love.physics.newGearJoint|( `joint1`, `joint2`,
        `ratio`, `collideConnected` )

Variants:

    1.  `joint` = |love.physics.newGearJoint|( `joint1`, `joint2`,
        `ratio`, `collideConnected` )

        See function description

        returns:

            `joint`: |love-GearJoint|

                The new gear joint.

        arguments:

            `joint1`: |love-Joint|

                The first joint to connect with a gear joint.

            `joint2`: |love-Joint|

                The second joint to connect with a gear joint.

            `ratio`: |lrv-number|

                The gear ratio.

            `collideConnected`: |lrv-boolean|

                Specifies whether the two bodies should collide with each
                other.

-------------------------------------------------------------------------------
                                              *love-love.physics.newMotorJoint*
|love.physics.newMotorJoint|

Creates a joint between two bodies which controls the relative motion between
them.

Position and rotation offsets can be specified once the MotorJoint has been
created, as well as the maximum motor force and torque that will be be applied
to reach the target offsets.

Synopses:

    1.  `joint` = |love.physics.newMotorJoint|( `body1`, `body2`,
        `correctionFactor` )
    2.  `joint` = |love.physics.newMotorJoint|( `body1`, `body2`,
        `correctionFactor`, `collideConnected` )

Variants:

    1.  `joint` = |love.physics.newMotorJoint|( `body1`, `body2`,
        `correctionFactor` )

        See function description

        returns:

            `joint`: |love-MotorJoint|

                The new MotorJoint.

        arguments:

            `body1`: |love-Body|

                The first body to attach to the joint.

            `body2`: |love-Body|

                The second body to attach to the joint.

            `correctionFactor`: |lrv-number|

                The joint's initial position correction factor, in the range of
                1.
    2.  `joint` = |love.physics.newMotorJoint|( `body1`, `body2`,
        `correctionFactor`, `collideConnected` )

        See function description

        returns:

            `joint`: |love-MotorJoint|

                The new MotorJoint.

        arguments:

            `body1`: |love-Body|

                The first body to attach to the joint.

            `body2`: |love-Body|

                The second body to attach to the joint.

            `correctionFactor`: |lrv-number|

                The joint's initial position correction factor, in the range of
                1.

            `collideConnected`: |lrv-boolean|

                Specifies whether the two bodies should collide with each
                other.

-------------------------------------------------------------------------------
                                              *love-love.physics.newMouseJoint*
|love.physics.newMouseJoint|

Create a joint between a body and the mouse.

This joint actually connects the body to a fixed point in the world. To make it
follow the mouse, the fixed point must be updated every timestep (example
below).

The advantage of using a MouseJoint instead of just changing a body position
directly is that collisions and reactions to other joints are handled by the
physics engine.

Synopses:

    1.  `joint` = |love.physics.newMouseJoint|( `body`, `x`, `y` )

Variants:

    1.  `joint` = |love.physics.newMouseJoint|( `body`, `x`, `y` )

        See function description

        returns:

            `joint`: |love-MouseJoint|

                The new mouse joint.

        arguments:

            `body`: |love-Body|

                The body to attach to the mouse.

            `x`: |lrv-number|

                The x position of the connecting point.

            `y`: |lrv-number|

                The y position of the connecting point.

-------------------------------------------------------------------------------
                                            *love-love.physics.newPolygonShape*
|love.physics.newPolygonShape|

Creates a new PolygonShape.

This shape can have 8 vertices at most, and must form a convex shape.

Synopses:

    1.  `shape` = |love.physics.newPolygonShape|( `x1`, `y1`, `x2`,
        `y2`, `x3`, `y3`, `...` )
    2.  `shape` = |love.physics.newPolygonShape|( `vertices` )

Variants:

    1.  `shape` = |love.physics.newPolygonShape|( `x1`, `y1`, `x2`,
        `y2`, `x3`, `y3`, `...` )

        See function description

        returns:

            `shape`: |love-PolygonShape|

                A new PolygonShape.

        arguments:

            `x1`: |lrv-number|

                The x position of the first point.

            `y1`: |lrv-number|

                The y position of the first point.

            `x2`: |lrv-number|

                The x position of the second point.

            `y2`: |lrv-number|

                The y position of the second point.

            `x3`: |lrv-number|

                The x position of the third point.

            `y3`: |lrv-number|

                The y position of the third point.

            `...`: |lrv-number|

                You can continue passing more point positions to create the
                PolygonShape.
    2.  `shape` = |love.physics.newPolygonShape|( `vertices` )

        See function description

        returns:

            `shape`: |love-PolygonShape|

                A new PolygonShape.

        arguments:

            `vertices`: |lrv-table|

                A list of vertices to construct the polygon, in the form of
                {x1, y1, x2, y2, x3, y3, ...}.

-------------------------------------------------------------------------------
                                          *love-love.physics.newPrismaticJoint*
|love.physics.newPrismaticJoint|

Creates a PrismaticJoint between two bodies.

A prismatic joint constrains two bodies to move relatively to each other on a
specified axis. It does not allow for relative rotation. Its definition and
operation are similar to a  revolute joint, but with translation and force
substituted for angle and torque.

Synopses:

    1.  `joint` = |love.physics.newPrismaticJoint|( `body1`, `body2`,
        `x`, `y`, `ax`, `ay`, `collideConnected` )
    2.  `joint` = |love.physics.newPrismaticJoint|( `body1`, `body2`,
        `x1`, `y1`, `x2`, `y2`, `ax`, `ay`, `collideConnected` )
    3.  `joint` = |love.physics.newPrismaticJoint|( `body1`, `body2`,
        `x1`, `y1`, `x2`, `y2`, `ax`, `ay`, `collideConnected`,
        `referenceAngle` )

Variants:

    1.  `joint` = |love.physics.newPrismaticJoint|( `body1`, `body2`,
        `x`, `y`, `ax`, `ay`, `collideConnected` )

        See function description

        returns:

            `joint`: |love-PrismaticJoint|

                The new prismatic joint.

        arguments:

            `body1`: |love-Body|

                The first body to connect with a prismatic joint.

            `body2`: |love-Body|

                The second body to connect with a prismatic joint.

            `x`: |lrv-number|

                The x coordinate of the anchor point.

            `y`: |lrv-number|

                The y coordinate of the anchor point.

            `ax`: |lrv-number|

                The x coordinate of the axis vector.

            `ay`: |lrv-number|

                The y coordinate of the axis vector.

            `collideConnected`: |lrv-boolean|

                Specifies whether the two bodies should collide with each
                other.
    2.  `joint` = |love.physics.newPrismaticJoint|( `body1`, `body2`,
        `x1`, `y1`, `x2`, `y2`, `ax`, `ay`, `collideConnected` )

        See function description

        returns:

            `joint`: |love-PrismaticJoint|

                The new prismatic joint.

        arguments:

            `body1`: |love-Body|

                The first body to connect with a prismatic joint.

            `body2`: |love-Body|

                The second body to connect with a prismatic joint.

            `x1`: |lrv-number|

                The x coordinate of the first anchor point.

            `y1`: |lrv-number|

                The y coordinate of the first anchor point.

            `x2`: |lrv-number|

                The x coordinate of the second anchor point.

            `y2`: |lrv-number|

                The y coordinate of the second anchor point.

            `ax`: |lrv-number|

                The x coordinate of the axis unit vector.

            `ay`: |lrv-number|

                The y coordinate of the axis unit vector.

            `collideConnected`: |lrv-boolean|

                Specifies whether the two bodies should collide with each
                other.
    3.  `joint` = |love.physics.newPrismaticJoint|( `body1`, `body2`,
        `x1`, `y1`, `x2`, `y2`, `ax`, `ay`, `collideConnected`,
        `referenceAngle` )

        See function description

        returns:

            `joint`: |love-PrismaticJoint|

                The new prismatic joint.

        arguments:

            `body1`: |love-Body|

                The first body to connect with a prismatic joint.

            `body2`: |love-Body|

                The second body to connect with a prismatic joint.

            `x1`: |lrv-number|

                The x coordinate of the first anchor point.

            `y1`: |lrv-number|

                The y coordinate of the first anchor point.

            `x2`: |lrv-number|

                The x coordinate of the second anchor point.

            `y2`: |lrv-number|

                The y coordinate of the second anchor point.

            `ax`: |lrv-number|

                The x coordinate of the axis unit vector.

            `ay`: |lrv-number|

                The y coordinate of the axis unit vector.

            `collideConnected`: |lrv-boolean|

                Specifies whether the two bodies should collide with each
                other.

            `referenceAngle`: |lrv-number|

                The reference angle between body1 and body2, in radians.

-------------------------------------------------------------------------------
                                             *love-love.physics.newPulleyJoint*
|love.physics.newPulleyJoint|

Creates a PulleyJoint to join two bodies to each other and the ground.

The pulley joint simulates a pulley with an optional block and tackle. If the
ratio parameter has a value different from one, then the simulated rope extends
faster on one side than the other. In a pulley joint the total length of the
simulated rope is the constant length1 + ratio * length2, which is set when the
pulley joint is created.

Pulley joints can behave unpredictably if one side is fully extended. It is
recommended that the method  setMaxLengths  be used to constrain the maximum
lengths each side can attain.

Synopses:

    1.  `joint` = |love.physics.newPulleyJoint|( `body1`, `body2`,
        `gx1`, `gy1`, `gx2`, `gy2`, `x1`, `y1`, `x2`, `y2`, `ratio`,
        `collideConnected` )

Variants:

    1.  `joint` = |love.physics.newPulleyJoint|( `body1`, `body2`,
        `gx1`, `gy1`, `gx2`, `gy2`, `x1`, `y1`, `x2`, `y2`, `ratio`,
        `collideConnected` )

        See function description

        returns:

            `joint`: |love-PulleyJoint|

                The new pulley joint.

        arguments:

            `body1`: |love-Body|

                The first body to connect with a pulley joint.

            `body2`: |love-Body|

                The second body to connect with a pulley joint.

            `gx1`: |lrv-number|

                The x coordinate of the first body's ground anchor.

            `gy1`: |lrv-number|

                The y coordinate of the first body's ground anchor.

            `gx2`: |lrv-number|

                The x coordinate of the second body's ground anchor.

            `gy2`: |lrv-number|

                The y coordinate of the second body's ground anchor.

            `x1`: |lrv-number|

                The x coordinate of the pulley joint anchor in the first body.

            `y1`: |lrv-number|

                The y coordinate of the pulley joint anchor in the first body.

            `x2`: |lrv-number|

                The x coordinate of the pulley joint anchor in the second body.

            `y2`: |lrv-number|

                The y coordinate of the pulley joint anchor in the second body.

            `ratio`: |lrv-number|

                The joint ratio.

            `collideConnected`: |lrv-boolean|

                Specifies whether the two bodies should collide with each
                other.

-------------------------------------------------------------------------------
                                          *love-love.physics.newRectangleShape*
|love.physics.newRectangleShape|

Shorthand for creating rectangular PolygonShapes.

By default, the local origin is located at the '''center''' of the rectangle as
opposed to the top left for graphics.

Synopses:

    1.  `shape` = |love.physics.newRectangleShape|( `width`, `height` )
    2.  `shape` = |love.physics.newRectangleShape|( `x`, `y`, `width`,
        `height`, `angle` )

Variants:

    1.  `shape` = |love.physics.newRectangleShape|( `width`, `height` )

        See function description

        returns:

            `shape`: |love-PolygonShape|

                A new PolygonShape.

        arguments:

            `width`: |lrv-number|

                The width of the rectangle.

            `height`: |lrv-number|

                The height of the rectangle.
    2.  `shape` = |love.physics.newRectangleShape|( `x`, `y`, `width`,
        `height`, `angle` )

        See function description

        returns:

            `shape`: |love-PolygonShape|

                A new PolygonShape.

        arguments:

            `x`: |lrv-number|

                The offset along the x-axis.

            `y`: |lrv-number|

                The offset along the y-axis.

            `width`: |lrv-number|

                The width of the rectangle.

            `height`: |lrv-number|

                The height of the rectangle.

            `angle`: |lrv-number|

                The initial angle of the rectangle.

-------------------------------------------------------------------------------
                                           *love-love.physics.newRevoluteJoint*
|love.physics.newRevoluteJoint|

Creates a pivot joint between two bodies.

This joint connects two bodies to a point around which they can pivot.

Synopses:

    1.  `joint` = |love.physics.newRevoluteJoint|( `body1`, `body2`,
        `x`, `y`, `collideConnected` )
    2.  `joint` = |love.physics.newRevoluteJoint|( `body1`, `body2`,
        `x1`, `y1`, `x2`, `y2`, `collideConnected`, `referenceAngle` )

Variants:

    1.  `joint` = |love.physics.newRevoluteJoint|( `body1`, `body2`,
        `x`, `y`, `collideConnected` )

        See function description

        returns:

            `joint`: |love-RevoluteJoint|

                The new revolute joint.

        arguments:

            `body1`: |love-Body|

                The first body.

            `body2`: |love-Body|

                The second body.

            `x`: |lrv-number|

                The x position of the connecting point.

            `y`: |lrv-number|

                The y position of the connecting point.

            `collideConnected`: |lrv-boolean|

                Specifies whether the two bodies should collide with each
                other.
    2.  `joint` = |love.physics.newRevoluteJoint|( `body1`, `body2`,
        `x1`, `y1`, `x2`, `y2`, `collideConnected`, `referenceAngle` )

        See function description

        returns:

            `joint`: |love-RevoluteJoint|

                The new revolute joint.

        arguments:

            `body1`: |love-Body|

                The first body.

            `body2`: |love-Body|

                The second body.

            `x1`: |lrv-number|

                The x position of the first connecting point.

            `y1`: |lrv-number|

                The y position of the first connecting point.

            `x2`: |lrv-number|

                The x position of the second connecting point.

            `y2`: |lrv-number|

                The y position of the second connecting point.

            `collideConnected`: |lrv-boolean|

                Specifies whether the two bodies should collide with each
                other.

            `referenceAngle`: |lrv-number|

                The reference angle between body1 and body2, in radians.

-------------------------------------------------------------------------------
                                               *love-love.physics.newRopeJoint*
|love.physics.newRopeJoint|

Creates a joint between two bodies. Its only function is enforcing a max
distance between these bodies.

Synopses:

    1.  `joint` = |love.physics.newRopeJoint|( `body1`, `body2`, `x1`,
        `y1`, `x2`, `y2`, `maxLength`, `collideConnected` )

Variants:

    1.  `joint` = |love.physics.newRopeJoint|( `body1`, `body2`, `x1`,
        `y1`, `x2`, `y2`, `maxLength`, `collideConnected` )

        See function description

        returns:

            `joint`: |love-RopeJoint|

                The new RopeJoint.

        arguments:

            `body1`: |love-Body|

                The first body to attach to the joint.

            `body2`: |love-Body|

                The second body to attach to the joint.

            `x1`: |lrv-number|

                The x position of the first anchor point.

            `y1`: |lrv-number|

                The y position of the first anchor point.

            `x2`: |lrv-number|

                The x position of the second anchor point.

            `y2`: |lrv-number|

                The y position of the second anchor point.

            `maxLength`: |lrv-number|

                The maximum distance for the bodies.

            `collideConnected`: |lrv-boolean|

                Specifies whether the two bodies should collide with each
                other.

-------------------------------------------------------------------------------
                                               *love-love.physics.newWeldJoint*
|love.physics.newWeldJoint|

Creates a constraint joint between two bodies. A WeldJoint essentially glues
two bodies together. The constraint is a bit soft, however, due to Box2D's
iterative solver.

Synopses:

    1.  `joint` = |love.physics.newWeldJoint|( `body1`, `body2`, `x`,
        `y`, `collideConnected` )
    2.  `joint` = |love.physics.newWeldJoint|( `body1`, `body2`, `x1`,
        `y1`, `x2`, `y2`, `collideConnected` )
    3.  `joint` = |love.physics.newWeldJoint|( `body1`, `body2`, `x1`,
        `y1`, `x2`, `y2`, `collideConnected`, `referenceAngle` )

Variants:

    1.  `joint` = |love.physics.newWeldJoint|( `body1`, `body2`, `x`,
        `y`, `collideConnected` )

        See function description

        returns:

            `joint`: |love-WeldJoint|

                The new WeldJoint.

        arguments:

            `body1`: |love-Body|

                The first body to attach to the joint.

            `body2`: |love-Body|

                The second body to attach to the joint.

            `x`: |lrv-number|

                The x position of the anchor point (world space).

            `y`: |lrv-number|

                The y position of the anchor point (world space).

            `collideConnected`: |lrv-boolean|

                Specifies whether the two bodies should collide with each
                other.
    2.  `joint` = |love.physics.newWeldJoint|( `body1`, `body2`, `x1`,
        `y1`, `x2`, `y2`, `collideConnected` )

        See function description

        returns:

            `joint`: |love-WeldJoint|

                The new WeldJoint.

        arguments:

            `body1`: |love-Body|

                The first body to attach to the joint.

            `body2`: |love-Body|

                The second body to attach to the joint.

            `x1`: |lrv-number|

                The x position of the first anchor point (world space).

            `y1`: |lrv-number|

                The y position of the first anchor point (world space).

            `x2`: |lrv-number|

                The x position of the second anchor point (world space).

            `y2`: |lrv-number|

                The y position of the second anchor point (world space).

            `collideConnected`: |lrv-boolean|

                Specifies whether the two bodies should collide with each
                other.
    3.  `joint` = |love.physics.newWeldJoint|( `body1`, `body2`, `x1`,
        `y1`, `x2`, `y2`, `collideConnected`, `referenceAngle` )

        See function description

        returns:

            `joint`: |love-WeldJoint|

                The new WeldJoint.

        arguments:

            `body1`: |love-Body|

                The first body to attach to the joint.

            `body2`: |love-Body|

                The second body to attach to the joint.

            `x1`: |lrv-number|

                The x position of the first anchor point (world space).

            `y1`: |lrv-number|

                The y position of the first anchor point  (world space).

            `x2`: |lrv-number|

                The x position of the second anchor point (world space).

            `y2`: |lrv-number|

                The y position of the second anchor point (world space).

            `collideConnected`: |lrv-boolean|

                Specifies whether the two bodies should collide with each
                other.

            `referenceAngle`: |lrv-number|

                The reference angle between body1 and body2, in radians.

-------------------------------------------------------------------------------
                                              *love-love.physics.newWheelJoint*
|love.physics.newWheelJoint|

Creates a wheel joint.

Synopses:

    1.  `joint` = |love.physics.newWheelJoint|( `body1`, `body2`, `x`,
        `y`, `ax`, `ay`, `collideConnected` )
    2.  `joint` = |love.physics.newWheelJoint|( `body1`, `body2`, `x1`,
        `y1`, `x2`, `y2`, `ax`, `ay`, `collideConnected` )

Variants:

    1.  `joint` = |love.physics.newWheelJoint|( `body1`, `body2`, `x`,
        `y`, `ax`, `ay`, `collideConnected` )

        See function description

        returns:

            `joint`: |love-WheelJoint|

                The new WheelJoint.

        arguments:

            `body1`: |love-Body|

                The first body.

            `body2`: |love-Body|

                The second body.

            `x`: |lrv-number|

                The x position of the anchor point.

            `y`: |lrv-number|

                The y position of the anchor point.

            `ax`: |lrv-number|

                The x position of the axis unit vector.

            `ay`: |lrv-number|

                The y position of the axis unit vector.

            `collideConnected`: |lrv-boolean|

                Specifies whether the two bodies should collide with each
                other.
    2.  `joint` = |love.physics.newWheelJoint|( `body1`, `body2`, `x1`,
        `y1`, `x2`, `y2`, `ax`, `ay`, `collideConnected` )

        See function description

        returns:

            `joint`: |love-WheelJoint|

                The new WheelJoint.

        arguments:

            `body1`: |love-Body|

                The first body.

            `body2`: |love-Body|

                The second body.

            `x1`: |lrv-number|

                The x position of the first anchor point.

            `y1`: |lrv-number|

                The y position of the first anchor point.

            `x2`: |lrv-number|

                The x position of the second anchor point.

            `y2`: |lrv-number|

                The y position of the second anchor point.

            `ax`: |lrv-number|

                The x position of the axis unit vector.

            `ay`: |lrv-number|

                The y position of the axis unit vector.

            `collideConnected`: |lrv-boolean|

                Specifies whether the two bodies should collide with each
                other.

-------------------------------------------------------------------------------
                                                   *love-love.physics.newWorld*
|love.physics.newWorld|

Creates a new World.

Synopses:

    1.  `world` = |love.physics.newWorld|( `xg`, `yg`, `sleep` )

Variants:

    1.  `world` = |love.physics.newWorld|( `xg`, `yg`, `sleep` )

        See function description

        returns:

            `world`: |love-World|

                A brave new World.

        arguments:

            `xg`: |lrv-number|

                The x component of gravity.

            `yg`: |lrv-number|

                The y component of gravity.

            `sleep`: |lrv-boolean|

                Whether the bodies in this world are allowed to sleep.

-------------------------------------------------------------------------------
                                                   *love-love.physics.setMeter*
|love.physics.setMeter|

Sets the pixels to meter scale factor.

All coordinates in the physics module are divided by this number and converted
to meters, and it creates a convenient way to draw the objects directly to the
screen without the need for graphics transformations.

It is recommended to create shapes no larger than 10 times the scale. This is
important because Box2D is tuned to work well with shape sizes from 0.1 to 10
meters. The default meter scale is 30.

Synopses:

    1.  |love.physics.setMeter|( `scale` )

Variants:

    1.  |love.physics.setMeter|( `scale` )

        See function description

        returns:

            None

        arguments:

            `scale`: |lrv-number|

                The scale factor as an integer.
-------------------------------------------------------------------------------
                                                      *love-love.physics-types*
The types of |love.physics|:

    |Body|                                |love-Body|
    |ChainShape|                          |love-ChainShape|
    |CircleShape|                         |love-CircleShape|
    |Contact|                             |love-Contact|
    |DistanceJoint|                       |love-DistanceJoint|
    |EdgeShape|                           |love-EdgeShape|
    |Fixture|                             |love-Fixture|
    |FrictionJoint|                       |love-FrictionJoint|
    |GearJoint|                           |love-GearJoint|
    |Joint|                               |love-Joint|
    |MotorJoint|                          |love-MotorJoint|
    |MouseJoint|                          |love-MouseJoint|
    |PolygonShape|                        |love-PolygonShape|
    |PrismaticJoint|                      |love-PrismaticJoint|
    |PulleyJoint|                         |love-PulleyJoint|
    |RevoluteJoint|                       |love-RevoluteJoint|
    |RopeJoint|                           |love-RopeJoint|
    |Shape|                               |love-Shape|
    |WeldJoint|                           |love-WeldJoint|
    |WheelJoint|                          |love-WheelJoint|
    |World|                               |love-World|

-------------------------------------------------------------------------------
                                                                    *love-Body*
|Body|

Bodies are objects with velocity and position.

                                                       *love-Body-constructors*
    constructors:

        None

                                                         *love-Body-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                           *love-Body-subtypes*
    subtypes:

        None

                                                          *love-Body-functions*
    functions:

        |applyAngularImpulse|             |love-Body:applyAngularImpulse|
        |applyForce|                      |love-Body:applyForce|
        |applyLinearImpulse|              |love-Body:applyLinearImpulse|
        |applyTorque|                     |love-Body:applyTorque|
        |destroy|                         |love-Body:destroy|
        |getAngle|                        |love-Body:getAngle|
        |getAngularDamping|               |love-Body:getAngularDamping|
        |getAngularVelocity|              |love-Body:getAngularVelocity|
        |getContacts|                     |love-Body:getContacts|
        |getFixtures|                     |love-Body:getFixtures|
        |getGravityScale|                 |love-Body:getGravityScale|
        |getInertia|                      |love-Body:getInertia|
        |getJoints|                       |love-Body:getJoints|
        |getLinearDamping|                |love-Body:getLinearDamping|
        |getLinearVelocity|               |love-Body:getLinearVelocity|
        |getLinearVelocityFromLocalPoi-|  |love-Body:getLinearVelocityFromLoc-|
        |getLinearVelocityFromWorldPoi-|  |love-Body:getLinearVelocityFromWor-|
        |getLocalCenter|                  |love-Body:getLocalCenter|
        |getLocalPoint|                   |love-Body:getLocalPoint|
        |getLocalVector|                  |love-Body:getLocalVector|
        |getMass|                         |love-Body:getMass|
        |getMassData|                     |love-Body:getMassData|
        |getPosition|                     |love-Body:getPosition|
        |getTransform|                    |love-Body:getTransform|
        |getType|                         |love-Body:getType|
        |getUserData|                     |love-Body:getUserData|
        |getWorld|                        |love-Body:getWorld|
        |getWorldCenter|                  |love-Body:getWorldCenter|
        |getWorldPoint|                   |love-Body:getWorldPoint|
        |getWorldPoints|                  |love-Body:getWorldPoints|
        |getWorldVector|                  |love-Body:getWorldVector|
        |getX|                            |love-Body:getX|
        |getY|                            |love-Body:getY|
        |isActive|                        |love-Body:isActive|
        |isAwake|                         |love-Body:isAwake|
        |isBullet|                        |love-Body:isBullet|
        |isDestroyed|                     |love-Body:isDestroyed|
        |isFixedRotation|                 |love-Body:isFixedRotation|
        |isSleepingAllowed|               |love-Body:isSleepingAllowed|
        |isTouching|                      |love-Body:isTouching|
        |resetMassData|                   |love-Body:resetMassData|
        |setActive|                       |love-Body:setActive|
        |setAngle|                        |love-Body:setAngle|
        |setAngularDamping|               |love-Body:setAngularDamping|
        |setAngularVelocity|              |love-Body:setAngularVelocity|
        |setAwake|                        |love-Body:setAwake|
        |setBullet|                       |love-Body:setBullet|
        |setFixedRotation|                |love-Body:setFixedRotation|
        |setGravityScale|                 |love-Body:setGravityScale|
        |setInertia|                      |love-Body:setInertia|
        |setLinearDamping|                |love-Body:setLinearDamping|
        |setLinearVelocity|               |love-Body:setLinearVelocity|
        |setMass|                         |love-Body:setMass|
        |setMassData|                     |love-Body:setMassData|
        |setPosition|                     |love-Body:setPosition|
        |setSleepingAllowed|              |love-Body:setSleepingAllowed|
        |setTransform|                    |love-Body:setTransform|
        |setType|                         |love-Body:setType|
        |setUserData|                     |love-Body:setUserData|
        |setX|                            |love-Body:setX|
        |setY|                            |love-Body:setY|

-------------------------------------------------------------------------------
                                                *love-Body:applyAngularImpulse*
|Body:applyAngularImpulse|

Applies an angular impulse to a body. This makes a single, instantaneous
addition to the body momentum.

A body with with a larger mass will react less. The reaction does '''not'''
depend on the timestep, and is equivalent to applying a force continuously for
1 second. Impulses are best used to give a single push to a body. For a
continuous push to a body it is better to use Body:applyForce.

Synopses:

    1.  |Body:applyAngularImpulse|( `impulse` )

Variants:

    1.  |Body:applyAngularImpulse|( `impulse` )

        See function description

        returns:

            None

        arguments:

            `impulse`: |lrv-number|

                The impulse in kilogram-square meter per second.

-------------------------------------------------------------------------------
                                                         *love-Body:applyForce*
|Body:applyForce|

Apply force to a Body.

A force pushes a body in a direction. A body with with a larger mass will react
less. The reaction also depends on how long a force is applied: since the force
acts continuously over the entire timestep, a short timestep will only push the
body for a short time. Thus forces are best used for many timesteps to give a
continuous push to a body (like gravity). For a single push that is independent
of timestep, it is better to use Body:applyLinearImpulse.

If the position to apply the force is not given, it will act on the center of
mass of the body. The part of the force not directed towards the center of mass
will cause the body to spin (and depends on the rotational inertia).

Note that the force components and position must be given in world coordinates.

Synopses:

    1.  |Body:applyForce|( `fx`, `fy` )
    2.  |Body:applyForce|( `fx`, `fy`, `x`, `y` )

Variants:

    1.  |Body:applyForce|( `fx`, `fy` )

        See function description

        returns:

            None

        arguments:

            `fx`: |lrv-number|

                The x component of force to apply to the center of mass.

            `fy`: |lrv-number|

                The y component of force to apply to the center of mass.
    2.  |Body:applyForce|( `fx`, `fy`, `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `fx`: |lrv-number|

                The x component of force to apply.

            `fy`: |lrv-number|

                The y component of force to apply.

            `x`: |lrv-number|

                The x position to apply the force.

            `y`: |lrv-number|

                The y position to apply the force.

-------------------------------------------------------------------------------
                                                 *love-Body:applyLinearImpulse*
|Body:applyLinearImpulse|

Applies an impulse to a body.

This makes a single, instantaneous addition to the body momentum.

An impulse pushes a body in a direction. A body with with a larger mass will
react less. The reaction does '''not''' depend on the timestep, and is
equivalent to applying a force continuously for 1 second. Impulses are best
used to give a single push to a body. For a continuous push to a body it is
better to use Body:applyForce.

If the position to apply the impulse is not given, it will act on the center of
mass of the body. The part of the impulse not directed towards the center of
mass will cause the body to spin (and depends on the rotational inertia).

Note that the impulse components and position must be given in world
coordinates.

Synopses:

    1.  |Body:applyLinearImpulse|( `ix`, `iy` )
    2.  |Body:applyLinearImpulse|( `ix`, `iy`, `x`, `y` )

Variants:

    1.  |Body:applyLinearImpulse|( `ix`, `iy` )

        See function description

        returns:

            None

        arguments:

            `ix`: |lrv-number|

                The x component of the impulse applied to the center of mass.

            `iy`: |lrv-number|

                The y component of the impulse applied to the center of mass.
    2.  |Body:applyLinearImpulse|( `ix`, `iy`, `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `ix`: |lrv-number|

                The x component of the impulse.

            `iy`: |lrv-number|

                The y component of the impulse.

            `x`: |lrv-number|

                The x position to apply the impulse.

            `y`: |lrv-number|

                The y position to apply the impulse.

-------------------------------------------------------------------------------
                                                        *love-Body:applyTorque*
|Body:applyTorque|

Apply torque to a body.

Torque is like a force that will change the angular velocity (spin) of a body.
The effect will depend on the rotational inertia a body has.

Synopses:

    1.  |Body:applyTorque|( `torque` )

Variants:

    1.  |Body:applyTorque|( `torque` )

        See function description

        returns:

            None

        arguments:

            `torque`: |lrv-number|

                The torque to apply.

-------------------------------------------------------------------------------
                                                            *love-Body:destroy*
|Body:destroy|

Explicitly destroys the Body and all fixtures and joints attached to it.

An error will occur if you attempt to use the object after calling this
function. In 0.7.2, when you don't have time to wait for garbage collection,
this function may be used to free the object immediately.

Synopses:

    1.  |Body:destroy|()

Variants:

    1.  |Body:destroy|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                           *love-Body:getAngle*
|Body:getAngle|

Get the angle of the body.

The angle is measured in radians. If you need to transform it to degrees, use
math.deg.

A value of 0 radians will mean 'looking to the right'. Although radians
increase counter-clockwise, the y axis points down so it becomes ''clockwise''
from our point of view.

Synopses:

    1.  `angle` = |Body:getAngle|()

Variants:

    1.  `angle` = |Body:getAngle|()

        See function description

        returns:

            `angle`: |lrv-number|

                The angle in radians.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Body:getAngularDamping*
|Body:getAngularDamping|

Gets the Angular damping of the Body

The angular damping is the ''rate of decrease of the angular velocity over
time'': A spinning body with no damping and no external forces will continue
spinning indefinitely. A spinning body with damping will gradually stop
spinning.

Damping is not the same as friction - they can be modelled together. However,
only damping is provided by Box2D (and LOVE).

Damping parameters should be between 0 and infinity, with 0 meaning no damping,
and infinity meaning full damping. Normally you will use a damping value
between 0 and 0.1.

Synopses:

    1.  `damping` = |Body:getAngularDamping|()

Variants:

    1.  `damping` = |Body:getAngularDamping|()

        See function description

        returns:

            `damping`: |lrv-number|

                The value of the angular damping.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-Body:getAngularVelocity*
|Body:getAngularVelocity|

Get the angular velocity of the Body.

The angular velocity is the ''rate of change of angle over time''.

It is changed in World:update by applying torques, off centre forces/impulses,
and angular damping. It can be set directly with Body:setAngularVelocity.

If you need the ''rate of change of position over time'', use
Body:getLinearVelocity.

Synopses:

    1.  `w` = |Body:getAngularVelocity|()

Variants:

    1.  `w` = |Body:getAngularVelocity|()

        See function description

        returns:

            `w`: |lrv-number|

                The angular velocity in radians/second.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Body:getContacts*
|Body:getContacts|

Gets a list of all Contacts attached to the Body.

Synopses:

    1.  `contacts` = |Body:getContacts|()

Variants:

    1.  `contacts` = |Body:getContacts|()

        See function description

        returns:

            `contacts`: |lrv-table|

                A list with all contacts associated with the Body.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Body:getFixtures*
|Body:getFixtures|

Returns a table with all fixtures.

Synopses:

    1.  `fixtures` = |Body:getFixtures|()

Variants:

    1.  `fixtures` = |Body:getFixtures|()

        See function description

        returns:

            `fixtures`: |lrv-table|

                A sequence with all fixtures.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-Body:getGravityScale*
|Body:getGravityScale|

Returns the gravity scale factor.

Synopses:

    1.  `scale` = |Body:getGravityScale|()

Variants:

    1.  `scale` = |Body:getGravityScale|()

        See function description

        returns:

            `scale`: |lrv-number|

                The gravity scale factor.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Body:getInertia*
|Body:getInertia|

Gets the rotational inertia of the body.

The rotational inertia is how hard is it to make the body spin.

Synopses:

    1.  `inertia` = |Body:getInertia|()

Variants:

    1.  `inertia` = |Body:getInertia|()

        See function description

        returns:

            `inertia`: |lrv-number|

                The rotational inertial of the body.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Body:getJoints*
|Body:getJoints|

Returns a table containing the Joints attached to this Body.

Synopses:

    1.  `joints` = |Body:getJoints|()

Variants:

    1.  `joints` = |Body:getJoints|()

        See function description

        returns:

            `joints`: |lrv-table|

                A sequence with the Joints attached to the Body.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-Body:getLinearDamping*
|Body:getLinearDamping|

Gets the linear damping of the Body.

The linear damping is the ''rate of decrease of the linear velocity over
time''. A moving body with no damping and no external forces will continue
moving indefinitely, as is the case in space. A moving body with damping will
gradually stop moving.

Damping is not the same as friction - they can be modelled together.

Synopses:

    1.  `damping` = |Body:getLinearDamping|()

Variants:

    1.  `damping` = |Body:getLinearDamping|()

        See function description

        returns:

            `damping`: |lrv-number|

                The value of the linear damping.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Body:getLinearVelocity*
|Body:getLinearVelocity|

Gets the linear velocity of the Body from its center of mass.

The linear velocity is the ''rate of change of position over time''.

If you need the ''rate of change of angle over time'', use
Body:getAngularVelocity.

If you need to get the linear velocity of a point different from the center of
mass:

*  Body:getLinearVelocityFromLocalPoint allows you to specify the point in
local coordinates.

*  Body:getLinearVelocityFromWorldPoint allows you to specify the point in
world coordinates.

See page 136 of 'Essential Mathematics for Games and Interactive Applications'
for definitions of local and world coordinates.

Synopses:

    1.  `x`, `y` = |Body:getLinearVelocity|()

Variants:

    1.  `x`, `y` = |Body:getLinearVelocity|()

        See function description

        returns:

            `x`: |lrv-number|

                The x-component of the velocity vector

            `y`: |lrv-number|

                The y-component of the velocity vector

        arguments:

            None

-------------------------------------------------------------------------------
                                    *love-Body:getLinearVelocityFromLocalPoint*
|Body:getLinearVelocityFromLocalPoint|

Get the linear velocity of a point on the body.

The linear velocity for a point on the body is the velocity of the body center
of mass plus the velocity at that point from the body spinning.

The point on the body must given in local coordinates. Use
Body:getLinearVelocityFromWorldPoint to specify this with world coordinates.

Synopses:

    1.  `vx`, `vy` = |Body:getLinearVelocityFromLocalPoint|( `x`, `y` )

Variants:

    1.  `vx`, `vy` = |Body:getLinearVelocityFromLocalPoint|( `x`, `y` )

        See function description

        returns:

            `vx`: |lrv-number|

                The x component of velocity at point (x,y).

            `vy`: |lrv-number|

                The y component of velocity at point (x,y).

        arguments:

            `x`: |lrv-number|

                The x position to measure velocity.

            `y`: |lrv-number|

                The y position to measure velocity.

-------------------------------------------------------------------------------
                                    *love-Body:getLinearVelocityFromWorldPoint*
|Body:getLinearVelocityFromWorldPoint|

Get the linear velocity of a point on the body.

The linear velocity for a point on the body is the velocity of the body center
of mass plus the velocity at that point from the body spinning.

The point on the body must given in world coordinates. Use
Body:getLinearVelocityFromLocalPoint to specify this with local coordinates.

Synopses:

    1.  `vx`, `vy` = |Body:getLinearVelocityFromWorldPoint|( `x`, `y` )

Variants:

    1.  `vx`, `vy` = |Body:getLinearVelocityFromWorldPoint|( `x`, `y` )

        See function description

        returns:

            `vx`: |lrv-number|

                The x component of velocity at point (x,y).

            `vy`: |lrv-number|

                The y component of velocity at point (x,y).

        arguments:

            `x`: |lrv-number|

                The x position to measure velocity.

            `y`: |lrv-number|

                The y position to measure velocity.

-------------------------------------------------------------------------------
                                                     *love-Body:getLocalCenter*
|Body:getLocalCenter|

Get the center of mass position in local coordinates.

Use Body:getWorldCenter to get the center of mass in world coordinates.

Synopses:

    1.  `x`, `y` = |Body:getLocalCenter|()

Variants:

    1.  `x`, `y` = |Body:getLocalCenter|()

        See function description

        returns:

            `x`: |lrv-number|

                The x coordinate of the center of mass.

            `y`: |lrv-number|

                The y coordinate of the center of mass.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Body:getLocalPoint*
|Body:getLocalPoint|

Transform a point from world coordinates to local coordinates.

Synopses:

    1.  `localX`, `localY` = |Body:getLocalPoint|( `worldX`, `worldY` )

Variants:

    1.  `localX`, `localY` = |Body:getLocalPoint|( `worldX`, `worldY` )

        See function description

        returns:

            `localX`: |lrv-number|

                The x position in local coordinates.

            `localY`: |lrv-number|

                The y position in local coordinates.

        arguments:

            `worldX`: |lrv-number|

                The x position in world coordinates.

            `worldY`: |lrv-number|

                The y position in world coordinates.

-------------------------------------------------------------------------------
                                                     *love-Body:getLocalVector*
|Body:getLocalVector|

Transform a vector from world coordinates to local coordinates.

Synopses:

    1.  `localX`, `localY` = |Body:getLocalVector|( `worldX`, `worldY`
        )

Variants:

    1.  `localX`, `localY` = |Body:getLocalVector|( `worldX`, `worldY`
        )

        See function description

        returns:

            `localX`: |lrv-number|

                The vector x component in local coordinates.

            `localY`: |lrv-number|

                The vector y component in local coordinates.

        arguments:

            `worldX`: |lrv-number|

                The vector x component in world coordinates.

            `worldY`: |lrv-number|

                The vector y component in world coordinates.

-------------------------------------------------------------------------------
                                                            *love-Body:getMass*
|Body:getMass|

Get the mass of the body.

Static bodies always have a mass of 0.

Synopses:

    1.  `mass` = |Body:getMass|()

Variants:

    1.  `mass` = |Body:getMass|()

        See function description

        returns:

            `mass`: |lrv-number|

                The mass of the body (in kilograms).

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Body:getMassData*
|Body:getMassData|

Returns the mass, its center, and the rotational inertia.

Synopses:

    1.  `x`, `y`, `mass`, `inertia` = |Body:getMassData|()

Variants:

    1.  `x`, `y`, `mass`, `inertia` = |Body:getMassData|()

        See function description

        returns:

            `x`: |lrv-number|

                The x position of the center of mass.

            `y`: |lrv-number|

                The y position of the center of mass.

            `mass`: |lrv-number|

                The mass of the body.

            `inertia`: |lrv-number|

                The rotational inertia.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Body:getPosition*
|Body:getPosition|

Get the position of the body.

Note that this may not be the center of mass of the body.

Synopses:

    1.  `x`, `y` = |Body:getPosition|()

Variants:

    1.  `x`, `y` = |Body:getPosition|()

        See function description

        returns:

            `x`: |lrv-number|

                The x position.

            `y`: |lrv-number|

                The y position.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Body:getTransform*
|Body:getTransform|

Get the position and angle of the body.

Note that the position may not be the center of mass of the body. An angle of 0
radians will mean 'looking to the right'. Although radians increase
counter-clockwise, the y axis points down so it becomes clockwise from our
point of view.

Synopses:

    1.  `x`, `y`, `angle` = |Body:getTransform|()

Variants:

    1.  `x`, `y`, `angle` = |Body:getTransform|()

        See function description

        returns:

            `x`: |lrv-number|

                The x component of the position.

            `y`: |lrv-number|

                The y component of the position.

            `angle`: |lrv-number|

                The angle in radians.

        arguments:

            None

-------------------------------------------------------------------------------
                                                            *love-Body:getType*
|Body:getType|

Returns the type of the body.

Synopses:

    1.  `type` = |Body:getType|()

Variants:

    1.  `type` = |Body:getType|()

        See function description

        returns:

            `type`: |love-BodyType|

                The body type.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Body:getUserData*
|Body:getUserData|

Returns the Lua value associated with this Body.

Synopses:

    1.  `value` = |Body:getUserData|()

Variants:

    1.  `value` = |Body:getUserData|()

        See function description

        returns:

            `value`: <any>

                The Lua value associated with the Body.

        arguments:

            None

-------------------------------------------------------------------------------
                                                           *love-Body:getWorld*
|Body:getWorld|

Gets the World the body lives in.

Synopses:

    1.  `world` = |Body:getWorld|()

Variants:

    1.  `world` = |Body:getWorld|()

        See function description

        returns:

            `world`: |love-World|

                The world the body lives in.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Body:getWorldCenter*
|Body:getWorldCenter|

Get the center of mass position in world coordinates.

Use Body:getLocalCenter to get the center of mass in local coordinates.

Synopses:

    1.  `x`, `y` = |Body:getWorldCenter|()

Variants:

    1.  `x`, `y` = |Body:getWorldCenter|()

        See function description

        returns:

            `x`: |lrv-number|

                The x coordinate of the center of mass.

            `y`: |lrv-number|

                The y coordinate of the center of mass.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Body:getWorldPoint*
|Body:getWorldPoint|

Transform a point from local coordinates to world coordinates.

Synopses:

    1.  `worldX`, `worldY` = |Body:getWorldPoint|( `localX`, `localY` )

Variants:

    1.  `worldX`, `worldY` = |Body:getWorldPoint|( `localX`, `localY` )

        See function description

        returns:

            `worldX`: |lrv-number|

                The x position in world coordinates.

            `worldY`: |lrv-number|

                The y position in world coordinates.

        arguments:

            `localX`: |lrv-number|

                The x position in local coordinates.

            `localY`: |lrv-number|

                The y position in local coordinates.

-------------------------------------------------------------------------------
                                                     *love-Body:getWorldPoints*
|Body:getWorldPoints|

Transforms multiple points from local coordinates to world coordinates.

Synopses:

    1.  `x1`, `y1`, `x2`, `y2` = |Body:getWorldPoints|( `x1`, `y1`,
        `x2`, `y2` )

Variants:

    1.  `x1`, `y1`, `x2`, `y2` = |Body:getWorldPoints|( `x1`, `y1`,
        `x2`, `y2` )

        See function description

        returns:

            `x1`: |lrv-number|

                The transformed x position of the first point.

            `y1`: |lrv-number|

                The transformed y position of the first point.

            `x2`: |lrv-number|

                The transformed x position of the second point.

            `y2`: |lrv-number|

                The transformed y position of the second point.

        arguments:

            `x1`: |lrv-number|

                The x position of the first point.

            `y1`: |lrv-number|

                The y position of the first point.

            `x2`: |lrv-number|

                The x position of the second point.

            `y2`: |lrv-number|

                The y position of the second point.

-------------------------------------------------------------------------------
                                                     *love-Body:getWorldVector*
|Body:getWorldVector|

Transform a vector from local coordinates to world coordinates.

Synopses:

    1.  `worldX`, `worldY` = |Body:getWorldVector|( `localX`, `localY`
        )

Variants:

    1.  `worldX`, `worldY` = |Body:getWorldVector|( `localX`, `localY`
        )

        See function description

        returns:

            `worldX`: |lrv-number|

                The vector x component in world coordinates.

            `worldY`: |lrv-number|

                The vector y component in world coordinates.

        arguments:

            `localX`: |lrv-number|

                The vector x component in local coordinates.

            `localY`: |lrv-number|

                The vector y component in local coordinates.

-------------------------------------------------------------------------------
                                                               *love-Body:getX*
|Body:getX|

Get the x position of the body in world coordinates.

Synopses:

    1.  `x` = |Body:getX|()

Variants:

    1.  `x` = |Body:getX|()

        See function description

        returns:

            `x`: |lrv-number|

                The x position in world coordinates.

        arguments:

            None

-------------------------------------------------------------------------------
                                                               *love-Body:getY*
|Body:getY|

Get the y position of the body in world coordinates.

Synopses:

    1.  `y` = |Body:getY|()

Variants:

    1.  `y` = |Body:getY|()

        See function description

        returns:

            `y`: |lrv-number|

                The y position in world coordinates.

        arguments:

            None

-------------------------------------------------------------------------------
                                                           *love-Body:isActive*
|Body:isActive|

Returns whether the body is actively used in the simulation.

Synopses:

    1.  `status` = |Body:isActive|()

Variants:

    1.  `status` = |Body:isActive|()

        See function description

        returns:

            `status`: |lrv-boolean|

                True if the body is active or false if not.

        arguments:

            None

-------------------------------------------------------------------------------
                                                            *love-Body:isAwake*
|Body:isAwake|

Returns the sleep status of the body.

Synopses:

    1.  `status` = |Body:isAwake|()

Variants:

    1.  `status` = |Body:isAwake|()

        See function description

        returns:

            `status`: |lrv-boolean|

                True if the body is awake or false if not.

        arguments:

            None

-------------------------------------------------------------------------------
                                                           *love-Body:isBullet*
|Body:isBullet|

Get the bullet status of a body.

There are two methods to check for body collisions:

*  at their location when the world is updated (default)

*  using continuous collision detection (CCD)

The default method is efficient, but a body moving very quickly may sometimes
jump over another body without producing a collision. A body that is set as a
bullet will use CCD. This is less efficient, but is guaranteed not to jump when
moving quickly.

Note that static bodies (with zero mass) always use CCD, so your walls will not
let a fast moving body pass through even if it is not a bullet.

Synopses:

    1.  `status` = |Body:isBullet|()

Variants:

    1.  `status` = |Body:isBullet|()

        See function description

        returns:

            `status`: |lrv-boolean|

                The bullet status of the body.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Body:isDestroyed*
|Body:isDestroyed|

Gets whether the Body is destroyed. Destroyed bodies cannot be used.

Synopses:

    1.  `destroyed` = |Body:isDestroyed|()

Variants:

    1.  `destroyed` = |Body:isDestroyed|()

        See function description

        returns:

            `destroyed`: |lrv-boolean|

                Whether the Body is destroyed.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-Body:isFixedRotation*
|Body:isFixedRotation|

Returns whether the body rotation is locked.

Synopses:

    1.  `fixed` = |Body:isFixedRotation|()

Variants:

    1.  `fixed` = |Body:isFixedRotation|()

        See function description

        returns:

            `fixed`: |lrv-boolean|

                True if the body's rotation is locked or false if not.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Body:isSleepingAllowed*
|Body:isSleepingAllowed|

Returns the sleeping behaviour of the body.

Synopses:

    1.  `allowed` = |Body:isSleepingAllowed|()

Variants:

    1.  `allowed` = |Body:isSleepingAllowed|()

        See function description

        returns:

            `allowed`: |lrv-boolean|

                True if the body is allowed to sleep or false if not.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Body:isTouching*
|Body:isTouching|

Gets whether the Body is touching the given other Body.

Synopses:

    1.  `touching` = |Body:isTouching|( `otherbody` )

Variants:

    1.  `touching` = |Body:isTouching|( `otherbody` )

        See function description

        returns:

            `touching`: |lrv-boolean|

                True if this body is touching the other body, false otherwise.

        arguments:

            `otherbody`: |love-Body|

                The other body to check.

-------------------------------------------------------------------------------
                                                      *love-Body:resetMassData*
|Body:resetMassData|

Resets the mass of the body by recalculating it from the mass properties of the
fixtures.

Synopses:

    1.  |Body:resetMassData|()

Variants:

    1.  |Body:resetMassData|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Body:setActive*
|Body:setActive|

Sets whether the body is active in the world.

An inactive body does not take part in the simulation. It will not move or
cause any collisions.

Synopses:

    1.  |Body:setActive|( `active` )

Variants:

    1.  |Body:setActive|( `active` )

        See function description

        returns:

            None

        arguments:

            `active`: |lrv-boolean|

                If the body is active or not.

-------------------------------------------------------------------------------
                                                           *love-Body:setAngle*
|Body:setAngle|

Set the angle of the body.

The angle is measured in radians. If you need to transform it from degrees, use
math.rad.

A value of 0 radians will mean 'looking to the right'. Although radians
increase counter-clockwise, the y axis points down so it becomes ''clockwise''
from our point of view.

It is possible to cause a collision with another body by changing its angle.

Synopses:

    1.  |Body:setAngle|( `angle` )

Variants:

    1.  |Body:setAngle|( `angle` )

        See function description

        returns:

            None

        arguments:

            `angle`: |lrv-number|

                The angle in radians.

-------------------------------------------------------------------------------
                                                  *love-Body:setAngularDamping*
|Body:setAngularDamping|

Sets the angular damping of a Body

See Body:getAngularDamping for a definition of angular damping.

Angular damping can take any value from 0 to infinity. It is recommended to
stay between 0 and 0.1, though. Other values will look unrealistic.

Synopses:

    1.  |Body:setAngularDamping|( `damping` )

Variants:

    1.  |Body:setAngularDamping|( `damping` )

        See function description

        returns:

            None

        arguments:

            `damping`: |lrv-number|

                The new angular damping.

-------------------------------------------------------------------------------
                                                 *love-Body:setAngularVelocity*
|Body:setAngularVelocity|

Sets the angular velocity of a Body.

The angular velocity is the ''rate of change of angle over time''.

This function will not accumulate anything; any impulses previously applied
since the last call to World:update will be lost.

Synopses:

    1.  |Body:setAngularVelocity|( `w` )

Variants:

    1.  |Body:setAngularVelocity|( `w` )

        See function description

        returns:

            None

        arguments:

            `w`: |lrv-number|

                The new angular velocity, in radians per second

-------------------------------------------------------------------------------
                                                           *love-Body:setAwake*
|Body:setAwake|

Wakes the body up or puts it to sleep.

Synopses:

    1.  |Body:setAwake|( `awake` )

Variants:

    1.  |Body:setAwake|( `awake` )

        See function description

        returns:

            None

        arguments:

            `awake`: |lrv-boolean|

                The body sleep status.

-------------------------------------------------------------------------------
                                                          *love-Body:setBullet*
|Body:setBullet|

Set the bullet status of a body.

There are two methods to check for body collisions:

*  at their location when the world is updated (default)

*  using continuous collision detection (CCD)

The default method is efficient, but a body moving very quickly may sometimes
jump over another body without producing a collision. A body that is set as a
bullet will use CCD. This is less efficient, but is guaranteed not to jump when
moving quickly.

Note that static bodies (with zero mass) always use CCD, so your walls will not
let a fast moving body pass through even if it is not a bullet.

Synopses:

    1.  |Body:setBullet|( `status` )

Variants:

    1.  |Body:setBullet|( `status` )

        See function description

        returns:

            None

        arguments:

            `status`: |lrv-boolean|

                The bullet status of the body.

-------------------------------------------------------------------------------
                                                   *love-Body:setFixedRotation*
|Body:setFixedRotation|

Set whether a body has fixed rotation.

Bodies with fixed rotation don't vary the speed at which they rotate. Calling
this function causes the mass to be reset.

Synopses:

    1.  |Body:setFixedRotation|( `isFixed` )

Variants:

    1.  |Body:setFixedRotation|( `isFixed` )

        See function description

        returns:

            None

        arguments:

            `isFixed`: |lrv-boolean|

                Whether the body should have fixed rotation.

-------------------------------------------------------------------------------
                                                    *love-Body:setGravityScale*
|Body:setGravityScale|

Sets a new gravity scale factor for the body.

Synopses:

    1.  |Body:setGravityScale|( `scale` )

Variants:

    1.  |Body:setGravityScale|( `scale` )

        See function description

        returns:

            None

        arguments:

            `scale`: |lrv-number|

                The new gravity scale factor.

-------------------------------------------------------------------------------
                                                         *love-Body:setInertia*
|Body:setInertia|

Set the inertia of a body.

Synopses:

    1.  |Body:setInertia|( `inertia` )

Variants:

    1.  |Body:setInertia|( `inertia` )

        See function description

        returns:

            None

        arguments:

            `inertia`: |lrv-number|

                The new moment of inertia, in kilograms * pixel squared.

-------------------------------------------------------------------------------
                                                   *love-Body:setLinearDamping*
|Body:setLinearDamping|

Sets the linear damping of a Body

See Body:getLinearDamping for a definition of linear damping.

Linear damping can take any value from 0 to infinity. It is recommended to stay
between 0 and 0.1, though. Other values will make the objects look 'floaty'(if
gravity is enabled).

Synopses:

    1.  |Body:setLinearDamping|( `ld` )

Variants:

    1.  |Body:setLinearDamping|( `ld` )

        See function description

        returns:

            None

        arguments:

            `ld`: |lrv-number|

                The new linear damping

-------------------------------------------------------------------------------
                                                  *love-Body:setLinearVelocity*
|Body:setLinearVelocity|

Sets a new linear velocity for the Body.

This function will not accumulate anything; any impulses previously applied
since the last call to World:update will be lost.

Synopses:

    1.  |Body:setLinearVelocity|( `x`, `y` )

Variants:

    1.  |Body:setLinearVelocity|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The x-component of the velocity vector.

            `y`: |lrv-number|

                The y-component of the velocity vector.

-------------------------------------------------------------------------------
                                                            *love-Body:setMass*
|Body:setMass|

Sets a new body mass.

Synopses:

    1.  |Body:setMass|( `mass` )

Variants:

    1.  |Body:setMass|( `mass` )

        See function description

        returns:

            None

        arguments:

            `mass`: |lrv-number|

                The mass, in kilograms.

-------------------------------------------------------------------------------
                                                        *love-Body:setMassData*
|Body:setMassData|

Overrides the calculated mass data.

Synopses:

    1.  |Body:setMassData|( `x`, `y`, `mass`, `inertia` )

Variants:

    1.  |Body:setMassData|( `x`, `y`, `mass`, `inertia` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The x position of the center of mass.

            `y`: |lrv-number|

                The y position of the center of mass.

            `mass`: |lrv-number|

                The mass of the body.

            `inertia`: |lrv-number|

                The rotational inertia.

-------------------------------------------------------------------------------
                                                        *love-Body:setPosition*
|Body:setPosition|

Set the position of the body.

Note that this may not be the center of mass of the body.

This function cannot wake up the body.

Synopses:

    1.  |Body:setPosition|( `x`, `y` )

Variants:

    1.  |Body:setPosition|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The x position.

            `y`: |lrv-number|

                The y position.

-------------------------------------------------------------------------------
                                                 *love-Body:setSleepingAllowed*
|Body:setSleepingAllowed|

Sets the sleeping behaviour of the body. Should sleeping be allowed, a body at
rest will automatically sleep. A sleeping body is not simulated unless it
collided with an awake body. Be wary that one can end up with a situation like
a floating sleeping body if the floor was removed.

Synopses:

    1.  |Body:setSleepingAllowed|( `allowed` )

Variants:

    1.  |Body:setSleepingAllowed|( `allowed` )

        See function description

        returns:

            None

        arguments:

            `allowed`: |lrv-boolean|

                True if the body is allowed to sleep or false if not.

-------------------------------------------------------------------------------
                                                       *love-Body:setTransform*
|Body:setTransform|

Set the position and angle of the body.

Note that the position may not be the center of mass of the body. An angle of 0
radians will mean 'looking to the right'. Although radians increase
counter-clockwise, the y axis points down so it becomes clockwise from our
point of view.

This function cannot wake up the body.

Synopses:

    1.  |Body:setTransform|( `x`, `y`, `angle` )

Variants:

    1.  |Body:setTransform|( `x`, `y`, `angle` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The x component of the position.

            `y`: |lrv-number|

                The y component of the position.

            `angle`: |lrv-number|

                The angle in radians.

-------------------------------------------------------------------------------
                                                            *love-Body:setType*
|Body:setType|

Sets a new body type.

Synopses:

    1.  |Body:setType|( `type` )

Variants:

    1.  |Body:setType|( `type` )

        See function description

        returns:

            None

        arguments:

            `type`: |love-BodyType|

                The new type.

-------------------------------------------------------------------------------
                                                        *love-Body:setUserData*
|Body:setUserData|

Associates a Lua value with the Body.

To delete the reference, explicitly pass nil.

Synopses:

    1.  |Body:setUserData|( `value` )

Variants:

    1.  |Body:setUserData|( `value` )

        See function description

        returns:

            None

        arguments:

            `value`: <any>

                The Lua value to associate with the Body.

-------------------------------------------------------------------------------
                                                               *love-Body:setX*
|Body:setX|

Set the x position of the body.

This function cannot wake up the body.

Synopses:

    1.  |Body:setX|( `x` )

Variants:

    1.  |Body:setX|( `x` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The x position.

-------------------------------------------------------------------------------
                                                               *love-Body:setY*
|Body:setY|

Set the y position of the body.

This function cannot wake up the body.

Synopses:

    1.  |Body:setY|( `y` )

Variants:

    1.  |Body:setY|( `y` )

        See function description

        returns:

            None

        arguments:

            `y`: |lrv-number|

                The y position.

-------------------------------------------------------------------------------
                                                              *love-ChainShape*
|ChainShape|

A ChainShape consists of multiple line segments. It can be used to create the
boundaries of your terrain. The shape does not have volume and can only collide
with PolygonShape and CircleShape.

Unlike the PolygonShape, the ChainShape does not have a vertices limit or has
to form a convex shape, but self intersections are not supported.

                                                 *love-ChainShape-constructors*
    constructors:

        None

                                                   *love-ChainShape-supertypes*
    supertypes:

        |Shape|                           |love-Shape|
        |Object|                          |love-Object|

                                                     *love-ChainShape-subtypes*
    subtypes:

        None

                                                    *love-ChainShape-functions*
    functions:

        |getChildEdge|                    |love-ChainShape:getChildEdge|
        |getNextVertex|                   |love-ChainShape:getNextVertex|
        |getPoint|                        |love-ChainShape:getPoint|
        |getPoints|                       |love-ChainShape:getPoints|
        |getPreviousVertex|               |love-ChainShape:getPreviousVertex|
        |getVertexCount|                  |love-ChainShape:getVertexCount|
        |setNextVertex|                   |love-ChainShape:setNextVertex|
        |setPreviousVertex|               |love-ChainShape:setPreviousVertex|

-------------------------------------------------------------------------------
                                                 *love-ChainShape:getChildEdge*
|ChainShape:getChildEdge|

Returns a child of the shape as an EdgeShape.

Synopses:

    1.  `shape` = |ChainShape:getChildEdge|( `index` )

Variants:

    1.  `shape` = |ChainShape:getChildEdge|( `index` )

        See function description

        returns:

            `shape`: |love-EdgeShape|

                The child as an EdgeShape.

        arguments:

            `index`: |lrv-number|

                The index of the child.

-------------------------------------------------------------------------------
                                                *love-ChainShape:getNextVertex*
|ChainShape:getNextVertex|

Gets the vertex that establishes a connection to the next shape.

Setting next and previous ChainShape vertices can help prevent unwanted
collisions when a flat shape slides along the edge and moves over to the new
shape.

Synopses:

    1.  `x`, `y` = |ChainShape:getNextVertex|()

Variants:

    1.  `x`, `y` = |ChainShape:getNextVertex|()

        See function description

        returns:

            `x`: |lrv-number|

                The x-component of the vertex, or nil if
                ChainShape:setNextVertex hasn't been called.

            `y`: |lrv-number|

                The y-component of the vertex, or nil if
                ChainShape:setNextVertex hasn't been called.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-ChainShape:getPoint*
|ChainShape:getPoint|

Returns a point of the shape.

Synopses:

    1.  `x`, `y` = |ChainShape:getPoint|( `index` )

Variants:

    1.  `x`, `y` = |ChainShape:getPoint|( `index` )

        See function description

        returns:

            `x`: |lrv-number|

                The x-coordinate of the point.

            `y`: |lrv-number|

                The y-coordinate of the point.

        arguments:

            `index`: |lrv-number|

                The index of the point to return.

-------------------------------------------------------------------------------
                                                    *love-ChainShape:getPoints*
|ChainShape:getPoints|

Returns all points of the shape.

Synopses:

    1.  `x1`, `y1`, `x2`, `y2` = |ChainShape:getPoints|()

Variants:

    1.  `x1`, `y1`, `x2`, `y2` = |ChainShape:getPoints|()

        See function description

        returns:

            `x1`: |lrv-number|

                The x-coordinate of the first point.

            `y1`: |lrv-number|

                The y-coordinate of the first point.

            `x2`: |lrv-number|

                The x-coordinate of the second point.

            `y2`: |lrv-number|

                The y-coordinate of the second point.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-ChainShape:getPreviousVertex*
|ChainShape:getPreviousVertex|

Gets the vertex that establishes a connection to the previous shape.

Setting next and previous ChainShape vertices can help prevent unwanted
collisions when a flat shape slides along the edge and moves over to the new
shape.

Synopses:

    1.  `x`, `y` = |ChainShape:getPreviousVertex|()

Variants:

    1.  `x`, `y` = |ChainShape:getPreviousVertex|()

        See function description

        returns:

            `x`: |lrv-number|

                The x-component of the vertex, or nil if
                ChainShape:setPreviousVertex hasn't been called.

            `y`: |lrv-number|

                The y-component of the vertex, or nil if
                ChainShape:setPreviousVertex hasn't been called.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-ChainShape:getVertexCount*
|ChainShape:getVertexCount|

Returns the number of vertices the shape has.

Synopses:

    1.  `count` = |ChainShape:getVertexCount|()

Variants:

    1.  `count` = |ChainShape:getVertexCount|()

        See function description

        returns:

            `count`: |lrv-number|

                The number of vertices.

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-ChainShape:setNextVertex*
|ChainShape:setNextVertex|

Sets a vertex that establishes a connection to the next shape.

This can help prevent unwanted collisions when a flat shape slides along the
edge and moves over to the new shape.

Synopses:

    1.  |ChainShape:setNextVertex|( `x`, `y` )

Variants:

    1.  |ChainShape:setNextVertex|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The x-component of the vertex.

            `y`: |lrv-number|

                The y-component of the vertex.

-------------------------------------------------------------------------------
                                            *love-ChainShape:setPreviousVertex*
|ChainShape:setPreviousVertex|

Sets a vertex that establishes a connection to the previous shape.

This can help prevent unwanted collisions when a flat shape slides along the
edge and moves over to the new shape.

Synopses:

    1.  |ChainShape:setPreviousVertex|( `x`, `y` )

Variants:

    1.  |ChainShape:setPreviousVertex|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The x-component of the vertex.

            `y`: |lrv-number|

                The y-component of the vertex.

-------------------------------------------------------------------------------
                                                             *love-CircleShape*
|CircleShape|

Circle extends Shape and adds a radius and a local position.

                                                *love-CircleShape-constructors*
    constructors:

        None

                                                  *love-CircleShape-supertypes*
    supertypes:

        |Shape|                           |love-Shape|
        |Object|                          |love-Object|

                                                    *love-CircleShape-subtypes*
    subtypes:

        None

                                                   *love-CircleShape-functions*
    functions:

        |getPoint|                        |love-CircleShape:getPoint|
        |getRadius|                       |love-CircleShape:getRadius|
        |setPoint|                        |love-CircleShape:setPoint|
        |setRadius|                       |love-CircleShape:setRadius|

-------------------------------------------------------------------------------
                                                    *love-CircleShape:getPoint*
|CircleShape:getPoint|

Gets the center point of the circle shape.

Synopses:

    1.  `x`, `y` = |CircleShape:getPoint|()

Variants:

    1.  `x`, `y` = |CircleShape:getPoint|()

        See function description

        returns:

            `x`: |lrv-number|

                The x-component of the center point of the circle.

            `y`: |lrv-number|

                The y-component of the center point of the circle.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-CircleShape:getRadius*
|CircleShape:getRadius|

Gets the radius of the circle shape.

Synopses:

    1.  `radius` = |CircleShape:getRadius|()

Variants:

    1.  `radius` = |CircleShape:getRadius|()

        See function description

        returns:

            `radius`: |lrv-number|

                The radius of the circle

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-CircleShape:setPoint*
|CircleShape:setPoint|

Sets the location of the center of the circle shape.

Synopses:

    1.  |CircleShape:setPoint|( `x`, `y` )

Variants:

    1.  |CircleShape:setPoint|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The x-component of the new center point of the circle.

            `y`: |lrv-number|

                The y-component of the new center point of the circle.

-------------------------------------------------------------------------------
                                                   *love-CircleShape:setRadius*
|CircleShape:setRadius|

Sets the radius of the circle.

Synopses:

    1.  |CircleShape:setRadius|( `radius` )

Variants:

    1.  |CircleShape:setRadius|( `radius` )

        See function description

        returns:

            None

        arguments:

            `radius`: |lrv-number|

                The radius of the circle

-------------------------------------------------------------------------------
                                                                 *love-Contact*
|Contact|

Contacts are objects created to manage collisions in worlds.

                                                    *love-Contact-constructors*
    constructors:

        None

                                                      *love-Contact-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                        *love-Contact-subtypes*
    subtypes:

        None

                                                       *love-Contact-functions*
    functions:

        |getFixtures|                     |love-Contact:getFixtures|
        |getFriction|                     |love-Contact:getFriction|
        |getNormal|                       |love-Contact:getNormal|
        |getPositions|                    |love-Contact:getPositions|
        |getRestitution|                  |love-Contact:getRestitution|
        |isEnabled|                       |love-Contact:isEnabled|
        |isTouching|                      |love-Contact:isTouching|
        |resetFriction|                   |love-Contact:resetFriction|
        |resetRestitution|                |love-Contact:resetRestitution|
        |setEnabled|                      |love-Contact:setEnabled|
        |setFriction|                     |love-Contact:setFriction|
        |setRestitution|                  |love-Contact:setRestitution|

-------------------------------------------------------------------------------
                                                     *love-Contact:getFixtures*
|Contact:getFixtures|

Gets the two Fixtures that hold the shapes that are in contact.

Synopses:

    1.  `fixtureA`, `fixtureB` = |Contact:getFixtures|()

Variants:

    1.  `fixtureA`, `fixtureB` = |Contact:getFixtures|()

        See function description

        returns:

            `fixtureA`: |love-Fixture|

                The first Fixture.

            `fixtureB`: |love-Fixture|

                The second Fixture.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Contact:getFriction*
|Contact:getFriction|

Get the friction between two shapes that are in contact.

Synopses:

    1.  `friction` = |Contact:getFriction|()

Variants:

    1.  `friction` = |Contact:getFriction|()

        See function description

        returns:

            `friction`: |lrv-number|

                The friction of the contact.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Contact:getNormal*
|Contact:getNormal|

Get the normal vector between two shapes that are in contact.

This function returns the coordinates of a unit vector that points from the
first shape to the second.

Synopses:

    1.  `nx`, `ny` = |Contact:getNormal|()

Variants:

    1.  `nx`, `ny` = |Contact:getNormal|()

        See function description

        returns:

            `nx`: |lrv-number|

                The x component of the normal vector.

            `ny`: |lrv-number|

                The y component of the normal vector.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-Contact:getPositions*
|Contact:getPositions|

Returns the contact points of the two colliding fixtures. There can be one or
two points.

Synopses:

    1.  `x1`, `y1`, `x2`, `y2` = |Contact:getPositions|()

Variants:

    1.  `x1`, `y1`, `x2`, `y2` = |Contact:getPositions|()

        See function description

        returns:

            `x1`: |lrv-number|

                The x coordinate of the first contact point.

            `y1`: |lrv-number|

                The y coordinate of the first contact point.

            `x2`: |lrv-number|

                The x coordinate of the second contact point.

            `y2`: |lrv-number|

                The y coordinate of the second contact point.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Contact:getRestitution*
|Contact:getRestitution|

Get the restitution between two shapes that are in contact.

Synopses:

    1.  `restitution` = |Contact:getRestitution|()

Variants:

    1.  `restitution` = |Contact:getRestitution|()

        See function description

        returns:

            `restitution`: |lrv-number|

                The restitution between the two shapes.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Contact:isEnabled*
|Contact:isEnabled|

Returns whether the contact is enabled. The collision will be ignored if a
contact gets disabled in the preSolve callback.

Synopses:

    1.  `enabled` = |Contact:isEnabled|()

Variants:

    1.  `enabled` = |Contact:isEnabled|()

        See function description

        returns:

            `enabled`: |lrv-boolean|

                True if enabled, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Contact:isTouching*
|Contact:isTouching|

Returns whether the two colliding fixtures are touching each other.

Synopses:

    1.  `touching` = |Contact:isTouching|()

Variants:

    1.  `touching` = |Contact:isTouching|()

        See function description

        returns:

            `touching`: |lrv-boolean|

                True if they touch or false if not.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-Contact:resetFriction*
|Contact:resetFriction|

Resets the contact friction to the mixture value of both fixtures.

Synopses:

    1.  |Contact:resetFriction|()

Variants:

    1.  |Contact:resetFriction|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-Contact:resetRestitution*
|Contact:resetRestitution|

Resets the contact restitution to the mixture value of both fixtures.

Synopses:

    1.  |Contact:resetRestitution|()

Variants:

    1.  |Contact:resetRestitution|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Contact:setEnabled*
|Contact:setEnabled|

Enables or disables the contact.

Synopses:

    1.  |Contact:setEnabled|( `enabled` )

Variants:

    1.  |Contact:setEnabled|( `enabled` )

        See function description

        returns:

            None

        arguments:

            `enabled`: |lrv-boolean|

                True to enable or false to disable.

-------------------------------------------------------------------------------
                                                     *love-Contact:setFriction*
|Contact:setFriction|

Sets the contact friction.

Synopses:

    1.  |Contact:setFriction|( `friction` )

Variants:

    1.  |Contact:setFriction|( `friction` )

        See function description

        returns:

            None

        arguments:

            `friction`: |lrv-number|

                The contact friction.

-------------------------------------------------------------------------------
                                                  *love-Contact:setRestitution*
|Contact:setRestitution|

Sets the contact restitution.

Synopses:

    1.  |Contact:setRestitution|( `restitution` )

Variants:

    1.  |Contact:setRestitution|( `restitution` )

        See function description

        returns:

            None

        arguments:

            `restitution`: |lrv-number|

                The contact restitution.

-------------------------------------------------------------------------------
                                                           *love-DistanceJoint*
|DistanceJoint|

Keeps two bodies at the same distance.

                                              *love-DistanceJoint-constructors*
    constructors:

        None

                                                *love-DistanceJoint-supertypes*
    supertypes:

        |Joint|                           |love-Joint|
        |Object|                          |love-Object|

                                                  *love-DistanceJoint-subtypes*
    subtypes:

        None

                                                 *love-DistanceJoint-functions*
    functions:

        |getDampingRatio|                 |love-DistanceJoint:getDampingRatio|
        |getFrequency|                    |love-DistanceJoint:getFrequency|
        |getLength|                       |love-DistanceJoint:getLength|
        |setDampingRatio|                 |love-DistanceJoint:setDampingRatio|
        |setFrequency|                    |love-DistanceJoint:setFrequency|
        |setLength|                       |love-DistanceJoint:setLength|

-------------------------------------------------------------------------------
                                           *love-DistanceJoint:getDampingRatio*
|DistanceJoint:getDampingRatio|

Gets the damping ratio.

Synopses:

    1.  `ratio` = |DistanceJoint:getDampingRatio|()

Variants:

    1.  `ratio` = |DistanceJoint:getDampingRatio|()

        See function description

        returns:

            `ratio`: |lrv-number|

                The damping ratio.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-DistanceJoint:getFrequency*
|DistanceJoint:getFrequency|

Gets the response speed.

Synopses:

    1.  `Hz` = |DistanceJoint:getFrequency|()

Variants:

    1.  `Hz` = |DistanceJoint:getFrequency|()

        See function description

        returns:

            `Hz`: |lrv-number|

                The response speed.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-DistanceJoint:getLength*
|DistanceJoint:getLength|

Gets the equilibrium distance between the two Bodies.

Synopses:

    1.  `l` = |DistanceJoint:getLength|()

Variants:

    1.  `l` = |DistanceJoint:getLength|()

        See function description

        returns:

            `l`: |lrv-number|

                The length between the two Bodies.

        arguments:

            None

-------------------------------------------------------------------------------
                                           *love-DistanceJoint:setDampingRatio*
|DistanceJoint:setDampingRatio|

Sets the damping ratio.

Synopses:

    1.  |DistanceJoint:setDampingRatio|( `ratio` )

Variants:

    1.  |DistanceJoint:setDampingRatio|( `ratio` )

        See function description

        returns:

            None

        arguments:

            `ratio`: |lrv-number|

                The damping ratio.

-------------------------------------------------------------------------------
                                              *love-DistanceJoint:setFrequency*
|DistanceJoint:setFrequency|

Sets the response speed.

Synopses:

    1.  |DistanceJoint:setFrequency|( `Hz` )

Variants:

    1.  |DistanceJoint:setFrequency|( `Hz` )

        See function description

        returns:

            None

        arguments:

            `Hz`: |lrv-number|

                The response speed.

-------------------------------------------------------------------------------
                                                 *love-DistanceJoint:setLength*
|DistanceJoint:setLength|

Sets the equilibrium distance between the two Bodies.

Synopses:

    1.  |DistanceJoint:setLength|( `l` )

Variants:

    1.  |DistanceJoint:setLength|( `l` )

        See function description

        returns:

            None

        arguments:

            `l`: |lrv-number|

                The length between the two Bodies.

-------------------------------------------------------------------------------
                                                               *love-EdgeShape*
|EdgeShape|

A EdgeShape is a line segment. They can be used to create the boundaries of
your terrain. The shape does not have volume and can only collide with
PolygonShape and CircleShape.

                                                  *love-EdgeShape-constructors*
    constructors:

        None

                                                    *love-EdgeShape-supertypes*
    supertypes:

        |Shape|                           |love-Shape|
        |Object|                          |love-Object|

                                                      *love-EdgeShape-subtypes*
    subtypes:

        None

                                                     *love-EdgeShape-functions*
    functions:

        |getNextVertex|                   |love-EdgeShape:getNextVertex|
        |getPoints|                       |love-EdgeShape:getPoints|
        |getPreviousVertex|               |love-EdgeShape:getPreviousVertex|
        |setNextVertex|                   |love-EdgeShape:setNextVertex|
        |setPreviousVertex|               |love-EdgeShape:setPreviousVertex|

-------------------------------------------------------------------------------
                                                 *love-EdgeShape:getNextVertex*
|EdgeShape:getNextVertex|

Gets the vertex that establishes a connection to the next shape.

Setting next and previous EdgeShape vertices can help prevent unwanted
collisions when a flat shape slides along the edge and moves over to the new
shape.

Synopses:

    1.  `x`, `y` = |EdgeShape:getNextVertex|()

Variants:

    1.  `x`, `y` = |EdgeShape:getNextVertex|()

        See function description

        returns:

            `x`: |lrv-number|

                The x-component of the vertex, or nil if
                EdgeShape:setNextVertex hasn't been called.

            `y`: |lrv-number|

                The y-component of the vertex, or nil if
                EdgeShape:setNextVertex hasn't been called.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-EdgeShape:getPoints*
|EdgeShape:getPoints|

Returns the local coordinates of the edge points.

Synopses:

    1.  `x1`, `y1`, `x2`, `y2` = |EdgeShape:getPoints|()

Variants:

    1.  `x1`, `y1`, `x2`, `y2` = |EdgeShape:getPoints|()

        See function description

        returns:

            `x1`: |lrv-number|

                The x-component of the first vertex.

            `y1`: |lrv-number|

                The y-component of the first vertex.

            `x2`: |lrv-number|

                The x-component of the second vertex.

            `y2`: |lrv-number|

                The y-component of the second vertex.

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-EdgeShape:getPreviousVertex*
|EdgeShape:getPreviousVertex|

Gets the vertex that establishes a connection to the previous shape.

Setting next and previous EdgeShape vertices can help prevent unwanted
collisions when a flat shape slides along the edge and moves over to the new
shape.

Synopses:

    1.  `x`, `y` = |EdgeShape:getPreviousVertex|()

Variants:

    1.  `x`, `y` = |EdgeShape:getPreviousVertex|()

        See function description

        returns:

            `x`: |lrv-number|

                The x-component of the vertex, or nil if
                EdgeShape:setPreviousVertex hasn't been called.

            `y`: |lrv-number|

                The y-component of the vertex, or nil if
                EdgeShape:setPreviousVertex hasn't been called.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-EdgeShape:setNextVertex*
|EdgeShape:setNextVertex|

Sets a vertex that establishes a connection to the next shape.

This can help prevent unwanted collisions when a flat shape slides along the
edge and moves over to the new shape.

Synopses:

    1.  |EdgeShape:setNextVertex|( `x`, `y` )

Variants:

    1.  |EdgeShape:setNextVertex|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The x-component of the vertex.

            `y`: |lrv-number|

                The y-component of the vertex.

-------------------------------------------------------------------------------
                                             *love-EdgeShape:setPreviousVertex*
|EdgeShape:setPreviousVertex|

Sets a vertex that establishes a connection to the previous shape.

This can help prevent unwanted collisions when a flat shape slides along the
edge and moves over to the new shape.

Synopses:

    1.  |EdgeShape:setPreviousVertex|( `x`, `y` )

Variants:

    1.  |EdgeShape:setPreviousVertex|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The x-component of the vertex.

            `y`: |lrv-number|

                The y-component of the vertex.

-------------------------------------------------------------------------------
                                                                 *love-Fixture*
|Fixture|

Fixtures attach shapes to bodies.

                                                    *love-Fixture-constructors*
    constructors:

        None

                                                      *love-Fixture-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                        *love-Fixture-subtypes*
    subtypes:

        None

                                                       *love-Fixture-functions*
    functions:

        |destroy|                         |love-Fixture:destroy|
        |getBody|                         |love-Fixture:getBody|
        |getBoundingBox|                  |love-Fixture:getBoundingBox|
        |getCategory|                     |love-Fixture:getCategory|
        |getDensity|                      |love-Fixture:getDensity|
        |getFilterData|                   |love-Fixture:getFilterData|
        |getFriction|                     |love-Fixture:getFriction|
        |getGroupIndex|                   |love-Fixture:getGroupIndex|
        |getMask|                         |love-Fixture:getMask|
        |getMassData|                     |love-Fixture:getMassData|
        |getRestitution|                  |love-Fixture:getRestitution|
        |getShape|                        |love-Fixture:getShape|
        |getUserData|                     |love-Fixture:getUserData|
        |isDestroyed|                     |love-Fixture:isDestroyed|
        |isSensor|                        |love-Fixture:isSensor|
        |rayCast|                         |love-Fixture:rayCast|
        |setCategory|                     |love-Fixture:setCategory|
        |setDensity|                      |love-Fixture:setDensity|
        |setFilterData|                   |love-Fixture:setFilterData|
        |setFriction|                     |love-Fixture:setFriction|
        |setGroupIndex|                   |love-Fixture:setGroupIndex|
        |setMask|                         |love-Fixture:setMask|
        |setRestitution|                  |love-Fixture:setRestitution|
        |setSensor|                       |love-Fixture:setSensor|
        |setUserData|                     |love-Fixture:setUserData|
        |testPoint|                       |love-Fixture:testPoint|

-------------------------------------------------------------------------------
                                                         *love-Fixture:destroy*
|Fixture:destroy|

Destroys the fixture.

Synopses:

    1.  |Fixture:destroy|()

Variants:

    1.  |Fixture:destroy|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Fixture:getBody*
|Fixture:getBody|

Returns the body to which the fixture is attached.

Synopses:

    1.  `body` = |Fixture:getBody|()

Variants:

    1.  `body` = |Fixture:getBody|()

        See function description

        returns:

            `body`: |love-Body|

                The parent body.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Fixture:getBoundingBox*
|Fixture:getBoundingBox|

Returns the points of the fixture bounding box. In case the fixture has
multiple children a 1-based index can be specified. For example, a fixture will
have multiple children with a chain shape.

Synopses:

    1.  `topLeftX`, `topLeftY`, `bottomRightX`, `bottomRightY` =
        |Fixture:getBoundingBox|( `index` )

Variants:

    1.  `topLeftX`, `topLeftY`, `bottomRightX`, `bottomRightY` =
        |Fixture:getBoundingBox|( `index` )

        See function description

        returns:

            `topLeftX`: |lrv-number|

                The x position of the top-left point.

            `topLeftY`: |lrv-number|

                The y position of the top-left point.

            `bottomRightX`: |lrv-number|

                The x position of the bottom-right point.

            `bottomRightY`: |lrv-number|

                The y position of the bottom-right point.

        arguments:

            `index`: |lrv-number|

                A bounding box of the fixture.

-------------------------------------------------------------------------------
                                                     *love-Fixture:getCategory*
|Fixture:getCategory|

Returns the categories the fixture belongs to.

Synopses:

    1.  `category1`, `category2` = |Fixture:getCategory|()

Variants:

    1.  `category1`, `category2` = |Fixture:getCategory|()

        See function description

        returns:

            `category1`: |lrv-number|

                The first category.

            `category2`: |lrv-number|

                The second category.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-Fixture:getDensity*
|Fixture:getDensity|

Returns the density of the fixture.

Synopses:

    1.  `density` = |Fixture:getDensity|()

Variants:

    1.  `density` = |Fixture:getDensity|()

        See function description

        returns:

            `density`: |lrv-number|

                The fixture density in kilograms per square meter.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-Fixture:getFilterData*
|Fixture:getFilterData|

Returns the filter data of the fixture.

Categories and masks are encoded as the bits of a 16-bit integer.

Synopses:

    1.  `categories`, `mask`, `group` = |Fixture:getFilterData|()

Variants:

    1.  `categories`, `mask`, `group` = |Fixture:getFilterData|()

        See function description

        returns:

            `categories`: |lrv-number|

                The categories as an integer from 0 to 65535.

            `mask`: |lrv-number|

                The mask as an integer from 0 to 65535.

            `group`: |lrv-number|

                The group as an integer from -32768 to 32767.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Fixture:getFriction*
|Fixture:getFriction|

Returns the friction of the fixture.

Synopses:

    1.  `friction` = |Fixture:getFriction|()

Variants:

    1.  `friction` = |Fixture:getFriction|()

        See function description

        returns:

            `friction`: |lrv-number|

                The fixture friction.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-Fixture:getGroupIndex*
|Fixture:getGroupIndex|

Returns the group the fixture belongs to. Fixtures with the same group will
always collide if the group is positive or never collide if it's negative. The
group zero means no group.

The groups range from -32768 to 32767.

Synopses:

    1.  `group` = |Fixture:getGroupIndex|()

Variants:

    1.  `group` = |Fixture:getGroupIndex|()

        See function description

        returns:

            `group`: |lrv-number|

                The group of the fixture.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Fixture:getMask*
|Fixture:getMask|

Returns which categories this fixture should '''NOT''' collide with.

Synopses:

    1.  `mask1`, `mask2` = |Fixture:getMask|()

Variants:

    1.  `mask1`, `mask2` = |Fixture:getMask|()

        See function description

        returns:

            `mask1`: |lrv-number|

                The first category selected by the mask.

            `mask2`: |lrv-number|

                The second category selected by the mask.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Fixture:getMassData*
|Fixture:getMassData|

Returns the mass, its center and the rotational inertia.

Synopses:

    1.  `x`, `y`, `mass`, `inertia` = |Fixture:getMassData|()

Variants:

    1.  `x`, `y`, `mass`, `inertia` = |Fixture:getMassData|()

        See function description

        returns:

            `x`: |lrv-number|

                The x position of the center of mass.

            `y`: |lrv-number|

                The y position of the center of mass.

            `mass`: |lrv-number|

                The mass of the fixture.

            `inertia`: |lrv-number|

                The rotational inertia.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Fixture:getRestitution*
|Fixture:getRestitution|

Returns the restitution of the fixture.

Synopses:

    1.  `restitution` = |Fixture:getRestitution|()

Variants:

    1.  `restitution` = |Fixture:getRestitution|()

        See function description

        returns:

            `restitution`: |lrv-number|

                The fixture restitution.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Fixture:getShape*
|Fixture:getShape|

Returns the shape of the fixture. This shape is a reference to the actual data
used in the simulation. It's possible to change its values between timesteps.

Synopses:

    1.  `shape` = |Fixture:getShape|()

Variants:

    1.  `shape` = |Fixture:getShape|()

        See function description

        returns:

            `shape`: |love-Shape|

                The fixture's shape.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Fixture:getUserData*
|Fixture:getUserData|

Returns the Lua value associated with this fixture.

Synopses:

    1.  `value` = |Fixture:getUserData|()

Variants:

    1.  `value` = |Fixture:getUserData|()

        See function description

        returns:

            `value`: <any>

                The Lua value associated with the fixture.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Fixture:isDestroyed*
|Fixture:isDestroyed|

Gets whether the Fixture is destroyed. Destroyed fixtures cannot be used.

Synopses:

    1.  `destroyed` = |Fixture:isDestroyed|()

Variants:

    1.  `destroyed` = |Fixture:isDestroyed|()

        See function description

        returns:

            `destroyed`: |lrv-boolean|

                Whether the Fixture is destroyed.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Fixture:isSensor*
|Fixture:isSensor|

Returns whether the fixture is a sensor.

Synopses:

    1.  `sensor` = |Fixture:isSensor|()

Variants:

    1.  `sensor` = |Fixture:isSensor|()

        See function description

        returns:

            `sensor`: |lrv-boolean|

                If the fixture is a sensor.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Fixture:rayCast*
|Fixture:rayCast|

Casts a ray against the shape of the fixture and returns the surface normal
vector and the line position where the ray hit. If the ray missed the shape,
nil will be returned.

The ray starts on the first point of the input line and goes towards the second
point of the line. The fifth argument is the maximum distance the ray is going
to travel as a scale factor of the input line length.

The childIndex parameter is used to specify which child of a parent shape, such
as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the
first edge on the chain. Ray casting a parent shape will only test the child
specified so if you want to test every shape of the parent, you must loop
through all of its children.

The world position of the impact can be calculated by multiplying the line
vector with the third return value and adding it to the line starting point.

hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction

Synopses:

    1.  `xn`, `yn`, `fraction` = |Fixture:rayCast|( `x1`, `y1`, `x2`,
        `y2`, `maxFraction`, `childIndex` )

Variants:

    1.  `xn`, `yn`, `fraction` = |Fixture:rayCast|( `x1`, `y1`, `x2`,
        `y2`, `maxFraction`, `childIndex` )

        See function description

        returns:

            `xn`: |lrv-number|

                The x component of the normal vector of the edge where the ray
                hit the shape.

            `yn`: |lrv-number|

                The y component of the normal vector of the edge where the ray
                hit the shape.

            `fraction`: |lrv-number|

                The position on the input line where the intersection happened
                as a factor of the line length.

        arguments:

            `x1`: |lrv-number|

                The x position of the input line starting point.

            `y1`: |lrv-number|

                The y position of the input line starting point.

            `x2`: |lrv-number|

                The x position of the input line end point.

            `y2`: |lrv-number|

                The y position of the input line end point.

            `maxFraction`: |lrv-number|

                Ray length parameter.

            `childIndex`: |lrv-number|

                The index of the child the ray gets cast against.

-------------------------------------------------------------------------------
                                                     *love-Fixture:setCategory*
|Fixture:setCategory|

Sets the categories the fixture belongs to. There can be up to 16 categories
represented as a number from 1 to 16.

All fixture's default category is 1.

Synopses:

    1.  |Fixture:setCategory|( `category1`, `category2` )

Variants:

    1.  |Fixture:setCategory|( `category1`, `category2` )

        See function description

        returns:

            None

        arguments:

            `category1`: |lrv-number|

                The first category.

            `category2`: |lrv-number|

                The second category.

-------------------------------------------------------------------------------
                                                      *love-Fixture:setDensity*
|Fixture:setDensity|

Sets the density of the fixture. Call Body:resetMassData if this needs to take
effect immediately.

Synopses:

    1.  |Fixture:setDensity|( `density` )

Variants:

    1.  |Fixture:setDensity|( `density` )

        See function description

        returns:

            None

        arguments:

            `density`: |lrv-number|

                The fixture density in kilograms per square meter.

-------------------------------------------------------------------------------
                                                   *love-Fixture:setFilterData*
|Fixture:setFilterData|

Sets the filter data of the fixture.

Groups, categories, and mask can be used to define the collision behaviour of
the fixture.

If two fixtures are in the same group they either always collide if the group
is positive, or never collide if it's negative. If the group is zero or they do
not match, then the contact filter checks if the fixtures select a category of
the other fixture with their masks. The fixtures do not collide if that's not
the case. If they do have each other's categories selected, the return value of
the custom contact filter will be used. They always collide if none was set.

There can be up to 16 categories. Categories and masks are encoded as the bits
of a 16-bit integer.

When created, prior to calling this function, all fixtures have category set to
1, mask set to 65535 (all categories) and group set to 0.

This function allows setting all filter data for a fixture at once. To set only
the categories, the mask or the group, you can use Fixture:setCategory,
Fixture:setMask or Fixture:setGroupIndex respectively.

Synopses:

    1.  |Fixture:setFilterData|( `categories`, `mask`, `group` )

Variants:

    1.  |Fixture:setFilterData|( `categories`, `mask`, `group` )

        See function description

        returns:

            None

        arguments:

            `categories`: |lrv-number|

                The categories as an integer from 0 to 65535.

            `mask`: |lrv-number|

                The mask as an integer from 0 to 65535.

            `group`: |lrv-number|

                The group as an integer from -32768 to 32767.

-------------------------------------------------------------------------------
                                                     *love-Fixture:setFriction*
|Fixture:setFriction|

Sets the friction of the fixture.

Friction determines how shapes react when they 'slide' along other shapes. Low
friction indicates a slippery surface, like ice, while high friction indicates
a rough surface, like concrete. Range: 0.0 - 1.0.

Synopses:

    1.  |Fixture:setFriction|( `friction` )

Variants:

    1.  |Fixture:setFriction|( `friction` )

        See function description

        returns:

            None

        arguments:

            `friction`: |lrv-number|

                The fixture friction.

-------------------------------------------------------------------------------
                                                   *love-Fixture:setGroupIndex*
|Fixture:setGroupIndex|

Sets the group the fixture belongs to. Fixtures with the same group will always
collide if the group is positive or never collide if it's negative. The group
zero means no group.

The groups range from -32768 to 32767.

Synopses:

    1.  |Fixture:setGroupIndex|( `group` )

Variants:

    1.  |Fixture:setGroupIndex|( `group` )

        See function description

        returns:

            None

        arguments:

            `group`: |lrv-number|

                The group as an integer from -32768 to 32767.

-------------------------------------------------------------------------------
                                                         *love-Fixture:setMask*
|Fixture:setMask|

Sets the category mask of the fixture. There can be up to 16 categories
represented as a number from 1 to 16.

This fixture will '''NOT''' collide with the fixtures that are in the selected
categories if the other fixture also has a category of this fixture selected.

Synopses:

    1.  |Fixture:setMask|( `mask1`, `mask2` )

Variants:

    1.  |Fixture:setMask|( `mask1`, `mask2` )

        See function description

        returns:

            None

        arguments:

            `mask1`: |lrv-number|

                The first category.

            `mask2`: |lrv-number|

                The second category.

-------------------------------------------------------------------------------
                                                  *love-Fixture:setRestitution*
|Fixture:setRestitution|

Sets the restitution of the fixture.

Synopses:

    1.  |Fixture:setRestitution|( `restitution` )

Variants:

    1.  |Fixture:setRestitution|( `restitution` )

        See function description

        returns:

            None

        arguments:

            `restitution`: |lrv-number|

                The fixture restitution.

-------------------------------------------------------------------------------
                                                       *love-Fixture:setSensor*
|Fixture:setSensor|

Sets whether the fixture should act as a sensor.

Sensors do not cause collision responses, but the begin-contact and end-contact
World callbacks will still be called for this fixture.

Synopses:

    1.  |Fixture:setSensor|( `sensor` )

Variants:

    1.  |Fixture:setSensor|( `sensor` )

        See function description

        returns:

            None

        arguments:

            `sensor`: |lrv-boolean|

                The sensor status.

-------------------------------------------------------------------------------
                                                     *love-Fixture:setUserData*
|Fixture:setUserData|

Associates a Lua value with the fixture.

To delete the reference, explicitly pass nil.

Synopses:

    1.  |Fixture:setUserData|( `value` )

Variants:

    1.  |Fixture:setUserData|( `value` )

        See function description

        returns:

            None

        arguments:

            `value`: <any>

                The Lua value to associate with the fixture.

-------------------------------------------------------------------------------
                                                       *love-Fixture:testPoint*
|Fixture:testPoint|

Checks if a point is inside the shape of the fixture.

Synopses:

    1.  `isInside` = |Fixture:testPoint|( `x`, `y` )

Variants:

    1.  `isInside` = |Fixture:testPoint|( `x`, `y` )

        See function description

        returns:

            `isInside`: |lrv-boolean|

                True if the point is inside or false if it is outside.

        arguments:

            `x`: |lrv-number|

                The x position of the point.

            `y`: |lrv-number|

                The y position of the point.

-------------------------------------------------------------------------------
                                                           *love-FrictionJoint*
|FrictionJoint|

A FrictionJoint applies friction to a body.

                                              *love-FrictionJoint-constructors*
    constructors:

        None

                                                *love-FrictionJoint-supertypes*
    supertypes:

        |Joint|                           |love-Joint|
        |Object|                          |love-Object|

                                                  *love-FrictionJoint-subtypes*
    subtypes:

        None

                                                 *love-FrictionJoint-functions*
    functions:

        |getMaxForce|                     |love-FrictionJoint:getMaxForce|
        |getMaxTorque|                    |love-FrictionJoint:getMaxTorque|
        |setMaxForce|                     |love-FrictionJoint:setMaxForce|
        |setMaxTorque|                    |love-FrictionJoint:setMaxTorque|

-------------------------------------------------------------------------------
                                               *love-FrictionJoint:getMaxForce*
|FrictionJoint:getMaxForce|

Gets the maximum friction force in Newtons.

Synopses:

    1.  `force` = |FrictionJoint:getMaxForce|()

Variants:

    1.  `force` = |FrictionJoint:getMaxForce|()

        See function description

        returns:

            `force`: |lrv-number|

                Maximum force in Newtons.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-FrictionJoint:getMaxTorque*
|FrictionJoint:getMaxTorque|

Gets the maximum friction torque in Newton-meters.

Synopses:

    1.  `torque` = |FrictionJoint:getMaxTorque|()

Variants:

    1.  `torque` = |FrictionJoint:getMaxTorque|()

        See function description

        returns:

            `torque`: |lrv-number|

                Maximum torque in Newton-meters.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-FrictionJoint:setMaxForce*
|FrictionJoint:setMaxForce|

Sets the maximum friction force in Newtons.

Synopses:

    1.  |FrictionJoint:setMaxForce|( `maxForce` )

Variants:

    1.  |FrictionJoint:setMaxForce|( `maxForce` )

        See function description

        returns:

            None

        arguments:

            `maxForce`: |lrv-number|

                Max force in Newtons.

-------------------------------------------------------------------------------
                                              *love-FrictionJoint:setMaxTorque*
|FrictionJoint:setMaxTorque|

Sets the maximum friction torque in Newton-meters.

Synopses:

    1.  |FrictionJoint:setMaxTorque|( `torque` )

Variants:

    1.  |FrictionJoint:setMaxTorque|( `torque` )

        See function description

        returns:

            None

        arguments:

            `torque`: |lrv-number|

                Maximum torque in Newton-meters.

-------------------------------------------------------------------------------
                                                               *love-GearJoint*
|GearJoint|

Keeps bodies together in such a way that they act like gears.

                                                  *love-GearJoint-constructors*
    constructors:

        None

                                                    *love-GearJoint-supertypes*
    supertypes:

        |Joint|                           |love-Joint|
        |Object|                          |love-Object|

                                                      *love-GearJoint-subtypes*
    subtypes:

        None

                                                     *love-GearJoint-functions*
    functions:

        |getJoints|                       |love-GearJoint:getJoints|
        |getRatio|                        |love-GearJoint:getRatio|
        |setRatio|                        |love-GearJoint:setRatio|

-------------------------------------------------------------------------------
                                                     *love-GearJoint:getJoints*
|GearJoint:getJoints|

Get the Joints connected by this GearJoint.

Synopses:

    1.  `joint1`, `joint2` = |GearJoint:getJoints|()

Variants:

    1.  `joint1`, `joint2` = |GearJoint:getJoints|()

        See function description

        returns:

            `joint1`: |love-Joint|

                The first connected Joint.

            `joint2`: |love-Joint|

                The second connected Joint.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-GearJoint:getRatio*
|GearJoint:getRatio|

Get the ratio of a gear joint.

Synopses:

    1.  `ratio` = |GearJoint:getRatio|()

Variants:

    1.  `ratio` = |GearJoint:getRatio|()

        See function description

        returns:

            `ratio`: |lrv-number|

                The ratio of the joint.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-GearJoint:setRatio*
|GearJoint:setRatio|

Set the ratio of a gear joint.

Synopses:

    1.  |GearJoint:setRatio|( `ratio` )

Variants:

    1.  |GearJoint:setRatio|( `ratio` )

        See function description

        returns:

            None

        arguments:

            `ratio`: |lrv-number|

                The new ratio of the joint.

-------------------------------------------------------------------------------
                                                                   *love-Joint*
|Joint|

Attach multiple bodies together to interact in unique ways.

                                                      *love-Joint-constructors*
    constructors:

        None

                                                        *love-Joint-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                          *love-Joint-subtypes*
    subtypes:

        None

                                                         *love-Joint-functions*
    functions:

        |destroy|                         |love-Joint:destroy|
        |getAnchors|                      |love-Joint:getAnchors|
        |getBodies|                       |love-Joint:getBodies|
        |getCollideConnected|             |love-Joint:getCollideConnected|
        |getReactionForce|                |love-Joint:getReactionForce|
        |getReactionTorque|               |love-Joint:getReactionTorque|
        |getType|                         |love-Joint:getType|
        |getUserData|                     |love-Joint:getUserData|
        |isDestroyed|                     |love-Joint:isDestroyed|
        |setUserData|                     |love-Joint:setUserData|

-------------------------------------------------------------------------------
                                                           *love-Joint:destroy*
|Joint:destroy|

Explicitly destroys the Joint. An error will occur if you attempt to use the
object after calling this function.

In 0.7.2, when you don't have time to wait for garbage collection, this
function

may be used to free the object immediately.

Synopses:

    1.  |Joint:destroy|()

Variants:

    1.  |Joint:destroy|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Joint:getAnchors*
|Joint:getAnchors|

Get the anchor points of the joint.

Synopses:

    1.  `x1`, `y1`, `x2`, `y2` = |Joint:getAnchors|()

Variants:

    1.  `x1`, `y1`, `x2`, `y2` = |Joint:getAnchors|()

        See function description

        returns:

            `x1`: |lrv-number|

                The x-component of the anchor on Body 1.

            `y1`: |lrv-number|

                The y-component of the anchor on Body 1.

            `x2`: |lrv-number|

                The x-component of the anchor on Body 2.

            `y2`: |lrv-number|

                The y-component of the anchor on Body 2.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Joint:getBodies*
|Joint:getBodies|

Gets the bodies that the Joint is attached to.

Synopses:

    1.  `bodyA`, `bodyB` = |Joint:getBodies|()

Variants:

    1.  `bodyA`, `bodyB` = |Joint:getBodies|()

        See function description

        returns:

            `bodyA`: |love-Body|

                The first Body.

            `bodyB`: |love-Body|

                The second Body.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-Joint:getCollideConnected*
|Joint:getCollideConnected|

Gets whether the connected Bodies collide.

Synopses:

    1.  `c` = |Joint:getCollideConnected|()

Variants:

    1.  `c` = |Joint:getCollideConnected|()

        See function description

        returns:

            `c`: |lrv-boolean|

                True if they collide, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-Joint:getReactionForce*
|Joint:getReactionForce|

Returns the reaction force in newtons on the second body

Synopses:

    1.  `x`, `y` = |Joint:getReactionForce|( `x` )

Variants:

    1.  `x`, `y` = |Joint:getReactionForce|( `x` )

        See function description

        returns:

            `x`: |lrv-number|

                The x-component of the force.

            `y`: |lrv-number|

                The y-component of the force.

        arguments:

            `x`: |lrv-number|

                How long the force applies. Usually the inverse time step or
                1/dt.

-------------------------------------------------------------------------------
                                                 *love-Joint:getReactionTorque*
|Joint:getReactionTorque|

Returns the reaction torque on the second body.

Synopses:

    1.  `torque` = |Joint:getReactionTorque|( `invdt` )

Variants:

    1.  `torque` = |Joint:getReactionTorque|( `invdt` )

        See function description

        returns:

            `torque`: |lrv-number|

                The reaction torque on the second body.

        arguments:

            `invdt`: |lrv-number|

                How long the force applies. Usually the inverse time step or
                1/dt.

-------------------------------------------------------------------------------
                                                           *love-Joint:getType*
|Joint:getType|

Gets a string representing the type.

Synopses:

    1.  `type` = |Joint:getType|()

Variants:

    1.  `type` = |Joint:getType|()

        See function description

        returns:

            `type`: |love-JointType|

                A string with the name of the Joint type.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Joint:getUserData*
|Joint:getUserData|

Returns the Lua value associated with this Joint.

Synopses:

    1.  `value` = |Joint:getUserData|()

Variants:

    1.  `value` = |Joint:getUserData|()

        See function description

        returns:

            `value`: <any>

                The Lua value associated with the Joint.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Joint:isDestroyed*
|Joint:isDestroyed|

Gets whether the Joint is destroyed. Destroyed joints cannot be used.

Synopses:

    1.  `destroyed` = |Joint:isDestroyed|()

Variants:

    1.  `destroyed` = |Joint:isDestroyed|()

        See function description

        returns:

            `destroyed`: |lrv-boolean|

                Whether the Joint is destroyed.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-Joint:setUserData*
|Joint:setUserData|

Associates a Lua value with the Joint.

To delete the reference, explicitly pass nil.

Synopses:

    1.  |Joint:setUserData|( `value` )

Variants:

    1.  |Joint:setUserData|( `value` )

        See function description

        returns:

            None

        arguments:

            `value`: <any>

                The Lua value to associate with the Joint.

-------------------------------------------------------------------------------
                                                              *love-MotorJoint*
|MotorJoint|

Controls the relative motion between two Bodies. Position and rotation offsets
can be specified, as well as the maximum motor force and torque that will be
applied to reach the target offsets.

                                                 *love-MotorJoint-constructors*
    constructors:

        None

                                                   *love-MotorJoint-supertypes*
    supertypes:

        |Joint|                           |love-Joint|
        |Object|                          |love-Object|

                                                     *love-MotorJoint-subtypes*
    subtypes:

        None

                                                    *love-MotorJoint-functions*
    functions:

        |getAngularOffset|                |love-MotorJoint:getAngularOffset|
        |getLinearOffset|                 |love-MotorJoint:getLinearOffset|
        |setAngularOffset|                |love-MotorJoint:setAngularOffset|
        |setLinearOffset|                 |love-MotorJoint:setLinearOffset|

-------------------------------------------------------------------------------
                                             *love-MotorJoint:getAngularOffset*
|MotorJoint:getAngularOffset|

Gets the target angular offset between the two Bodies the Joint is attached to.

Synopses:

    1.  `angleoffset` = |MotorJoint:getAngularOffset|()

Variants:

    1.  `angleoffset` = |MotorJoint:getAngularOffset|()

        See function description

        returns:

            `angleoffset`: |lrv-number|

                The target angular offset in radians: the second body's angle
                minus the first body's angle.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-MotorJoint:getLinearOffset*
|MotorJoint:getLinearOffset|

Gets the target linear offset between the two Bodies the Joint is attached to.

Synopses:

    1.  `x`, `y` = |MotorJoint:getLinearOffset|()

Variants:

    1.  `x`, `y` = |MotorJoint:getLinearOffset|()

        See function description

        returns:

            `x`: |lrv-number|

                The x component of the target linear offset, relative to the
                first Body.

            `y`: |lrv-number|

                The y component of the target linear offset, relative to the
                first Body.

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-MotorJoint:setAngularOffset*
|MotorJoint:setAngularOffset|

Sets the target angluar offset between the two Bodies the Joint is attached to.

Synopses:

    1.  |MotorJoint:setAngularOffset|( `angleoffset` )

Variants:

    1.  |MotorJoint:setAngularOffset|( `angleoffset` )

        See function description

        returns:

            None

        arguments:

            `angleoffset`: |lrv-number|

                The target angular offset in radians: the second body's angle
                minus the first body's angle.

-------------------------------------------------------------------------------
                                              *love-MotorJoint:setLinearOffset*
|MotorJoint:setLinearOffset|

Sets the target linear offset between the two Bodies the Joint is attached to.

Synopses:

    1.  |MotorJoint:setLinearOffset|( `x`, `y` )

Variants:

    1.  |MotorJoint:setLinearOffset|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The x component of the target linear offset, relative to the
                first Body.

            `y`: |lrv-number|

                The y component of the target linear offset, relative to the
                first Body.

-------------------------------------------------------------------------------
                                                              *love-MouseJoint*
|MouseJoint|

For controlling objects with the mouse.

                                                 *love-MouseJoint-constructors*
    constructors:

        None

                                                   *love-MouseJoint-supertypes*
    supertypes:

        |Joint|                           |love-Joint|
        |Object|                          |love-Object|

                                                     *love-MouseJoint-subtypes*
    subtypes:

        None

                                                    *love-MouseJoint-functions*
    functions:

        |getDampingRatio|                 |love-MouseJoint:getDampingRatio|
        |getFrequency|                    |love-MouseJoint:getFrequency|
        |getMaxForce|                     |love-MouseJoint:getMaxForce|
        |getTarget|                       |love-MouseJoint:getTarget|
        |setDampingRatio|                 |love-MouseJoint:setDampingRatio|
        |setFrequency|                    |love-MouseJoint:setFrequency|
        |setMaxForce|                     |love-MouseJoint:setMaxForce|
        |setTarget|                       |love-MouseJoint:setTarget|

-------------------------------------------------------------------------------
                                              *love-MouseJoint:getDampingRatio*
|MouseJoint:getDampingRatio|

Returns the damping ratio.

Synopses:

    1.  `ratio` = |MouseJoint:getDampingRatio|()

Variants:

    1.  `ratio` = |MouseJoint:getDampingRatio|()

        See function description

        returns:

            `ratio`: |lrv-number|

                The new damping ratio.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-MouseJoint:getFrequency*
|MouseJoint:getFrequency|

Returns the frequency.

Synopses:

    1.  `freq` = |MouseJoint:getFrequency|()

Variants:

    1.  `freq` = |MouseJoint:getFrequency|()

        See function description

        returns:

            `freq`: |lrv-number|

                The frequency in hertz.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-MouseJoint:getMaxForce*
|MouseJoint:getMaxForce|

Gets the highest allowed force.

Synopses:

    1.  `f` = |MouseJoint:getMaxForce|()

Variants:

    1.  `f` = |MouseJoint:getMaxForce|()

        See function description

        returns:

            `f`: |lrv-number|

                The max allowed force.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-MouseJoint:getTarget*
|MouseJoint:getTarget|

Gets the target point.

Synopses:

    1.  `x`, `y` = |MouseJoint:getTarget|()

Variants:

    1.  `x`, `y` = |MouseJoint:getTarget|()

        See function description

        returns:

            `x`: |lrv-number|

                The x-component of the target.

            `y`: |lrv-number|

                The x-component of the target.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-MouseJoint:setDampingRatio*
|MouseJoint:setDampingRatio|

Sets a new damping ratio.

Synopses:

    1.  |MouseJoint:setDampingRatio|( `ratio` )

Variants:

    1.  |MouseJoint:setDampingRatio|( `ratio` )

        See function description

        returns:

            None

        arguments:

            `ratio`: |lrv-number|

                The new damping ratio.

-------------------------------------------------------------------------------
                                                 *love-MouseJoint:setFrequency*
|MouseJoint:setFrequency|

Sets a new frequency.

Synopses:

    1.  |MouseJoint:setFrequency|( `freq` )

Variants:

    1.  |MouseJoint:setFrequency|( `freq` )

        See function description

        returns:

            None

        arguments:

            `freq`: |lrv-number|

                The new frequency in hertz.

-------------------------------------------------------------------------------
                                                  *love-MouseJoint:setMaxForce*
|MouseJoint:setMaxForce|

Sets the highest allowed force.

Synopses:

    1.  |MouseJoint:setMaxForce|( `f` )

Variants:

    1.  |MouseJoint:setMaxForce|( `f` )

        See function description

        returns:

            None

        arguments:

            `f`: |lrv-number|

                The max allowed force.

-------------------------------------------------------------------------------
                                                    *love-MouseJoint:setTarget*
|MouseJoint:setTarget|

Sets the target point.

Synopses:

    1.  |MouseJoint:setTarget|( `x`, `y` )

Variants:

    1.  |MouseJoint:setTarget|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The x-component of the target.

            `y`: |lrv-number|

                The y-component of the target.

-------------------------------------------------------------------------------
                                                            *love-PolygonShape*
|PolygonShape|

A PolygonShape is a convex polygon with up to 8 vertices.

                                               *love-PolygonShape-constructors*
    constructors:

        None

                                                 *love-PolygonShape-supertypes*
    supertypes:

        |Shape|                           |love-Shape|
        |Object|                          |love-Object|

                                                   *love-PolygonShape-subtypes*
    subtypes:

        None

                                                  *love-PolygonShape-functions*
    functions:

        |getPoints|                       |love-PolygonShape:getPoints|

-------------------------------------------------------------------------------
                                                  *love-PolygonShape:getPoints*
|PolygonShape:getPoints|

Get the local coordinates of the polygon's vertices.

This function has a variable number of return values. It can be used in a
nested fashion with love.graphics.polygon.

Synopses:

    1.  `x1`, `y1`, `x2`, `y2` = |PolygonShape:getPoints|()

Variants:

    1.  `x1`, `y1`, `x2`, `y2` = |PolygonShape:getPoints|()

        See function description

        returns:

            `x1`: |lrv-number|

                The x-component of the first vertex.

            `y1`: |lrv-number|

                The y-component of the first vertex.

            `x2`: |lrv-number|

                The x-component of the second vertex.

            `y2`: |lrv-number|

                The y-component of the second vertex.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-PrismaticJoint*
|PrismaticJoint|

Restricts relative motion between Bodies to one shared axis.

                                             *love-PrismaticJoint-constructors*
    constructors:

        None

                                               *love-PrismaticJoint-supertypes*
    supertypes:

        |Joint|                           |love-Joint|
        |Object|                          |love-Object|

                                                 *love-PrismaticJoint-subtypes*
    subtypes:

        None

                                                *love-PrismaticJoint-functions*
    functions:

        |areLimitsEnabled|                |love-PrismaticJoint:areLimitsEnabl-|
        |getAxis|                         |love-PrismaticJoint:getAxis|
        |getJointSpeed|                   |love-PrismaticJoint:getJointSpeed|
        |getJointTranslation|             |love-PrismaticJoint:getJointTransl-|
        |getLimits|                       |love-PrismaticJoint:getLimits|
        |getLowerLimit|                   |love-PrismaticJoint:getLowerLimit|
        |getMaxMotorForce|                |love-PrismaticJoint:getMaxMotorFor-|
        |getMotorForce|                   |love-PrismaticJoint:getMotorForce|
        |getMotorSpeed|                   |love-PrismaticJoint:getMotorSpeed|
        |getUpperLimit|                   |love-PrismaticJoint:getUpperLimit|
        |isMotorEnabled|                  |love-PrismaticJoint:isMotorEnabled|
        |setLimits|                       |love-PrismaticJoint:setLimits|
        |setLimitsEnabled|                |love-PrismaticJoint:setLimitsEnabl-|
        |setLowerLimit|                   |love-PrismaticJoint:setLowerLimit|
        |setMaxMotorForce|                |love-PrismaticJoint:setMaxMotorFor-|
        |setMotorEnabled|                 |love-PrismaticJoint:setMotorEnabled|
        |setMotorSpeed|                   |love-PrismaticJoint:setMotorSpeed|
        |setUpperLimit|                   |love-PrismaticJoint:setUpperLimit|

-------------------------------------------------------------------------------
                                         *love-PrismaticJoint:areLimitsEnabled*
|PrismaticJoint:areLimitsEnabled|

Checks whether the limits are enabled.

Synopses:

    1.  `enabled` = |PrismaticJoint:areLimitsEnabled|()

Variants:

    1.  `enabled` = |PrismaticJoint:areLimitsEnabled|()

        See function description

        returns:

            `enabled`: |lrv-boolean|

                True if enabled, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-PrismaticJoint:getAxis*
|PrismaticJoint:getAxis|

Gets the world-space axis vector of the Prismatic Joint.

Synopses:

    1.  `x`, `y` = |PrismaticJoint:getAxis|()

Variants:

    1.  `x`, `y` = |PrismaticJoint:getAxis|()

        See function description

        returns:

            `x`: |lrv-number|

                The x-axis coordinate of the world-space axis vector.

            `y`: |lrv-number|

                The y-axis coordinate of the world-space axis vector.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-PrismaticJoint:getJointSpeed*
|PrismaticJoint:getJointSpeed|

Get the current joint angle speed.

Synopses:

    1.  `s` = |PrismaticJoint:getJointSpeed|()

Variants:

    1.  `s` = |PrismaticJoint:getJointSpeed|()

        See function description

        returns:

            `s`: |lrv-number|

                Joint angle speed in meters/second.

        arguments:

            None

-------------------------------------------------------------------------------
                                      *love-PrismaticJoint:getJointTranslation*
|PrismaticJoint:getJointTranslation|

Get the current joint translation.

Synopses:

    1.  `t` = |PrismaticJoint:getJointTranslation|()

Variants:

    1.  `t` = |PrismaticJoint:getJointTranslation|()

        See function description

        returns:

            `t`: |lrv-number|

                Joint translation, usually in meters..

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-PrismaticJoint:getLimits*
|PrismaticJoint:getLimits|

Gets the joint limits.

Synopses:

    1.  `lower`, `upper` = |PrismaticJoint:getLimits|()

Variants:

    1.  `lower`, `upper` = |PrismaticJoint:getLimits|()

        See function description

        returns:

            `lower`: |lrv-number|

                The lower limit, usually in meters.

            `upper`: |lrv-number|

                The upper limit, usually in meters.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-PrismaticJoint:getLowerLimit*
|PrismaticJoint:getLowerLimit|

Gets the lower limit.

Synopses:

    1.  `lower` = |PrismaticJoint:getLowerLimit|()

Variants:

    1.  `lower` = |PrismaticJoint:getLowerLimit|()

        See function description

        returns:

            `lower`: |lrv-number|

                The lower limit, usually in meters.

        arguments:

            None

-------------------------------------------------------------------------------
                                         *love-PrismaticJoint:getMaxMotorForce*
|PrismaticJoint:getMaxMotorForce|

Gets the maximum motor force.

Synopses:

    1.  `f` = |PrismaticJoint:getMaxMotorForce|()

Variants:

    1.  `f` = |PrismaticJoint:getMaxMotorForce|()

        See function description

        returns:

            `f`: |lrv-number|

                The maximum motor force, usually in N.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-PrismaticJoint:getMotorForce*
|PrismaticJoint:getMotorForce|

Returns the current motor force.

Synopses:

    1.  `force` = |PrismaticJoint:getMotorForce|( `invdt` )

Variants:

    1.  `force` = |PrismaticJoint:getMotorForce|( `invdt` )

        See function description

        returns:

            `force`: |lrv-number|

                The force on the motor in newtons.

        arguments:

            `invdt`: |lrv-number|

                How long the force applies. Usually the inverse time step or
                1/dt.

-------------------------------------------------------------------------------
                                            *love-PrismaticJoint:getMotorSpeed*
|PrismaticJoint:getMotorSpeed|

Gets the motor speed.

Synopses:

    1.  `s` = |PrismaticJoint:getMotorSpeed|()

Variants:

    1.  `s` = |PrismaticJoint:getMotorSpeed|()

        See function description

        returns:

            `s`: |lrv-number|

                The motor speed, usually in meters per second.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-PrismaticJoint:getUpperLimit*
|PrismaticJoint:getUpperLimit|

Gets the upper limit.

Synopses:

    1.  `upper` = |PrismaticJoint:getUpperLimit|()

Variants:

    1.  `upper` = |PrismaticJoint:getUpperLimit|()

        See function description

        returns:

            `upper`: |lrv-number|

                The upper limit, usually in meters.

        arguments:

            None

-------------------------------------------------------------------------------
                                           *love-PrismaticJoint:isMotorEnabled*
|PrismaticJoint:isMotorEnabled|

Checks whether the motor is enabled.

Synopses:

    1.  `enabled` = |PrismaticJoint:isMotorEnabled|()

Variants:

    1.  `enabled` = |PrismaticJoint:isMotorEnabled|()

        See function description

        returns:

            `enabled`: |lrv-boolean|

                True if enabled, false if disabled.

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-PrismaticJoint:setLimits*
|PrismaticJoint:setLimits|

Sets the limits.

Synopses:

    1.  |PrismaticJoint:setLimits|( `lower`, `upper` )

Variants:

    1.  |PrismaticJoint:setLimits|( `lower`, `upper` )

        See function description

        returns:

            None

        arguments:

            `lower`: |lrv-number|

                The lower limit, usually in meters.

            `upper`: |lrv-number|

                The upper limit, usually in meters.

-------------------------------------------------------------------------------
                                         *love-PrismaticJoint:setLimitsEnabled*
|PrismaticJoint:setLimitsEnabled|

Enables/disables the joint limit.

Synopses:

    1.  `enable` = |PrismaticJoint:setLimitsEnabled|()

Variants:

    1.  `enable` = |PrismaticJoint:setLimitsEnabled|()

        See function description

        returns:

            `enable`: |lrv-boolean|

                True if enabled, false if disabled.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-PrismaticJoint:setLowerLimit*
|PrismaticJoint:setLowerLimit|

Sets the lower limit.

Synopses:

    1.  |PrismaticJoint:setLowerLimit|( `lower` )

Variants:

    1.  |PrismaticJoint:setLowerLimit|( `lower` )

        See function description

        returns:

            None

        arguments:

            `lower`: |lrv-number|

                The lower limit, usually in meters.

-------------------------------------------------------------------------------
                                         *love-PrismaticJoint:setMaxMotorForce*
|PrismaticJoint:setMaxMotorForce|

Set the maximum motor force.

Synopses:

    1.  |PrismaticJoint:setMaxMotorForce|( `f` )

Variants:

    1.  |PrismaticJoint:setMaxMotorForce|( `f` )

        See function description

        returns:

            None

        arguments:

            `f`: |lrv-number|

                The maximum motor force, usually in N.

-------------------------------------------------------------------------------
                                          *love-PrismaticJoint:setMotorEnabled*
|PrismaticJoint:setMotorEnabled|

Enables/disables the joint motor.

Synopses:

    1.  |PrismaticJoint:setMotorEnabled|( `enable` )

Variants:

    1.  |PrismaticJoint:setMotorEnabled|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: |lrv-boolean|

                True to enable, false to disable.

-------------------------------------------------------------------------------
                                            *love-PrismaticJoint:setMotorSpeed*
|PrismaticJoint:setMotorSpeed|

Sets the motor speed.

Synopses:

    1.  |PrismaticJoint:setMotorSpeed|( `s` )

Variants:

    1.  |PrismaticJoint:setMotorSpeed|( `s` )

        See function description

        returns:

            None

        arguments:

            `s`: |lrv-number|

                The motor speed, usually in meters per second.

-------------------------------------------------------------------------------
                                            *love-PrismaticJoint:setUpperLimit*
|PrismaticJoint:setUpperLimit|

Sets the upper limit.

Synopses:

    1.  |PrismaticJoint:setUpperLimit|( `upper` )

Variants:

    1.  |PrismaticJoint:setUpperLimit|( `upper` )

        See function description

        returns:

            None

        arguments:

            `upper`: |lrv-number|

                The upper limit, usually in meters.

-------------------------------------------------------------------------------
                                                             *love-PulleyJoint*
|PulleyJoint|

Allows you to simulate bodies connected through pulleys.

                                                *love-PulleyJoint-constructors*
    constructors:

        None

                                                  *love-PulleyJoint-supertypes*
    supertypes:

        |Joint|                           |love-Joint|
        |Object|                          |love-Object|

                                                    *love-PulleyJoint-subtypes*
    subtypes:

        None

                                                   *love-PulleyJoint-functions*
    functions:

        |getConstant|                     |love-PulleyJoint:getConstant|
        |getGroundAnchors|                |love-PulleyJoint:getGroundAnchors|
        |getLengthA|                      |love-PulleyJoint:getLengthA|
        |getLengthB|                      |love-PulleyJoint:getLengthB|
        |getMaxLengths|                   |love-PulleyJoint:getMaxLengths|
        |getRatio|                        |love-PulleyJoint:getRatio|
        |setConstant|                     |love-PulleyJoint:setConstant|
        |setMaxLengths|                   |love-PulleyJoint:setMaxLengths|
        |setRatio|                        |love-PulleyJoint:setRatio|

-------------------------------------------------------------------------------
                                                 *love-PulleyJoint:getConstant*
|PulleyJoint:getConstant|

Get the total length of the rope.

Synopses:

    1.  `length` = |PulleyJoint:getConstant|()

Variants:

    1.  `length` = |PulleyJoint:getConstant|()

        See function description

        returns:

            `length`: |lrv-number|

                The length of the rope in the joint.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-PulleyJoint:getGroundAnchors*
|PulleyJoint:getGroundAnchors|

Get the ground anchor positions in world coordinates.

Synopses:

    1.  `a1x`, `a1y`, `a2x`, `a2y` = |PulleyJoint:getGroundAnchors|()

Variants:

    1.  `a1x`, `a1y`, `a2x`, `a2y` = |PulleyJoint:getGroundAnchors|()

        See function description

        returns:

            `a1x`: |lrv-number|

                The x coordinate of the first anchor.

            `a1y`: |lrv-number|

                The y coordinate of the first anchor.

            `a2x`: |lrv-number|

                The x coordinate of the second anchor.

            `a2y`: |lrv-number|

                The y coordinate of the second anchor.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-PulleyJoint:getLengthA*
|PulleyJoint:getLengthA|

Get the current length of the rope segment attached to the first body.

Synopses:

    1.  `length` = |PulleyJoint:getLengthA|()

Variants:

    1.  `length` = |PulleyJoint:getLengthA|()

        See function description

        returns:

            `length`: |lrv-number|

                The length of the rope segment.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-PulleyJoint:getLengthB*
|PulleyJoint:getLengthB|

Get the current length of the rope segment attached to the second body.

Synopses:

    1.  `length` = |PulleyJoint:getLengthB|()

Variants:

    1.  `length` = |PulleyJoint:getLengthB|()

        See function description

        returns:

            `length`: |lrv-number|

                The length of the rope segment.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-PulleyJoint:getMaxLengths*
|PulleyJoint:getMaxLengths|

Get the maximum lengths of the rope segments.

Synopses:

    1.  `len1`, `len2` = |PulleyJoint:getMaxLengths|()

Variants:

    1.  `len1`, `len2` = |PulleyJoint:getMaxLengths|()

        See function description

        returns:

            `len1`: |lrv-number|

                The maximum length of the first rope segment.

            `len2`: |lrv-number|

                The maximum length of the second rope segment.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-PulleyJoint:getRatio*
|PulleyJoint:getRatio|

Get the pulley ratio.

Synopses:

    1.  `ratio` = |PulleyJoint:getRatio|()

Variants:

    1.  `ratio` = |PulleyJoint:getRatio|()

        See function description

        returns:

            `ratio`: |lrv-number|

                The pulley ratio of the joint.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-PulleyJoint:setConstant*
|PulleyJoint:setConstant|

Set the total length of the rope.

Setting a new length for the rope updates the maximum length values of the
joint.

Synopses:

    1.  |PulleyJoint:setConstant|( `length` )

Variants:

    1.  |PulleyJoint:setConstant|( `length` )

        See function description

        returns:

            None

        arguments:

            `length`: |lrv-number|

                The new length of the rope in the joint.

-------------------------------------------------------------------------------
                                               *love-PulleyJoint:setMaxLengths*
|PulleyJoint:setMaxLengths|

Set the maximum lengths of the rope segments.

The physics module also imposes maximum values for the rope segments. If the
parameters exceed these values, the maximum values are set instead of the
requested values.

Synopses:

    1.  |PulleyJoint:setMaxLengths|( `max1`, `max2` )

Variants:

    1.  |PulleyJoint:setMaxLengths|( `max1`, `max2` )

        See function description

        returns:

            None

        arguments:

            `max1`: |lrv-number|

                The new maximum length of the first segment.

            `max2`: |lrv-number|

                The new maximum length of the second segment.

-------------------------------------------------------------------------------
                                                    *love-PulleyJoint:setRatio*
|PulleyJoint:setRatio|

Set the pulley ratio.

Synopses:

    1.  |PulleyJoint:setRatio|( `ratio` )

Variants:

    1.  |PulleyJoint:setRatio|( `ratio` )

        See function description

        returns:

            None

        arguments:

            `ratio`: |lrv-number|

                The new pulley ratio of the joint.

-------------------------------------------------------------------------------
                                                           *love-RevoluteJoint*
|RevoluteJoint|

Allow two Bodies to revolve around a shared point.

                                              *love-RevoluteJoint-constructors*
    constructors:

        None

                                                *love-RevoluteJoint-supertypes*
    supertypes:

        |Joint|                           |love-Joint|
        |Object|                          |love-Object|

                                                  *love-RevoluteJoint-subtypes*
    subtypes:

        None

                                                 *love-RevoluteJoint-functions*
    functions:

        |areLimitsEnabled|                |love-RevoluteJoint:areLimitsEnabled|
        |getJointAngle|                   |love-RevoluteJoint:getJointAngle|
        |getJointSpeed|                   |love-RevoluteJoint:getJointSpeed|
        |getLimits|                       |love-RevoluteJoint:getLimits|
        |getLowerLimit|                   |love-RevoluteJoint:getLowerLimit|
        |getMaxMotorTorque|               |love-RevoluteJoint:getMaxMotorTorq-|
        |getMotorSpeed|                   |love-RevoluteJoint:getMotorSpeed|
        |getMotorTorque|                  |love-RevoluteJoint:getMotorTorque|
        |getUpperLimit|                   |love-RevoluteJoint:getUpperLimit|
        |hasLimitsEnabled|                |love-RevoluteJoint:hasLimitsEnabled|
        |isMotorEnabled|                  |love-RevoluteJoint:isMotorEnabled|
        |setLimits|                       |love-RevoluteJoint:setLimits|
        |setLimitsEnabled|                |love-RevoluteJoint:setLimitsEnabled|
        |setLowerLimit|                   |love-RevoluteJoint:setLowerLimit|
        |setMaxMotorTorque|               |love-RevoluteJoint:setMaxMotorTorq-|
        |setMotorEnabled|                 |love-RevoluteJoint:setMotorEnabled|
        |setMotorSpeed|                   |love-RevoluteJoint:setMotorSpeed|
        |setUpperLimit|                   |love-RevoluteJoint:setUpperLimit|

-------------------------------------------------------------------------------
                                          *love-RevoluteJoint:areLimitsEnabled*
|RevoluteJoint:areLimitsEnabled|

Checks whether limits are enabled.

Synopses:

    1.  `enabled` = |RevoluteJoint:areLimitsEnabled|()

Variants:

    1.  `enabled` = |RevoluteJoint:areLimitsEnabled|()

        See function description

        returns:

            `enabled`: |lrv-boolean|

                True if enabled, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-RevoluteJoint:getJointAngle*
|RevoluteJoint:getJointAngle|

Get the current joint angle.

Synopses:

    1.  `angle` = |RevoluteJoint:getJointAngle|()

Variants:

    1.  `angle` = |RevoluteJoint:getJointAngle|()

        See function description

        returns:

            `angle`: |lrv-number|

                The joint angle in radians.

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-RevoluteJoint:getJointSpeed*
|RevoluteJoint:getJointSpeed|

Get the current joint angle speed.

Synopses:

    1.  `s` = |RevoluteJoint:getJointSpeed|()

Variants:

    1.  `s` = |RevoluteJoint:getJointSpeed|()

        See function description

        returns:

            `s`: |lrv-number|

                Joint angle speed in radians/second.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-RevoluteJoint:getLimits*
|RevoluteJoint:getLimits|

Gets the joint limits.

Synopses:

    1.  `lower`, `upper` = |RevoluteJoint:getLimits|()

Variants:

    1.  `lower`, `upper` = |RevoluteJoint:getLimits|()

        See function description

        returns:

            `lower`: |lrv-number|

                The lower limit, in radians.

            `upper`: |lrv-number|

                The upper limit, in radians.

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-RevoluteJoint:getLowerLimit*
|RevoluteJoint:getLowerLimit|

Gets the lower limit.

Synopses:

    1.  `lower` = |RevoluteJoint:getLowerLimit|()

Variants:

    1.  `lower` = |RevoluteJoint:getLowerLimit|()

        See function description

        returns:

            `lower`: |lrv-number|

                The lower limit, in radians.

        arguments:

            None

-------------------------------------------------------------------------------
                                         *love-RevoluteJoint:getMaxMotorTorque*
|RevoluteJoint:getMaxMotorTorque|

Gets the maximum motor force.

Synopses:

    1.  `f` = |RevoluteJoint:getMaxMotorTorque|()

Variants:

    1.  `f` = |RevoluteJoint:getMaxMotorTorque|()

        See function description

        returns:

            `f`: |lrv-number|

                The maximum motor force, in Nm.

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-RevoluteJoint:getMotorSpeed*
|RevoluteJoint:getMotorSpeed|

Gets the motor speed.

Synopses:

    1.  `s` = |RevoluteJoint:getMotorSpeed|()

Variants:

    1.  `s` = |RevoluteJoint:getMotorSpeed|()

        See function description

        returns:

            `s`: |lrv-number|

                The motor speed, radians per second.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-RevoluteJoint:getMotorTorque*
|RevoluteJoint:getMotorTorque|

Get the current motor force.

Synopses:

    1.  `f` = |RevoluteJoint:getMotorTorque|()

Variants:

    1.  `f` = |RevoluteJoint:getMotorTorque|()

        See function description

        returns:

            `f`: |lrv-number|

                The current motor force, in Nm.

        arguments:

            None

-------------------------------------------------------------------------------
                                             *love-RevoluteJoint:getUpperLimit*
|RevoluteJoint:getUpperLimit|

Gets the upper limit.

Synopses:

    1.  `upper` = |RevoluteJoint:getUpperLimit|()

Variants:

    1.  `upper` = |RevoluteJoint:getUpperLimit|()

        See function description

        returns:

            `upper`: |lrv-number|

                The upper limit, in radians.

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-RevoluteJoint:hasLimitsEnabled*
|RevoluteJoint:hasLimitsEnabled|

Checks whether limits are enabled.

Synopses:

    1.  `enabled` = |RevoluteJoint:hasLimitsEnabled|()

Variants:

    1.  `enabled` = |RevoluteJoint:hasLimitsEnabled|()

        See function description

        returns:

            `enabled`: |lrv-boolean|

                True if enabled, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-RevoluteJoint:isMotorEnabled*
|RevoluteJoint:isMotorEnabled|

Checks whether the motor is enabled.

Synopses:

    1.  `enabled` = |RevoluteJoint:isMotorEnabled|()

Variants:

    1.  `enabled` = |RevoluteJoint:isMotorEnabled|()

        See function description

        returns:

            `enabled`: |lrv-boolean|

                True if enabled, false if disabled.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-RevoluteJoint:setLimits*
|RevoluteJoint:setLimits|

Sets the limits.

Synopses:

    1.  |RevoluteJoint:setLimits|( `lower`, `upper` )

Variants:

    1.  |RevoluteJoint:setLimits|( `lower`, `upper` )

        See function description

        returns:

            None

        arguments:

            `lower`: |lrv-number|

                The lower limit, in radians.

            `upper`: |lrv-number|

                The upper limit, in radians.

-------------------------------------------------------------------------------
                                          *love-RevoluteJoint:setLimitsEnabled*
|RevoluteJoint:setLimitsEnabled|

Enables/disables the joint limit.

Synopses:

    1.  |RevoluteJoint:setLimitsEnabled|( `enable` )

Variants:

    1.  |RevoluteJoint:setLimitsEnabled|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: |lrv-boolean|

                True to enable, false to disable.

-------------------------------------------------------------------------------
                                             *love-RevoluteJoint:setLowerLimit*
|RevoluteJoint:setLowerLimit|

Sets the lower limit.

Synopses:

    1.  |RevoluteJoint:setLowerLimit|( `lower` )

Variants:

    1.  |RevoluteJoint:setLowerLimit|( `lower` )

        See function description

        returns:

            None

        arguments:

            `lower`: |lrv-number|

                The lower limit, in radians.

-------------------------------------------------------------------------------
                                         *love-RevoluteJoint:setMaxMotorTorque*
|RevoluteJoint:setMaxMotorTorque|

Set the maximum motor force.

Synopses:

    1.  |RevoluteJoint:setMaxMotorTorque|( `f` )

Variants:

    1.  |RevoluteJoint:setMaxMotorTorque|( `f` )

        See function description

        returns:

            None

        arguments:

            `f`: |lrv-number|

                The maximum motor force, in Nm.

-------------------------------------------------------------------------------
                                           *love-RevoluteJoint:setMotorEnabled*
|RevoluteJoint:setMotorEnabled|

Enables/disables the joint motor.

Synopses:

    1.  |RevoluteJoint:setMotorEnabled|( `enable` )

Variants:

    1.  |RevoluteJoint:setMotorEnabled|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: |lrv-boolean|

                True to enable, false to disable.

-------------------------------------------------------------------------------
                                             *love-RevoluteJoint:setMotorSpeed*
|RevoluteJoint:setMotorSpeed|

Sets the motor speed.

Synopses:

    1.  |RevoluteJoint:setMotorSpeed|( `s` )

Variants:

    1.  |RevoluteJoint:setMotorSpeed|( `s` )

        See function description

        returns:

            None

        arguments:

            `s`: |lrv-number|

                The motor speed, radians per second.

-------------------------------------------------------------------------------
                                             *love-RevoluteJoint:setUpperLimit*
|RevoluteJoint:setUpperLimit|

Sets the upper limit.

Synopses:

    1.  |RevoluteJoint:setUpperLimit|( `upper` )

Variants:

    1.  |RevoluteJoint:setUpperLimit|( `upper` )

        See function description

        returns:

            None

        arguments:

            `upper`: |lrv-number|

                The upper limit, in radians.

-------------------------------------------------------------------------------
                                                               *love-RopeJoint*
|RopeJoint|

The RopeJoint enforces a maximum distance between two points on two bodies. It
has no other effect.

                                                  *love-RopeJoint-constructors*
    constructors:

        None

                                                    *love-RopeJoint-supertypes*
    supertypes:

        |Joint|                           |love-Joint|
        |Object|                          |love-Object|

                                                      *love-RopeJoint-subtypes*
    subtypes:

        None

                                                     *love-RopeJoint-functions*
    functions:

        |getMaxLength|                    |love-RopeJoint:getMaxLength|
        |setMaxLength|                    |love-RopeJoint:setMaxLength|

-------------------------------------------------------------------------------
                                                  *love-RopeJoint:getMaxLength*
|RopeJoint:getMaxLength|

Gets the maximum length of a RopeJoint.

Synopses:

    1.  `maxLength` = |RopeJoint:getMaxLength|()

Variants:

    1.  `maxLength` = |RopeJoint:getMaxLength|()

        See function description

        returns:

            `maxLength`: |lrv-number|

                The maximum length of the RopeJoint.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-RopeJoint:setMaxLength*
|RopeJoint:setMaxLength|

Sets the maximum length of a RopeJoint.

Synopses:

    1.  |RopeJoint:setMaxLength|( `maxLength` )

Variants:

    1.  |RopeJoint:setMaxLength|( `maxLength` )

        See function description

        returns:

            None

        arguments:

            `maxLength`: |lrv-number|

                The new maximum length of the RopeJoint.

-------------------------------------------------------------------------------
                                                                   *love-Shape*
|Shape|

Shapes are solid 2d geometrical objects which handle the mass and collision of
a Body in love.physics.

Shapes are attached to a Body via a Fixture. The Shape object is copied when
this happens.

The Shape's position is relative to the position of the Body it has been
attached to.

                                                      *love-Shape-constructors*
    constructors:

        None

                                                        *love-Shape-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                          *love-Shape-subtypes*
    subtypes:

        None

                                                         *love-Shape-functions*
    functions:

        |computeAABB|                     |love-Shape:computeAABB|
        |computeMass|                     |love-Shape:computeMass|
        |getChildCount|                   |love-Shape:getChildCount|
        |getRadius|                       |love-Shape:getRadius|
        |getType|                         |love-Shape:getType|
        |rayCast|                         |love-Shape:rayCast|
        |testPoint|                       |love-Shape:testPoint|

-------------------------------------------------------------------------------
                                                       *love-Shape:computeAABB*
|Shape:computeAABB|

Returns the points of the bounding box for the transformed shape.

Synopses:

    1.  `topLeftX`, `topLeftY`, `bottomRightX`, `bottomRightY` =
        |Shape:computeAABB|( `tx`, `ty`, `tr`, `childIndex` )

Variants:

    1.  `topLeftX`, `topLeftY`, `bottomRightX`, `bottomRightY` =
        |Shape:computeAABB|( `tx`, `ty`, `tr`, `childIndex` )

        See function description

        returns:

            `topLeftX`: |lrv-number|

                The x position of the top-left point.

            `topLeftY`: |lrv-number|

                The y position of the top-left point.

            `bottomRightX`: |lrv-number|

                The x position of the bottom-right point.

            `bottomRightY`: |lrv-number|

                The y position of the bottom-right point.

        arguments:

            `tx`: |lrv-number|

                The translation of the shape on the x-axis.

            `ty`: |lrv-number|

                The translation of the shape on the y-axis.

            `tr`: |lrv-number|

                The shape rotation.

            `childIndex`: |lrv-number|

                The index of the child to compute the bounding box of.

-------------------------------------------------------------------------------
                                                       *love-Shape:computeMass*
|Shape:computeMass|

Computes the mass properties for the shape with the specified density.

Synopses:

    1.  `x`, `y`, `mass`, `inertia` = |Shape:computeMass|( `density` )

Variants:

    1.  `x`, `y`, `mass`, `inertia` = |Shape:computeMass|( `density` )

        See function description

        returns:

            `x`: |lrv-number|

                The x postition of the center of mass.

            `y`: |lrv-number|

                The y postition of the center of mass.

            `mass`: |lrv-number|

                The mass of the shape.

            `inertia`: |lrv-number|

                The rotational inertia.

        arguments:

            `density`: |lrv-number|

                The shape density.

-------------------------------------------------------------------------------
                                                     *love-Shape:getChildCount*
|Shape:getChildCount|

Returns the number of children the shape has.

Synopses:

    1.  `count` = |Shape:getChildCount|()

Variants:

    1.  `count` = |Shape:getChildCount|()

        See function description

        returns:

            `count`: |lrv-number|

                The number of children.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Shape:getRadius*
|Shape:getRadius|

Gets the radius of the shape.

Synopses:

    1.  `radius` = |Shape:getRadius|()

Variants:

    1.  `radius` = |Shape:getRadius|()

        See function description

        returns:

            `radius`: |lrv-number|

                The radius of the shape.

        arguments:

            None

-------------------------------------------------------------------------------
                                                           *love-Shape:getType*
|Shape:getType|

Gets a string representing the Shape.

This function can be useful for conditional debug drawing.

Synopses:

    1.  `type` = |Shape:getType|()

Variants:

    1.  `type` = |Shape:getType|()

        See function description

        returns:

            `type`: |love-ShapeType|

                The type of the Shape.

        arguments:

            None

-------------------------------------------------------------------------------
                                                           *love-Shape:rayCast*
|Shape:rayCast|

Casts a ray against the shape and returns the surface normal vector and the
line position where the ray hit. If the ray missed the shape, nil will be
returned. The Shape can be transformed to get it into the desired position.

The ray starts on the first point of the input line and goes towards the second
point of the line. The fourth argument is the maximum distance the ray is going
to travel as a scale factor of the input line length.

The childIndex parameter is used to specify which child of a parent shape, such
as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the
first edge on the chain. Ray casting a parent shape will only test the child
specified so if you want to test every shape of the parent, you must loop
through all of its children.

The world position of the impact can be calculated by multiplying the line
vector with the third return value and adding it to the line starting point.

hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction

Synopses:

    1.  `xn`, `yn`, `fraction` = |Shape:rayCast|( `x1`, `y1`, `x2`,
        `y2`, `maxFraction`, `tx`, `ty`, `tr`, `childIndex` )

Variants:

    1.  `xn`, `yn`, `fraction` = |Shape:rayCast|( `x1`, `y1`, `x2`,
        `y2`, `maxFraction`, `tx`, `ty`, `tr`, `childIndex` )

        See function description

        returns:

            `xn`: |lrv-number|

                The x component of the normal vector of the edge where the ray
                hit the shape.

            `yn`: |lrv-number|

                The y component of the normal vector of the edge where the ray
                hit the shape.

            `fraction`: |lrv-number|

                The position on the input line where the intersection happened
                as a factor of the line length.

        arguments:

            `x1`: |lrv-number|

                The x position of the input line starting point.

            `y1`: |lrv-number|

                The y position of the input line starting point.

            `x2`: |lrv-number|

                The x position of the input line end point.

            `y2`: |lrv-number|

                The y position of the input line end point.

            `maxFraction`: |lrv-number|

                Ray length parameter.

            `tx`: |lrv-number|

                The translation of the shape on the x-axis.

            `ty`: |lrv-number|

                The translation of the shape on the y-axis.

            `tr`: |lrv-number|

                The shape rotation.

            `childIndex`: |lrv-number|

                The index of the child the ray gets cast against.

-------------------------------------------------------------------------------
                                                         *love-Shape:testPoint*
|Shape:testPoint|

This is particularly useful for mouse interaction with the shapes. By looping
through all shapes and testing the mouse position with this function, we can
find which shapes the mouse touches.

Synopses:

    1.  `hit` = |Shape:testPoint|( `tx`, `ty`, `tr`, `x`, `y` )

Variants:

    1.  `hit` = |Shape:testPoint|( `tx`, `ty`, `tr`, `x`, `y` )

        See function description

        returns:

            `hit`: |lrv-boolean|

                True if inside, false if outside

        arguments:

            `tx`: |lrv-number|

                Translates the shape along the x-axis.

            `ty`: |lrv-number|

                Translates the shape along the y-axis.

            `tr`: |lrv-number|

                Rotates the shape.

            `x`: |lrv-number|

                The x-component of the point.

            `y`: |lrv-number|

                The y-component of the point.

-------------------------------------------------------------------------------
                                                               *love-WeldJoint*
|WeldJoint|

A WeldJoint essentially glues two bodies together.

                                                  *love-WeldJoint-constructors*
    constructors:

        None

                                                    *love-WeldJoint-supertypes*
    supertypes:

        |Joint|                           |love-Joint|
        |Object|                          |love-Object|

                                                      *love-WeldJoint-subtypes*
    subtypes:

        None

                                                     *love-WeldJoint-functions*
    functions:

        |getDampingRatio|                 |love-WeldJoint:getDampingRatio|
        |getFrequency|                    |love-WeldJoint:getFrequency|
        |setDampingRatio|                 |love-WeldJoint:setDampingRatio|
        |setFrequency|                    |love-WeldJoint:setFrequency|

-------------------------------------------------------------------------------
                                               *love-WeldJoint:getDampingRatio*
|WeldJoint:getDampingRatio|

Returns the damping ratio of the joint.

Synopses:

    1.  `ratio` = |WeldJoint:getDampingRatio|()

Variants:

    1.  `ratio` = |WeldJoint:getDampingRatio|()

        See function description

        returns:

            `ratio`: |lrv-number|

                The damping ratio.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-WeldJoint:getFrequency*
|WeldJoint:getFrequency|

Returns the frequency.

Synopses:

    1.  `freq` = |WeldJoint:getFrequency|()

Variants:

    1.  `freq` = |WeldJoint:getFrequency|()

        See function description

        returns:

            `freq`: |lrv-number|

                The frequency in hertz.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-WeldJoint:setDampingRatio*
|WeldJoint:setDampingRatio|

Sets a new damping ratio.

Synopses:

    1.  |WeldJoint:setDampingRatio|( `ratio` )

Variants:

    1.  |WeldJoint:setDampingRatio|( `ratio` )

        See function description

        returns:

            None

        arguments:

            `ratio`: |lrv-number|

                The new damping ratio.

-------------------------------------------------------------------------------
                                                  *love-WeldJoint:setFrequency*
|WeldJoint:setFrequency|

Sets a new frequency.

Synopses:

    1.  |WeldJoint:setFrequency|( `freq` )

Variants:

    1.  |WeldJoint:setFrequency|( `freq` )

        See function description

        returns:

            None

        arguments:

            `freq`: |lrv-number|

                The new frequency in hertz.

-------------------------------------------------------------------------------
                                                              *love-WheelJoint*
|WheelJoint|

Restricts a point on the second body to a line on the first body.

                                                 *love-WheelJoint-constructors*
    constructors:

        None

                                                   *love-WheelJoint-supertypes*
    supertypes:

        |Joint|                           |love-Joint|
        |Object|                          |love-Object|

                                                     *love-WheelJoint-subtypes*
    subtypes:

        None

                                                    *love-WheelJoint-functions*
    functions:

        |getAxis|                         |love-WheelJoint:getAxis|
        |getJointSpeed|                   |love-WheelJoint:getJointSpeed|
        |getJointTranslation|             |love-WheelJoint:getJointTranslation|
        |getMaxMotorTorque|               |love-WheelJoint:getMaxMotorTorque|
        |getMotorSpeed|                   |love-WheelJoint:getMotorSpeed|
        |getMotorTorque|                  |love-WheelJoint:getMotorTorque|
        |getSpringDampingRatio|           |love-WheelJoint:getSpringDampingRa-|
        |getSpringFrequency|              |love-WheelJoint:getSpringFrequency|
        |setMaxMotorTorque|               |love-WheelJoint:setMaxMotorTorque|
        |setMotorEnabled|                 |love-WheelJoint:setMotorEnabled|
        |setMotorSpeed|                   |love-WheelJoint:setMotorSpeed|
        |setSpringDampingRatio|           |love-WheelJoint:setSpringDampingRa-|
        |setSpringFrequency|              |love-WheelJoint:setSpringFrequency|

-------------------------------------------------------------------------------
                                                      *love-WheelJoint:getAxis*
|WheelJoint:getAxis|

Gets the world-space axis vector of the Wheel Joint.

Synopses:

    1.  `x`, `y` = |WheelJoint:getAxis|()

Variants:

    1.  `x`, `y` = |WheelJoint:getAxis|()

        See function description

        returns:

            `x`: |lrv-number|

                The x-axis coordinate of the world-space axis vector.

            `y`: |lrv-number|

                The y-axis coordinate of the world-space axis vector.

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-WheelJoint:getJointSpeed*
|WheelJoint:getJointSpeed|

Returns the current joint translation speed.

Synopses:

    1.  `speed` = |WheelJoint:getJointSpeed|()

Variants:

    1.  `speed` = |WheelJoint:getJointSpeed|()

        See function description

        returns:

            `speed`: |lrv-number|

                The translation speed of the joint in meters per second.

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-WheelJoint:getJointTranslation*
|WheelJoint:getJointTranslation|

Returns the current joint translation.

Synopses:

    1.  `position` = |WheelJoint:getJointTranslation|()

Variants:

    1.  `position` = |WheelJoint:getJointTranslation|()

        See function description

        returns:

            `position`: |lrv-number|

                The translation of the joint in meters.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-WheelJoint:getMaxMotorTorque*
|WheelJoint:getMaxMotorTorque|

Returns the maximum motor torque.

Synopses:

    1.  `maxTorque` = |WheelJoint:getMaxMotorTorque|()

Variants:

    1.  `maxTorque` = |WheelJoint:getMaxMotorTorque|()

        See function description

        returns:

            `maxTorque`: |lrv-number|

                The maximum torque of the joint motor in newton meters.

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-WheelJoint:getMotorSpeed*
|WheelJoint:getMotorSpeed|

Returns the speed of the motor.

Synopses:

    1.  `speed` = |WheelJoint:getMotorSpeed|()

Variants:

    1.  `speed` = |WheelJoint:getMotorSpeed|()

        See function description

        returns:

            `speed`: |lrv-number|

                The speed of the joint motor in radians per second.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-WheelJoint:getMotorTorque*
|WheelJoint:getMotorTorque|

Returns the current torque on the motor.

Synopses:

    1.  `torque` = |WheelJoint:getMotorTorque|( `invdt` )

Variants:

    1.  `torque` = |WheelJoint:getMotorTorque|( `invdt` )

        See function description

        returns:

            `torque`: |lrv-number|

                The torque on the motor in newton meters.

        arguments:

            `invdt`: |lrv-number|

                How long the force applies. Usually the inverse time step or
                1/dt.

-------------------------------------------------------------------------------
                                        *love-WheelJoint:getSpringDampingRatio*
|WheelJoint:getSpringDampingRatio|

Returns the damping ratio.

Synopses:

    1.  `ratio` = |WheelJoint:getSpringDampingRatio|()

Variants:

    1.  `ratio` = |WheelJoint:getSpringDampingRatio|()

        See function description

        returns:

            `ratio`: |lrv-number|

                The damping ratio.

        arguments:

            None

-------------------------------------------------------------------------------
                                           *love-WheelJoint:getSpringFrequency*
|WheelJoint:getSpringFrequency|

Returns the spring frequency.

Synopses:

    1.  `freq` = |WheelJoint:getSpringFrequency|()

Variants:

    1.  `freq` = |WheelJoint:getSpringFrequency|()

        See function description

        returns:

            `freq`: |lrv-number|

                The frequency in hertz.

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-WheelJoint:setMaxMotorTorque*
|WheelJoint:setMaxMotorTorque|

Sets a new maximum motor torque.

Synopses:

    1.  |WheelJoint:setMaxMotorTorque|( `maxTorque` )

Variants:

    1.  |WheelJoint:setMaxMotorTorque|( `maxTorque` )

        See function description

        returns:

            None

        arguments:

            `maxTorque`: |lrv-number|

                The new maximum torque for the joint motor in newton meters.

-------------------------------------------------------------------------------
                                              *love-WheelJoint:setMotorEnabled*
|WheelJoint:setMotorEnabled|

Starts and stops the joint motor.

Synopses:

    1.  |WheelJoint:setMotorEnabled|( `enable` )

Variants:

    1.  |WheelJoint:setMotorEnabled|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: |lrv-boolean|

                True turns the motor on and false turns it off.

-------------------------------------------------------------------------------
                                                *love-WheelJoint:setMotorSpeed*
|WheelJoint:setMotorSpeed|

Sets a new speed for the motor.

Synopses:

    1.  |WheelJoint:setMotorSpeed|( `speed` )

Variants:

    1.  |WheelJoint:setMotorSpeed|( `speed` )

        See function description

        returns:

            None

        arguments:

            `speed`: |lrv-number|

                The new speed for the joint motor in radians per second.

-------------------------------------------------------------------------------
                                        *love-WheelJoint:setSpringDampingRatio*
|WheelJoint:setSpringDampingRatio|

Sets a new damping ratio.

Synopses:

    1.  |WheelJoint:setSpringDampingRatio|( `ratio` )

Variants:

    1.  |WheelJoint:setSpringDampingRatio|( `ratio` )

        See function description

        returns:

            None

        arguments:

            `ratio`: |lrv-number|

                The new damping ratio.

-------------------------------------------------------------------------------
                                           *love-WheelJoint:setSpringFrequency*
|WheelJoint:setSpringFrequency|

Sets a new spring frequency.

Synopses:

    1.  |WheelJoint:setSpringFrequency|( `freq` )

Variants:

    1.  |WheelJoint:setSpringFrequency|( `freq` )

        See function description

        returns:

            None

        arguments:

            `freq`: |lrv-number|

                The new frequency in hertz.

-------------------------------------------------------------------------------
                                                                   *love-World*
|World|

A world is an object that contains all bodies and joints.

                                                      *love-World-constructors*
    constructors:

        None

                                                        *love-World-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                          *love-World-subtypes*
    subtypes:

        None

                                                         *love-World-functions*
    functions:

        |destroy|                         |love-World:destroy|
        |getBodies|                       |love-World:getBodies|
        |getBodyCount|                    |love-World:getBodyCount|
        |getCallbacks|                    |love-World:getCallbacks|
        |getContactCount|                 |love-World:getContactCount|
        |getContactFilter|                |love-World:getContactFilter|
        |getContacts|                     |love-World:getContacts|
        |getGravity|                      |love-World:getGravity|
        |getJointCount|                   |love-World:getJointCount|
        |getJoints|                       |love-World:getJoints|
        |isDestroyed|                     |love-World:isDestroyed|
        |isLocked|                        |love-World:isLocked|
        |isSleepingAllowed|               |love-World:isSleepingAllowed|
        |queryBoundingBox|                |love-World:queryBoundingBox|
        |rayCast|                         |love-World:rayCast|
        |setCallbacks|                    |love-World:setCallbacks|
        |setContactFilter|                |love-World:setContactFilter|
        |setGravity|                      |love-World:setGravity|
        |setSleepingAllowed|              |love-World:setSleepingAllowed|
        |translateOrigin|                 |love-World:translateOrigin|
        |update|                          |love-World:update|

-------------------------------------------------------------------------------
                                                           *love-World:destroy*
|World:destroy|

Destroys the world, taking all bodies, joints, fixtures and their shapes with
it.

An error will occur if you attempt to use any of the destroyed objects after
calling this function.

Synopses:

    1.  |World:destroy|()

Variants:

    1.  |World:destroy|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-World:getBodies*
|World:getBodies|

Returns a table with all bodies.

Synopses:

    1.  `bodies` = |World:getBodies|()

Variants:

    1.  `bodies` = |World:getBodies|()

        See function description

        returns:

            `bodies`: |lrv-table|

                A sequence with all bodies.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-World:getBodyCount*
|World:getBodyCount|

Returns the number of bodies in the world.

Synopses:

    1.  `n` = |World:getBodyCount|()

Variants:

    1.  `n` = |World:getBodyCount|()

        See function description

        returns:

            `n`: |lrv-number|

                The number of bodies in the world.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-World:getCallbacks*
|World:getCallbacks|

Returns functions for the callbacks during the world update.

Synopses:

    1.  `beginContact`, `endContact`, `preSolve`, `postSolve` =
        |World:getCallbacks|()

Variants:

    1.  `beginContact`, `endContact`, `preSolve`, `postSolve` =
        |World:getCallbacks|()

        See function description

        returns:

            `beginContact`: |lrv-function|

                Gets called when two fixtures begin to overlap.

            `endContact`: |lrv-function|

                Gets called when two fixtures cease to overlap.

            `preSolve`: |lrv-function|

                Gets called before a collision gets resolved.

            `postSolve`: |lrv-function|

                Gets called after the collision has been resolved.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-World:getContactCount*
|World:getContactCount|

Returns the number of contacts in the world.

Synopses:

    1.  `n` = |World:getContactCount|()

Variants:

    1.  `n` = |World:getContactCount|()

        See function description

        returns:

            `n`: |lrv-number|

                The number of contacts in the world.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-World:getContactFilter*
|World:getContactFilter|

Returns the function for collision filtering.

Synopses:

    1.  `contactFilter` = |World:getContactFilter|()

Variants:

    1.  `contactFilter` = |World:getContactFilter|()

        See function description

        returns:

            `contactFilter`: |lrv-function|

                The function that handles the contact filtering.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-World:getContacts*
|World:getContacts|

Returns a table with all Contacts.

Synopses:

    1.  `contacts` = |World:getContacts|()

Variants:

    1.  `contacts` = |World:getContacts|()

        See function description

        returns:

            `contacts`: |lrv-table|

                A sequence with all Contacts.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-World:getGravity*
|World:getGravity|

Get the gravity of the world.

Synopses:

    1.  `x`, `y` = |World:getGravity|()

Variants:

    1.  `x`, `y` = |World:getGravity|()

        See function description

        returns:

            `x`: |lrv-number|

                The x component of gravity.

            `y`: |lrv-number|

                The y component of gravity.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-World:getJointCount*
|World:getJointCount|

Returns the number of joints in the world.

Synopses:

    1.  `n` = |World:getJointCount|()

Variants:

    1.  `n` = |World:getJointCount|()

        See function description

        returns:

            `n`: |lrv-number|

                The number of joints in the world.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-World:getJoints*
|World:getJoints|

Returns a table with all joints.

Synopses:

    1.  `joints` = |World:getJoints|()

Variants:

    1.  `joints` = |World:getJoints|()

        See function description

        returns:

            `joints`: |lrv-table|

                A sequence with all joints.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-World:isDestroyed*
|World:isDestroyed|

Gets whether the World is destroyed. Destroyed worlds cannot be used.

Synopses:

    1.  `destroyed` = |World:isDestroyed|()

Variants:

    1.  `destroyed` = |World:isDestroyed|()

        See function description

        returns:

            `destroyed`: |lrv-boolean|

                Whether the World is destroyed.

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-World:isLocked*
|World:isLocked|

Returns if the world is updating its state.

This will return true inside the callbacks from World:setCallbacks.

Synopses:

    1.  `locked` = |World:isLocked|()

Variants:

    1.  `locked` = |World:isLocked|()

        See function description

        returns:

            `locked`: |lrv-boolean|

                Will be true if the world is in the process of updating its
                state.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-World:isSleepingAllowed*
|World:isSleepingAllowed|

Gets the sleep behaviour of the world.

Synopses:

    1.  `allow` = |World:isSleepingAllowed|()

Variants:

    1.  `allow` = |World:isSleepingAllowed|()

        See function description

        returns:

            `allow`: |lrv-boolean|

                True if bodies in the world are allowed to sleep, or false if
                not.

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-World:queryBoundingBox*
|World:queryBoundingBox|

Calls a function for each fixture inside the specified area by searching for
any overlapping bounding box (Fixture:getBoundingBox).

Synopses:

    1.  |World:queryBoundingBox|( `topLeftX`, `topLeftY`,
        `bottomRightX`, `bottomRightY`, `callback` )

Variants:

    1.  |World:queryBoundingBox|( `topLeftX`, `topLeftY`,
        `bottomRightX`, `bottomRightY`, `callback` )

        See function description

        returns:

            None

        arguments:

            `topLeftX`: |lrv-number|

                The x position of the top-left point.

            `topLeftY`: |lrv-number|

                The y position of the top-left point.

            `bottomRightX`: |lrv-number|

                The x position of the bottom-right point.

            `bottomRightY`: |lrv-number|

                The y position of the bottom-right point.

            `callback`: |lrv-function|

                This function gets passed one argument, the fixture, and should
                return a boolean. The search will continue if it is true or
                stop if it is false.

-------------------------------------------------------------------------------
                                                           *love-World:rayCast*
|World:rayCast|

Casts a ray and calls a function for each fixtures it intersects.

Synopses:

    1.  `control` = |World:rayCast|( `fixture`, `x`, `y`, `xn`, `yn`,
        `fraction` )

Variants:

    1.  `control` = |World:rayCast|( `fixture`, `x`, `y`, `xn`, `yn`,
        `fraction` )

        There is a bug in LÖVE 0.8.0 where the normal vector passed to the callback function gets scaled by love.physics.getMeter.

        returns:

            `control`: |lrv-number|

                The ray can be controlled with the return value. A positive
                value sets a new ray length where 1 is the default value. A
                value of 0 terminates the ray. If the callback function returns
                -1, the intersection gets ignored as if it didn't happen.

        arguments:

            `fixture`: |love-Fixture|

                The fixture intersecting the ray.

            `x`: |lrv-number|

                The x position of the intersection point.

            `y`: |lrv-number|

                The y position of the intersection point.

            `xn`: |lrv-number|

                The x value of the surface normal vector of the shape edge.

            `yn`: |lrv-number|

                The y value of the surface normal vector of the shape edge.

            `fraction`: |lrv-number|

                The position of the intersection on the ray as a number from 0
                to 1 (or even higher if the ray length was changed with the
                return value).

-------------------------------------------------------------------------------
                                                      *love-World:setCallbacks*
|World:setCallbacks|

Sets functions for the collision callbacks during the world update.

Four Lua functions can be given as arguments. The value nil removes a function.

When called, each function will be passed three arguments. The first two
arguments are the colliding fixtures and the third argument is the Contact
between them. The postSolve callback additionally gets the normal and tangent
impulse for each contact point. See notes.

If you are interested to know when exactly each callback is called, consult a
Box2d manual

Synopses:

    1.  |World:setCallbacks|( `beginContact`, `endContact`, `preSolve`,
        `postSolve` )

Variants:

    1.  |World:setCallbacks|( `beginContact`, `endContact`, `preSolve`,
        `postSolve` )

        See function description

        returns:

            None

        arguments:

            `beginContact`: |lrv-function|

                Gets called when two fixtures begin to overlap.

            `endContact`: |lrv-function|

                Gets called when two fixtures cease to overlap. This will also
                be called outside of a world update, when colliding objects are
                destroyed.

            `preSolve`: |lrv-function|

                Gets called before a collision gets resolved.

            `postSolve`: |lrv-function|

                Gets called after the collision has been resolved.

-------------------------------------------------------------------------------
                                                  *love-World:setContactFilter*
|World:setContactFilter|

Sets a function for collision filtering.

If the group and category filtering doesn't generate a collision decision, this
function gets called with the two fixtures as arguments. The function should
return a boolean value where true means the fixtures will collide and false
means they will pass through each other.

Synopses:

    1.  |World:setContactFilter|( `filter` )

Variants:

    1.  |World:setContactFilter|( `filter` )

        See function description

        returns:

            None

        arguments:

            `filter`: |lrv-function|

                The function handling the contact filtering.

-------------------------------------------------------------------------------
                                                        *love-World:setGravity*
|World:setGravity|

Set the gravity of the world.

Synopses:

    1.  |World:setGravity|( `x`, `y` )

Variants:

    1.  |World:setGravity|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The x component of gravity.

            `y`: |lrv-number|

                The y component of gravity.

-------------------------------------------------------------------------------
                                                *love-World:setSleepingAllowed*
|World:setSleepingAllowed|

Sets the sleep behaviour of the world.

Synopses:

    1.  |World:setSleepingAllowed|( `allow` )

Variants:

    1.  |World:setSleepingAllowed|( `allow` )

        See function description

        returns:

            None

        arguments:

            `allow`: |lrv-boolean|

                True if bodies in the world are allowed to sleep, or false if
                not.

-------------------------------------------------------------------------------
                                                   *love-World:translateOrigin*
|World:translateOrigin|

Translates the World's origin. Useful in large worlds where floating point
precision issues become noticeable at far distances from the origin.

Synopses:

    1.  |World:translateOrigin|( `x`, `y` )

Variants:

    1.  |World:translateOrigin|( `x`, `y` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The x component of the new origin with respect to the old
                origin.

            `y`: |lrv-number|

                The y component of the new origin with respect to the old
                origin.

-------------------------------------------------------------------------------
                                                            *love-World:update*
|World:update|

Update the state of the world.

Synopses:

    1.  |World:update|( `dt`, `velocityiterations`,
        `positioniterations` )

Variants:

    1.  |World:update|( `dt`, `velocityiterations`,
        `positioniterations` )

        See function description

        returns:

            None

        arguments:

            `dt`: |lrv-number|

                The time (in seconds) to advance the physics simulation.

            `velocityiterations`: |lrv-number|

                The maximum number of steps used to determine the new
                velocities when resolving a collision.

            `positioniterations`: |lrv-number|

                The maximum number of steps used to determine the new positions
                when resolving a collision.

===============================================================================
                                                              *love-love.sound*
|love.sound|

This module is responsible for decoding sound files. It can't play the sounds,
see love.audio for that.

    |callbacks|                           |love-love.sound-callbacks|
    |enums|                               |love-love.sound-enums|
    |functions|                           |love-love.sound-functions|
    |types|                               |love-love.sound-types|

-------------------------------------------------------------------------------
                                                    *love-love.sound-callbacks*
The callbacks of |love.sound|:

    None

-------------------------------------------------------------------------------
                                                        *love-love.sound-enums*
The enums of |love.sound|:

    None

-------------------------------------------------------------------------------
                                                    *love-love.sound-functions*
The functions of |love.sound|:

    |newDecoder|                          |love-love.sound.newDecoder|
    |newSoundData|                        |love-love.sound.newSoundData|

-------------------------------------------------------------------------------
                                                   *love-love.sound.newDecoder*
|love.sound.newDecoder|

Attempts to find a decoder for the encoded sound data in the specified file.

Synopses:

    1.  `decoder` = |love.sound.newDecoder|( `file`, `buffer` )
    2.  `decoder` = |love.sound.newDecoder|( `filename`, `buffer` )

Variants:

    1.  `decoder` = |love.sound.newDecoder|( `file`, `buffer` )

        See function description

        returns:

            `decoder`: |love-Decoder|

                A new Decoder object.

        arguments:

            `file`: |love-File|

                The file with encoded sound data.

            `buffer`: |lrv-number|

                The size of each decoded chunk, in bytes.
    2.  `decoder` = |love.sound.newDecoder|( `filename`, `buffer` )

        See function description

        returns:

            `decoder`: |love-Decoder|

                A new Decoder object.

        arguments:

            `filename`: |lrv-string|

                The filename of the file with encoded sound data.

            `buffer`: |lrv-number|

                The size of each decoded chunk, in bytes.

-------------------------------------------------------------------------------
                                                 *love-love.sound.newSoundData*
|love.sound.newSoundData|

Creates new SoundData from a filepath, File, or Decoder. It's also possible to
create SoundData with a custom sample rate, channel and bit depth.

The sound data will be decoded to the memory in a raw format. It is recommended
to create only short sounds like effects, as a 3 minute song uses 30 MB of
memory this way.

Synopses:

    1.  `soundData` = |love.sound.newSoundData|( `filename` )
    2.  `soundData` = |love.sound.newSoundData|( `file` )
    3.  `soundData` = |love.sound.newSoundData|( `decoder` )
    4.  `soundData` = |love.sound.newSoundData|( `samples`, `rate`,
        `bits`, `channels` )

Variants:

    1.  `soundData` = |love.sound.newSoundData|( `filename` )

        See function description

        returns:

            `soundData`: |love-SoundData|

                A new SoundData object.

        arguments:

            `filename`: |lrv-string|

                The file name of the file to load.
    2.  `soundData` = |love.sound.newSoundData|( `file` )

        See function description

        returns:

            `soundData`: |love-SoundData|

                A new SoundData object.

        arguments:

            `file`: |love-File|

                A File pointing to an audio file.
    3.  `soundData` = |love.sound.newSoundData|( `decoder` )

        See function description

        returns:

            `soundData`: |love-SoundData|

                A new SoundData object.

        arguments:

            `decoder`: |love-Decoder|

                Decode data from this Decoder until EOF.
    4.  `soundData` = |love.sound.newSoundData|( `samples`, `rate`,
        `bits`, `channels` )

        See function description

        returns:

            `soundData`: |love-SoundData|

                A new SoundData object.

        arguments:

            `samples`: |lrv-number|

                Total number of samples.

            `rate`: |lrv-number|

                Number of samples per second

            `bits`: |lrv-number|

                Bits per sample (8 or 16).

            `channels`: |lrv-number|

                Either 1 for mono or 2 for stereo.
-------------------------------------------------------------------------------
                                                        *love-love.sound-types*
The types of |love.sound|:

    |Decoder|                             |love-Decoder|
    |SoundData|                           |love-SoundData|

-------------------------------------------------------------------------------
                                                                 *love-Decoder*
|Decoder|

An object which can gradually decode a sound file.

                                                    *love-Decoder-constructors*
    constructors:

        None

                                                      *love-Decoder-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                        *love-Decoder-subtypes*
    subtypes:

        None

                                                       *love-Decoder-functions*
    functions:

        |clone|                           |love-Decoder:clone|
        |getBitDepth|                     |love-Decoder:getBitDepth|
        |getChannelCount|                 |love-Decoder:getChannelCount|
        |getDuration|                     |love-Decoder:getDuration|
        |getSampleRate|                   |love-Decoder:getSampleRate|

-------------------------------------------------------------------------------
                                                           *love-Decoder:clone*
|Decoder:clone|

Creates a new copy of current decoder.

The new decoder will start decoding from the beginning of the audio stream.

Synopses:

    1.  `decoder` = |Decoder:clone|()

Variants:

    1.  `decoder` = |Decoder:clone|()

        See function description

        returns:

            `decoder`: |love-Decoder|

                New copy of the decoder.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Decoder:getBitDepth*
|Decoder:getBitDepth|

Returns the number of bits per sample.

Synopses:

    1.  `bitDepth` = |Decoder:getBitDepth|()

Variants:

    1.  `bitDepth` = |Decoder:getBitDepth|()

        See function description

        returns:

            `bitDepth`: |lrv-number|

                Either 8, or 16.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-Decoder:getChannelCount*
|Decoder:getChannelCount|

Returns the number of channels in the stream.

Synopses:

    1.  `channels` = |Decoder:getChannelCount|()

Variants:

    1.  `channels` = |Decoder:getChannelCount|()

        See function description

        returns:

            `channels`: |lrv-number|

                1 for mono, 2 for stereo.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-Decoder:getDuration*
|Decoder:getDuration|

Gets the duration of the sound file. It may not always be sample-accurate, and
it may return -1 if the duration cannot be determined at all.

Synopses:

    1.  `duration` = |Decoder:getDuration|()

Variants:

    1.  `duration` = |Decoder:getDuration|()

        See function description

        returns:

            `duration`: |lrv-number|

                The duration of the sound file in seconds, or -1 if it cannot
                be determined.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-Decoder:getSampleRate*
|Decoder:getSampleRate|

Returns the sample rate of the Decoder.

Synopses:

    1.  `rate` = |Decoder:getSampleRate|()

Variants:

    1.  `rate` = |Decoder:getSampleRate|()

        See function description

        returns:

            `rate`: |lrv-number|

                Number of samples per second.

        arguments:

            None

-------------------------------------------------------------------------------
                                                               *love-SoundData*
|SoundData|

Contains raw audio samples.

You can not play SoundData back directly. You must wrap a Source object around
it.

                                                  *love-SoundData-constructors*
    constructors:

        None

                                                    *love-SoundData-supertypes*
    supertypes:

        |Data|                            |love-Data|
        |Object|                          |love-Object|

                                                      *love-SoundData-subtypes*
    subtypes:

        None

                                                     *love-SoundData-functions*
    functions:

        |getBitDepth|                     |love-SoundData:getBitDepth|
        |getChannelCount|                 |love-SoundData:getChannelCount|
        |getDuration|                     |love-SoundData:getDuration|
        |getSample|                       |love-SoundData:getSample|
        |getSampleCount|                  |love-SoundData:getSampleCount|
        |getSampleRate|                   |love-SoundData:getSampleRate|
        |setSample|                       |love-SoundData:setSample|

-------------------------------------------------------------------------------
                                                   *love-SoundData:getBitDepth*
|SoundData:getBitDepth|

Returns the number of bits per sample.

Synopses:

    1.  `bitdepth` = |SoundData:getBitDepth|()

Variants:

    1.  `bitdepth` = |SoundData:getBitDepth|()

        See function description

        returns:

            `bitdepth`: |lrv-number|

                Either 8, or 16.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-SoundData:getChannelCount*
|SoundData:getChannelCount|

Returns the number of channels in the SoundData.

Synopses:

    1.  `channels` = |SoundData:getChannelCount|()

Variants:

    1.  `channels` = |SoundData:getChannelCount|()

        See function description

        returns:

            `channels`: |lrv-number|

                1 for mono, 2 for stereo.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-SoundData:getDuration*
|SoundData:getDuration|

Gets the duration of the sound data.

Synopses:

    1.  `duration` = |SoundData:getDuration|()

Variants:

    1.  `duration` = |SoundData:getDuration|()

        See function description

        returns:

            `duration`: |lrv-number|

                The duration of the sound data in seconds.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-SoundData:getSample*
|SoundData:getSample|

Gets the value of the sample-point at the specified position. For stereo
SoundData objects, the data from the left and right channels are interleaved in
that order.

Synopses:

    1.  `sample` = |SoundData:getSample|( `i` )
    2.  `sample` = |SoundData:getSample|( `i`, `channel` )

Variants:

    1.  `sample` = |SoundData:getSample|( `i` )

        See function description

        returns:

            `sample`: |lrv-number|

                The normalized samplepoint (range -1.0 to 1.0).

        arguments:

            `i`: |lrv-number|

                An integer value specifying the position of the sample
                (starting at 0).
    2.  `sample` = |SoundData:getSample|( `i`, `channel` )

        Gets the value of a sample using an explicit sample index instead of interleaving them in the sample position parameter.

        returns:

            `sample`: |lrv-number|

                The normalized samplepoint (range -1.0 to 1.0).

        arguments:

            `i`: |lrv-number|

                An integer value specifying the position of the sample
                (starting at 0).

            `channel`: |lrv-number|

                The index of the channel to get within the given sample.

-------------------------------------------------------------------------------
                                                *love-SoundData:getSampleCount*
|SoundData:getSampleCount|

Returns the number of samples per channel of the SoundData.

Synopses:

    1.  `count` = |SoundData:getSampleCount|()

Variants:

    1.  `count` = |SoundData:getSampleCount|()

        See function description

        returns:

            `count`: |lrv-number|

                Total number of samples.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-SoundData:getSampleRate*
|SoundData:getSampleRate|

Returns the sample rate of the SoundData.

Synopses:

    1.  `rate` = |SoundData:getSampleRate|()

Variants:

    1.  `rate` = |SoundData:getSampleRate|()

        See function description

        returns:

            `rate`: |lrv-number|

                Number of samples per second.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-SoundData:setSample*
|SoundData:setSample|

Sets the value of the sample-point at the specified position. For stereo
SoundData objects, the data from the left and right channels are interleaved in
that order.

Synopses:

    1.  |SoundData:setSample|( `i`, `sample` )
    2.  |SoundData:setSample|( `i`, `channel`, `sample` )

Variants:

    1.  |SoundData:setSample|( `i`, `sample` )

        See function description

        returns:

            None

        arguments:

            `i`: |lrv-number|

                An integer value specifying the position of the sample
                (starting at 0).

            `sample`: |lrv-number|

                The normalized samplepoint (range -1.0 to 1.0).
    2.  |SoundData:setSample|( `i`, `channel`, `sample` )

        Sets the value of a sample using an explicit sample index instead of interleaving them in the sample position parameter.

        returns:

            None

        arguments:

            `i`: |lrv-number|

                An integer value specifying the position of the sample
                (starting at 0).

            `channel`: |lrv-number|

                The index of the channel to set within the given sample.

            `sample`: |lrv-number|

                The normalized samplepoint (range -1.0 to 1.0).

===============================================================================
                                                             *love-love.system*
|love.system|

Provides access to information about the user's system.

    |callbacks|                           |love-love.system-callbacks|
    |enums|                               |love-love.system-enums|
    |functions|                           |love-love.system-functions|
    |types|                               |love-love.system-types|

-------------------------------------------------------------------------------
                                                   *love-love.system-callbacks*
The callbacks of |love.system|:

    None

-------------------------------------------------------------------------------
                                                       *love-love.system-enums*
The enums of |love.system|:

    |PowerState|                          |love-PowerState|

-------------------------------------------------------------------------------
                                                              *love-PowerState*
|PowerState|

The basic state of the system's power supply.

    constants:

        `unknown`: |lrv-string|

            Cannot determine power status.

        `battery`: |lrv-string|

            Not plugged in, running on a battery.

        `nobattery`: |lrv-string|

            Plugged in, no battery available.

        `charging`: |lrv-string|

            Plugged in, charging battery.

        `charged`: |lrv-string|

            Plugged in, battery is fully charged.

-------------------------------------------------------------------------------
                                                   *love-love.system-functions*
The functions of |love.system|:

    |getClipboardText|                    |love-love.system.getClipboardText|
    |getOS|                               |love-love.system.getOS|
    |getPowerInfo|                        |love-love.system.getPowerInfo|
    |getProcessorCount|                   |love-love.system.getProcessorCount|
    |hasBackgroundMusic|                  |love-love.system.hasBackgroundMusic|
    |openURL|                             |love-love.system.openURL|
    |setClipboardText|                    |love-love.system.setClipboardText|
    |vibrate|                             |love-love.system.vibrate|

-------------------------------------------------------------------------------
                                            *love-love.system.getClipboardText*
|love.system.getClipboardText|

Gets text from the clipboard.

Synopses:

    1.  `text` = |love.system.getClipboardText|()

Variants:

    1.  `text` = |love.system.getClipboardText|()

        See function description

        returns:

            `text`: |lrv-string|

                The text currently held in the system's clipboard.

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-love.system.getOS*
|love.system.getOS|

Gets the current operating system. In general, LÖVE abstracts away the need to
know the current operating system, but there are a few cases where it can be
useful (especially in combination with os.execute.)

Synopses:

    1.  `osString` = |love.system.getOS|()

Variants:

    1.  `osString` = |love.system.getOS|()

        In LÖVE version 0.8.0, the '''love._os''' string contains the current operating system.

        returns:

            `osString`: |lrv-string|

                The current operating system. 'OS X', 'Windows', 'Linux',
                'Android' or 'iOS'.

        arguments:

            None

-------------------------------------------------------------------------------
                                                *love-love.system.getPowerInfo*
|love.system.getPowerInfo|

Gets information about the system's power supply.

Synopses:

    1.  `state`, `percent`, `seconds` = |love.system.getPowerInfo|()

Variants:

    1.  `state`, `percent`, `seconds` = |love.system.getPowerInfo|()

        See function description

        returns:

            `state`: |love-PowerState|

                The basic state of the power supply.

            `percent`: |lrv-number|

                Percentage of battery life left, between 0 and 100. nil if the
                value can't be determined or there's no battery.

            `seconds`: |lrv-number|

                Seconds of battery life left. nil if the value can't be
                determined or there's no battery.

        arguments:

            None

-------------------------------------------------------------------------------
                                           *love-love.system.getProcessorCount*
|love.system.getProcessorCount|

Gets the amount of logical processor in the system.

Synopses:

    1.  `processorCount` = |love.system.getProcessorCount|()

Variants:

    1.  `processorCount` = |love.system.getProcessorCount|()

        The number includes the threads reported if technologies such as Intel's Hyper-threading are enabled. For example, on a 4-core CPU with Hyper-threading, this function will return 8.

        returns:

            `processorCount`: |lrv-number|

                Amount of logical processors.

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-love.system.hasBackgroundMusic*
|love.system.hasBackgroundMusic|

Gets whether another application on the system is playing music in the
background.

Currently this is implemented on iOS and Android, and will always return false
on other operating systems. The t.audio.mixwithsystem flag in love.conf can be
used to configure whether background audio / music from other apps should play
while LÖVE is open.

Synopses:

    1.  `backgroundmusic` = |love.system.hasBackgroundMusic|()

Variants:

    1.  `backgroundmusic` = |love.system.hasBackgroundMusic|()

        See function description

        returns:

            `backgroundmusic`: |lrv-boolean|

                True if the user is playing music in the background via another
                app, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-love.system.openURL*
|love.system.openURL|

Opens a URL with the user's web or file browser.

Synopses:

    1.  `success` = |love.system.openURL|( `url` )

Variants:

    1.  `success` = |love.system.openURL|( `url` )

        Passing file:// scheme in Android 7.0 (Nougat) and later always result in failure. Prior to 11.2, this will crash LÖVE instead of returning false.

        returns:

            `success`: |lrv-boolean|

                Whether the URL was opened successfully.

        arguments:

            `url`: |lrv-string|

                The URL to open. Must be formatted as a proper URL.

-------------------------------------------------------------------------------
                                            *love-love.system.setClipboardText*
|love.system.setClipboardText|

Puts text in the clipboard.

Synopses:

    1.  |love.system.setClipboardText|( `text` )

Variants:

    1.  |love.system.setClipboardText|( `text` )

        See function description

        returns:

            None

        arguments:

            `text`: |lrv-string|

                The new text to hold in the system's clipboard.

-------------------------------------------------------------------------------
                                                     *love-love.system.vibrate*
|love.system.vibrate|

Causes the device to vibrate, if possible. Currently this will only work on
Android and iOS devices that have a built-in vibration motor.

Synopses:

    1.  |love.system.vibrate|( `seconds` )

Variants:

    1.  |love.system.vibrate|( `seconds` )

        See function description

        returns:

            None

        arguments:

            `seconds`: |lrv-number|

                The duration to vibrate for. If called on an iOS device, it
                will always vibrate for 0.5 seconds due to limitations in the
                iOS system APIs.
-------------------------------------------------------------------------------
                                                       *love-love.system-types*
The types of |love.system|:

    None

===============================================================================
                                                             *love-love.thread*
|love.thread|

Allows you to work with threads.

Threads are separate Lua environments, running in parallel to the main code. As
their code runs separately, they can be used to compute complex operations
without adversely affecting the frame rate of the main thread. However, as they
are separate environments, they cannot access the variables and functions of
the main thread, and communication between threads is limited.

All LOVE objects (userdata) are shared among threads so you'll only have to
send their references across threads. You may run into concurrency issues if
you manipulate an object on multiple threads at the same time.

When a Thread is started, it only loads the love.thread module. Every other
module has to be loaded with require.

    |callbacks|                           |love-love.thread-callbacks|
    |enums|                               |love-love.thread-enums|
    |functions|                           |love-love.thread-functions|
    |types|                               |love-love.thread-types|

-------------------------------------------------------------------------------
                                                   *love-love.thread-callbacks*
The callbacks of |love.thread|:

    None

-------------------------------------------------------------------------------
                                                       *love-love.thread-enums*
The enums of |love.thread|:

    None

-------------------------------------------------------------------------------
                                                   *love-love.thread-functions*
The functions of |love.thread|:

    |getChannel|                          |love-love.thread.getChannel|
    |newChannel|                          |love-love.thread.newChannel|
    |newThread|                           |love-love.thread.newThread|

-------------------------------------------------------------------------------
                                                  *love-love.thread.getChannel*
|love.thread.getChannel|

Creates or retrieves a named thread channel.

Synopses:

    1.  `channel` = |love.thread.getChannel|( `name` )

Variants:

    1.  `channel` = |love.thread.getChannel|( `name` )

        See function description

        returns:

            `channel`: |love-Channel|

                The Channel object associated with the name.

        arguments:

            `name`: |lrv-string|

                The name of the channel you want to create or retrieve.

-------------------------------------------------------------------------------
                                                  *love-love.thread.newChannel*
|love.thread.newChannel|

Create a new unnamed thread channel.

One use for them is to pass new unnamed channels to other threads via
Channel:push on a named channel.

Synopses:

    1.  `channel` = |love.thread.newChannel|()

Variants:

    1.  `channel` = |love.thread.newChannel|()

        See function description

        returns:

            `channel`: |love-Channel|

                The new Channel object.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-love.thread.newThread*
|love.thread.newThread|

Creates a new Thread from a filename, string or FileData object containing Lua
code.

Synopses:

    1.  `thread` = |love.thread.newThread|( `filename` )
    2.  `thread` = |love.thread.newThread|( `fileData` )
    3.  `thread` = |love.thread.newThread|( `codestring` )

Variants:

    1.  `thread` = |love.thread.newThread|( `filename` )

        See function description

        returns:

            `thread`: |love-Thread|

                A new Thread that has yet to be started.

        arguments:

            `filename`: |lrv-string|

                The name of the Lua file to use as the source.
    2.  `thread` = |love.thread.newThread|( `fileData` )

        See function description

        returns:

            `thread`: |love-Thread|

                A new Thread that has yet to be started.

        arguments:

            `fileData`: |love-FileData|

                The FileData containing the Lua code to use as the source.
    3.  `thread` = |love.thread.newThread|( `codestring` )

        See function description

        returns:

            `thread`: |love-Thread|

                A new Thread that has yet to be started.

        arguments:

            `codestring`: |lrv-string|

                A string containing the Lua code to use as the source. It needs
                to either be at least 1024 characters long, or contain at least
                one newline.
-------------------------------------------------------------------------------
                                                       *love-love.thread-types*
The types of |love.thread|:

    |Channel|                             |love-Channel|
    |Thread|                              |love-Thread|

-------------------------------------------------------------------------------
                                                                 *love-Channel*
|Channel|

An object which can be used to send and receive data between different threads.

                                                    *love-Channel-constructors*
    constructors:

        None

                                                      *love-Channel-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                        *love-Channel-subtypes*
    subtypes:

        None

                                                       *love-Channel-functions*
    functions:

        |clear|                           |love-Channel:clear|
        |demand|                          |love-Channel:demand|
        |getCount|                        |love-Channel:getCount|
        |hasRead|                         |love-Channel:hasRead|
        |peek|                            |love-Channel:peek|
        |performAtomic|                   |love-Channel:performAtomic|
        |pop|                             |love-Channel:pop|
        |push|                            |love-Channel:push|
        |supply|                          |love-Channel:supply|

-------------------------------------------------------------------------------
                                                           *love-Channel:clear*
|Channel:clear|

Clears all the messages in the Channel queue.

Synopses:

    1.  |Channel:clear|()

Variants:

    1.  |Channel:clear|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                          *love-Channel:demand*
|Channel:demand|

Retrieves the value of a Channel message and removes it from the message queue.

It waits until a message is in the queue then returns the message value.

Synopses:

    1.  `value` = |Channel:demand|()
    2.  `value` = |Channel:demand|( `timeout` )

Variants:

    1.  `value` = |Channel:demand|()

        See function description

        returns:

            `value`: <Variant>

                The contents of the message.

        arguments:

            None
    2.  `value` = |Channel:demand|( `timeout` )

        See function description

        returns:

            `value`: <Variant>

                The contents of the message or nil if the timeout expired.

        arguments:

            `timeout`: |lrv-number|

                The maximum amount of time to wait.

-------------------------------------------------------------------------------
                                                        *love-Channel:getCount*
|Channel:getCount|

Retrieves the number of messages in the thread Channel queue.

Synopses:

    1.  `count` = |Channel:getCount|()

Variants:

    1.  `count` = |Channel:getCount|()

        See function description

        returns:

            `count`: |lrv-number|

                The number of messages in the queue.

        arguments:

            None

-------------------------------------------------------------------------------
                                                         *love-Channel:hasRead*
|Channel:hasRead|

Gets whether a pushed value has been popped or otherwise removed from the
Channel.

Synopses:

    1.  `hasread` = |Channel:hasRead|( `id` )

Variants:

    1.  `hasread` = |Channel:hasRead|( `id` )

        See function description

        returns:

            `hasread`: |lrv-boolean|

                Whether the value represented by the id has been removed from
                the Channel via Channel:pop, Channel:demand, or Channel:clear.

        arguments:

            `id`: |lrv-number|

                An id value previously returned by Channel:push.

-------------------------------------------------------------------------------
                                                            *love-Channel:peek*
|Channel:peek|

Retrieves the value of a Channel message, but leaves it in the queue.

It returns nil if there's no message in the queue.

Synopses:

    1.  `value` = |Channel:peek|()

Variants:

    1.  `value` = |Channel:peek|()

        See function description

        returns:

            `value`: <Variant>

                The contents of the message.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-Channel:performAtomic*
|Channel:performAtomic|

Executes the specified function atomically with respect to this Channel.

Calling multiple methods in a row on the same Channel is often useful. However
if multiple Threads are calling this Channel's methods at the same time, the
different calls on each Thread might end up interleaved (e.g. one or more of
the second thread's calls may happen in between the first thread's calls.)

This method avoids that issue by making sure the Thread calling the method has
exclusive access to the Channel until the specified function has returned.

Synopses:

    1.  `ret1`, `...` = |Channel:performAtomic|( `func`, `arg1`, `...`
        )

Variants:

    1.  `ret1`, `...` = |Channel:performAtomic|( `func`, `arg1`, `...`
        )

        See function description

        returns:

            `ret1`: <any>

                The first return value of the given function (if any.)

            `...`: <any>

                Any other return values.

        arguments:

            `func`: |lrv-function|

                The function to call, the form of function(channel, arg1, arg2,
                ...) end. The Channel is passed as the first argument to the
                function when it is called.

            `arg1`: <any>

                Additional arguments that the given function will receive when
                it is called.

            `...`: <any>

                Additional arguments that the given function will receive when
                it is called.

-------------------------------------------------------------------------------
                                                             *love-Channel:pop*
|Channel:pop|

Retrieves the value of a Channel message and removes it from the message queue.

It returns nil if there are no messages in the queue.

Synopses:

    1.  `value` = |Channel:pop|()

Variants:

    1.  `value` = |Channel:pop|()

        See function description

        returns:

            `value`: <Variant>

                The contents of the message.

        arguments:

            None

-------------------------------------------------------------------------------
                                                            *love-Channel:push*
|Channel:push|

Send a message to the thread Channel.

See Variant for the list of supported types.

Synopses:

    1.  `id` = |Channel:push|( `value` )

Variants:

    1.  `id` = |Channel:push|( `value` )

        See function description

        returns:

            `id`: |lrv-number|

                Identifier which can be supplied to Channel:hasRead

        arguments:

            `value`: <Variant>

                The contents of the message.

-------------------------------------------------------------------------------
                                                          *love-Channel:supply*
|Channel:supply|

Send a message to the thread Channel and wait for a thread to accept it.

See Variant for the list of supported types.

Synopses:

    1.  `success` = |Channel:supply|( `value` )
    2.  `success` = |Channel:supply|( `value`, `timeout` )

Variants:

    1.  `success` = |Channel:supply|( `value` )

        See function description

        returns:

            `success`: |lrv-boolean|

                Whether the message was successfully supplied (always true).

        arguments:

            `value`: <Variant>

                The contents of the message.
    2.  `success` = |Channel:supply|( `value`, `timeout` )

        See function description

        returns:

            `success`: |lrv-boolean|

                Whether the message was successfully supplied before the
                timeout expired.

        arguments:

            `value`: <Variant>

                The contents of the message.

            `timeout`: |lrv-number|

                The maximum amount of time to wait.

-------------------------------------------------------------------------------
                                                                  *love-Thread*
|Thread|

A Thread is a chunk of code that can run in parallel with other threads. Data
can be sent between different threads with Channel objects.

                                                     *love-Thread-constructors*
    constructors:

        None

                                                       *love-Thread-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                         *love-Thread-subtypes*
    subtypes:

        None

                                                        *love-Thread-functions*
    functions:

        |getError|                        |love-Thread:getError|
        |isRunning|                       |love-Thread:isRunning|
        |start|                           |love-Thread:start|
        |wait|                            |love-Thread:wait|

-------------------------------------------------------------------------------
                                                         *love-Thread:getError*
|Thread:getError|

Retrieves the error string from the thread if it produced an error.

Synopses:

    1.  `err` = |Thread:getError|()

Variants:

    1.  `err` = |Thread:getError|()

        See function description

        returns:

            `err`: |lrv-string|

                The error message, or nil if the Thread has not caused an
                error.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-Thread:isRunning*
|Thread:isRunning|

Returns whether the thread is currently running.

Threads which are not running can be (re)started with Thread:start.

Synopses:

    1.  `value` = |Thread:isRunning|()

Variants:

    1.  `value` = |Thread:isRunning|()

        See function description

        returns:

            `value`: |lrv-boolean|

                True if the thread is running, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                            *love-Thread:start*
|Thread:start|

Starts the thread.

Beginning with version 0.9.0, threads can be restarted after they have
completed their execution.

Synopses:

    1.  |Thread:start|()
    2.  |Thread:start|( `arg1`, `arg2`, `...` )

Variants:

    1.  |Thread:start|()

        See function description

        returns:

            None

        arguments:

            None
    2.  |Thread:start|( `arg1`, `arg2`, `...` )

        Arguments passed to Thread:start are accessible in the thread's main file via '''...''' (the vararg expression.)

        returns:

            None

        arguments:

            `arg1`: <Variant>

                A string, number, boolean, LÖVE object, or simple table.

            `arg2`: <Variant>

                A string, number, boolean, LÖVE object, or simple table.

            `...`: <Variant>

                You can continue passing values to the thread.

-------------------------------------------------------------------------------
                                                             *love-Thread:wait*
|Thread:wait|

Wait for a thread to finish.

This call will block until the thread finishes.

Synopses:

    1.  |Thread:wait|()

Variants:

    1.  |Thread:wait|()

        See function description

        returns:

            None

        arguments:

            None

===============================================================================
                                                              *love-love.timer*
|love.timer|

Provides an interface to the user's clock.

    |callbacks|                           |love-love.timer-callbacks|
    |enums|                               |love-love.timer-enums|
    |functions|                           |love-love.timer-functions|
    |types|                               |love-love.timer-types|

-------------------------------------------------------------------------------
                                                    *love-love.timer-callbacks*
The callbacks of |love.timer|:

    None

-------------------------------------------------------------------------------
                                                        *love-love.timer-enums*
The enums of |love.timer|:

    None

-------------------------------------------------------------------------------
                                                    *love-love.timer-functions*
The functions of |love.timer|:

    |getAverageDelta|                     |love-love.timer.getAverageDelta|
    |getDelta|                            |love-love.timer.getDelta|
    |getFPS|                              |love-love.timer.getFPS|
    |getTime|                             |love-love.timer.getTime|
    |sleep|                               |love-love.timer.sleep|
    |step|                                |love-love.timer.step|

-------------------------------------------------------------------------------
                                              *love-love.timer.getAverageDelta*
|love.timer.getAverageDelta|

Returns the average delta time (seconds per frame) over the last second.

Synopses:

    1.  `delta` = |love.timer.getAverageDelta|()

Variants:

    1.  `delta` = |love.timer.getAverageDelta|()

        See function description

        returns:

            `delta`: |lrv-number|

                The average delta time over the last second.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-love.timer.getDelta*
|love.timer.getDelta|

Returns the time between the last two frames.

Synopses:

    1.  `dt` = |love.timer.getDelta|()

Variants:

    1.  `dt` = |love.timer.getDelta|()

        See function description

        returns:

            `dt`: |lrv-number|

                The time passed (in seconds).

        arguments:

            None

-------------------------------------------------------------------------------
                                                       *love-love.timer.getFPS*
|love.timer.getFPS|

Returns the current frames per second.

Synopses:

    1.  `fps` = |love.timer.getFPS|()

Variants:

    1.  `fps` = |love.timer.getFPS|()

        See function description

        returns:

            `fps`: |lrv-number|

                The current FPS.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-love.timer.getTime*
|love.timer.getTime|

Returns the value of a timer with an unspecified starting time.

This function should only be used to calculate differences between points in
time, as the starting time of the timer is unknown.

Synopses:

    1.  `time` = |love.timer.getTime|()

Variants:

    1.  `time` = |love.timer.getTime|()

        See function description

        returns:

            `time`: |lrv-number|

                The time in seconds. Given as a decimal, accurate to the
                microsecond.

        arguments:

            None

-------------------------------------------------------------------------------
                                                        *love-love.timer.sleep*
|love.timer.sleep|

Pauses the current thread for the specified amount of time.

Synopses:

    1.  |love.timer.sleep|( `s` )

Variants:

    1.  |love.timer.sleep|( `s` )

        See function description

        returns:

            None

        arguments:

            `s`: |lrv-number|

                Seconds to sleep for.

-------------------------------------------------------------------------------
                                                         *love-love.timer.step*
|love.timer.step|

Measures the time between two frames.

Calling this changes the return value of love.timer.getDelta.

Synopses:

    1.  `dt` = |love.timer.step|()

Variants:

    1.  `dt` = |love.timer.step|()

        See function description

        returns:

            `dt`: |lrv-number|

                The time passed (in seconds).

        arguments:

            None
-------------------------------------------------------------------------------
                                                        *love-love.timer-types*
The types of |love.timer|:

    None

===============================================================================
                                                              *love-love.touch*
|love.touch|

Provides an interface to touch-screen presses.

    |callbacks|                           |love-love.touch-callbacks|
    |enums|                               |love-love.touch-enums|
    |functions|                           |love-love.touch-functions|
    |types|                               |love-love.touch-types|

-------------------------------------------------------------------------------
                                                    *love-love.touch-callbacks*
The callbacks of |love.touch|:

    None

-------------------------------------------------------------------------------
                                                        *love-love.touch-enums*
The enums of |love.touch|:

    None

-------------------------------------------------------------------------------
                                                    *love-love.touch-functions*
The functions of |love.touch|:

    |getPosition|                         |love-love.touch.getPosition|
    |getPressure|                         |love-love.touch.getPressure|
    |getTouches|                          |love-love.touch.getTouches|

-------------------------------------------------------------------------------
                                                  *love-love.touch.getPosition*
|love.touch.getPosition|

Gets the current position of the specified touch-press, in pixels.

Synopses:

    1.  `x`, `y` = |love.touch.getPosition|( `id` )

Variants:

    1.  `x`, `y` = |love.touch.getPosition|( `id` )

        The unofficial Android and iOS ports of LÖVE 0.9.2 reported touch-press positions as normalized values in the range of 1, whereas this API reports positions in pixels.

        returns:

            `x`: |lrv-number|

                The position along the x-axis of the touch-press inside the
                window, in pixels.

            `y`: |lrv-number|

                The position along the y-axis of the touch-press inside the
                window, in pixels.

        arguments:

            `id`: |lrv-lightuserdata|

                The identifier of the touch-press. Use love.touch.getTouches,
                love.touchpressed, or love.touchmoved to obtain touch id
                values.

-------------------------------------------------------------------------------
                                                  *love-love.touch.getPressure*
|love.touch.getPressure|

Gets the current pressure of the specified touch-press.

Synopses:

    1.  `pressure` = |love.touch.getPressure|( `id` )

Variants:

    1.  `pressure` = |love.touch.getPressure|( `id` )

        See function description

        returns:

            `pressure`: |lrv-number|

                The pressure of the touch-press. Most touch screens aren't
                pressure sensitive, in which case the pressure will be 1.

        arguments:

            `id`: |lrv-lightuserdata|

                The identifier of the touch-press. Use love.touch.getTouches,
                love.touchpressed, or love.touchmoved to obtain touch id
                values.

-------------------------------------------------------------------------------
                                                   *love-love.touch.getTouches*
|love.touch.getTouches|

Gets a list of all active touch-presses.

Synopses:

    1.  `touches` = |love.touch.getTouches|()

Variants:

    1.  `touches` = |love.touch.getTouches|()

        The id values are the same as those used as arguments to love.touchpressed, love.touchmoved, and love.touchreleased.

The id value of a specific touch-press is only guaranteed to be unique for the duration of that touch-press. As soon as love.touchreleased is called using that id, it may be reused for a new touch-press via love.touchpressed.

        returns:

            `touches`: |lrv-table|

                A list of active touch-press id values, which can be used with
                love.touch.getPosition.

        arguments:

            None
-------------------------------------------------------------------------------
                                                        *love-love.touch-types*
The types of |love.touch|:

    None

===============================================================================
                                                              *love-love.video*
|love.video|

This module is responsible for decoding, controlling, and streaming video
files.

It can't draw the videos, see love.graphics.newVideo and Video objects for
that.

    |callbacks|                           |love-love.video-callbacks|
    |enums|                               |love-love.video-enums|
    |functions|                           |love-love.video-functions|
    |types|                               |love-love.video-types|

-------------------------------------------------------------------------------
                                                    *love-love.video-callbacks*
The callbacks of |love.video|:

    None

-------------------------------------------------------------------------------
                                                        *love-love.video-enums*
The enums of |love.video|:

    None

-------------------------------------------------------------------------------
                                                    *love-love.video-functions*
The functions of |love.video|:

    |newVideoStream|                      |love-love.video.newVideoStream|

-------------------------------------------------------------------------------
                                               *love-love.video.newVideoStream*
|love.video.newVideoStream|

Creates a new VideoStream. Currently only Ogg Theora video files are supported.
VideoStreams can't draw videos, see love.graphics.newVideo for that.

Synopses:

    1.  `videostream` = |love.video.newVideoStream|( `filename` )
    2.  `videostream` = |love.video.newVideoStream|( `file` )

Variants:

    1.  `videostream` = |love.video.newVideoStream|( `filename` )

        See function description

        returns:

            `videostream`: |love-VideoStream|

                A new VideoStream.

        arguments:

            `filename`: |lrv-string|

                The file path to the Ogg Theora video file.
    2.  `videostream` = |love.video.newVideoStream|( `file` )

        See function description

        returns:

            `videostream`: |love-VideoStream|

                A new VideoStream.

        arguments:

            `file`: |love-File|

                The File object containing the Ogg Theora video.
-------------------------------------------------------------------------------
                                                        *love-love.video-types*
The types of |love.video|:

    |VideoStream|                         |love-VideoStream|

-------------------------------------------------------------------------------
                                                             *love-VideoStream*
|VideoStream|

An object which decodes, streams, and controls Videos.

                                                *love-VideoStream-constructors*
    constructors:

        None

                                                  *love-VideoStream-supertypes*
    supertypes:

        |Object|                          |love-Object|

                                                    *love-VideoStream-subtypes*
    subtypes:

        None

                                                   *love-VideoStream-functions*
    functions:

        None

===============================================================================
                                                             *love-love.window*
|love.window|

Provides an interface for modifying and retrieving information about the
program's window.

    |callbacks|                           |love-love.window-callbacks|
    |enums|                               |love-love.window-enums|
    |functions|                           |love-love.window-functions|
    |types|                               |love-love.window-types|

-------------------------------------------------------------------------------
                                                   *love-love.window-callbacks*
The callbacks of |love.window|:

    None

-------------------------------------------------------------------------------
                                                       *love-love.window-enums*
The enums of |love.window|:

    |FullscreenType|                      |love-FullscreenType|
    |MessageBoxType|                      |love-MessageBoxType|

-------------------------------------------------------------------------------
                                                          *love-FullscreenType*
|FullscreenType|

Types of fullscreen modes.

    constants:

        `desktop`: |lrv-string|

            Sometimes known as borderless fullscreen windowed mode. A
            borderless screen-sized window is created which sits on top of all
            desktop UI elements. The window is automatically resized to match
            the dimensions of the desktop, and its size cannot be changed.

        `exclusive`: |lrv-string|

            Standard exclusive-fullscreen mode. Changes the display mode
            (actual resolution) of the monitor.

        `normal`: |lrv-string|

            Standard exclusive-fullscreen mode. Changes the display mode
            (actual resolution) of the monitor.

-------------------------------------------------------------------------------
                                                          *love-MessageBoxType*
|MessageBoxType|

Types of message box dialogs. Different types may have slightly different
looks.

    constants:

        `info`: |lrv-string|

            Informational dialog.

        `warning`: |lrv-string|

            Warning dialog.

        `error`: |lrv-string|

            Error dialog.

-------------------------------------------------------------------------------
                                                   *love-love.window-functions*
The functions of |love.window|:

    |close|                               |love-love.window.close|
    |fromPixels|                          |love-love.window.fromPixels|
    |getDPIScale|                         |love-love.window.getDPIScale|
    |getDisplayName|                      |love-love.window.getDisplayName|
    |getDisplayOrientation|               |love-love.window.getDisplayOrienta-|
    |getFullscreen|                       |love-love.window.getFullscreen|
    |getFullscreenModes|                  |love-love.window.getFullscreenModes|
    |getIcon|                             |love-love.window.getIcon|
    |getMode|                             |love-love.window.getMode|
    |getPosition|                         |love-love.window.getPosition|
    |getSafeArea|                         |love-love.window.getSafeArea|
    |getTitle|                            |love-love.window.getTitle|
    |getVSync|                            |love-love.window.getVSync|
    |hasFocus|                            |love-love.window.hasFocus|
    |hasMouseFocus|                       |love-love.window.hasMouseFocus|
    |isDisplaySleepEnabled|               |love-love.window.isDisplaySleepEna-|
    |isMaximized|                         |love-love.window.isMaximized|
    |isMinimized|                         |love-love.window.isMinimized|
    |isOpen|                              |love-love.window.isOpen|
    |isVisible|                           |love-love.window.isVisible|
    |maximize|                            |love-love.window.maximize|
    |minimize|                            |love-love.window.minimize|
    |requestAttention|                    |love-love.window.requestAttention|
    |restore|                             |love-love.window.restore|
    |setDisplaySleepEnabled|              |love-love.window.setDisplaySleepEn-|
    |setFullscreen|                       |love-love.window.setFullscreen|
    |setIcon|                             |love-love.window.setIcon|
    |setMode|                             |love-love.window.setMode|
    |setPosition|                         |love-love.window.setPosition|
    |setTitle|                            |love-love.window.setTitle|
    |setVSync|                            |love-love.window.setVSync|
    |showMessageBox|                      |love-love.window.showMessageBox|
    |toPixels|                            |love-love.window.toPixels|
    |updateMode|                          |love-love.window.updateMode|

-------------------------------------------------------------------------------
                                                       *love-love.window.close*
|love.window.close|

Closes the window. It can be reopened with love.window.setMode.

Synopses:

    1.  |love.window.close|()

Variants:

    1.  |love.window.close|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                  *love-love.window.fromPixels*
|love.window.fromPixels|

Converts a number from pixels to density-independent units.

The pixel density inside the window might be greater (or smaller) than the
'size' of the window. For example on a retina screen in Mac OS X with the
highdpi window flag enabled, the window may take up the same physical size as
an 800x600 window, but the area inside the window uses 1600x1200 pixels.
love.window.fromPixels(1600) would return 800 in that case.

This function converts coordinates from pixels to the size users are expecting
them to display at onscreen. love.window.toPixels does the opposite. The
highdpi window flag must be enabled to use the full pixel density of a Retina
screen on Mac OS X and iOS. The flag currently does nothing on Windows and
Linux, and on Android it is effectively always enabled.

Most LÖVE functions return values and expect arguments in terms of pixels
rather than density-independent units.

Synopses:

    1.  `value` = |love.window.fromPixels|( `pixelvalue` )
    2.  `x`, `y` = |love.window.fromPixels|( `px`, `py` )

Variants:

    1.  `value` = |love.window.fromPixels|( `pixelvalue` )

        See function description

        returns:

            `value`: |lrv-number|

                The converted number, in density-independent units.

        arguments:

            `pixelvalue`: |lrv-number|

                A number in pixels to convert to density-independent units.
    2.  `x`, `y` = |love.window.fromPixels|( `px`, `py` )

        The units of love.graphics.getWidth, love.graphics.getHeight, love.mouse.getPosition, mouse events, love.touch.getPosition, and touch events are always in terms of pixels.

        returns:

            `x`: |lrv-number|

                The converted x-axis value of the coordinate, in
                density-independent units.

            `y`: |lrv-number|

                The converted y-axis value of the coordinate, in
                density-independent units.

        arguments:

            `px`: |lrv-number|

                The x-axis value of a coordinate in pixels.

            `py`: |lrv-number|

                The y-axis value of a coordinate in pixels.

-------------------------------------------------------------------------------
                                                 *love-love.window.getDPIScale*
|love.window.getDPIScale|

Gets the DPI scale factor associated with the window.

The pixel density inside the window might be greater (or smaller) than the
'size' of the window. For example on a retina screen in Mac OS X with the
highdpi window flag enabled, the window may take up the same physical size as
an 800x600 window, but the area inside the window uses 1600x1200 pixels.
love.window.getDPIScale() would return 2.0 in that case.

The love.window.fromPixels and love.window.toPixels functions can also be used
to convert between units.

The highdpi window flag must be enabled to use the full pixel density of a
Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows
and Linux, and on Android it is effectively always enabled.

Synopses:

    1.  `scale` = |love.window.getDPIScale|()

Variants:

    1.  `scale` = |love.window.getDPIScale|()

        The units of love.graphics.getWidth, love.graphics.getHeight, love.mouse.getPosition, mouse events, love.touch.getPosition, and touch events are always in terms of pixels.

        returns:

            `scale`: |lrv-number|

                The pixel scale factor associated with the window.

        arguments:

            None

-------------------------------------------------------------------------------
                                              *love-love.window.getDisplayName*
|love.window.getDisplayName|

Gets the name of a display.

Synopses:

    1.  `name` = |love.window.getDisplayName|( `displayindex` )

Variants:

    1.  `name` = |love.window.getDisplayName|( `displayindex` )

        See function description

        returns:

            `name`: |lrv-string|

                The name of the specified display.

        arguments:

            `displayindex`: |lrv-number|

                The index of the display to get the name of.

-------------------------------------------------------------------------------
                                       *love-love.window.getDisplayOrientation*
|love.window.getDisplayOrientation|

Gets current device display orientation.

Synopses:

    1.  `orientation` = |love.window.getDisplayOrientation|( `index` )

Variants:

    1.  `orientation` = |love.window.getDisplayOrientation|( `index` )

        See function description

        returns:

            `orientation`: <DisplayOrientation>

                Current device display orientation.

        arguments:

            `index`: |lrv-number|

                Display index to get its display orientation, or nil for
                default display index.

-------------------------------------------------------------------------------
                                               *love-love.window.getFullscreen*
|love.window.getFullscreen|

Gets whether the window is fullscreen.

Synopses:

    1.  `fullscreen`, `fstype` = |love.window.getFullscreen|()

Variants:

    1.  `fullscreen`, `fstype` = |love.window.getFullscreen|()

        See function description

        returns:

            `fullscreen`: |lrv-boolean|

                True if the window is fullscreen, false otherwise.

            `fstype`: |love-FullscreenType|

                The type of fullscreen mode used.

        arguments:

            None

-------------------------------------------------------------------------------
                                          *love-love.window.getFullscreenModes*
|love.window.getFullscreenModes|

Gets a list of supported fullscreen modes.

Synopses:

    1.  `modes` = |love.window.getFullscreenModes|( `display` )

Variants:

    1.  `modes` = |love.window.getFullscreenModes|( `display` )

        See function description

        returns:

            `modes`: |lrv-table|

                A table of width/height pairs. (Note that this may not be in
                order.)

        arguments:

            `display`: |lrv-number|

                The index of the display, if multiple monitors are available.

-------------------------------------------------------------------------------
                                                     *love-love.window.getIcon*
|love.window.getIcon|

Gets the window icon.

Synopses:

    1.  `imagedata` = |love.window.getIcon|()

Variants:

    1.  `imagedata` = |love.window.getIcon|()

        See function description

        returns:

            `imagedata`: |love-ImageData|

                The window icon imagedata, or nil if no icon has been set with
                love.window.setIcon.

        arguments:

            None

-------------------------------------------------------------------------------
                                                     *love-love.window.getMode*
|love.window.getMode|

Gets the display mode and properties of the window.

Synopses:

    1.  `width`, `height`, `flags` = |love.window.getMode|()

Variants:

    1.  `width`, `height`, `flags` = |love.window.getMode|()

        See function description

        returns:

            `width`: |lrv-number|

                Window width.

            `height`: |lrv-number|

                Window height.

            `flags`: |lrv-table|

                Table with the window properties:

                `fullscreen`: |lrv-boolean|

                    Fullscreen (true), or windowed (false).

                `fullscreentype`: |love-FullscreenType|

                    The type of fullscreen mode used.

                `vsync`: |lrv-boolean|

                    True if the graphics framerate is synchronized with the
                    monitor's refresh rate, false otherwise.

                `msaa`: |lrv-number|

                    The number of antialiasing samples used (0 if MSAA is
                    disabled).

                `resizable`: |lrv-boolean|

                    True if the window is resizable in windowed mode, false
                    otherwise.

                `borderless`: |lrv-boolean|

                    True if the window is borderless in windowed mode, false
                    otherwise.

                `centered`: |lrv-boolean|

                    True if the window is centered in windowed mode, false
                    otherwise.

                `display`: |lrv-number|

                    The index of the display the window is currently in, if
                    multiple monitors are available.

                `minwidth`: |lrv-number|

                    The minimum width of the window, if it's resizable.

                `minheight`: |lrv-number|

                    The minimum height of the window, if it's resizable.

                `highdpi`: |lrv-boolean|

                    True if high-dpi mode is allowed on Retina displays in OS
                    X. Does nothing on non-Retina displays.

                `refreshrate`: |lrv-number|

                    The refresh rate of the screen's current display mode, in
                    Hz. May be 0 if the value can't be determined.

                `x`: |lrv-number|

                    The x-coordinate of the window's position in its current
                    display.

                `y`: |lrv-number|

                    The y-coordinate of the window's position in its current
                    display.

                `srgb`: |lrv-boolean|

                    Removed in 0.10.0 (use love.graphics.isGammaCorrect
                    instead). True if sRGB gamma correction is applied when
                    drawing to the screen.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-love.window.getPosition*
|love.window.getPosition|

Gets the position of the window on the screen.

The window position is in the coordinate space of the display it is currently
in.

Synopses:

    1.  `x`, `y`, `display` = |love.window.getPosition|()

Variants:

    1.  `x`, `y`, `display` = |love.window.getPosition|()

        See function description

        returns:

            `x`: |lrv-number|

                The x-coordinate of the window's position.

            `y`: |lrv-number|

                The y-coordinate of the window's position.

            `display`: |lrv-number|

                The index of the display that the window is in.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-love.window.getSafeArea*
|love.window.getSafeArea|

Gets area inside the window which is known to be unobstructed by a system title
bar, the iPhone X notch, etc. Useful for making sure UI elements can be seen by
the user.

Synopses:

    1.  `x`, `y`, `w`, `h` = |love.window.getSafeArea|()

Variants:

    1.  `x`, `y`, `w`, `h` = |love.window.getSafeArea|()

        Values returned are in DPI-scaled units (the same coordinate system as most other window-related APIs), not in pixels.

        returns:

            `x`: |lrv-number|

                Starting position of safe area (x-axis).

            `y`: |lrv-number|

                Starting position of safe area (y-axis).

            `w`: |lrv-number|

                Width of safe area.

            `h`: |lrv-number|

                Height of safe area.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.window.getTitle*
|love.window.getTitle|

Gets the window title.

Synopses:

    1.  `title` = |love.window.getTitle|()

Variants:

    1.  `title` = |love.window.getTitle|()

        See function description

        returns:

            `title`: |lrv-string|

                The current window title.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.window.getVSync*
|love.window.getVSync|

Gets current vertical synchronization (vsync).

Synopses:

    1.  `vsync` = |love.window.getVSync|()

Variants:

    1.  `vsync` = |love.window.getVSync|()

        This can be less expensive alternative to love.window.getMode if you want to get current vsync status.

        returns:

            `vsync`: |lrv-number|

                Current vsync status. 1 if enabled, 0 if disabled, and -1 for
                adaptive vsync.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.window.hasFocus*
|love.window.hasFocus|

Checks if the game window has keyboard focus.

Synopses:

    1.  `focus` = |love.window.hasFocus|()

Variants:

    1.  `focus` = |love.window.hasFocus|()

        See function description

        returns:

            `focus`: |lrv-boolean|

                True if the window has the focus or false if not.

        arguments:

            None

-------------------------------------------------------------------------------
                                               *love-love.window.hasMouseFocus*
|love.window.hasMouseFocus|

Checks if the game window has mouse focus.

Synopses:

    1.  `focus` = |love.window.hasMouseFocus|()

Variants:

    1.  `focus` = |love.window.hasMouseFocus|()

        See function description

        returns:

            `focus`: |lrv-boolean|

                True if the window has mouse focus or false if not.

        arguments:

            None

-------------------------------------------------------------------------------
                                       *love-love.window.isDisplaySleepEnabled*
|love.window.isDisplaySleepEnabled|

Gets whether the display is allowed to sleep while the program is running.

Display sleep is disabled by default. Some types of input (e.g. joystick button
presses) might not prevent the display from sleeping, if display sleep is
allowed.

Synopses:

    1.  `enabled` = |love.window.isDisplaySleepEnabled|()

Variants:

    1.  `enabled` = |love.window.isDisplaySleepEnabled|()

        See function description

        returns:

            `enabled`: |lrv-boolean|

                True if system display sleep is enabled / allowed, false
                otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-love.window.isMaximized*
|love.window.isMaximized|

Gets whether the Window is currently maximized.

The window can be maximized if it is not fullscreen and is resizable, and
either the user has pressed the window's Maximize button or
love.window.maximize has been called.

Synopses:

    1.  `maximized` = |love.window.isMaximized|()

Variants:

    1.  `maximized` = |love.window.isMaximized|()

        See function description

        returns:

            `maximized`: |lrv-boolean|

                True if the window is currently maximized in windowed mode,
                false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                 *love-love.window.isMinimized*
|love.window.isMinimized|

Gets whether the Window is currently minimized.

Synopses:

    1.  `minimized` = |love.window.isMinimized|()

Variants:

    1.  `minimized` = |love.window.isMinimized|()

        See function description

        returns:

            `minimized`: |lrv-boolean|

                True if the window is currently minimized, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                      *love-love.window.isOpen*
|love.window.isOpen|

Checks if the window is open.

Synopses:

    1.  `open` = |love.window.isOpen|()

Variants:

    1.  `open` = |love.window.isOpen|()

        See function description

        returns:

            `open`: |lrv-boolean|

                True if the window is open, false otherwise.

        arguments:

            None

-------------------------------------------------------------------------------
                                                   *love-love.window.isVisible*
|love.window.isVisible|

Checks if the game window is visible.

The window is considered visible if it's not minimized and the program isn't
hidden.

Synopses:

    1.  `visible` = |love.window.isVisible|()

Variants:

    1.  `visible` = |love.window.isVisible|()

        See function description

        returns:

            `visible`: |lrv-boolean|

                True if the window is visible or false if not.

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.window.maximize*
|love.window.maximize|

Makes the window as large as possible.

This function has no effect if the window isn't resizable, since it essentially
programmatically presses the window's 'maximize' button.

Synopses:

    1.  |love.window.maximize|()

Variants:

    1.  |love.window.maximize|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                                    *love-love.window.minimize*
|love.window.minimize|

Minimizes the window to the system's task bar / dock.

Synopses:

    1.  |love.window.minimize|()

Variants:

    1.  |love.window.minimize|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                            *love-love.window.requestAttention*
|love.window.requestAttention|

Causes the window to request the attention of the user if it is not in the
foreground.

In Windows the taskbar icon will flash, and in OS X the dock icon will bounce.

Synopses:

    1.  |love.window.requestAttention|( `continuous` )

Variants:

    1.  |love.window.requestAttention|( `continuous` )

        See function description

        returns:

            None

        arguments:

            `continuous`: |lrv-boolean|

                Whether to continuously request attention until the window
                becomes active, or to do it only once.

-------------------------------------------------------------------------------
                                                     *love-love.window.restore*
|love.window.restore|

Restores the size and position of the window if it was minimized or maximized.

Synopses:

    1.  |love.window.restore|()

Variants:

    1.  |love.window.restore|()

        See function description

        returns:

            None

        arguments:

            None

-------------------------------------------------------------------------------
                                      *love-love.window.setDisplaySleepEnabled*
|love.window.setDisplaySleepEnabled|

Sets whether the display is allowed to sleep while the program is running.

Display sleep is disabled by default. Some types of input (e.g. joystick button
presses) might not prevent the display from sleeping, if display sleep is
allowed.

Synopses:

    1.  |love.window.setDisplaySleepEnabled|( `enable` )

Variants:

    1.  |love.window.setDisplaySleepEnabled|( `enable` )

        See function description

        returns:

            None

        arguments:

            `enable`: |lrv-boolean|

                True to enable system display sleep, false to disable it.

-------------------------------------------------------------------------------
                                               *love-love.window.setFullscreen*
|love.window.setFullscreen|

Enters or exits fullscreen. The display to use when entering fullscreen is
chosen based on which display the window is currently in, if multiple monitors
are connected.

Synopses:

    1.  `success` = |love.window.setFullscreen|( `fullscreen` )
    2.  `success` = |love.window.setFullscreen|( `fullscreen`, `fstype`
        )

Variants:

    1.  `success` = |love.window.setFullscreen|( `fullscreen` )

        See function description

        returns:

            `success`: |lrv-boolean|

                True if an attempt to enter fullscreen was successful, false
                otherwise.

        arguments:

            `fullscreen`: |lrv-boolean|

                Whether to enter or exit fullscreen mode.
    2.  `success` = |love.window.setFullscreen|( `fullscreen`, `fstype`
        )

        If fullscreen mode is entered and the window size doesn't match one of the monitor's display modes (in normal fullscreen mode) or the window size doesn't match the desktop size (in 'desktop' fullscreen mode), the window will be resized appropriately. The window will revert back to its original size again when fullscreen mode is exited using this function.

        returns:

            `success`: |lrv-boolean|

                True if an attempt to enter fullscreen was successful, false
                otherwise.

        arguments:

            `fullscreen`: |lrv-boolean|

                Whether to enter or exit fullscreen mode.

            `fstype`: |love-FullscreenType|

                The type of fullscreen mode to use.

-------------------------------------------------------------------------------
                                                     *love-love.window.setIcon*
|love.window.setIcon|

Sets the window icon until the game is quit. Not all operating systems support
very large icon images.

Synopses:

    1.  `success` = |love.window.setIcon|( `imagedata` )

Variants:

    1.  `success` = |love.window.setIcon|( `imagedata` )

        See function description

        returns:

            `success`: |lrv-boolean|

                Whether the icon has been set successfully.

        arguments:

            `imagedata`: |love-ImageData|

                The window icon image.

-------------------------------------------------------------------------------
                                                     *love-love.window.setMode*
|love.window.setMode|

Sets the display mode and properties of the window.

If width or height is 0, setMode will use the width and height of the desktop.

Changing the display mode may have side effects: for example, canvases will be
cleared and values sent to shaders with canvases beforehand or re-draw to them
afterward if you need to.

Synopses:

    1.  `success` = |love.window.setMode|( `width`, `height`, `flags` )

Variants:

    1.  `success` = |love.window.setMode|( `width`, `height`, `flags` )

        * If fullscreen is enabled and the width or height is not supported (see resize event will be triggered.

* If the fullscreen type is 'desktop', then the window will be automatically resized to the desktop resolution.

* If the width and height is bigger than or equal to the desktop dimensions (this includes setting both to 0) and fullscreen is set to false, it will appear 'visually' fullscreen, but it's not true fullscreen and conf.lua (i.e. t.window = false) and use this function to manually create the window, then you must not call any other love.graphics.* function before this one. Doing so will result in undefined behavior and/or crashes because OpenGL cannot function properly without a window.

* Transparent backgrounds are currently not supported.

        returns:

            `success`: |lrv-boolean|

                True if successful, false otherwise.

        arguments:

            `width`: |lrv-number|

                Display width.

            `height`: |lrv-number|

                Display height.

            `flags`: |lrv-table|

                The flags table with the options:

                `fullscreen`: |lrv-boolean|

                    Fullscreen (true), or windowed (false).

                `fullscreentype`: |love-FullscreenType|

                    The type of fullscreen to use. This defaults to 'normal' in
                    0.9.0 through 0.9.2 and to 'desktop' in 0.10.0 and older.

                `vsync`: |lrv-boolean|

                    True if LÖVE should wait for vsync, false otherwise.

                `msaa`: |lrv-number|

                    The number of antialiasing samples.

                `stencil`: |lrv-boolean|

                    Whether a stencil buffer should be allocated. If true, the
                    stencil buffer will have 8 bits.

                `depth`: |lrv-number|

                    The number of bits in the depth buffer.

                `resizable`: |lrv-boolean|

                    True if the window should be resizable in windowed mode,
                    false otherwise.

                `borderless`: |lrv-boolean|

                    True if the window should be borderless in windowed mode,
                    false otherwise.

                `centered`: |lrv-boolean|

                    True if the window should be centered in windowed mode,
                    false otherwise.

                `display`: |lrv-number|

                    The index of the display to show the window in, if multiple
                    monitors are available.

                `minwidth`: |lrv-number|

                    The minimum width of the window, if it's resizable. Cannot
                    be less than 1.

                `minheight`: |lrv-number|

                    The minimum height of the window, if it's resizable. Cannot
                    be less than 1.

                `highdpi`: |lrv-boolean|

                    True if high-dpi mode should be used on Retina displays in
                    macOS and iOS. Does nothing on non-Retina displays.

                `x`: |lrv-number|

                    The x-coordinate of the window's position in the specified
                    display.

                `y`: |lrv-number|

                    The y-coordinate of the window's position in the specified
                    display.

                `usedpiscale`: |lrv-boolean|

                    Disables automatic DPI scaling when false.

                `srgb`: |lrv-boolean|

                    Removed in 0.10.0 (set t.gammacorrect in conf.lua instead).
                    True if sRGB gamma correction should be applied when
                    drawing to the screen.

-------------------------------------------------------------------------------
                                                 *love-love.window.setPosition*
|love.window.setPosition|

Sets the position of the window on the screen.

The window position is in the coordinate space of the specified display.

Synopses:

    1.  |love.window.setPosition|( `x`, `y`, `display` )

Variants:

    1.  |love.window.setPosition|( `x`, `y`, `display` )

        See function description

        returns:

            None

        arguments:

            `x`: |lrv-number|

                The x-coordinate of the window's position.

            `y`: |lrv-number|

                The y-coordinate of the window's position.

            `display`: |lrv-number|

                The index of the display that the new window position is
                relative to.

-------------------------------------------------------------------------------
                                                    *love-love.window.setTitle*
|love.window.setTitle|

Sets the window title.

Synopses:

    1.  |love.window.setTitle|( `title` )

Variants:

    1.  |love.window.setTitle|( `title` )

        See function description

        returns:

            None

        arguments:

            `title`: |lrv-string|

                The new window title.

-------------------------------------------------------------------------------
                                                    *love-love.window.setVSync*
|love.window.setVSync|

Sets vertical synchronization mode.

Synopses:

    1.  |love.window.setVSync|( `vsync` )

Variants:

    1.  |love.window.setVSync|( `vsync` )

        * Not all graphics drivers support adaptive vsync (-1 value). In that case, it will be automatically set to 1.

* It is recommended to keep vsync activated if you don't know about the possible implications of turning it off.

* This function doesn't recreate the window, unlike love.window.setMode and love.window.updateMode.

        returns:

            None

        arguments:

            `vsync`: |lrv-number|

                VSync number: 1 to enable, 0 to disable, and -1 for adaptive
                vsync.

-------------------------------------------------------------------------------
                                              *love-love.window.showMessageBox*
|love.window.showMessageBox|

Displays a message box dialog above the love window. The message box contains a
title, optional text, and buttons.

Synopses:

    1.  `success` = |love.window.showMessageBox|( `title`, `message`,
        `type`, `attachtowindow` )
    2.  `pressedbutton` = |love.window.showMessageBox|( `title`,
        `message`, `buttonlist`, `type`, `attachtowindow` )

Variants:

    1.  `success` = |love.window.showMessageBox|( `title`, `message`,
        `type`, `attachtowindow` )

        Displays a simple message box with a single 'OK' button.

        returns:

            `success`: |lrv-boolean|

                Whether the message box was successfully displayed.

        arguments:

            `title`: |lrv-string|

                The title of the message box.

            `message`: |lrv-string|

                The text inside the message box.

            `type`: |love-MessageBoxType|

                The type of the message box.

            `attachtowindow`: |lrv-boolean|

                Whether the message box should be attached to the love window
                or free-floating.
    2.  `pressedbutton` = |love.window.showMessageBox|( `title`,
        `message`, `buttonlist`, `type`, `attachtowindow` )

        Displays a message box with a customized list of buttons.

        returns:

            `pressedbutton`: |lrv-number|

                The index of the button pressed by the user. May be 0 if the
                message box dialog was closed without pressing a button.

        arguments:

            `title`: |lrv-string|

                The title of the message box.

            `message`: |lrv-string|

                The text inside the message box.

            `buttonlist`: |lrv-table|

                A table containing a list of button names to show. The table
                can also contain the fields enterbutton and escapebutton, which
                should be the index of the default button to use when the user
                presses 'enter' or 'escape', respectively.

            `type`: |love-MessageBoxType|

                The type of the message box.

            `attachtowindow`: |lrv-boolean|

                Whether the message box should be attached to the love window
                or free-floating.

-------------------------------------------------------------------------------
                                                    *love-love.window.toPixels*
|love.window.toPixels|

Converts a number from density-independent units to pixels.

The pixel density inside the window might be greater (or smaller) than the
'size' of the window. For example on a retina screen in Mac OS X with the
highdpi window flag enabled, the window may take up the same physical size as
an 800x600 window, but the area inside the window uses 1600x1200 pixels.
love.window.toPixels(800) would return 1600 in that case.

This is used to convert coordinates from the size users are expecting them to
display at onscreen to pixels. love.window.fromPixels does the opposite. The
highdpi window flag must be enabled to use the full pixel density of a Retina
screen on Mac OS X and iOS. The flag currently does nothing on Windows and
Linux, and on Android it is effectively always enabled.

Most LÖVE functions return values and expect arguments in terms of pixels
rather than density-independent units.

Synopses:

    1.  `pixelvalue` = |love.window.toPixels|( `value` )
    2.  `px`, `py` = |love.window.toPixels|( `x`, `y` )

Variants:

    1.  `pixelvalue` = |love.window.toPixels|( `value` )

        See function description

        returns:

            `pixelvalue`: |lrv-number|

                The converted number, in pixels.

        arguments:

            `value`: |lrv-number|

                A number in density-independent units to convert to pixels.
    2.  `px`, `py` = |love.window.toPixels|( `x`, `y` )

        The units of love.graphics.getWidth, love.graphics.getHeight, love.mouse.getPosition, mouse events, love.touch.getPosition, and touch events are always in terms of pixels.

        returns:

            `px`: |lrv-number|

                The converted x-axis value of the coordinate, in pixels.

            `py`: |lrv-number|

                The converted y-axis value of the coordinate, in pixels.

        arguments:

            `x`: |lrv-number|

                The x-axis value of a coordinate in density-independent units
                to convert to pixels.

            `y`: |lrv-number|

                The y-axis value of a coordinate in density-independent units
                to convert to pixels.

-------------------------------------------------------------------------------
                                                  *love-love.window.updateMode*
|love.window.updateMode|

Sets the display mode and properties of the window, without modifying
unspecified properties.

If width or height is 0, updateMode will use the width and height of the
desktop.

Changing the display mode may have side effects: for example, canvases will be
cleared. Make sure to save the contents of canvases beforehand or re-draw to
them afterward if you need to.

Synopses:

    1.  `success` = |love.window.updateMode|( `width`, `height`,
        `settings` )

Variants:

    1.  `success` = |love.window.updateMode|( `width`, `height`,
        `settings` )

        If fullscreen is enabled and the width or height is not supported (see resize event will be triggered.

If the fullscreen type is 'desktop', then the window will be automatically resized to the desktop resolution.

Transparent backgrounds are currently not supported.

        returns:

            `success`: |lrv-boolean|

                True if successful, false otherwise.

        arguments:

            `width`: |lrv-number|

                Window width.

            `height`: |lrv-number|

                Window height.

            `settings`: |lrv-table|

                The settings table with the following optional fields. Any
                field not filled in will use the current value that would be
                returned by love.window.getMode.

                `fullscreen`: |lrv-boolean|

                    Fullscreen (true), or windowed (false).

                `fullscreentype`: |love-FullscreenType|

                    The type of fullscreen to use.

                `vsync`: |lrv-boolean|

                    True if LÖVE should wait for vsync, false otherwise.

                `msaa`: |lrv-number|

                    The number of antialiasing samples.

                `resizable`: |lrv-boolean|

                    True if the window should be resizable in windowed mode,
                    false otherwise.

                `borderless`: |lrv-boolean|

                    True if the window should be borderless in windowed mode,
                    false otherwise.

                `centered`: |lrv-boolean|

                    True if the window should be centered in windowed mode,
                    false otherwise.

                `display`: |lrv-number|

                    The index of the display to show the window in, if multiple
                    monitors are available.

                `minwidth`: |lrv-number|

                    The minimum width of the window, if it's resizable. Cannot
                    be less than 1.

                `minheight`: |lrv-number|

                    The minimum height of the window, if it's resizable. Cannot
                    be less than 1.

                `highdpi`: |lrv-boolean|

                    True if high-dpi mode should be used on Retina displays in
                    macOS and iOS. Does nothing on non-Retina displays.

                `x`: |lrv-number|

                    The x-coordinate of the window's position in the specified
                    display.

                `y`: |lrv-number|

                    The y-coordinate of the window's position in the specified
                    display.
-------------------------------------------------------------------------------
                                                       *love-love.window-types*
The types of |love.window|:

    None

 vim:nospell:ft=help:
